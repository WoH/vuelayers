{"version":3,"file":"index.js","sources":["src/component/overlay/overlay.vue?rollup-plugin-vue=script.js","src/component/overlay/overlay.vue","src/component/overlay/index.js"],"sourcesContent":["//\n//\n//\n//\n//\n//\n\nimport Overlay from 'ol/Overlay'\nimport { merge as mergeObs } from 'rxjs/observable'\nimport uuid from 'uuid/v4'\nimport { olCmp, projTransforms, useMapCmp } from '../../mixin'\nimport { initializeOverlay, OVERLAY_POSITIONING, setOverlayId } from '../../ol-ext'\nimport { observableFromOlChangeEvent } from '../../rx-ext'\nimport { hasOverlay } from '../../util/assert'\nimport { isEqual, identity } from '../../util/minilo'\n\nconst props = {\n  id: {\n    type: [String, Number],\n    default: () => uuid(),\n  },\n  offset: {\n    type: Array,\n    default: () => [0, 0],\n    validator: value => value.length === 2,\n  },\n  /**\n   * Coordinates in the map view projection.\n   * @type {number[]}\n   */\n  position: {\n    type: Array,\n    validator: value => value.length === 2,\n    required: true,\n  },\n  positioning: {\n    type: String,\n    default: OVERLAY_POSITIONING.TOP_LEFT,\n    validator: value => Object.values(OVERLAY_POSITIONING).includes(value),\n  },\n  stopEvent: {\n    type: Boolean,\n    default: true,\n  },\n  insertFirst: {\n    type: Boolean,\n    default: true,\n  },\n  autoPan: {\n    type: Boolean,\n    default: false,\n  },\n  autoPanMargin: {\n    type: Number,\n    default: 20,\n  },\n  autoPanAnimation: Object,\n  className: String,\n}\n\nconst computed = {\n  positionViewProj () {\n    if (this.rev && this.$overlay) {\n      return this.$overlay.getPosition()\n    }\n  },\n  positionDataProj () {\n    if (this.rev && this.$overlay) {\n      return this.pointToDataProj(this.$overlay.getPosition())\n    }\n  },\n  classes () {\n    return [\n      this.$options.name,\n      this.visible ? 'visible' : undefined,\n    ].filter(identity)\n  },\n}\n\nconst methods = {\n  /**\n   * @return {module:ol/Overlay~Overlay}\n   * @protected\n   */\n  createOlObject () {\n    const overlay = new Overlay({\n      id: this.id,\n      offset: this.offset,\n      position: this.pointToViewProj(this.position),\n      positioning: this.positioning,\n      stopEvent: this.stopEvent,\n      insertFirst: this.insertFirst,\n      autoPan: this.autoPan,\n      autoPanMargin: this.autoPanMargin,\n      autoPanAnimation: this.autoPanAnimation,\n      className: this.className,\n    })\n\n    initializeOverlay(overlay, this.id)\n\n    return overlay\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  mount () {\n    hasOverlay(this)\n\n    this.$overlay.setElement(this.$el)\n    this.$overlaysContainer && this.$overlaysContainer.addOverlay(this.$overlay)\n    // reset position to trigger panIntoView\n    this.$nextTick(() => {\n      this.$overlay.setPosition(this.positionViewProj.slice())\n      this.visible = true\n    })\n    this.subscribeAll()\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  unmount () {\n    hasOverlay(this)\n\n    this.unsubscribeAll()\n    this.$overlay.setElement(undefined)\n    this.$overlaysContainer && this.$overlaysContainer.removeOverlay(this.$overlay)\n\n    this.visible = false\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  subscribeAll () {\n    this::subscribeToOverlayChanges()\n  },\n}\n\nconst watch = {\n  id (value) {\n    if (!this.$overlay) return\n\n    setOverlayId(this.$overlay, value)\n  },\n  offset (value) {\n    if (this.$overlay && !isEqual(value, this.$overlay.getOffset())) {\n      this.$overlay.setOffset(value)\n    }\n  },\n  position (value) {\n    value = this.pointToViewProj(value)\n    if (this.$overlay && !isEqual(value, this.$overlay.getPosition())) {\n      this.$overlay.setPosition(value)\n    }\n  },\n  positioning (value) {\n    if (this.$overlay && value !== this.$overlay.getPositioning()) {\n      this.$overlay.setPositioning(value)\n    }\n  },\n  resolvedDataProjection () {\n    if (this.$overlay) {\n      this.$overlay.setPosition(this.pointToViewProj(this.position))\n    }\n  },\n}\n\nexport default {\n  name: 'vl-overlay',\n  mixins: [olCmp, useMapCmp, projTransforms],\n  props,\n  computed,\n  methods,\n  watch,\n  created () {\n    Object.defineProperties(this, {\n      /**\n       * @type {module:ol/Overlay~Overlay|undefined}\n       */\n      $overlay: {\n        enumerable: true,\n        get: () => this.$olObject,\n      },\n      $map: {\n        enumerable: true,\n        get: () => this.$services && this.$services.map,\n      },\n      $view: {\n        enumerable: true,\n        get: () => this.$services && this.$services.view,\n      },\n      $overlaysContainer: {\n        enumerable: true,\n        get: () => this.$services && this.$services.overlaysContainer,\n      },\n    })\n  },\n  data () {\n    return {\n      visible: false,\n    }\n  },\n}\n\n/**\n * @return {void}\n * @private\n */\nfunction subscribeToOverlayChanges () {\n  hasOverlay(this)\n\n  const changes = mergeObs(\n    observableFromOlChangeEvent(this.$overlay, 'position', true, undefined, () => this.pointToDataProj(this.$overlay.getPosition())),\n    observableFromOlChangeEvent(this.$overlay, [\n      'offset',\n      'positioning',\n    ], true),\n  )\n\n  this.subscribeTo(changes, ({ prop, value }) => {\n    ++this.rev\n    this.$emit(`update:${prop}`, value)\n  })\n}\n","<template>\n  <div :id=\"[$options.name, id].join('-')\" :class=\"classes\">\n    <slot :id=\"id\" :position=\"position\" :offset=\"offset\" :positioning=\"positioning\"/>\n  </div>\n</template>\n\n<script>\n  import Overlay from 'ol/Overlay'\n  import { merge as mergeObs } from 'rxjs/observable'\n  import uuid from 'uuid/v4'\n  import { olCmp, projTransforms, useMapCmp } from '../../mixin'\n  import { initializeOverlay, OVERLAY_POSITIONING, setOverlayId } from '../../ol-ext'\n  import { observableFromOlChangeEvent } from '../../rx-ext'\n  import { hasOverlay } from '../../util/assert'\n  import { isEqual, identity } from '../../util/minilo'\n\n  const props = {\n    id: {\n      type: [String, Number],\n      default: () => uuid(),\n    },\n    offset: {\n      type: Array,\n      default: () => [0, 0],\n      validator: value => value.length === 2,\n    },\n    /**\n     * Coordinates in the map view projection.\n     * @type {number[]}\n     */\n    position: {\n      type: Array,\n      validator: value => value.length === 2,\n      required: true,\n    },\n    positioning: {\n      type: String,\n      default: OVERLAY_POSITIONING.TOP_LEFT,\n      validator: value => Object.values(OVERLAY_POSITIONING).includes(value),\n    },\n    stopEvent: {\n      type: Boolean,\n      default: true,\n    },\n    insertFirst: {\n      type: Boolean,\n      default: true,\n    },\n    autoPan: {\n      type: Boolean,\n      default: false,\n    },\n    autoPanMargin: {\n      type: Number,\n      default: 20,\n    },\n    autoPanAnimation: Object,\n    className: String,\n  }\n\n  const computed = {\n    positionViewProj () {\n      if (this.rev && this.$overlay) {\n        return this.$overlay.getPosition()\n      }\n    },\n    positionDataProj () {\n      if (this.rev && this.$overlay) {\n        return this.pointToDataProj(this.$overlay.getPosition())\n      }\n    },\n    classes () {\n      return [\n        this.$options.name,\n        this.visible ? 'visible' : undefined,\n      ].filter(identity)\n    },\n  }\n\n  const methods = {\n    /**\n     * @return {module:ol/Overlay~Overlay}\n     * @protected\n     */\n    createOlObject () {\n      const overlay = new Overlay({\n        id: this.id,\n        offset: this.offset,\n        position: this.pointToViewProj(this.position),\n        positioning: this.positioning,\n        stopEvent: this.stopEvent,\n        insertFirst: this.insertFirst,\n        autoPan: this.autoPan,\n        autoPanMargin: this.autoPanMargin,\n        autoPanAnimation: this.autoPanAnimation,\n        className: this.className,\n      })\n\n      initializeOverlay(overlay, this.id)\n\n      return overlay\n    },\n    /**\n     * @return {void}\n     * @protected\n     */\n    mount () {\n      hasOverlay(this)\n\n      this.$overlay.setElement(this.$el)\n      this.$overlaysContainer && this.$overlaysContainer.addOverlay(this.$overlay)\n      // reset position to trigger panIntoView\n      this.$nextTick(() => {\n        this.$overlay.setPosition(this.positionViewProj.slice())\n        this.visible = true\n      })\n      this.subscribeAll()\n    },\n    /**\n     * @return {void}\n     * @protected\n     */\n    unmount () {\n      hasOverlay(this)\n\n      this.unsubscribeAll()\n      this.$overlay.setElement(undefined)\n      this.$overlaysContainer && this.$overlaysContainer.removeOverlay(this.$overlay)\n\n      this.visible = false\n    },\n    /**\n     * @return {void}\n     * @protected\n     */\n    subscribeAll () {\n      this::subscribeToOverlayChanges()\n    },\n  }\n\n  const watch = {\n    id (value) {\n      if (!this.$overlay) return\n\n      setOverlayId(this.$overlay, value)\n    },\n    offset (value) {\n      if (this.$overlay && !isEqual(value, this.$overlay.getOffset())) {\n        this.$overlay.setOffset(value)\n      }\n    },\n    position (value) {\n      value = this.pointToViewProj(value)\n      if (this.$overlay && !isEqual(value, this.$overlay.getPosition())) {\n        this.$overlay.setPosition(value)\n      }\n    },\n    positioning (value) {\n      if (this.$overlay && value !== this.$overlay.getPositioning()) {\n        this.$overlay.setPositioning(value)\n      }\n    },\n    resolvedDataProjection () {\n      if (this.$overlay) {\n        this.$overlay.setPosition(this.pointToViewProj(this.position))\n      }\n    },\n  }\n\n  export default {\n    name: 'vl-overlay',\n    mixins: [olCmp, useMapCmp, projTransforms],\n    props,\n    computed,\n    methods,\n    watch,\n    created () {\n      Object.defineProperties(this, {\n        /**\n         * @type {module:ol/Overlay~Overlay|undefined}\n         */\n        $overlay: {\n          enumerable: true,\n          get: () => this.$olObject,\n        },\n        $map: {\n          enumerable: true,\n          get: () => this.$services && this.$services.map,\n        },\n        $view: {\n          enumerable: true,\n          get: () => this.$services && this.$services.view,\n        },\n        $overlaysContainer: {\n          enumerable: true,\n          get: () => this.$services && this.$services.overlaysContainer,\n        },\n      })\n    },\n    data () {\n      return {\n        visible: false,\n      }\n    },\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  function subscribeToOverlayChanges () {\n    hasOverlay(this)\n\n    const changes = mergeObs(\n      observableFromOlChangeEvent(this.$overlay, 'position', true, undefined, () => this.pointToDataProj(this.$overlay.getPosition())),\n      observableFromOlChangeEvent(this.$overlay, [\n        'offset',\n        'positioning',\n      ], true),\n    )\n\n    this.subscribeTo(changes, ({ prop, value }) => {\n      ++this.rev\n      this.$emit(`update:${prop}`, value)\n    })\n  }\n</script>\n","import { pick } from '../../util/minilo'\nimport Overlay from './overlay.vue'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  options = pick(options, 'dataProjection')\n  Object.assign(Overlay, options)\n\n  Vue.component(Overlay.name, Overlay)\n}\n\nexport default plugin\n\nexport {\n  Overlay,\n  plugin as install,\n}\n"],"names":["props","id","type","String","Number","default","uuid","offset","Array","validator","value","length","position","required","positioning","OVERLAY_POSITIONING","TOP_LEFT","Object","values","includes","stopEvent","Boolean","insertFirst","autoPan","autoPanMargin","autoPanAnimation","className","computed","positionViewProj","rev","$overlay","getPosition","positionDataProj","pointToDataProj","classes","$options","name","visible","undefined","filter","identity","methods","createOlObject","overlay","Overlay","pointToViewProj","initializeOverlay","mount","hasOverlay","setElement","$el","$overlaysContainer","addOverlay","$nextTick","setPosition","slice","subscribeAll","unmount","unsubscribeAll","removeOverlay","subscribeToOverlayChanges","watch","setOverlayId","isEqual","getOffset","setOffset","getPositioning","setPositioning","resolvedDataProjection","mixins","olCmp","useMapCmp","projTransforms","created","defineProperties","enumerable","get","$olObject","$map","$services","map","$view","view","overlaysContainer","data","changes","mergeObs","observableFromOlChangeEvent","subscribeTo","prop","$emit","plugin","Vue","options","installed","pick","assign","component"],"mappings":"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"}