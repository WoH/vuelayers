/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.5-beta.8
 * @license MIT
 * @copyright (c) 2017-2019, Vladimir Vershinin <ghettovoice@gmail.com>
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('ol/extent'), require('ol/proj'), require('ol/proj/Units'), require('ol/Feature'), require('vue'), require('ol/geom/Circle'), require('ol/geom/GeometryCollection'), require('ol/geom/LineString'), require('ol/geom/MultiLineString'), require('ol/geom/MultiPoint'), require('ol/geom/MultiPolygon'), require('ol/geom/Point'), require('ol/geom/Polygon'), require('ol/proj/Projection'), require('ol/format/GeoJSON'), require('ol/format/MVT'), require('ol/format/TopoJSON'), require('ol/sphere'), require('ol/interaction/Interaction'), require('ol/layer/Base'), require('ol/loadingstrategy'), require('ol/PluggableMap'), require('ol/Overlay'), require('ol/style/Circle'), require('ol/style/Fill'), require('ol/style/Icon'), require('ol/style/Image'), require('ol/style/RegularShape'), require('ol/style/Stroke'), require('ol/style/Style'), require('ol/style/Text'), require('ol/size'), require('ol/tilegrid'), require('ol/tilegrid/TileGrid'), require('ol/Collection'), require('ol/source/XYZ'), require('ol/source/TileArcGISRest'), require('ol/source/BingMaps'), require('ol/source/Cluster'), require('ol/events/condition'), require('ol/interaction/Draw'), require('ol/Geolocation'), require('ol/Graticule'), require('ol/layer/Group'), require('ol/layer/Heatmap'), require('ol/layer/Image'), require('ol/source/ImageStatic'), require('ol/source/ImageWMS'), require('ol/source/WMSServerType'), require('ol/control'), require('ol/interaction'), require('ol/layer/Vector'), require('ol/Map'), require('ol/source/Vector'), require('ol/View'), require('ol/interaction/Modify'), require('ol/source/OSM'), require('ol/interaction/Select'), require('ol/interaction/Snap'), require('ol/source/Stamen'), require('ol/layer/Tile'), require('ol/layer/VectorTile'), require('ol/source/VectorTile'), require('ol/source/TileWMS'), require('ol/source/WMTS'), require('ol/tilegrid/WMTS')) :
  typeof define === 'function' && define.amd ? define('vuelayers', ['ol/extent', 'ol/proj', 'ol/proj/Units', 'ol/Feature', 'vue', 'ol/geom/Circle', 'ol/geom/GeometryCollection', 'ol/geom/LineString', 'ol/geom/MultiLineString', 'ol/geom/MultiPoint', 'ol/geom/MultiPolygon', 'ol/geom/Point', 'ol/geom/Polygon', 'ol/proj/Projection', 'ol/format/GeoJSON', 'ol/format/MVT', 'ol/format/TopoJSON', 'ol/sphere', 'ol/interaction/Interaction', 'ol/layer/Base', 'ol/loadingstrategy', 'ol/PluggableMap', 'ol/Overlay', 'ol/style/Circle', 'ol/style/Fill', 'ol/style/Icon', 'ol/style/Image', 'ol/style/RegularShape', 'ol/style/Stroke', 'ol/style/Style', 'ol/style/Text', 'ol/size', 'ol/tilegrid', 'ol/tilegrid/TileGrid', 'ol/Collection', 'ol/source/XYZ', 'ol/source/TileArcGISRest', 'ol/source/BingMaps', 'ol/source/Cluster', 'ol/events/condition', 'ol/interaction/Draw', 'ol/Geolocation', 'ol/Graticule', 'ol/layer/Group', 'ol/layer/Heatmap', 'ol/layer/Image', 'ol/source/ImageStatic', 'ol/source/ImageWMS', 'ol/source/WMSServerType', 'ol/control', 'ol/interaction', 'ol/layer/Vector', 'ol/Map', 'ol/source/Vector', 'ol/View', 'ol/interaction/Modify', 'ol/source/OSM', 'ol/interaction/Select', 'ol/interaction/Snap', 'ol/source/Stamen', 'ol/layer/Tile', 'ol/layer/VectorTile', 'ol/source/VectorTile', 'ol/source/TileWMS', 'ol/source/WMTS', 'ol/tilegrid/WMTS'], factory) :
  (global.VueLayers = factory(global.ol.extent,global.ol.proj,global.ol.proj.Units,global.ol.Feature,global.Vue,global.ol.geom.Circle,global.ol.geom.GeometryCollection,global.ol.geom.LineString,global.ol.geom.MultiLineString,global.ol.geom.MultiPoint,global.ol.geom.MultiPolygon,global.ol.geom.Point,global.ol.geom.Polygon,global.ol.proj.Projection,global.ol.format.GeoJSON,global.ol.format.MVT,global.ol.format.TopoJSON,global.ol.sphere,global.ol.interaction.Interaction,global.ol.layer.Base,global.ol.loadingstrategy,global.ol.PluggableMap,global.ol.Overlay,global.ol.style.Circle,global.ol.style.Fill,global.ol.style.Icon,global.ol.style.Image,global.ol.style.RegularShape,global.ol.style.Stroke,global.ol.style.Style,global.ol.style.Text,global.ol.size,global.ol.tilegrid,global.ol.tilegrid.TileGrid,global.ol.Collection,global.ol.source.XYZ,global.ol.source.TileArcGISRest,global.ol.source.BingMaps,global.ol.source.Cluster,global.ol.events.condition,global.ol.interaction.Draw,global.ol.Geolocation,global.ol.Graticule,global.ol.layer.Group,global.ol.layer.Heatmap,global.ol.layer.Image,global.ol.source.ImageStatic,global.ol.source.ImageWMS,global.ol.source.WMSServerType,global.ol.control,global.ol.interaction,global.ol.layer.Vector,global.ol.Map,global.ol.source.Vector,global.ol.View,global.ol.interaction.Modify,global.ol.source.OSM,global.ol.interaction.Select,global.ol.interaction.Snap,global.ol.source.Stamen,global.ol.layer.Tile,global.ol.layer.VectorTile,global.ol.source.VectorTile,global.ol.source.TileWMS,global.ol.source.WMTS,global.ol.tilegrid.WMTS));
}(this, (function (extent,proj,Units,Feature,Vue,Circle,GeometryCollection,LineString,MultiLineString,MultiPoint,MultiPolygon,Point,Polygon,Projection,BaseGeoJSON,MVT,TopoJSON,sphere,Interaction,BaseLayer,loadingstrategy,PluggableMap,Overlay,Circle$1,Fill,Icon,ImageStyle,RegularShape,Stroke,Style,Text,size,tilegrid,TileGrid,Collection,XYZSource,TileArcGISRestSource,BingMapsSource,Cluster,condition,DrawInteraction,Geolocation,Graticule,GroupLayer,HeatmapLayer,ImageLayer,ImageStaticSource,ImageWMS,WMSServerType,control,interaction,VectorLayer,Map$1,VectorSource,View,ModifyInteraction,OSMSource,SelectInteraction,SnapInteraction,StamenSource,TileLayer,VectorTileLayer,VectorTileSource,TileWMSSource,WMTSSource,WMTSTileGrid) { 'use strict';

  Feature = Feature && Feature.hasOwnProperty('default') ? Feature['default'] : Feature;
  Vue = Vue && Vue.hasOwnProperty('default') ? Vue['default'] : Vue;
  Circle = Circle && Circle.hasOwnProperty('default') ? Circle['default'] : Circle;
  GeometryCollection = GeometryCollection && GeometryCollection.hasOwnProperty('default') ? GeometryCollection['default'] : GeometryCollection;
  LineString = LineString && LineString.hasOwnProperty('default') ? LineString['default'] : LineString;
  MultiLineString = MultiLineString && MultiLineString.hasOwnProperty('default') ? MultiLineString['default'] : MultiLineString;
  MultiPoint = MultiPoint && MultiPoint.hasOwnProperty('default') ? MultiPoint['default'] : MultiPoint;
  MultiPolygon = MultiPolygon && MultiPolygon.hasOwnProperty('default') ? MultiPolygon['default'] : MultiPolygon;
  Point = Point && Point.hasOwnProperty('default') ? Point['default'] : Point;
  var Polygon__default = 'default' in Polygon ? Polygon['default'] : Polygon;
  Projection = Projection && Projection.hasOwnProperty('default') ? Projection['default'] : Projection;
  BaseGeoJSON = BaseGeoJSON && BaseGeoJSON.hasOwnProperty('default') ? BaseGeoJSON['default'] : BaseGeoJSON;
  MVT = MVT && MVT.hasOwnProperty('default') ? MVT['default'] : MVT;
  TopoJSON = TopoJSON && TopoJSON.hasOwnProperty('default') ? TopoJSON['default'] : TopoJSON;
  Interaction = Interaction && Interaction.hasOwnProperty('default') ? Interaction['default'] : Interaction;
  BaseLayer = BaseLayer && BaseLayer.hasOwnProperty('default') ? BaseLayer['default'] : BaseLayer;
  PluggableMap = PluggableMap && PluggableMap.hasOwnProperty('default') ? PluggableMap['default'] : PluggableMap;
  Overlay = Overlay && Overlay.hasOwnProperty('default') ? Overlay['default'] : Overlay;
  Circle$1 = Circle$1 && Circle$1.hasOwnProperty('default') ? Circle$1['default'] : Circle$1;
  Fill = Fill && Fill.hasOwnProperty('default') ? Fill['default'] : Fill;
  Icon = Icon && Icon.hasOwnProperty('default') ? Icon['default'] : Icon;
  ImageStyle = ImageStyle && ImageStyle.hasOwnProperty('default') ? ImageStyle['default'] : ImageStyle;
  RegularShape = RegularShape && RegularShape.hasOwnProperty('default') ? RegularShape['default'] : RegularShape;
  Stroke = Stroke && Stroke.hasOwnProperty('default') ? Stroke['default'] : Stroke;
  Style = Style && Style.hasOwnProperty('default') ? Style['default'] : Style;
  Text = Text && Text.hasOwnProperty('default') ? Text['default'] : Text;
  TileGrid = TileGrid && TileGrid.hasOwnProperty('default') ? TileGrid['default'] : TileGrid;
  Collection = Collection && Collection.hasOwnProperty('default') ? Collection['default'] : Collection;
  XYZSource = XYZSource && XYZSource.hasOwnProperty('default') ? XYZSource['default'] : XYZSource;
  TileArcGISRestSource = TileArcGISRestSource && TileArcGISRestSource.hasOwnProperty('default') ? TileArcGISRestSource['default'] : TileArcGISRestSource;
  BingMapsSource = BingMapsSource && BingMapsSource.hasOwnProperty('default') ? BingMapsSource['default'] : BingMapsSource;
  Cluster = Cluster && Cluster.hasOwnProperty('default') ? Cluster['default'] : Cluster;
  DrawInteraction = DrawInteraction && DrawInteraction.hasOwnProperty('default') ? DrawInteraction['default'] : DrawInteraction;
  Geolocation = Geolocation && Geolocation.hasOwnProperty('default') ? Geolocation['default'] : Geolocation;
  Graticule = Graticule && Graticule.hasOwnProperty('default') ? Graticule['default'] : Graticule;
  GroupLayer = GroupLayer && GroupLayer.hasOwnProperty('default') ? GroupLayer['default'] : GroupLayer;
  HeatmapLayer = HeatmapLayer && HeatmapLayer.hasOwnProperty('default') ? HeatmapLayer['default'] : HeatmapLayer;
  ImageLayer = ImageLayer && ImageLayer.hasOwnProperty('default') ? ImageLayer['default'] : ImageLayer;
  ImageStaticSource = ImageStaticSource && ImageStaticSource.hasOwnProperty('default') ? ImageStaticSource['default'] : ImageStaticSource;
  ImageWMS = ImageWMS && ImageWMS.hasOwnProperty('default') ? ImageWMS['default'] : ImageWMS;
  WMSServerType = WMSServerType && WMSServerType.hasOwnProperty('default') ? WMSServerType['default'] : WMSServerType;
  VectorLayer = VectorLayer && VectorLayer.hasOwnProperty('default') ? VectorLayer['default'] : VectorLayer;
  Map$1 = Map$1 && Map$1.hasOwnProperty('default') ? Map$1['default'] : Map$1;
  VectorSource = VectorSource && VectorSource.hasOwnProperty('default') ? VectorSource['default'] : VectorSource;
  View = View && View.hasOwnProperty('default') ? View['default'] : View;
  ModifyInteraction = ModifyInteraction && ModifyInteraction.hasOwnProperty('default') ? ModifyInteraction['default'] : ModifyInteraction;
  OSMSource = OSMSource && OSMSource.hasOwnProperty('default') ? OSMSource['default'] : OSMSource;
  SelectInteraction = SelectInteraction && SelectInteraction.hasOwnProperty('default') ? SelectInteraction['default'] : SelectInteraction;
  SnapInteraction = SnapInteraction && SnapInteraction.hasOwnProperty('default') ? SnapInteraction['default'] : SnapInteraction;
  StamenSource = StamenSource && StamenSource.hasOwnProperty('default') ? StamenSource['default'] : StamenSource;
  TileLayer = TileLayer && TileLayer.hasOwnProperty('default') ? TileLayer['default'] : TileLayer;
  VectorTileLayer = VectorTileLayer && VectorTileLayer.hasOwnProperty('default') ? VectorTileLayer['default'] : VectorTileLayer;
  VectorTileSource = VectorTileSource && VectorTileSource.hasOwnProperty('default') ? VectorTileSource['default'] : VectorTileSource;
  TileWMSSource = TileWMSSource && TileWMSSource.hasOwnProperty('default') ? TileWMSSource['default'] : TileWMSSource;
  WMTSSource = WMTSSource && WMTSSource.hasOwnProperty('default') ? WMTSSource['default'] : WMTSSource;
  WMTSTileGrid = WMTSTileGrid && WMTSTileGrid.hasOwnProperty('default') ? WMTSTileGrid['default'] : WMTSTileGrid;

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var _context;

  var _marked =
  /*#__PURE__*/
  regeneratorRuntime.mark(range);

  /**
   * Mini Lodash.
   */
  var glob = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};
  var globIsFinite = glob.isFinite || noop;
  var objectProto = Object.prototype;
  var funcProto = Object.prototype;
  var objectToString = objectProto.toString;
  var funcToString = funcProto.toString;
  var objectTag = (_context = {}, objectToString).call(_context);
  var numberTag = (_context = 0, objectToString).call(_context);
  var stringTag = (_context = '', objectToString).call(_context);
  var booleanTag = (_context = true, objectToString).call(_context);
  var objectCtorString = funcToString.call(Object);
  function noop() {// do nothing
  }
  function constant(value) {
    return function () {
      return value;
    };
  }
  function stubArray() {
    return [];
  }
  function identity(value) {
    return value;
  }
  function isBoolean(value) {
    return objectToString.call(value) === booleanTag;
  }
  function isNumber(value) {
    return objectToString.call(value) === numberTag;
  }
  function isString(value) {
    return objectToString.call(value) === stringTag;
  }
  function isArray(value) {
    return Array.isArray(value);
  }
  function isArrayLike(value) {
    return isObjectLike(value) && value.hasOwnProperty('length');
  }
  function isFinite(value) {
    return typeof value === 'number' && globIsFinite(value);
  }
  function isFunction(value) {
    return typeof value === 'function';
  }
  /**
   * @param {*} value
   * @return {boolean} True if value is number or numeric string.
   */

  function isNumeric(value) {
    return !isNaN(parseFloat(value)) && globIsFinite(value);
  }
  function isObjectLike(value) {
    return value != null && _typeof(value) === 'object';
  }
  function isPlainObject(value) {
    if (!isObjectLike(value) || objectToString.call(value) !== objectTag) {
      return false;
    }

    var proto = Object.getPrototypeOf(value);

    if (proto == null) {
      return true;
    }

    var Ctor = proto.constructor;
    return typeof Ctor === 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) === objectCtorString;
  }
  /**
   * @param {...*} [args]
   *
   * @return {*}
   */

  function coalesce() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args.find(function (val) {
      return val != null;
    });
  }
  /**
   * @param {Object} object
   * @return {Object} Returns object only with plain properties.
   */

  function plainProps(object) {
    var newObject = {};

    var isPlain = function isPlain(x) {
      return isNumeric(x) || isString(x) || isArray(x) || isBoolean(x) || isPlainObject(x);
    };

    Object.keys(object).forEach(function (key) {
      if (isPlain(object[key])) {
        newObject[key] = object[key];
      }
    });
    return newObject;
  }
  /**
   * Replaces `tokens` in the `string` by values from the `replaces`.
   *
   * @param {string} string
   * @param {Object} replaces
   *
   * @returns {string}
   */

  function replaceTokens(string, replaces) {
    var regExp = new RegExp(Object.keys(replaces).map(function (field) {
      return '(\\{' + field + '\\})';
    }).join('|'), 'ig');
    return string.replace(regExp, function (match) {
      return replaces[match.substr(1, match.length - 2)] || '';
    });
  }
  function isEqual(value, other) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      // eslint-disable-next-line no-self-compare
      return value !== value && other !== other;
    }

    var valueProps = Object.keys(value);
    var otherProps = Object.keys(other);

    if (valueProps.length !== otherProps.length) {
      return false;
    }

    var checked = [];

    var traverse = function traverse(valueProps, otherProps) {
      for (var i = 0, l = valueProps.length; i < l; i++) {
        var valueProp = valueProps[i];

        if (checked.includes(valueProp)) {
          continue;
        }

        if (other.hasOwnProperty(valueProp) === false) {
          return false;
        }

        var otherProp = otherProps[i];

        if (!isEqual(value[valueProp], other[otherProp])) {
          return false;
        }

        checked.push(otherProp);
      }

      return true;
    };

    if (traverse(valueProps, otherProps) === false) {
      return false;
    }

    return traverse(otherProps, valueProps);
  }
  function isEmpty(value) {
    return !value || isArrayLike(value) && value.length === 0 || isObjectLike(value) && Object.keys(value).length === 0;
  }
  function isNotEmpty(value) {
    return !isEmpty(value);
  }
  function forEach(collection, iteratee) {
    var keys = Object.keys(collection);

    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      var value = collection[key];

      if (iteratee(value, key) === false) {
        return;
      }
    }
  }
  function reduce(collection, iteratee, initial) {
    var result = initial;
    forEach(collection, function (value, key) {
      result = iteratee(result, value, key);
    });
    return result;
  }
  function filter(collection) {
    var iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isNotEmpty;
    return reduce(collection, function (newCollection, value, key) {
      if (iteratee(value, key)) {
        if (isArray(newCollection)) {
          newCollection.push(value);
        } else {
          newCollection[key] = value;
        }
      }

      return newCollection;
    }, isArray(collection) ? [] : {});
  }
  function map(collection) {
    var iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
    return reduce(collection, function (newCollection, value, key) {
      newCollection[key] = iteratee(value, key);
      return newCollection;
    }, isArray(collection) ? [] : {});
  }
  function mapValues(object) {
    var iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
    return map(object, iteratee);
  }
  function firstEl(object) {
    if (!isArrayLike(object)) return;
    return object[0];
  }
  function pick(object, key) {
    for (var _len2 = arguments.length, keys = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      keys[_key2 - 2] = arguments[_key2];
    }

    if (Array.isArray(key)) {
      keys = key;
    } else {
      keys = [key].concat(keys);
    }

    return reduce(keys, function (picked, key) {
      picked[key] = object[key];
      return picked;
    }, {});
  }
  function upperFirst(string) {
    string = String(string);

    if (string.length === 0) {
      return '';
    }

    return string[0].toUpperCase() + string.slice(1);
  }
  function lowerFirst(string) {
    string = String(string);

    if (string.length === 0) {
      return '';
    }

    return string[0].toLowerCase() + string.slice(1);
  }
  function range(start, end) {
    var step,
        i,
        _args = arguments;
    return regeneratorRuntime.wrap(function range$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            step = _args.length > 2 && _args[2] !== undefined ? _args[2] : 1;
            i = start;

          case 2:
            if (!(i < end)) {
              _context2.next = 8;
              break;
            }

            _context2.next = 5;
            return i;

          case 5:
            i += step;
            _context2.next = 2;
            break;

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _marked, this);
  }
  function get(object, path, defaultValue) {
    // eslint-disable-next-line no-new-func
    var fn = new Function('object', "try { return object.".concat(path, " } catch (e) {}"));
    return coalesce(fn(object), defaultValue);
  }
  function includes(array, value) {
    var comparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isEqual;
    var elems = filter(array, function (elem) {
      return comparator(elem, value);
    });
    return elems.shift();
  }
  function difference(array1, array2) {
    var comparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isEqual;
    return filter(array1, function (value) {
      return !includes(array2, value, comparator);
    });
  }
  /**
   * @param {string} str
   * @return {string}
   */

  function camelCase(str) {
    var regExp = /([-_]\w)/g;
    return str.replace(regExp, function (matches) {
      return matches[1].toUpperCase();
    });
  }
  function arrayLengthValidator(len) {
    return function (len) {
      return function (value) {
        return isArray(value) && value.length === len;
      };
    };
  }

  var EPSG_4326 = 'EPSG:4326';
  var EPSG_3857 = 'EPSG:3857';
  /**
   * @type {number} Default map max zoom
   */

  var MAX_ZOOM = 28;
  /**
   * @type {number} Default map min zoom
   */

  var MIN_ZOOM = 0;
  /**
   * @type {number} Default tile size
   */

  var TILE_SIZE = 256;
  /**
   * @type {string}
   */

  var TILE_FORMAT = 'png';
  /**
   * @type {number} Default zoom factor
   */

  var ZOOM_FACTOR = 2;
  /**
   * @type {number}
   */

  var CACHE_SIZE = 2048;
  /**
   * @type {number}
   */

  var PIXEL_RATIO = 1;
  /**
   * @type {string}
   */

  var CROSS_ORIGIN = 'anonymous';
  /**
   * @type {number}
   */

  var REPROJ_ERR_THRESHOLD = 0.5;
  /**
   * @type {number} Earth radius in meters
   */

  var EARTH_RADIUS = 6378137;
  var RENDERER_TYPE = {
    CANVAS: 'canvas',
    WEBGL: 'webgl'
  };
  var GEOMETRY_TYPE = {
    POINT: 'Point',
    LINE_STRING: 'LineString',
    POLYGON: 'Polygon',
    MULTI_POINT: 'MultiPoint',
    MULTI_LINE_STRING: 'MultiLineString',
    MULTI_POLYGON: 'MultiPolygon',
    GEOMETRY_COLLECTION: 'GeometryCollection',
    CIRCLE: 'Circle'
  };
  var EXTENT_CORNER = {
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_RIGHT: 'bottom-right',
    TOP_LEFT: 'top-left',
    TOP_RIGHT: 'top-right'
  };
  var PROJ_UNIT = {
    DEGREES: 'degrees',
    FEET: 'ft',
    METERS: 'm',
    PIXELS: 'pixels',
    TILE_PIXELS: 'tile-pixels',
    USFEET: 'us-ft'
  };
  var OVERLAY_POSITIONING = {
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_CENTER: 'bottom-center',
    BOTTOM_RIGHT: 'bottom-right',
    CENTER_LEFT: 'center-left',
    CENTER_CENTER: 'center-center',
    CENTER_RIGHT: 'center-right',
    TOP_LEFT: 'top-left',
    TOP_CENTER: 'top-center',
    TOP_RIGHT: 'top-right'
    /**
     * @type {string} Default WMS version
     */

  };
  var WMS_VERSION = '1.3.0';
  var WMTS_VERSION = '1.0.0';
  var WMTS_REQUEST_ENCODING = 'KVP';
  var WMTS_FORMAT = 'image/jpeg';
  var LAYER_PROP = 'layer';
  var ARCGIS_EXTRA_PARAMS = ['FORMAT', 'F', 'LAYERS', 'LAYERDEFS', 'DYNAMICLAYERS', 'DPI', 'TRANSPARENT', 'TIME', 'LAYERTIMEOPTIONS', 'GDBVERSION', 'MAPSCALE', 'ROTATION', 'DATUMTRANSFORMATIONS', 'MAPRANGEVALUES', 'LAYERRANGEVALUES', 'LAYERPARAMETERVALUES', 'HISTORICMOMENT'];

  /**
   * Extent extensions
   */
  /**
   * Create a new extent or update the provided extent.
   * @param {number} minX Minimum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxX Maximum X.
   * @param {number} maxY Maximum Y.
   * @param {Extent=} extent Destination extent.
   * @return {Extent} Extent.
   * @see https://github.com/openlayers/openlayers/blob/master/src/ol/extent.js#L208
   */

  function createOrUpdateExtent(minX, minY, maxX, maxY, extent$$1) {
    if (extent$$1) {
      extent$$1[0] = minX;
      extent$$1[1] = minY;
      extent$$1[2] = maxX;
      extent$$1[3] = maxY;
      return extent$$1;
    } else {
      return [minX, minY, maxX, maxY];
    }
  }
  /**
   * Get a corner coordinate of an extent.
   * @param {Extent|number[]} extent Extent.
   * @param {string} corner Corner.
   * @return {Coordinate} Corner coordinate.
   * @see https://github.com/openlayers/openlayers/blob/master/src/ol/extent.js#L482
   */

  function getExtentCorner(extent$$1, corner) {
    var coordinate;

    if (corner === EXTENT_CORNER.BOTTOM_LEFT) {
      coordinate = extent.getBottomLeft(extent$$1);
    } else if (corner === EXTENT_CORNER.BOTTOM_RIGHT) {
      coordinate = extent.getBottomRight(extent$$1);
    } else if (corner === EXTENT_CORNER.TOP_LEFT) {
      coordinate = extent.getTopLeft(extent$$1);
    } else if (corner === EXTENT_CORNER.TOP_RIGHT) {
      coordinate = extent.getTopRight(extent$$1);
    } else {
      throw new Error('Invalid corner');
    }

    return coordinate;
  }
  /**
   * Generate a tile grid extent from a projection.  If the projection has an
   * extent, it is used.  If not, a global extent is assumed.
   * @param {Projection} projection Projection.
   * @return {Extent} Extent.
   * @see https://github.com/openlayers/openlayers/blob/master/src/ol/tilegrid.js#L148
   */

  function createExtentFromProjection(projection) {
    projection = proj.get(projection);
    var extent$$1 = projection.getExtent();

    if (!extent$$1) {
      var half = 180 * Units.METERS_PER_UNIT[PROJ_UNIT.DEGREES] / projection.getMetersPerUnit();
      extent$$1 = createOrUpdateExtent(-half, -half, half, half);
    }

    return extent$$1;
  }

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var rngBrowser = createCommonjsModule(function (module) {
  // Unique ID creation requires a high quality random # generator.  In the
  // browser this is a little complicated due to unknown quality of Math.random()
  // and inconsistent support for the `crypto` API.  We do the best we can via
  // feature-detection

  // getRandomValues needs to be invoked in a context where "this" is a Crypto
  // implementation. Also, find the complete implementation of crypto on IE11.
  var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                        (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

  if (getRandomValues) {
    // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
    var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

    module.exports = function whatwgRNG() {
      getRandomValues(rnds8);
      return rnds8;
    };
  } else {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var rnds = new Array(16);

    module.exports = function mathRNG() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return rnds;
    };
  }
  });

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */
  var byteToHex = [];
  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }

  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
    return ([bth[buf[i++]], bth[buf[i++]], 
  	bth[buf[i++]], bth[buf[i++]], '-',
  	bth[buf[i++]], bth[buf[i++]], '-',
  	bth[buf[i++]], bth[buf[i++]], '-',
  	bth[buf[i++]], bth[buf[i++]], '-',
  	bth[buf[i++]], bth[buf[i++]],
  	bth[buf[i++]], bth[buf[i++]],
  	bth[buf[i++]], bth[buf[i++]]]).join('');
  }

  var bytesToUuid_1 = bytesToUuid;

  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || rngBrowser)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid_1(rnds);
  }

  var v4_1 = v4;

  /**
   * @param {Object|Vue|Feature|string|number} feature
   * @return {string|number}
   * @throws {Error}
   */

  function getFeatureId(feature) {
    if (isPlainObject(feature) || feature instanceof Vue) {
      return feature.id;
    } else if (feature instanceof Feature) {
      return feature.getId();
    } else if (isString(feature) || isNumber(feature)) {
      return feature;
    }

    throw new Error('Illegal feature format');
  }
  /**
   * @param {Feature|Vue|Object} feature
   * @param {string} featureId
   * @returns {Feature|Vue|Object}
   */

  function setFeatureId(feature, featureId) {
    if (isPlainObject(feature) || feature instanceof Vue) {
      feature.id = featureId;
      return feature;
    } else if (feature instanceof Feature) {
      feature.setId(featureId);
      return feature;
    }

    throw new Error('Illegal feature format');
  }
  /**
   * @param {Feature} feature
   * @param {string|undefined} defaultFeatureId
   * @returns {Feature}
   */

  function initializeFeature(feature, defaultFeatureId) {
    if (getFeatureId(feature) == null) {
      setFeatureId(feature, defaultFeatureId || v4_1());
    }

    return feature;
  }
  /**
   * @param {Feature} destFeature
   * @param {Feature} srcFeature
   * @returns {Feature}
   */

  function mergeFeatures(destFeature, srcFeature) {
    destFeature.setProperties(_objectSpread({}, srcFeature.getProperties()));
    destFeature.setGeometry(srcFeature.getGeometry().clone());
    destFeature.setStyle(srcFeature.getStyle() != null ? srcFeature.getStyle().clone() : undefined);
    return destFeature;
  }

  /**
   * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.
   */
  var earthRadius = 6371008.8;

  /**
   * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.
   */
  var factors = {
      meters: earthRadius,
      metres: earthRadius,
      millimeters: earthRadius * 1000,
      millimetres: earthRadius * 1000,
      centimeters: earthRadius * 100,
      centimetres: earthRadius * 100,
      kilometers: earthRadius / 1000,
      kilometres: earthRadius / 1000,
      miles: earthRadius / 1609.344,
      nauticalmiles: earthRadius / 1852,
      inches: earthRadius * 39.370,
      yards: earthRadius / 1.0936,
      feet: earthRadius * 3.28084,
      radians: 1,
      degrees: earthRadius / 111325,
  };

  /**
   * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
   *
   * @name feature
   * @param {Geometry} geometry input geometry
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature} a GeoJSON Feature
   * @example
   * var geometry = {
   *   "type": "Point",
   *   "coordinates": [110, 50]
   * };
   *
   * var feature = turf.feature(geometry);
   *
   * //=feature
   */
  function feature(geometry, properties, options) {
      // Optional Parameters
      options = options || {};
      if (!isObject(options)) throw new Error('options is invalid');
      var bbox = options.bbox;
      var id = options.id;

      // Validation
      if (geometry === undefined) throw new Error('geometry is required');
      if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');
      if (bbox) validateBBox(bbox);
      if (id) validateId(id);

      // Main
      var feat = {type: 'Feature'};
      if (id) feat.id = id;
      if (bbox) feat.bbox = bbox;
      feat.properties = properties || {};
      feat.geometry = geometry;
      return feat;
  }

  /**
   * Creates a {@link Point} {@link Feature} from a Position.
   *
   * @name point
   * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<Point>} a Point feature
   * @example
   * var point = turf.point([-75.343, 39.984]);
   *
   * //=point
   */
  function point(coordinates, properties, options) {
      if (!coordinates) throw new Error('coordinates is required');
      if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');
      if (coordinates.length < 2) throw new Error('coordinates must be at least 2 numbers long');
      if (!isNumber$1(coordinates[0]) || !isNumber$1(coordinates[1])) throw new Error('coordinates must contain numbers');

      return feature({
          type: 'Point',
          coordinates: coordinates
      }, properties, options);
  }

  /**
   * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.
   *
   * @name featureCollection
   * @param {Feature[]} features input features
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {FeatureCollection} FeatureCollection of Features
   * @example
   * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});
   * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});
   * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});
   *
   * var collection = turf.featureCollection([
   *   locationA,
   *   locationB,
   *   locationC
   * ]);
   *
   * //=collection
   */
  function featureCollection(features, options) {
      // Optional Parameters
      options = options || {};
      if (!isObject(options)) throw new Error('options is invalid');
      var bbox = options.bbox;
      var id = options.id;

      // Validation
      if (!features) throw new Error('No features passed');
      if (!Array.isArray(features)) throw new Error('features must be an Array');
      if (bbox) validateBBox(bbox);
      if (id) validateId(id);

      // Main
      var fc = {type: 'FeatureCollection'};
      if (id) fc.id = id;
      if (bbox) fc.bbox = bbox;
      fc.features = features;
      return fc;
  }

  /**
   * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.
   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
   *
   * @name radiansToLength
   * @param {number} radians in radians across the sphere
   * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.
   * @returns {number} distance
   */
  function radiansToLength(radians, units) {
      if (radians === undefined || radians === null) throw new Error('radians is required');

      if (units && typeof units !== 'string') throw new Error('units must be a string');
      var factor = factors[units || 'kilometers'];
      if (!factor) throw new Error(units + ' units is invalid');
      return radians * factor;
  }

  /**
   * Converts an angle in degrees to radians
   *
   * @name degreesToRadians
   * @param {number} degrees angle between 0 and 360 degrees
   * @returns {number} angle in radians
   */
  function degreesToRadians(degrees) {
      if (degrees === null || degrees === undefined) throw new Error('degrees is required');

      var radians = degrees % 360;
      return radians * Math.PI / 180;
  }

  /**
   * isNumber
   *
   * @param {*} num Number to validate
   * @returns {boolean} true/false
   * @example
   * turf.isNumber(123)
   * //=true
   * turf.isNumber('foo')
   * //=false
   */
  function isNumber$1(num) {
      return !isNaN(num) && num !== null && !Array.isArray(num);
  }

  /**
   * isObject
   *
   * @param {*} input variable to validate
   * @returns {boolean} true/false
   * @example
   * turf.isObject({elevation: 10})
   * //=true
   * turf.isObject('foo')
   * //=false
   */
  function isObject(input) {
      return (!!input) && (input.constructor === Object);
  }

  /**
   * Validate BBox
   *
   * @private
   * @param {Array<number>} bbox BBox to validate
   * @returns {void}
   * @throws Error if BBox is not valid
   * @example
   * validateBBox([-180, -40, 110, 50])
   * //=OK
   * validateBBox([-180, -40])
   * //=Error
   * validateBBox('Foo')
   * //=Error
   * validateBBox(5)
   * //=Error
   * validateBBox(null)
   * //=Error
   * validateBBox(undefined)
   * //=Error
   */
  function validateBBox(bbox) {
      if (!bbox) throw new Error('bbox is required');
      if (!Array.isArray(bbox)) throw new Error('bbox must be an Array');
      if (bbox.length !== 4 && bbox.length !== 6) throw new Error('bbox must be an Array of 4 or 6 numbers');
      bbox.forEach(function (num) {
          if (!isNumber$1(num)) throw new Error('bbox must only contain numbers');
      });
  }

  /**
   * Validate Id
   *
   * @private
   * @param {string|number} id Id to validate
   * @returns {void}
   * @throws Error if Id is not valid
   * @example
   * validateId([-180, -40, 110, 50])
   * //=Error
   * validateId([-180, -40])
   * //=Error
   * validateId('Foo')
   * //=OK
   * validateId(5)
   * //=OK
   * validateId(null)
   * //=Error
   * validateId(undefined)
   * //=Error
   */
  function validateId(id) {
      if (!id) throw new Error('id is required');
      if (['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');
  }

  /**
   * Callback for coordEach
   *
   * @callback coordEachCallback
   * @param {Array<number>} currentCoord The current coordinate being processed.
   * @param {number} coordIndex The current index of the coordinate being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   */

  /**
   * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
   *
   * @name coordEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)
   * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {"foo": "bar"}),
   *   turf.point([36, 53], {"hello": "world"})
   * ]);
   *
   * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=currentCoord
   *   //=coordIndex
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   * });
   */
  function coordEach(geojson, callback, excludeWrapCoord) {
      // Handles null Geometry -- Skips this GeoJSON
      if (geojson === null) return;
      var j, k, l, geometry$$1, stopG, coords,
          geometryMaybeCollection,
          wrapShrink = 0,
          coordIndex = 0,
          isGeometryCollection,
          type = geojson.type,
          isFeatureCollection = type === 'FeatureCollection',
          isFeature = type === 'Feature',
          stop = isFeatureCollection ? geojson.features.length : 1;

      // This logic may look a little weird. The reason why it is that way
      // is because it's trying to be fast. GeoJSON supports multiple kinds
      // of objects at its root: FeatureCollection, Features, Geometries.
      // This function has the responsibility of handling all of them, and that
      // means that some of the `for` loops you see below actually just don't apply
      // to certain inputs. For instance, if you give this just a
      // Point geometry, then both loops are short-circuited and all we do
      // is gradually rename the input until it's called 'geometry'.
      //
      // This also aims to allocate as few resources as possible: just a
      // few numbers and booleans, rather than any temporary arrays as would
      // be required with the normalization approach.
      for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
          geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :
              (isFeature ? geojson.geometry : geojson));
          isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;
          stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

          for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
              var multiFeatureIndex = 0;
              var geometryIndex = 0;
              geometry$$1 = isGeometryCollection ?
                  geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;

              // Handles null Geometry -- Skips this geometry
              if (geometry$$1 === null) continue;
              coords = geometry$$1.coordinates;
              var geomType = geometry$$1.type;

              wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;

              switch (geomType) {
              case null:
                  break;
              case 'Point':
                  if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                  coordIndex++;
                  multiFeatureIndex++;
                  break;
              case 'LineString':
              case 'MultiPoint':
                  for (j = 0; j < coords.length; j++) {
                      if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                      coordIndex++;
                      if (geomType === 'MultiPoint') multiFeatureIndex++;
                  }
                  if (geomType === 'LineString') multiFeatureIndex++;
                  break;
              case 'Polygon':
              case 'MultiLineString':
                  for (j = 0; j < coords.length; j++) {
                      for (k = 0; k < coords[j].length - wrapShrink; k++) {
                          if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                          coordIndex++;
                      }
                      if (geomType === 'MultiLineString') multiFeatureIndex++;
                      if (geomType === 'Polygon') geometryIndex++;
                  }
                  if (geomType === 'Polygon') multiFeatureIndex++;
                  break;
              case 'MultiPolygon':
                  for (j = 0; j < coords.length; j++) {
                      if (geomType === 'MultiPolygon') geometryIndex = 0;
                      for (k = 0; k < coords[j].length; k++) {
                          for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                              if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                              coordIndex++;
                          }
                          geometryIndex++;
                      }
                      multiFeatureIndex++;
                  }
                  break;
              case 'GeometryCollection':
                  for (j = 0; j < geometry$$1.geometries.length; j++)
                      if (coordEach(geometry$$1.geometries[j], callback, excludeWrapCoord) === false) return false;
                  break;
              default:
                  throw new Error('Unknown Geometry Type');
              }
          }
      }
  }

  /**
   * Callback for featureEach
   *
   * @callback featureEachCallback
   * @param {Feature<any>} currentFeature The current Feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Iterate over features in any GeoJSON object, similar to
   * Array.forEach.
   *
   * @name featureEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentFeature, featureIndex)
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {foo: 'bar'}),
   *   turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.featureEach(features, function (currentFeature, featureIndex) {
   *   //=currentFeature
   *   //=featureIndex
   * });
   */
  function featureEach(geojson, callback) {
      if (geojson.type === 'Feature') {
          callback(geojson, 0);
      } else if (geojson.type === 'FeatureCollection') {
          for (var i = 0; i < geojson.features.length; i++) {
              if (callback(geojson.features[i], i) === false) break;
          }
      }
  }

  /**
   * Takes a feature or set of features and returns all positions as {@link Point|points}.
   *
   * @name explode
   * @param {GeoJSON} geojson input features
   * @returns {FeatureCollection<point>} points representing the exploded input features
   * @throws {Error} if it encounters an unknown geometry type
   * @example
   * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
   *
   * var explode = turf.explode(polygon);
   *
   * //addToMap
   * var addToMap = [polygon, explode]
   */
  function explode(geojson) {
      var points$$1 = [];
      if (geojson.type === 'FeatureCollection') {
          featureEach(geojson, function (feature$$1) {
              coordEach(feature$$1, function (coord) {
                  points$$1.push(point(coord, feature$$1.properties));
              });
          });
      } else {
          coordEach(geojson, function (coord) {
              points$$1.push(point(coord, geojson.properties));
          });
      }
      return featureCollection(points$$1);
  }

  /**
   * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
   *
   * @name bbox
   * @param {GeoJSON} geojson any GeoJSON object
   * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order
   * @example
   * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);
   * var bbox = turf.bbox(line);
   * var bboxPolygon = turf.bboxPolygon(bbox);
   *
   * //addToMap
   * var addToMap = [line, bboxPolygon]
   */
  function bbox(geojson) {
      var BBox = [Infinity, Infinity, -Infinity, -Infinity];
      coordEach(geojson, function (coord) {
          if (BBox[0] > coord[0]) BBox[0] = coord[0];
          if (BBox[1] > coord[1]) BBox[1] = coord[1];
          if (BBox[2] < coord[0]) BBox[2] = coord[0];
          if (BBox[3] < coord[1]) BBox[3] = coord[1];
      });
      return BBox;
  }

  /**
   * Takes a {@link Feature} or {@link FeatureCollection} and returns the absolute center point of all features.
   *
   * @name center
   * @param {GeoJSON} geojson GeoJSON to be centered
   * @param {Object} [options={}] Optional parameters
   * @param {Object} [options.properties={}] an Object that is used as the {@link Feature}'s properties
   * @returns {Feature<Point>} a Point feature at the absolute center point of all input features
   * @example
   * var features = turf.featureCollection([
   *   turf.point( [-97.522259, 35.4691]),
   *   turf.point( [-97.502754, 35.463455]),
   *   turf.point( [-97.508269, 35.463245])
   * ]);
   *
   * var center = turf.center(features);
   *
   * //addToMap
   * var addToMap = [features, center]
   * center.properties['marker-size'] = 'large';
   * center.properties['marker-color'] = '#000';
   */
  function center(geojson, options) {
      // Optional parameters
      options = options || {};
      if (!isObject(options)) throw new Error('options is invalid');
      var properties = options.properties;

      // Input validation
      if (!geojson) throw new Error('geojson is required');

      var ext = bbox(geojson);
      var x = (ext[0] + ext[2]) / 2;
      var y = (ext[1] + ext[3]) / 2;
      return point([x, y], properties);
  }

  /**
   * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.
   * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.
   *
   * @name clone
   * @param {GeoJSON} geojson GeoJSON Object
   * @returns {GeoJSON} cloned GeoJSON Object
   * @example
   * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});
   *
   * var lineCloned = turf.clone(line);
   */
  function clone(geojson) {
      if (!geojson) throw new Error('geojson is required');

      switch (geojson.type) {
      case 'Feature':
          return cloneFeature(geojson);
      case 'FeatureCollection':
          return cloneFeatureCollection(geojson);
      case 'Point':
      case 'LineString':
      case 'Polygon':
      case 'MultiPoint':
      case 'MultiLineString':
      case 'MultiPolygon':
      case 'GeometryCollection':
          return cloneGeometry(geojson);
      default:
          throw new Error('unknown GeoJSON type');
      }
  }

  /**
   * Clone Feature
   *
   * @private
   * @param {Feature<any>} geojson GeoJSON Feature
   * @returns {Feature<any>} cloned Feature
   */
  function cloneFeature(geojson) {
      var cloned = {type: 'Feature'};
      // Preserve Foreign Members
      Object.keys(geojson).forEach(function (key) {
          switch (key) {
          case 'type':
          case 'properties':
          case 'geometry':
              return;
          default:
              cloned[key] = geojson[key];
          }
      });
      // Add properties & geometry last
      cloned.properties = cloneProperties(geojson.properties);
      cloned.geometry = cloneGeometry(geojson.geometry);
      return cloned;
  }

  /**
   * Clone Properties
   *
   * @private
   * @param {Object} properties GeoJSON Properties
   * @returns {Object} cloned Properties
   */
  function cloneProperties(properties) {
      var cloned = {};
      if (!properties) return cloned;
      Object.keys(properties).forEach(function (key) {
          var value = properties[key];
          if (typeof value === 'object') {
              if (value === null) {
                  // handle null
                  cloned[key] = null;
              } else if (value.length) {
                  // handle Array
                  cloned[key] = value.map(function (item) {
                      return item;
                  });
              } else {
                  // handle generic Object
                  cloned[key] = cloneProperties(value);
              }
          } else cloned[key] = value;
      });
      return cloned;
  }

  /**
   * Clone Feature Collection
   *
   * @private
   * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection
   * @returns {FeatureCollection<any>} cloned Feature Collection
   */
  function cloneFeatureCollection(geojson) {
      var cloned = {type: 'FeatureCollection'};

      // Preserve Foreign Members
      Object.keys(geojson).forEach(function (key) {
          switch (key) {
          case 'type':
          case 'features':
              return;
          default:
              cloned[key] = geojson[key];
          }
      });
      // Add features
      cloned.features = geojson.features.map(function (feature) {
          return cloneFeature(feature);
      });
      return cloned;
  }

  /**
   * Clone Geometry
   *
   * @private
   * @param {Geometry<any>} geometry GeoJSON Geometry
   * @returns {Geometry<any>} cloned Geometry
   */
  function cloneGeometry(geometry) {
      var geom = {type: geometry.type};
      if (geometry.bbox) geom.bbox = geometry.bbox;

      if (geometry.type === 'GeometryCollection') {
          geom.geometries = geometry.geometries.map(function (geom) {
              return cloneGeometry(geom);
          });
          return geom;
      }
      geom.coordinates = deepSlice(geometry.coordinates);
      return geom;
  }

  /**
   * Deep Slice coordinates
   *
   * @private
   * @param {Coordinates} coords Coordinates
   * @returns {Coordinates} all coordinates sliced
   */
  function deepSlice(coords) {
      if (typeof coords[0] !== 'object') { return coords.slice(); }
      return coords.map(function (coord) {
          return deepSlice(coord);
      });
  }

  /**
   * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.
   *
   * @name getCoord
   * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers
   * @returns {Array<number>} coordinates
   * @example
   * var pt = turf.point([10, 10]);
   *
   * var coord = turf.getCoord(pt);
   * //= [10, 10]
   */
  function getCoord(coord) {
      if (!coord) throw new Error('coord is required');
      if (coord.type === 'Feature' && coord.geometry !== null && coord.geometry.type === 'Point') return coord.geometry.coordinates;
      if (coord.type === 'Point') return coord.coordinates;
      if (Array.isArray(coord) && coord.length >= 2 && coord[0].length === undefined && coord[1].length === undefined) return coord;

      throw new Error('coord must be GeoJSON Point or an Array of numbers');
  }

  /**
   * Unwrap coordinates from a Feature, Geometry Object or an Array
   *
   * @name getCoords
   * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array
   * @returns {Array<any>} coordinates
   * @example
   * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);
   *
   * var coords = turf.getCoords(poly);
   * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]
   */
  function getCoords(coords) {
      if (!coords) throw new Error('coords is required');

      // Feature
      if (coords.type === 'Feature' && coords.geometry !== null) return coords.geometry.coordinates;

      // Geometry
      if (coords.coordinates) return coords.coordinates;

      // Array of numbers
      if (Array.isArray(coords)) return coords;

      throw new Error('coords must be GeoJSON Feature, Geometry Object or an Array');
  }

  //http://en.wikipedia.org/wiki/Haversine_formula
  //http://www.movable-type.co.uk/scripts/latlong.html

  /**
   * Calculates the distance between two {@link Point|points} in degrees, radians,
   * miles, or kilometers. This uses the
   * [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula)
   * to account for global curvature.
   *
   * @name distance
   * @param {Coord} from origin point
   * @param {Coord} to destination point
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers
   * @returns {number} distance between the two points
   * @example
   * var from = turf.point([-75.343, 39.984]);
   * var to = turf.point([-75.534, 39.123]);
   * var options = {units: 'miles'};
   *
   * var distance = turf.distance(from, to, options);
   *
   * //addToMap
   * var addToMap = [from, to];
   * from.properties.distance = distance;
   * to.properties.distance = distance;
   */
  function distance(from, to, options) {
      // Optional parameters
      options = options || {};
      if (!isObject(options)) throw new Error('options is invalid');
      var units = options.units;

      var coordinates1 = getCoord(from);
      var coordinates2 = getCoord(to);
      var dLat = degreesToRadians((coordinates2[1] - coordinates1[1]));
      var dLon = degreesToRadians((coordinates2[0] - coordinates1[0]));
      var lat1 = degreesToRadians(coordinates1[1]);
      var lat2 = degreesToRadians(coordinates2[1]);

      var a = Math.pow(Math.sin(dLat / 2), 2) +
            Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);

      return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), units);
  }

  /**
   * Takes a reference {@link Point|point} and a FeatureCollection of Features
   * with Point geometries and returns the
   * point from the FeatureCollection closest to the reference. This calculation
   * is geodesic.
   *
   * @name nearestPoint
   * @param {Coord} targetPoint the reference point
   * @param {FeatureCollection<Point>} points against input point set
   * @returns {Feature<Point>} the closest point in the set to the reference point
   * @example
   * var targetPoint = turf.point([28.965797, 41.010086], {"marker-color": "#0F0"});
   * var points = turf.featureCollection([
   *     turf.point([28.973865, 41.011122]),
   *     turf.point([28.948459, 41.024204]),
   *     turf.point([28.938674, 41.013324])
   * ]);
   *
   * var nearest = turf.nearestPoint(targetPoint, points);
   *
   * //addToMap
   * var addToMap = [targetPoint, points, nearest];
   * nearest.properties['marker-color'] = '#F00';
   */
  function nearestPoint(targetPoint, points) {
      // Input validation
      if (!targetPoint) throw new Error('targetPoint is required');
      if (!points) throw new Error('points is required');

      var nearest;
      var minDist = Infinity;
      featureEach(points, function (pt, featureIndex) {
          var distanceToPoint = distance(targetPoint, pt);
          if (distanceToPoint < minDist) {
              nearest = clone(pt);
              nearest.properties.featureIndex = featureIndex;
              nearest.properties.distanceToPoint = distanceToPoint;
              minDist = distanceToPoint;
          }

      });
      return nearest;
  }

  // http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule
  // modified from: https://github.com/substack/point-in-polygon/blob/master/index.js
  // which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html

  /**
   * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point resides inside the polygon. The polygon can
   * be convex or concave. The function accounts for holes.
   *
   * @name booleanPointInPolygon
   * @param {Coord} point input point
   * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false.
   * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon
   * @example
   * var pt = turf.point([-77, 44]);
   * var poly = turf.polygon([[
   *   [-81, 41],
   *   [-81, 47],
   *   [-72, 47],
   *   [-72, 41],
   *   [-81, 41]
   * ]]);
   *
   * turf.booleanPointInPolygon(pt, poly);
   * //= true
   */
  function booleanPointInPolygon(point, polygon, options) {
      // Optional parameters
      options = options || {};
      if (typeof options !== 'object') throw new Error('options is invalid');
      var ignoreBoundary = options.ignoreBoundary;

      // validation
      if (!point) throw new Error('point is required');
      if (!polygon) throw new Error('polygon is required');

      var pt = getCoord(point);
      var polys = getCoords(polygon);
      var type = (polygon.geometry) ? polygon.geometry.type : polygon.type;
      var bbox = polygon.bbox;

      // Quick elimination if point is not inside bbox
      if (bbox && inBBox(pt, bbox) === false) return false;

      // normalize to multipolygon
      if (type === 'Polygon') polys = [polys];

      for (var i = 0, insidePoly = false; i < polys.length && !insidePoly; i++) {
          // check if it is in the outer ring first
          if (inRing(pt, polys[i][0], ignoreBoundary)) {
              var inHole = false;
              var k = 1;
              // check for the point in any of the holes
              while (k < polys[i].length && !inHole) {
                  if (inRing(pt, polys[i][k], !ignoreBoundary)) {
                      inHole = true;
                  }
                  k++;
              }
              if (!inHole) insidePoly = true;
          }
      }
      return insidePoly;
  }

  /**
   * inRing
   *
   * @private
   * @param {Array<number>} pt [x,y]
   * @param {Array<Array<number>>} ring [[x,y], [x,y],..]
   * @param {boolean} ignoreBoundary ignoreBoundary
   * @returns {boolean} inRing
   */
  function inRing(pt, ring, ignoreBoundary) {
      var isInside = false;
      if (ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) ring = ring.slice(0, ring.length - 1);

      for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {
          var xi = ring[i][0], yi = ring[i][1];
          var xj = ring[j][0], yj = ring[j][1];
          var onBoundary = (pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0) &&
              ((xi - pt[0]) * (xj - pt[0]) <= 0) && ((yi - pt[1]) * (yj - pt[1]) <= 0);
          if (onBoundary) return !ignoreBoundary;
          var intersect = ((yi > pt[1]) !== (yj > pt[1])) &&
          (pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi);
          if (intersect) isInside = !isInside;
      }
      return isInside;
  }

  /**
   * inBBox
   *
   * @private
   * @param {Position} pt point [x,y]
   * @param {BBox} bbox BBox [west, south, east, north]
   * @returns {boolean} true/false if point is inside BBox
   */
  function inBBox(pt, bbox) {
      return bbox[0] <= pt[0] &&
             bbox[1] <= pt[1] &&
             bbox[2] >= pt[0] &&
             bbox[3] >= pt[1];
  }

  /**
   * Takes a Feature or FeatureCollection and returns a {@link Point} guaranteed to be on the surface of the feature.
   *
   * * Given a {@link Polygon}, the point will be in the area of the polygon
   * * Given a {@link LineString}, the point will be along the string
   * * Given a {@link Point}, the point will the same as the input
   *
   * @name pointOnFeature
   * @param {GeoJSON} geojson any Feature or FeatureCollection
   * @returns {Feature<Point>} a point on the surface of `input`
   * @example
   * var polygon = turf.polygon([[
   *   [116, -36],
   *   [131, -32],
   *   [146, -43],
   *   [155, -25],
   *   [133, -9],
   *   [111, -22],
   *   [116, -36]
   * ]]);
   *
   * var pointOnPolygon = turf.pointOnFeature(polygon);
   *
   * //addToMap
   * var addToMap = [polygon, pointOnPolygon];
   */
  function pointOnFeature(geojson) {
      // normalize
      var fc = normalize(geojson);

      // get centroid
      var cent = center(fc);

      // check to see if centroid is on surface
      var onSurface = false;
      var i = 0;
      while (!onSurface && i < fc.features.length) {
          var geom = fc.features[i].geometry;
          var x, y, x1, y1, x2, y2, k;
          var onLine = false;
          if (geom.type === 'Point') {
              if (cent.geometry.coordinates[0] === geom.coordinates[0] &&
                  cent.geometry.coordinates[1] === geom.coordinates[1]) {
                  onSurface = true;
              }
          } else if (geom.type === 'MultiPoint') {
              var onMultiPoint = false;
              k = 0;
              while (!onMultiPoint && k < geom.coordinates.length) {
                  if (cent.geometry.coordinates[0] === geom.coordinates[k][0] &&
            cent.geometry.coordinates[1] === geom.coordinates[k][1]) {
                      onSurface = true;
                      onMultiPoint = true;
                  }
                  k++;
              }
          } else if (geom.type === 'LineString') {
              k = 0;
              while (!onLine && k < geom.coordinates.length - 1) {
                  x = cent.geometry.coordinates[0];
                  y = cent.geometry.coordinates[1];
                  x1 = geom.coordinates[k][0];
                  y1 = geom.coordinates[k][1];
                  x2 = geom.coordinates[k + 1][0];
                  y2 = geom.coordinates[k + 1][1];
                  if (pointOnSegment(x, y, x1, y1, x2, y2)) {
                      onLine = true;
                      onSurface = true;
                  }
                  k++;
              }
          } else if (geom.type === 'MultiLineString') {
              var j = 0;
              while (j < geom.coordinates.length) {
                  onLine = false;
                  k = 0;
                  var line = geom.coordinates[j];
                  while (!onLine && k < line.length - 1) {
                      x = cent.geometry.coordinates[0];
                      y = cent.geometry.coordinates[1];
                      x1 = line[k][0];
                      y1 = line[k][1];
                      x2 = line[k + 1][0];
                      y2 = line[k + 1][1];
                      if (pointOnSegment(x, y, x1, y1, x2, y2)) {
                          onLine = true;
                          onSurface = true;
                      }
                      k++;
                  }
                  j++;
              }
          } else if (geom.type === 'Polygon' || geom.type === 'MultiPolygon') {
              if (booleanPointInPolygon(cent, geom)) {
                  onSurface = true;
              }
          }
          i++;
      }
      if (onSurface) {
          return cent;
      } else {
          var vertices = featureCollection([]);
          for (i = 0; i < fc.features.length; i++) {
              vertices.features = vertices.features.concat(explode(fc.features[i]).features);
          }
          // Remove distanceToPoint properties from nearestPoint()
          return point(nearestPoint(cent, vertices).geometry.coordinates);
      }
  }

  /**
   * Normalizes any GeoJSON to a FeatureCollection
   *
   * @private
   * @name normalize
   * @param {GeoJSON} geojson Any GeoJSON
   * @returns {FeatureCollection} FeatureCollection
   */
  function normalize(geojson) {
      if (geojson.type !== 'FeatureCollection') {
          if (geojson.type !== 'Feature') {
              return featureCollection([feature(geojson)]);
          }
          return featureCollection([geojson]);
      }
      return geojson;
  }

  function pointOnSegment(x, y, x1, y1, x2, y2) {
      var ab = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      var ap = Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));
      var pb = Math.sqrt((x2 - x) * (x2 - x) + (y2 - y) * (y2 - y));
      return ab === ap + pb;
  }

  /**
   * @param {number|number[]} lonOrCoordinates
   * @param {number} [lat]
   * @return {Point}
   */

  function createPointGeom(lonOrCoordinates, lat) {
    var coordinates = Array.isArray(lonOrCoordinates) ? lonOrCoordinates : [lonOrCoordinates, lat];
    return new Point(coordinates);
  }
  /**
   * @param {Array<number[]>} points
   * @returns {LineString}
   */

  function createLineGeom(points) {
    return new LineString(points);
  }
  /**
   * @param {Array<Array<number[]>>} rings
   * @returns {Polygon}
   */

  function createPolygonGeom(rings) {
    return new Polygon__default(rings);
  }
  /**
   * @param {Array<number[]>} points
   * @returns {MultiPoint}
   */

  function createMultiPointGeom(points) {
    return new MultiPoint(points);
  }
  /**
   * @param {Array<Array<number[]>>} lines
   * @returns {MultiLineString}
   */

  function createMultiLineGeom(lines) {
    return new MultiLineString(lines);
  }
  /**
   * @param {Array<Array<Array<number[]>>>} polygons
   * @returns {MultiPolygon}
   */

  function createMultiPolygonGeom(polygons) {
    return new MultiPolygon(polygons);
  }
  /**
   * @param {Geometry[]} geoms
   * @returns {GeometryCollection}
   */

  function createGeomCollection(geoms) {
    return new GeometryCollection(geoms);
  }
  /**
   * @param {Coordinate|number[]} center
   * @param {number} radius
   * @return {Polygon}
   */

  function createCircularPolygon(center, radius) {
    return Polygon.circular(center, radius);
  }
  /**
   * @param {Geometry|Object} geom
   * @return {boolean}
   * @throws {Error}
   */

  function isMultiGeom(geom) {
    var multiTypes = [GEOMETRY_TYPE.MULTI_POINT, GEOMETRY_TYPE.MULTI_LINE_STRING, GEOMETRY_TYPE.MULTI_POLYGON, GEOMETRY_TYPE.GEOMETRY_COLLECTION];
    return multiTypes.includes(geom.type || geom.getType());
  }
  /**
   * @param {Geometry|Object} geom
   * @return {SimpleGeometry|Object}
   * @throws {Error}
   */

  function toSimpleGeom(geom) {
    if (geom instanceof Circle) {
      geom = createPointGeom(geom.getCenter());
    }

    var type = geom.type || geom.getType();
    var complexTypes = [GEOMETRY_TYPE.GEOMETRY_COLLECTION];

    if (complexTypes.includes(type) === false) {
      return geom;
    }

    return (geom.geometries || geom.getGeometries())[0];
  }
  /**
   * @param {Geometry|Object} geom
   * @return {Coordinate|undefined}
   */

  function findPointOnSurface(geom) {
    var simpleGeom = toSimpleGeom(geom);
    var pointFeature = pointOnFeature({
      type: simpleGeom.type || simpleGeom.getType(),
      coordinates: simpleGeom.coordinates || simpleGeom.getCoordinates()
    });

    if (pointFeature && pointFeature.geometry) {
      return pointFeature.geometry.coordinates;
    }
  }

  var geomHelper = /*#__PURE__*/Object.freeze({
    createPointGeom: createPointGeom,
    createLineGeom: createLineGeom,
    createPolygonGeom: createPolygonGeom,
    createMultiPointGeom: createMultiPointGeom,
    createMultiLineGeom: createMultiLineGeom,
    createMultiPolygonGeom: createMultiPolygonGeom,
    createGeomCollection: createGeomCollection,
    createCircularPolygon: createCircularPolygon,
    isMultiGeom: isMultiGeom,
    toSimpleGeom: toSimpleGeom,
    findPointOnSurface: findPointOnSurface
  });

  var _transforms;
  /**
   * @param {Object} options
   * @return {Projection}
   */

  function createProj(options) {
    return new Projection(options);
  }
  /**
   * @param {number[]} coordinate
   * @param {ProjectionLike} [projection]
   * @return {Coordinate|number[]}
   */

  function pointToLonLat(coordinate) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return proj.toLonLat(coordinate, projection);
  }
  /**
   * @param {number[]} coordinate
   * @param {ProjectionLike} [projection]
   * @return {number[]}
   */

  function pointFromLonLat(coordinate) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return proj.fromLonLat(coordinate, projection);
  }
  function transformPoint(coordinate, sourceProjection, destProjection) {
    return proj.transform(coordinate, sourceProjection, destProjection);
  }
  /**
   * @param {Array<number[]>} coordinates
   * @param {ProjectionLike} [projection]
   * @return {Array<number[]>}
   */

  function lineToLonLat(coordinates) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return coordinates.map(function (point) {
      return pointToLonLat(point, projection);
    });
  }
  /**
   * @param {Array<number[]>} coordinates
   * @param {ProjectionLike} [projection]
   * @return {Array<number[]>}
   */

  function lineFromLonLat(coordinates) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return coordinates.map(function (point) {
      return pointFromLonLat(point, projection);
    });
  }
  function transformLine(coordinates, sourceProjection, destProjection) {
    return coordinates.map(function (point) {
      return proj.transform(point, sourceProjection, destProjection);
    });
  }
  /**
   * @param {Array<Array<number[]>>} coordinates
   * @param {ProjectionLike} [projection]
   * @return {Array<Array<number[]>>}
   */

  function polygonToLonLat(coordinates) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return coordinates.map(function (line) {
      return lineToLonLat(line, projection);
    });
  }
  /**
   * @param {Array<Array<number[]>>} coordinates
   * @param {ProjectionLike} [projection]
   * @return {Array<Array<number[]>>}
   */

  function polygonFromLonLat(coordinates) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return coordinates.map(function (line) {
      return lineFromLonLat(line, projection);
    });
  }
  function transformPolygon(coordinates, sourceProjection, destProjection) {
    return coordinates.map(function (line) {
      return transformLine(line, sourceProjection, destProjection);
    });
  }
  /**
   * @param {Array<number[]>} coordinates
   * @param {ProjectionLike} [projection]
   * @return {Array<number[]>}
   */

  function multiPointToLonLat(coordinates) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return coordinates.map(function (point) {
      return pointToLonLat(point, projection);
    });
  }
  /**
   * @param {Array<number[]>} coordinates
   * @param {ProjectionLike} [projection]
   * @return {Array<number[]>}
   */

  function multiPointFromLonLat(coordinates) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return coordinates.map(function (point) {
      return pointFromLonLat(point, projection);
    });
  }
  function transformMultiPoint(coordinates, sourceProjection, destProjection) {
    return coordinates.map(function (point) {
      return transformPoint(point, sourceProjection, destProjection);
    });
  }
  /**
   * @param {Array<Array<number[]>>} coordinates
   * @param {ProjectionLike} [projection]
   * @return {Array<Array<number[]>>}
   */

  function multiLineToLonLat(coordinates) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return coordinates.map(function (line) {
      return lineToLonLat(line, projection);
    });
  }
  /**
   * @param {Array<Array<number[]>>} coordinates
   * @param {ProjectionLike} [projection]
   * @return {Array<Array<number[]>>}
   */

  function multiLineFromLonLat(coordinates) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return coordinates.map(function (line) {
      return lineFromLonLat(line, projection);
    });
  }
  function transformMultiLine(coordinates, sourceProjection, destProjection) {
    return coordinates.map(function (line) {
      return transformLine(line, sourceProjection, destProjection);
    });
  }
  /**
   * @param {Array<Array<Array<number[]>>>} coordinates
   * @param {ProjectionLike} projection
   * @return {Array<Array<Array<number[]>>>}
   */

  function multiPolygonToLonLat(coordinates) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return coordinates.map(function (polygon) {
      return polygonToLonLat(polygon, projection);
    });
  }
  /**
   * @param {Array<Array<Array<number[]>>>} coordinates
   * @param {ProjectionLike} projection
   * @return {Array<Array<Array<number[]>>>}
   */

  function multiPolygonFromLonLat(coordinates) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return coordinates.map(function (polygon) {
      return polygonFromLonLat(polygon, projection);
    });
  }
  function transformMultiPolygon(coordinates, sourceProjection, destProjection) {
    return coordinates.map(function (polygon) {
      return transformPolygon(polygon, sourceProjection, destProjection);
    });
  }
  /**
   * Transforms by geom type
   * @type {Object<string, function>}
   */

  var transforms = (_transforms = {}, _defineProperty(_transforms, GEOMETRY_TYPE.POINT, {
    toLonLat: pointToLonLat,
    fromLonLat: pointFromLonLat,
    transform: transformPoint
  }), _defineProperty(_transforms, GEOMETRY_TYPE.LINE_STRING, {
    toLonLat: lineToLonLat,
    fromLonLat: lineFromLonLat,
    transform: transformLine
  }), _defineProperty(_transforms, GEOMETRY_TYPE.POLYGON, {
    toLonLat: polygonToLonLat,
    fromLonLat: polygonFromLonLat,
    transform: transformPolygon
  }), _defineProperty(_transforms, GEOMETRY_TYPE.MULTI_POINT, {
    toLonLat: multiPointToLonLat,
    fromLonLat: multiPointFromLonLat,
    transform: transformMultiPoint
  }), _defineProperty(_transforms, GEOMETRY_TYPE.MULTI_LINE_STRING, {
    toLonLat: multiLineToLonLat,
    fromLonLat: multiLineFromLonLat,
    transform: transformMultiLine
  }), _defineProperty(_transforms, GEOMETRY_TYPE.MULTI_POLYGON, {
    toLonLat: multiPolygonToLonLat,
    fromLonLat: multiPolygonFromLonLat,
    transform: transformMultiPolygon
  }), _transforms);
  /**
   * @param {Extent} extent
   * @param {ProjectionLike} [projection=EPSG:3857]
   * @return {Extent}
   */

  function extentFromLonLat(extent$$1) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return proj.transformExtent(extent$$1, EPSG_4326, projection);
  }
  /**
   * @param {Extent} extent
   * @param {ProjectionLike} [projection=EPSG:3857]
   * @return {Extent}
   */

  function extentToLonLat(extent$$1) {
    var projection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSG_3857;
    return proj.transformExtent(extent$$1, projection, EPSG_4326);
  }

  /**
   * @module ol/util
   */

  /**
   * @return {?} Any return.
   */
  function abstract() {
    return /** @type {?} */ ((function() {
      throw new Error('Unimplemented abstract method.');
    })());
  }

  /**
   * Counter for getUid.
   * @type {number}
   * @private
   */
  var uidCounter_ = 0;

  /**
   * Gets a unique ID for an object. This mutates the object so that further calls
   * with the same object as a parameter returns the same value. Unique IDs are generated
   * as a strictly increasing sequence. Adapted from goog.getUid.
   *
   * @param {Object} obj The object to get the unique ID for.
   * @return {string} The unique ID for the object.
   * @function module:ol.getUid
   * @api
   */
  function getUid(obj) {
    return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
  }

  /**
   * OpenLayers version.
   * @type {string}
   */
  var VERSION = '5.3.2';

  /**
   * @module ol/AssertionError
   */

  /**
   * Error object thrown when an assertion failed. This is an ECMA-262 Error,
   * extended with a `code` property.
   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
   */
  var AssertionError = /*@__PURE__*/(function (Error) {
    function AssertionError(code) {
      var path = 'v' + VERSION.split('-')[0];
      var message = 'Assertion failed. See https://openlayers.org/en/' + path +
      '/doc/errors/#' + code + ' for details.';

      Error.call(this, message);

      /**
       * Error code. The meaning of the code can be found on
       * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
       * the version found in the OpenLayers script's header comment if a version
       * other than the latest is used).
       * @type {number}
       * @api
       */
      this.code = code;

      /**
       * @type {string}
       */
      this.name = 'AssertionError';

      // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
      this.message = message;
    }

    if ( Error ) AssertionError.__proto__ = Error;
    AssertionError.prototype = Object.create( Error && Error.prototype );
    AssertionError.prototype.constructor = AssertionError;

    return AssertionError;
  }(Error));

  /**
   * @module ol/CollectionEventType
   */

  /**
   * @enum {string}
   */
  var CollectionEventType = {
    /**
     * Triggered when an item is added to the collection.
     * @event module:ol/Collection.CollectionEvent#add
     * @api
     */
    ADD: 'add',
    /**
     * Triggered when an item is removed from the collection.
     * @event module:ol/Collection.CollectionEvent#remove
     * @api
     */
    REMOVE: 'remove'
  };

  /**
   * @module ol/ObjectEventType
   */

  /**
   * @enum {string}
   */
  var ObjectEventType = {
    /**
     * Triggered when a property is changed.
     * @event module:ol/Object.ObjectEvent#propertychange
     * @api
     */
    PROPERTYCHANGE: 'propertychange'
  };

  /**
   * @module ol/obj
   */


  /**
   * Polyfill for Object.assign().  Assigns enumerable and own properties from
   * one or more source objects to a target object.
   * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.
   *
   * @param {!Object} target The target object.
   * @param {...Object} var_sources The source object(s).
   * @return {!Object} The modified target object.
   */
  var assign = (typeof Object.assign === 'function') ? Object.assign : function(target, var_sources) {
    var arguments$1 = arguments;

    if (target === undefined || target === null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }

    var output = Object(target);
    for (var i = 1, ii = arguments.length; i < ii; ++i) {
      var source = arguments$1[i];
      if (source !== undefined && source !== null) {
        for (var key in source) {
          if (source.hasOwnProperty(key)) {
            output[key] = source[key];
          }
        }
      }
    }
    return output;
  };


  /**
   * Removes all properties from an object.
   * @param {Object} object The object to clear.
   */
  function clear(object) {
    for (var property in object) {
      delete object[property];
    }
  }


  /**
   * Get an array of property values from an object.
   * @param {Object<K,V>} object The object from which to get the values.
   * @return {!Array<V>} The property values.
   * @template K,V
   */
  function getValues(object) {
    var values = [];
    for (var property in object) {
      values.push(object[property]);
    }
    return values;
  }


  /**
   * Determine if an object has any properties.
   * @param {Object} object The object to check.
   * @return {boolean} The object is empty.
   */
  function isEmpty$1(object) {
    var property;
    for (property in object) {
      return false;
    }
    return !property;
  }

  /**
   * @module ol/events
   */


  /**
   * Key to use with {@link module:ol/Observable~Observable#unByKey}.
   * @typedef {Object} EventsKey
   * @property {Object} [bindTo]
   * @property {ListenerFunction} [boundListener]
   * @property {boolean} callOnce
   * @property {number} [deleteIndex]
   * @property {ListenerFunction} listener
   * @property {import("./events/Target.js").EventTargetLike} target
   * @property {string} type
   * @api
   */


  /**
   * Listener function. This function is called with an event object as argument.
   * When the function returns `false`, event propagation will stop.
   *
   * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
   * @api
   */


  /**
   * @param {EventsKey} listenerObj Listener object.
   * @return {ListenerFunction} Bound listener.
   */
  function bindListener(listenerObj) {
    var boundListener = function(evt) {
      var listener = listenerObj.listener;
      var bindTo = listenerObj.bindTo || listenerObj.target;
      if (listenerObj.callOnce) {
        unlistenByKey(listenerObj);
      }
      return listener.call(bindTo, evt);
    };
    listenerObj.boundListener = boundListener;
    return boundListener;
  }


  /**
   * Finds the matching {@link module:ol/events~EventsKey} in the given listener
   * array.
   *
   * @param {!Array<!EventsKey>} listeners Array of listeners.
   * @param {!Function} listener The listener function.
   * @param {Object=} opt_this The `this` value inside the listener.
   * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching
   *     listener, for {@link module:ol/events~unlistenByKey}.
   * @return {EventsKey|undefined} The matching listener object.
   */
  function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {
    var listenerObj;
    for (var i = 0, ii = listeners.length; i < ii; ++i) {
      listenerObj = listeners[i];
      if (listenerObj.listener === listener &&
          listenerObj.bindTo === opt_this) {
        if (opt_setDeleteIndex) {
          listenerObj.deleteIndex = i;
        }
        return listenerObj;
      }
    }
    return undefined;
  }


  /**
   * @param {import("./events/Target.js").EventTargetLike} target Target.
   * @param {string} type Type.
   * @return {Array<EventsKey>|undefined} Listeners.
   */
  function getListeners(target, type) {
    var listenerMap = getListenerMap(target);
    return listenerMap ? listenerMap[type] : undefined;
  }


  /**
   * Get the lookup of listeners.
   * @param {Object} target Target.
   * @param {boolean=} opt_create If a map should be created if it doesn't exist.
   * @return {!Object<string, Array<EventsKey>>} Map of
   *     listeners by event type.
   */
  function getListenerMap(target, opt_create) {
    var listenerMap = target.ol_lm;
    if (!listenerMap && opt_create) {
      listenerMap = target.ol_lm = {};
    }
    return listenerMap;
  }


  /**
   * Remove the listener map from a target.
   * @param {Object} target Target.
   */
  function removeListenerMap(target) {
    delete target.ol_lm;
  }


  /**
   * Clean up all listener objects of the given type.  All properties on the
   * listener objects will be removed, and if no listeners remain in the listener
   * map, it will be removed from the target.
   * @param {import("./events/Target.js").EventTargetLike} target Target.
   * @param {string} type Type.
   */
  function removeListeners(target, type) {
    var listeners = getListeners(target, type);
    if (listeners) {
      for (var i = 0, ii = listeners.length; i < ii; ++i) {
        /** @type {import("./events/Target.js").default} */ (target).
          removeEventListener(type, listeners[i].boundListener);
        clear(listeners[i]);
      }
      listeners.length = 0;
      var listenerMap = getListenerMap(target);
      if (listenerMap) {
        delete listenerMap[type];
        if (Object.keys(listenerMap).length === 0) {
          removeListenerMap(target);
        }
      }
    }
  }


  /**
   * Registers an event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` to a `this` object, and returns
   * a key for use with {@link module:ol/events~unlistenByKey}.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @param {boolean=} opt_once If true, add the listener as one-off listener.
   * @return {EventsKey} Unique key for the listener.
   */
  function listen(target, type, listener, opt_this, opt_once) {
    var listenerMap = getListenerMap(target, true);
    var listeners = listenerMap[type];
    if (!listeners) {
      listeners = listenerMap[type] = [];
    }
    var listenerObj = findListener(listeners, listener, opt_this, false);
    if (listenerObj) {
      if (!opt_once) {
        // Turn one-off listener into a permanent one.
        listenerObj.callOnce = false;
      }
    } else {
      listenerObj = /** @type {EventsKey} */ ({
        bindTo: opt_this,
        callOnce: !!opt_once,
        listener: listener,
        target: target,
        type: type
      });
      /** @type {import("./events/Target.js").default} */ (target).
        addEventListener(type, bindListener(listenerObj));
      listeners.push(listenerObj);
    }

    return listenerObj;
  }


  /**
   * Registers a one-off event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` as self-unregistering listener
   * to a `this` object, and returns a key for use with
   * {@link module:ol/events~unlistenByKey} in case the listener needs to be
   * unregistered before it is called.
   *
   * When {@link module:ol/events~listen} is called with the same arguments after this
   * function, the self-unregistering listener will be turned into a permanent
   * listener.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @return {EventsKey} Key for unlistenByKey.
   */
  function listenOnce(target, type, listener, opt_this) {
    return listen(target, type, listener, opt_this, true);
  }


  /**
   * Unregisters an event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * To return a listener, this function needs to be called with the exact same
   * arguments that were used for a previous {@link module:ol/events~listen} call.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   */
  function unlisten(target, type, listener, opt_this) {
    var listeners = getListeners(target, type);
    if (listeners) {
      var listenerObj = findListener(listeners, listener, opt_this, true);
      if (listenerObj) {
        unlistenByKey(listenerObj);
      }
    }
  }


  /**
   * Unregisters event listeners on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * The argument passed to this function is the key returned from
   * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.
   *
   * @param {EventsKey} key The key.
   */
  function unlistenByKey(key) {
    if (key && key.target) {
      /** @type {import("./events/Target.js").default} */ (key.target).
        removeEventListener(key.type, key.boundListener);
      var listeners = getListeners(key.target, key.type);
      if (listeners) {
        var i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);
        if (i !== -1) {
          listeners.splice(i, 1);
        }
        if (listeners.length === 0) {
          removeListeners(key.target, key.type);
        }
      }
      clear(key);
    }
  }


  /**
   * Unregisters all event listeners on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * @param {import("./events/Target.js").EventTargetLike} target Target.
   */
  function unlistenAll(target) {
    var listenerMap = getListenerMap(target);
    if (listenerMap) {
      for (var type in listenerMap) {
        removeListeners(target, type);
      }
    }
  }

  /**
   * @module ol/Disposable
   */

  /**
   * @classdesc
   * Objects that need to clean up after themselves.
   */
  var Disposable = function Disposable() {
    /**
     * The object has already been disposed.
     * @type {boolean}
     * @private
     */
    this.disposed_ = false;
  };

  /**
   * Clean up.
   */
  Disposable.prototype.dispose = function dispose () {
    if (!this.disposed_) {
      this.disposed_ = true;
      this.disposeInternal();
    }
  };

  /**
   * Extension point for disposable objects.
   * @protected
   */
  Disposable.prototype.disposeInternal = function disposeInternal () {};

  /**
   * @module ol/functions
   */

  /**
   * Always returns true.
   * @returns {boolean} true.
   */
  function TRUE() {
    return true;
  }

  /**
   * Always returns false.
   * @returns {boolean} false.
   */
  function FALSE() {
    return false;
  }

  /**
   * A reusable function, used e.g. as a default for callbacks.
   *
   * @return {void} Nothing.
   */
  function VOID() {}

  /**
   * @module ol/events/Event
   */

  /**
   * @classdesc
   * Stripped down implementation of the W3C DOM Level 2 Event interface.
   * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
   *
   * This implementation only provides `type` and `target` properties, and
   * `stopPropagation` and `preventDefault` methods. It is meant as base class
   * for higher level events defined in the library, and works with
   * {@link module:ol/events/Target~Target}.
   */
  var Event = function Event(type) {

    /**
     * @type {boolean}
     */
    this.propagationStopped;

    /**
     * The event type.
     * @type {string}
     * @api
     */
    this.type = type;

    /**
     * The event target.
     * @type {Object}
     * @api
     */
    this.target = null;
  };

  /**
   * Stop event propagation.
   * @api
   */
  Event.prototype.preventDefault = function preventDefault () {
    this.propagationStopped = true;
  };

  /**
   * Stop event propagation.
   * @api
   */
  Event.prototype.stopPropagation = function stopPropagation () {
    this.propagationStopped = true;
  };


  /**
   * @param {Event|import("./Event.js").default} evt Event
   */
  function stopPropagation(evt) {
    evt.stopPropagation();
  }

  /**
   * @module ol/events/Target
   */


  /**
   * @typedef {EventTarget|Target} EventTargetLike
   */


  /**
   * @classdesc
   * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
   * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
   *
   * There are two important simplifications compared to the specification:
   *
   * 1. The handling of `useCapture` in `addEventListener` and
   *    `removeEventListener`. There is no real capture model.
   * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
   *    There is no event target hierarchy. When a listener calls
   *    `stopPropagation` or `preventDefault` on an event object, it means that no
   *    more listeners after this one will be called. Same as when the listener
   *    returns false.
   */
  var Target = /*@__PURE__*/(function (Disposable$$1) {
    function Target() {

      Disposable$$1.call(this);

      /**
       * @private
       * @type {!Object<string, number>}
       */
      this.pendingRemovals_ = {};

      /**
       * @private
       * @type {!Object<string, number>}
       */
      this.dispatching_ = {};

      /**
       * @private
       * @type {!Object<string, Array<import("../events.js").ListenerFunction>>}
       */
      this.listeners_ = {};

    }

    if ( Disposable$$1 ) Target.__proto__ = Disposable$$1;
    Target.prototype = Object.create( Disposable$$1 && Disposable$$1.prototype );
    Target.prototype.constructor = Target;

    /**
     * @param {string} type Type.
     * @param {import("../events.js").ListenerFunction} listener Listener.
     */
    Target.prototype.addEventListener = function addEventListener (type, listener) {
      var listeners = this.listeners_[type];
      if (!listeners) {
        listeners = this.listeners_[type] = [];
      }
      if (listeners.indexOf(listener) === -1) {
        listeners.push(listener);
      }
    };

    /**
     * Dispatches an event and calls all listeners listening for events
     * of this type. The event parameter can either be a string or an
     * Object with a `type` property.
     *
     * @param {{type: string,
     *     target: (EventTargetLike|undefined),
     *     propagationStopped: (boolean|undefined)}|
     *     import("./Event.js").default|string} event Event object.
     * @return {boolean|undefined} `false` if anyone called preventDefault on the
     *     event object or if any of the listeners returned false.
     * @api
     */
    Target.prototype.dispatchEvent = function dispatchEvent (event) {
      var evt = typeof event === 'string' ? new Event(event) : event;
      var type = evt.type;
      evt.target = this;
      var listeners = this.listeners_[type];
      var propagate;
      if (listeners) {
        if (!(type in this.dispatching_)) {
          this.dispatching_[type] = 0;
          this.pendingRemovals_[type] = 0;
        }
        ++this.dispatching_[type];
        for (var i = 0, ii = listeners.length; i < ii; ++i) {
          if (listeners[i].call(this, evt) === false || evt.propagationStopped) {
            propagate = false;
            break;
          }
        }
        --this.dispatching_[type];
        if (this.dispatching_[type] === 0) {
          var pendingRemovals = this.pendingRemovals_[type];
          delete this.pendingRemovals_[type];
          while (pendingRemovals--) {
            this.removeEventListener(type, VOID);
          }
          delete this.dispatching_[type];
        }
        return propagate;
      }
    };

    /**
     * @inheritDoc
     */
    Target.prototype.disposeInternal = function disposeInternal () {
      unlistenAll(this);
    };

    /**
     * Get the listeners for a specified event type. Listeners are returned in the
     * order that they will be called in.
     *
     * @param {string} type Type.
     * @return {Array<import("../events.js").ListenerFunction>} Listeners.
     */
    Target.prototype.getListeners = function getListeners$$1 (type) {
      return this.listeners_[type];
    };

    /**
     * @param {string=} opt_type Type. If not provided,
     *     `true` will be returned if this event target has any listeners.
     * @return {boolean} Has listeners.
     */
    Target.prototype.hasListener = function hasListener (opt_type) {
      return opt_type ?
        opt_type in this.listeners_ :
        Object.keys(this.listeners_).length > 0;
    };

    /**
     * @param {string} type Type.
     * @param {import("../events.js").ListenerFunction} listener Listener.
     */
    Target.prototype.removeEventListener = function removeEventListener (type, listener) {
      var listeners = this.listeners_[type];
      if (listeners) {
        var index = listeners.indexOf(listener);
        if (type in this.pendingRemovals_) {
          // make listener a no-op, and remove later in #dispatchEvent()
          listeners[index] = VOID;
          ++this.pendingRemovals_[type];
        } else {
          listeners.splice(index, 1);
          if (listeners.length === 0) {
            delete this.listeners_[type];
          }
        }
      }
    };

    return Target;
  }(Disposable));

  /**
   * @module ol/events/EventType
   */

  /**
   * @enum {string}
   * @const
   */
  var EventType = {
    /**
     * Generic change event. Triggered when the revision counter is increased.
     * @event module:ol/events/Event~Event#change
     * @api
     */
    CHANGE: 'change',

    CLEAR: 'clear',
    CONTEXTMENU: 'contextmenu',
    CLICK: 'click',
    DBLCLICK: 'dblclick',
    DRAGENTER: 'dragenter',
    DRAGOVER: 'dragover',
    DROP: 'drop',
    ERROR: 'error',
    KEYDOWN: 'keydown',
    KEYPRESS: 'keypress',
    LOAD: 'load',
    MOUSEDOWN: 'mousedown',
    MOUSEMOVE: 'mousemove',
    MOUSEOUT: 'mouseout',
    MOUSEUP: 'mouseup',
    MOUSEWHEEL: 'mousewheel',
    MSPOINTERDOWN: 'MSPointerDown',
    RESIZE: 'resize',
    TOUCHSTART: 'touchstart',
    TOUCHMOVE: 'touchmove',
    TOUCHEND: 'touchend',
    WHEEL: 'wheel'
  };

  /**
   * @module ol/Observable
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * An event target providing convenient methods for listener registration
   * and unregistration. A generic `change` event is always available through
   * {@link module:ol/Observable~Observable#changed}.
   *
   * @fires import("./events/Event.js").Event
   * @api
   */
  var Observable = /*@__PURE__*/(function (EventTarget) {
    function Observable() {

      EventTarget.call(this);

      /**
       * @private
       * @type {number}
       */
      this.revision_ = 0;

    }

    if ( EventTarget ) Observable.__proto__ = EventTarget;
    Observable.prototype = Object.create( EventTarget && EventTarget.prototype );
    Observable.prototype.constructor = Observable;

    /**
     * Increases the revision counter and dispatches a 'change' event.
     * @api
     */
    Observable.prototype.changed = function changed () {
      ++this.revision_;
      this.dispatchEvent(EventType.CHANGE);
    };

    /**
     * Get the version number for this object.  Each time the object is modified,
     * its version number will be incremented.
     * @return {number} Revision.
     * @api
     */
    Observable.prototype.getRevision = function getRevision () {
      return this.revision_;
    };

    /**
     * Listen for a certain type of event.
     * @param {string|Array<string>} type The event type or array of event types.
     * @param {function(?): ?} listener The listener function.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
     *     called with an array of event types as the first argument, the return
     *     will be an array of keys.
     * @api
     */
    Observable.prototype.on = function on (type, listener) {
      if (Array.isArray(type)) {
        var len = type.length;
        var keys = new Array(len);
        for (var i = 0; i < len; ++i) {
          keys[i] = listen(this, type[i], listener);
        }
        return keys;
      } else {
        return listen(this, /** @type {string} */ (type), listener);
      }
    };

    /**
     * Listen once for a certain type of event.
     * @param {string|Array<string>} type The event type or array of event types.
     * @param {function(?): ?} listener The listener function.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
     *     called with an array of event types as the first argument, the return
     *     will be an array of keys.
     * @api
     */
    Observable.prototype.once = function once (type, listener) {
      if (Array.isArray(type)) {
        var len = type.length;
        var keys = new Array(len);
        for (var i = 0; i < len; ++i) {
          keys[i] = listenOnce(this, type[i], listener);
        }
        return keys;
      } else {
        return listenOnce(this, /** @type {string} */ (type), listener);
      }
    };

    /**
     * Unlisten for a certain type of event.
     * @param {string|Array<string>} type The event type or array of event types.
     * @param {function(?): ?} listener The listener function.
     * @api
     */
    Observable.prototype.un = function un (type, listener) {
      if (Array.isArray(type)) {
        for (var i = 0, ii = type.length; i < ii; ++i) {
          unlisten(this, type[i], listener);
        }
        return;
      } else {
        unlisten(this, /** @type {string} */ (type), listener);
      }
    };

    return Observable;
  }(Target));

  /**
   * @module ol/Object
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
   */
  var ObjectEvent = /*@__PURE__*/(function (Event$$1) {
    function ObjectEvent(type, key, oldValue) {
      Event$$1.call(this, type);

      /**
       * The name of the property whose value is changing.
       * @type {string}
       * @api
       */
      this.key = key;

      /**
       * The old value. To get the new value use `e.target.get(e.key)` where
       * `e` is the event object.
       * @type {*}
       * @api
       */
      this.oldValue = oldValue;

    }

    if ( Event$$1 ) ObjectEvent.__proto__ = Event$$1;
    ObjectEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    ObjectEvent.prototype.constructor = ObjectEvent;

    return ObjectEvent;
  }(Event));


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Most non-trivial classes inherit from this.
   *
   * This extends {@link module:ol/Observable} with observable
   * properties, where each property is observable as well as the object as a
   * whole.
   *
   * Classes that inherit from this have pre-defined properties, to which you can
   * add your owns. The pre-defined properties are listed in this documentation as
   * 'Observable Properties', and have their own accessors; for example,
   * {@link module:ol/Map~Map} has a `target` property, accessed with
   * `getTarget()` and changed with `setTarget()`. Not all properties are however
   * settable. There are also general-purpose accessors `get()` and `set()`. For
   * example, `get('target')` is equivalent to `getTarget()`.
   *
   * The `set` accessors trigger a change event, and you can monitor this by
   * registering a listener. For example, {@link module:ol/View~View} has a
   * `center` property, so `view.on('change:center', function(evt) {...});` would
   * call the function whenever the value of the center property changes. Within
   * the function, `evt.target` would be the view, so `evt.target.getCenter()`
   * would return the new center.
   *
   * You can add your own observable properties with
   * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
   * You can listen for changes on that property value with
   * `object.on('change:prop', listener)`. You can get a list of all
   * properties with {@link module:ol/Object~BaseObject#getProperties}.
   *
   * Note that the observable properties are separate from standard JS properties.
   * You can, for example, give your map object a title with
   * `map.title='New title'` and with `map.set('title', 'Another title')`. The
   * first will be a `hasOwnProperty`; the second will appear in
   * `getProperties()`. Only the second is observable.
   *
   * Properties can be deleted by using the unset method. E.g.
   * object.unset('foo').
   *
   * @fires ObjectEvent
   * @api
   */
  var BaseObject = /*@__PURE__*/(function (Observable$$1) {
    function BaseObject(opt_values) {
      Observable$$1.call(this);

      // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is
      // the same as the order in which they were created.  This also helps to
      // ensure that object properties are always added in the same order, which
      // helps many JavaScript engines generate faster code.
      getUid(this);

      /**
       * @private
       * @type {!Object<string, *>}
       */
      this.values_ = {};

      if (opt_values !== undefined) {
        this.setProperties(opt_values);
      }
    }

    if ( Observable$$1 ) BaseObject.__proto__ = Observable$$1;
    BaseObject.prototype = Object.create( Observable$$1 && Observable$$1.prototype );
    BaseObject.prototype.constructor = BaseObject;

    /**
     * Gets a value.
     * @param {string} key Key name.
     * @return {*} Value.
     * @api
     */
    BaseObject.prototype.get = function get (key) {
      var value;
      if (this.values_.hasOwnProperty(key)) {
        value = this.values_[key];
      }
      return value;
    };

    /**
     * Get a list of object property names.
     * @return {Array<string>} List of property names.
     * @api
     */
    BaseObject.prototype.getKeys = function getKeys () {
      return Object.keys(this.values_);
    };

    /**
     * Get an object of all property names and values.
     * @return {Object<string, *>} Object.
     * @api
     */
    BaseObject.prototype.getProperties = function getProperties () {
      return assign({}, this.values_);
    };

    /**
     * @param {string} key Key name.
     * @param {*} oldValue Old value.
     */
    BaseObject.prototype.notify = function notify (key, oldValue) {
      var eventType;
      eventType = getChangeEventType(key);
      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
      eventType = ObjectEventType.PROPERTYCHANGE;
      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
    };

    /**
     * Sets a value.
     * @param {string} key Key name.
     * @param {*} value Value.
     * @param {boolean=} opt_silent Update without triggering an event.
     * @api
     */
    BaseObject.prototype.set = function set (key, value, opt_silent) {
      if (opt_silent) {
        this.values_[key] = value;
      } else {
        var oldValue = this.values_[key];
        this.values_[key] = value;
        if (oldValue !== value) {
          this.notify(key, oldValue);
        }
      }
    };

    /**
     * Sets a collection of key-value pairs.  Note that this changes any existing
     * properties and adds new ones (it does not remove any existing properties).
     * @param {Object<string, *>} values Values.
     * @param {boolean=} opt_silent Update without triggering an event.
     * @api
     */
    BaseObject.prototype.setProperties = function setProperties (values, opt_silent) {
      for (var key in values) {
        this.set(key, values[key], opt_silent);
      }
    };

    /**
     * Unsets a property.
     * @param {string} key Key name.
     * @param {boolean=} opt_silent Unset without triggering an event.
     * @api
     */
    BaseObject.prototype.unset = function unset (key, opt_silent) {
      if (key in this.values_) {
        var oldValue = this.values_[key];
        delete this.values_[key];
        if (!opt_silent) {
          this.notify(key, oldValue);
        }
      }
    };

    return BaseObject;
  }(Observable));


  /**
   * @type {Object<string, string>}
   */
  var changeEventTypeCache = {};


  /**
   * @param {string} key Key name.
   * @return {string} Change name.
   */
  function getChangeEventType(key) {
    return changeEventTypeCache.hasOwnProperty(key) ?
      changeEventTypeCache[key] :
      (changeEventTypeCache[key] = 'change:' + key);
  }

  /**
   * @module ol/Collection
   */


  /**
   * @enum {string}
   * @private
   */
  var Property = {
    LENGTH: 'length'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
   * type.
   */
  var CollectionEvent = /*@__PURE__*/(function (Event$$1) {
    function CollectionEvent(type, opt_element) {
      Event$$1.call(this, type);

      /**
       * The element that is added to or removed from the collection.
       * @type {*}
       * @api
       */
      this.element = opt_element;

    }

    if ( Event$$1 ) CollectionEvent.__proto__ = Event$$1;
    CollectionEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    CollectionEvent.prototype.constructor = CollectionEvent;

    return CollectionEvent;
  }(Event));


  /**
   * @typedef {Object} Options
   * @property {boolean} [unique=false] Disallow the same item from being added to
   * the collection twice.
   */

  /**
   * @classdesc
   * An expanded version of standard JS Array, adding convenience methods for
   * manipulation. Add and remove changes to the Collection trigger a Collection
   * event. Note that this does not cover changes to the objects _within_ the
   * Collection; they trigger events on the appropriate object, not on the
   * Collection as a whole.
   *
   * @fires CollectionEvent
   *
   * @template T
   * @api
   */
  var Collection$1 = /*@__PURE__*/(function (BaseObject$$1) {
    function Collection$$1(opt_array, opt_options) {

      BaseObject$$1.call(this);

      var options = opt_options || {};

      /**
       * @private
       * @type {boolean}
       */
      this.unique_ = !!options.unique;

      /**
       * @private
       * @type {!Array<T>}
       */
      this.array_ = opt_array ? opt_array : [];

      if (this.unique_) {
        for (var i = 0, ii = this.array_.length; i < ii; ++i) {
          this.assertUnique_(this.array_[i], i);
        }
      }

      this.updateLength_();

    }

    if ( BaseObject$$1 ) Collection$$1.__proto__ = BaseObject$$1;
    Collection$$1.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Collection$$1.prototype.constructor = Collection$$1;

    /**
     * Remove all elements from the collection.
     * @api
     */
    Collection$$1.prototype.clear = function clear () {
      while (this.getLength() > 0) {
        this.pop();
      }
    };

    /**
     * Add elements to the collection.  This pushes each item in the provided array
     * to the end of the collection.
     * @param {!Array<T>} arr Array.
     * @return {Collection<T>} This collection.
     * @api
     */
    Collection$$1.prototype.extend = function extend (arr) {
      for (var i = 0, ii = arr.length; i < ii; ++i) {
        this.push(arr[i]);
      }
      return this;
    };

    /**
     * Iterate over each element, calling the provided callback.
     * @param {function(T, number, Array<T>): *} f The function to call
     *     for every element. This function takes 3 arguments (the element, the
     *     index and the array). The return value is ignored.
     * @api
     */
    Collection$$1.prototype.forEach = function forEach (f) {
      var array = this.array_;
      for (var i = 0, ii = array.length; i < ii; ++i) {
        f(array[i], i, array);
      }
    };

    /**
     * Get a reference to the underlying Array object. Warning: if the array
     * is mutated, no events will be dispatched by the collection, and the
     * collection's "length" property won't be in sync with the actual length
     * of the array.
     * @return {!Array<T>} Array.
     * @api
     */
    Collection$$1.prototype.getArray = function getArray () {
      return this.array_;
    };

    /**
     * Get the element at the provided index.
     * @param {number} index Index.
     * @return {T} Element.
     * @api
     */
    Collection$$1.prototype.item = function item (index) {
      return this.array_[index];
    };

    /**
     * Get the length of this collection.
     * @return {number} The length of the array.
     * @observable
     * @api
     */
    Collection$$1.prototype.getLength = function getLength () {
      return this.get(Property.LENGTH);
    };

    /**
     * Insert an element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */
    Collection$$1.prototype.insertAt = function insertAt (index, elem) {
      if (this.unique_) {
        this.assertUnique_(elem);
      }
      this.array_.splice(index, 0, elem);
      this.updateLength_();
      this.dispatchEvent(
        new CollectionEvent(CollectionEventType.ADD, elem));
    };

    /**
     * Remove the last element of the collection and return it.
     * Return `undefined` if the collection is empty.
     * @return {T|undefined} Element.
     * @api
     */
    Collection$$1.prototype.pop = function pop () {
      return this.removeAt(this.getLength() - 1);
    };

    /**
     * Insert the provided element at the end of the collection.
     * @param {T} elem Element.
     * @return {number} New length of the collection.
     * @api
     */
    Collection$$1.prototype.push = function push (elem) {
      if (this.unique_) {
        this.assertUnique_(elem);
      }
      var n = this.getLength();
      this.insertAt(n, elem);
      return this.getLength();
    };

    /**
     * Remove the first occurrence of an element from the collection.
     * @param {T} elem Element.
     * @return {T|undefined} The removed element or undefined if none found.
     * @api
     */
    Collection$$1.prototype.remove = function remove (elem) {
      var arr = this.array_;
      for (var i = 0, ii = arr.length; i < ii; ++i) {
        if (arr[i] === elem) {
          return this.removeAt(i);
        }
      }
      return undefined;
    };

    /**
     * Remove the element at the provided index and return it.
     * Return `undefined` if the collection does not contain this index.
     * @param {number} index Index.
     * @return {T|undefined} Value.
     * @api
     */
    Collection$$1.prototype.removeAt = function removeAt (index) {
      var prev = this.array_[index];
      this.array_.splice(index, 1);
      this.updateLength_();
      this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev));
      return prev;
    };

    /**
     * Set the element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */
    Collection$$1.prototype.setAt = function setAt (index, elem) {
      var n = this.getLength();
      if (index < n) {
        if (this.unique_) {
          this.assertUnique_(elem, index);
        }
        var prev = this.array_[index];
        this.array_[index] = elem;
        this.dispatchEvent(
          new CollectionEvent(CollectionEventType.REMOVE, prev));
        this.dispatchEvent(
          new CollectionEvent(CollectionEventType.ADD, elem));
      } else {
        for (var j = n; j < index; ++j) {
          this.insertAt(j, undefined);
        }
        this.insertAt(index, elem);
      }
    };

    /**
     * @private
     */
    Collection$$1.prototype.updateLength_ = function updateLength_ () {
      this.set(Property.LENGTH, this.array_.length);
    };

    /**
     * @private
     * @param {T} elem Element.
     * @param {number=} opt_except Optional index to ignore.
     */
    Collection$$1.prototype.assertUnique_ = function assertUnique_ (elem, opt_except) {
      for (var i = 0, ii = this.array_.length; i < ii; ++i) {
        if (this.array_[i] === elem && i !== opt_except) {
          throw new AssertionError(58);
        }
      }
    };

    return Collection$$1;
  }(BaseObject));

  /**
   * @module ol/asserts
   */

  /**
   * @param {*} assertion Assertion we expected to be truthy.
   * @param {number} errorCode Error code.
   */
  function assert(assertion, errorCode) {
    if (!assertion) {
      throw new AssertionError(errorCode);
    }
  }

  /**
   * @module ol/Feature
   */

  /**
   * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
   */

  /**
   * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
   */

  /**
   * @classdesc
   * A vector object for geographic features with a geometry and other
   * attribute properties, similar to the features in vector file formats like
   * GeoJSON.
   *
   * Features can be styled individually with `setStyle`; otherwise they use the
   * style of their vector layer.
   *
   * Note that attribute properties are set as {@link module:ol/Object} properties on
   * the feature object, so they are observable, and have get/set accessors.
   *
   * Typically, a feature has a single geometry property. You can set the
   * geometry using the `setGeometry` method and get it with `getGeometry`.
   * It is possible to store more than one geometry on a feature using attribute
   * properties. By default, the geometry used for rendering is identified by
   * the property name `geometry`. If you want to use another geometry property
   * for rendering, use the `setGeometryName` method to change the attribute
   * property associated with the geometry for the feature.  For example:
   *
   * ```js
   *
   * import Feature from 'ol/Feature';
   * import Polygon from 'ol/geom/Polygon';
   * import Point from 'ol/geom/Point';
   *
   * var feature = new Feature({
   *   geometry: new Polygon(polyCoords),
   *   labelPoint: new Point(labelCoords),
   *   name: 'My Polygon'
   * });
   *
   * // get the polygon geometry
   * var poly = feature.getGeometry();
   *
   * // Render the feature as a point using the coordinates from labelPoint
   * feature.setGeometryName('labelPoint');
   *
   * // get the point geometry
   * var point = feature.getGeometry();
   * ```
   *
   * @api
   */
  var Feature$1 = /*@__PURE__*/(function (BaseObject$$1) {
    function Feature$$1(opt_geometryOrProperties) {

      BaseObject$$1.call(this);

      /**
       * @private
       * @type {number|string|undefined}
       */
      this.id_ = undefined;

      /**
       * @type {string}
       * @private
       */
      this.geometryName_ = 'geometry';

      /**
       * User provided style.
       * @private
       * @type {import("./style/Style.js").StyleLike}
       */
      this.style_ = null;

      /**
       * @private
       * @type {import("./style/Style.js").StyleFunction|undefined}
       */
      this.styleFunction_ = undefined;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.geometryChangeKey_ = null;

      listen(
        this, getChangeEventType(this.geometryName_),
        this.handleGeometryChanged_, this);

      if (opt_geometryOrProperties) {
        if (typeof /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry === 'function') {
          var geometry = /** @type {import("./geom/Geometry.js").default} */ (opt_geometryOrProperties);
          this.setGeometry(geometry);
        } else {
          /** @type {Object<string, *>} */
          var properties = opt_geometryOrProperties;
          this.setProperties(properties);
        }
      }
    }

    if ( BaseObject$$1 ) Feature$$1.__proto__ = BaseObject$$1;
    Feature$$1.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Feature$$1.prototype.constructor = Feature$$1;

    /**
     * Clone this feature. If the original feature has a geometry it
     * is also cloned. The feature id is not set in the clone.
     * @return {Feature} The clone.
     * @api
     */
    Feature$$1.prototype.clone = function clone () {
      var clone = new Feature$$1(this.getProperties());
      clone.setGeometryName(this.getGeometryName());
      var geometry = this.getGeometry();
      if (geometry) {
        clone.setGeometry(geometry.clone());
      }
      var style = this.getStyle();
      if (style) {
        clone.setStyle(style);
      }
      return clone;
    };

    /**
     * Get the feature's default geometry.  A feature may have any number of named
     * geometries.  The "default" geometry (the one that is rendered by default) is
     * set when calling {@link module:ol/Feature~Feature#setGeometry}.
     * @return {import("./geom/Geometry.js").default|undefined} The default geometry for the feature.
     * @api
     * @observable
     */
    Feature$$1.prototype.getGeometry = function getGeometry () {
      return (
        /** @type {import("./geom/Geometry.js").default|undefined} */ (this.get(this.geometryName_))
      );
    };

    /**
     * Get the feature identifier.  This is a stable identifier for the feature and
     * is either set when reading data from a remote source or set explicitly by
     * calling {@link module:ol/Feature~Feature#setId}.
     * @return {number|string|undefined} Id.
     * @api
     */
    Feature$$1.prototype.getId = function getId () {
      return this.id_;
    };

    /**
     * Get the name of the feature's default geometry.  By default, the default
     * geometry is named `geometry`.
     * @return {string} Get the property name associated with the default geometry
     *     for this feature.
     * @api
     */
    Feature$$1.prototype.getGeometryName = function getGeometryName () {
      return this.geometryName_;
    };

    /**
     * Get the feature's style. Will return what was provided to the
     * {@link module:ol/Feature~Feature#setStyle} method.
     * @return {import("./style/Style.js").StyleLike} The feature style.
     * @api
     */
    Feature$$1.prototype.getStyle = function getStyle () {
      return this.style_;
    };

    /**
     * Get the feature's style function.
     * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
     * representing the current style of this feature.
     * @api
     */
    Feature$$1.prototype.getStyleFunction = function getStyleFunction () {
      return this.styleFunction_;
    };

    /**
     * @private
     */
    Feature$$1.prototype.handleGeometryChange_ = function handleGeometryChange_ () {
      this.changed();
    };

    /**
     * @private
     */
    Feature$$1.prototype.handleGeometryChanged_ = function handleGeometryChanged_ () {
      if (this.geometryChangeKey_) {
        unlistenByKey(this.geometryChangeKey_);
        this.geometryChangeKey_ = null;
      }
      var geometry = this.getGeometry();
      if (geometry) {
        this.geometryChangeKey_ = listen(geometry,
          EventType.CHANGE, this.handleGeometryChange_, this);
      }
      this.changed();
    };

    /**
     * Set the default geometry for the feature.  This will update the property
     * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
     * @param {import("./geom/Geometry.js").default|undefined} geometry The new geometry.
     * @api
     * @observable
     */
    Feature$$1.prototype.setGeometry = function setGeometry (geometry) {
      this.set(this.geometryName_, geometry);
    };

    /**
     * Set the style for the feature.  This can be a single style object, an array
     * of styles, or a function that takes a resolution and returns an array of
     * styles. If it is `null` the feature has no style (a `null` style).
     * @param {import("./style/Style.js").StyleLike} style Style for this feature.
     * @api
     * @fires module:ol/events/Event~Event#event:change
     */
    Feature$$1.prototype.setStyle = function setStyle (style) {
      this.style_ = style;
      this.styleFunction_ = !style ? undefined : createStyleFunction(style);
      this.changed();
    };

    /**
     * Set the feature id.  The feature id is considered stable and may be used when
     * requesting features or comparing identifiers returned from a remote source.
     * The feature id can be used with the
     * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
     * @param {number|string|undefined} id The feature id.
     * @api
     * @fires module:ol/events/Event~Event#event:change
     */
    Feature$$1.prototype.setId = function setId (id) {
      this.id_ = id;
      this.changed();
    };

    /**
     * Set the property name to be used when getting the feature's default geometry.
     * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
     * this name will be returned.
     * @param {string} name The property name of the default geometry.
     * @api
     */
    Feature$$1.prototype.setGeometryName = function setGeometryName (name) {
      unlisten(
        this, getChangeEventType(this.geometryName_),
        this.handleGeometryChanged_, this);
      this.geometryName_ = name;
      listen(
        this, getChangeEventType(this.geometryName_),
        this.handleGeometryChanged_, this);
      this.handleGeometryChanged_();
    };

    return Feature$$1;
  }(BaseObject));


  /**
   * Convert the provided object into a feature style function.  Functions passed
   * through unchanged.  Arrays of Style or single style objects wrapped
   * in a new feature style function.
   * @param {!import("./style/Style.js").StyleFunction|!Array<import("./style/Style.js").default>|!import("./style/Style.js").default} obj
   *     A feature style function, a single style, or an array of styles.
   * @return {import("./style/Style.js").StyleFunction} A style function.
   */
  function createStyleFunction(obj) {
    if (typeof obj === 'function') {
      return obj;
    } else {
      /**
       * @type {Array<import("./style/Style.js").default>}
       */
      var styles;
      if (Array.isArray(obj)) {
        styles = obj;
      } else {
        assert(typeof /** @type {?} */ (obj).getZIndex === 'function',
          41); // Expected an `import("./style/Style.js").Style` or an array of `import("./style/Style.js").Style`
        var style = /** @type {import("./style/Style.js").default} */ (obj);
        styles = [style];
      }
      return function() {
        return styles;
      };
    }
  }

  /**
   * @module ol/array
   */


  /**
   * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
   * https://github.com/darkskyapp/binary-search
   *
   * @param {Array<*>} haystack Items to search through.
   * @param {*} needle The item to look for.
   * @param {Function=} opt_comparator Comparator function.
   * @return {number} The index of the item if found, -1 if not.
   */
  function binarySearch(haystack, needle, opt_comparator) {
    var mid, cmp;
    var comparator = opt_comparator || numberSafeCompareFunction;
    var low = 0;
    var high = haystack.length;
    var found = false;

    while (low < high) {
      /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
       * to double (which gives the wrong results). */
      mid = low + (high - low >> 1);
      cmp = +comparator(haystack[mid], needle);

      if (cmp < 0.0) { /* Too low. */
        low = mid + 1;

      } else { /* Key found or too high */
        high = mid;
        found = !cmp;
      }
    }

    /* Key not found. */
    return found ? low : ~low;
  }


  /**
   * Compare function for array sort that is safe for numbers.
   * @param {*} a The first object to be compared.
   * @param {*} b The second object to be compared.
   * @return {number} A negative number, zero, or a positive number as the first
   *     argument is less than, equal to, or greater than the second.
   */
  function numberSafeCompareFunction(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }


  /**
   * Whether the array contains the given object.
   * @param {Array<*>} arr The array to test for the presence of the element.
   * @param {*} obj The object for which to test.
   * @return {boolean} The object is in the array.
   */
  function includes$1(arr, obj) {
    return arr.indexOf(obj) >= 0;
  }


  /**
   * @param {Array<number>} arr Array.
   * @param {number} target Target.
   * @param {number} direction 0 means return the nearest, > 0
   *    means return the largest nearest, < 0 means return the
   *    smallest nearest.
   * @return {number} Index.
   */
  function linearFindNearest(arr, target, direction) {
    var n = arr.length;
    if (arr[0] <= target) {
      return 0;
    } else if (target <= arr[n - 1]) {
      return n - 1;
    } else {
      var i;
      if (direction > 0) {
        for (i = 1; i < n; ++i) {
          if (arr[i] < target) {
            return i - 1;
          }
        }
      } else if (direction < 0) {
        for (i = 1; i < n; ++i) {
          if (arr[i] <= target) {
            return i;
          }
        }
      } else {
        for (i = 1; i < n; ++i) {
          if (arr[i] == target) {
            return i;
          } else if (arr[i] < target) {
            if (arr[i - 1] - target < target - arr[i]) {
              return i - 1;
            } else {
              return i;
            }
          }
        }
      }
      return n - 1;
    }
  }


  /**
   * @param {Array<*>} arr Array.
   * @param {number} begin Begin index.
   * @param {number} end End index.
   */
  function reverseSubArray(arr, begin, end) {
    while (begin < end) {
      var tmp = arr[begin];
      arr[begin] = arr[end];
      arr[end] = tmp;
      ++begin;
      --end;
    }
  }


  /**
   * @param {Array<VALUE>} arr The array to modify.
   * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
   * @template VALUE
   */
  function extend(arr, data) {
    var extension = Array.isArray(data) ? data : [data];
    var length = extension.length;
    for (var i = 0; i < length; i++) {
      arr[arr.length] = extension[i];
    }
  }


  /**
   * @param {Array<VALUE>} arr The array to modify.
   * @param {VALUE} obj The element to remove.
   * @template VALUE
   * @return {boolean} If the element was removed.
   */
  function remove(arr, obj) {
    var i = arr.indexOf(obj);
    var found = i > -1;
    if (found) {
      arr.splice(i, 1);
    }
    return found;
  }


  /**
   * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
   * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
   * @return {boolean} Whether the two arrays are equal.
   */
  function equals(arr1, arr2) {
    var len1 = arr1.length;
    if (len1 !== arr2.length) {
      return false;
    }
    for (var i = 0; i < len1; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  }


  /**
   * Sort the passed array such that the relative order of equal elements is preverved.
   * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.
   * @param {Array<*>} arr The array to sort (modifies original).
   * @param {!function(*, *): number} compareFnc Comparison function.
   * @api
   */
  function stableSort(arr, compareFnc) {
    var length = arr.length;
    var tmp = Array(arr.length);
    var i;
    for (i = 0; i < length; i++) {
      tmp[i] = {index: i, value: arr[i]};
    }
    tmp.sort(function(a, b) {
      return compareFnc(a.value, b.value) || a.index - b.index;
    });
    for (i = 0; i < arr.length; i++) {
      arr[i] = tmp[i].value;
    }
  }


  /**
   * @param {Array<*>} arr The array to test.
   * @param {Function=} opt_func Comparison function.
   * @param {boolean=} opt_strict Strictly sorted (default false).
   * @return {boolean} Return index.
   */
  function isSorted(arr, opt_func, opt_strict) {
    var compare = opt_func || numberSafeCompareFunction;
    return arr.every(function(currentVal, index) {
      if (index === 0) {
        return true;
      }
      var res = compare(arr[index - 1], currentVal);
      return !(res > 0 || opt_strict && res === 0);
    });
  }

  /**
   * @module ol/extent/Corner
   */

  /**
   * Extent corner.
   * @enum {string}
   */
  var Corner = {
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_RIGHT: 'bottom-right',
    TOP_LEFT: 'top-left',
    TOP_RIGHT: 'top-right'
  };

  /**
   * @module ol/extent/Relationship
   */

  /**
   * Relationship to an extent.
   * @enum {number}
   */
  var Relationship = {
    UNKNOWN: 0,
    INTERSECTING: 1,
    ABOVE: 2,
    RIGHT: 4,
    BELOW: 8,
    LEFT: 16
  };

  /**
   * @module ol/extent
   */


  /**
   * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
   * @typedef {Array<number>} Extent
   * @api
   */

  /**
   * Build an extent that includes all given coordinates.
   *
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Bounding extent.
   * @api
   */
  function boundingExtent(coordinates) {
    var extent$$1 = createEmpty();
    for (var i = 0, ii = coordinates.length; i < ii; ++i) {
      extendCoordinate(extent$$1, coordinates[i]);
    }
    return extent$$1;
  }


  /**
   * Return extent increased by the provided value.
   * @param {Extent} extent Extent.
   * @param {number} value The amount by which the extent should be buffered.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   * @api
   */
  function buffer(extent$$1, value, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = extent$$1[0] - value;
      opt_extent[1] = extent$$1[1] - value;
      opt_extent[2] = extent$$1[2] + value;
      opt_extent[3] = extent$$1[3] + value;
      return opt_extent;
    } else {
      return [
        extent$$1[0] - value,
        extent$$1[1] - value,
        extent$$1[2] + value,
        extent$$1[3] + value
      ];
    }
  }


  /**
   * Creates a clone of an extent.
   *
   * @param {Extent} extent Extent to clone.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} The clone.
   */
  function clone$1(extent$$1, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = extent$$1[0];
      opt_extent[1] = extent$$1[1];
      opt_extent[2] = extent$$1[2];
      opt_extent[3] = extent$$1[3];
      return opt_extent;
    } else {
      return extent$$1.slice();
    }
  }


  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {number} Closest squared distance.
   */
  function closestSquaredDistanceXY(extent$$1, x, y) {
    var dx, dy;
    if (x < extent$$1[0]) {
      dx = extent$$1[0] - x;
    } else if (extent$$1[2] < x) {
      dx = x - extent$$1[2];
    } else {
      dx = 0;
    }
    if (y < extent$$1[1]) {
      dy = extent$$1[1] - y;
    } else if (extent$$1[3] < y) {
      dy = y - extent$$1[3];
    } else {
      dy = 0;
    }
    return dx * dx + dy * dy;
  }


  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @return {boolean} The coordinate is contained in the extent.
   * @api
   */
  function containsCoordinate(extent$$1, coordinate) {
    return containsXY(extent$$1, coordinate[0], coordinate[1]);
  }


  /**
   * Check if one extent contains another.
   *
   * An extent is deemed contained if it lies completely within the other extent,
   * including if they share one or more edges.
   *
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The second extent is contained by or on the edge of the
   *     first.
   * @api
   */
  function containsExtent(extent1, extent2) {
    return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&
        extent1[1] <= extent2[1] && extent2[3] <= extent1[3];
  }


  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {number} x X coordinate.
   * @param {number} y Y coordinate.
   * @return {boolean} The x, y values are contained in the extent.
   * @api
   */
  function containsXY(extent$$1, x, y) {
    return extent$$1[0] <= x && x <= extent$$1[2] && extent$$1[1] <= y && y <= extent$$1[3];
  }


  /**
   * Get the relationship between a coordinate and extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
   * @return {Relationship} The relationship (bitwise compare with
   *     import("./extent/Relationship.js").Relationship).
   */
  function coordinateRelationship(extent$$1, coordinate) {
    var minX = extent$$1[0];
    var minY = extent$$1[1];
    var maxX = extent$$1[2];
    var maxY = extent$$1[3];
    var x = coordinate[0];
    var y = coordinate[1];
    var relationship = Relationship.UNKNOWN;
    if (x < minX) {
      relationship = relationship | Relationship.LEFT;
    } else if (x > maxX) {
      relationship = relationship | Relationship.RIGHT;
    }
    if (y < minY) {
      relationship = relationship | Relationship.BELOW;
    } else if (y > maxY) {
      relationship = relationship | Relationship.ABOVE;
    }
    if (relationship === Relationship.UNKNOWN) {
      relationship = Relationship.INTERSECTING;
    }
    return relationship;
  }


  /**
   * Create an empty extent.
   * @return {Extent} Empty extent.
   * @api
   */
  function createEmpty() {
    return [Infinity, Infinity, -Infinity, -Infinity];
  }


  /**
   * Create a new extent or update the provided extent.
   * @param {number} minX Minimum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxX Maximum X.
   * @param {number} maxY Maximum Y.
   * @param {Extent=} opt_extent Destination extent.
   * @return {Extent} Extent.
   */
  function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = minX;
      opt_extent[1] = minY;
      opt_extent[2] = maxX;
      opt_extent[3] = maxY;
      return opt_extent;
    } else {
      return [minX, minY, maxX, maxY];
    }
  }


  /**
   * Create a new empty extent or make the provided one empty.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateEmpty(opt_extent) {
    return createOrUpdate(
      Infinity, Infinity, -Infinity, -Infinity, opt_extent);
  }


  /**
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinate(coordinate, opt_extent) {
    var x = coordinate[0];
    var y = coordinate[1];
    return createOrUpdate(x, y, x, y, opt_extent);
  }


  /**
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinates(coordinates, opt_extent) {
    var extent$$1 = createOrUpdateEmpty(opt_extent);
    return extendCoordinates(extent$$1, coordinates);
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {
    var extent$$1 = createOrUpdateEmpty(opt_extent);
    return extendFlatCoordinates(extent$$1, flatCoordinates, offset, end, stride);
  }


  /**
   * Determine if two extents are equivalent.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The two extents are equivalent.
   * @api
   */
  function equals$1(extent1, extent2) {
    return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&
        extent1[1] == extent2[1] && extent1[3] == extent2[3];
  }


  /**
   * Modify an extent to include another extent.
   * @param {Extent} extent1 The extent to be modified.
   * @param {Extent} extent2 The extent that will be included in the first.
   * @return {Extent} A reference to the first (extended) extent.
   * @api
   */
  function extend$1(extent1, extent2) {
    if (extent2[0] < extent1[0]) {
      extent1[0] = extent2[0];
    }
    if (extent2[2] > extent1[2]) {
      extent1[2] = extent2[2];
    }
    if (extent2[1] < extent1[1]) {
      extent1[1] = extent2[1];
    }
    if (extent2[3] > extent1[3]) {
      extent1[3] = extent2[3];
    }
    return extent1;
  }


  /**
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   */
  function extendCoordinate(extent$$1, coordinate) {
    if (coordinate[0] < extent$$1[0]) {
      extent$$1[0] = coordinate[0];
    }
    if (coordinate[0] > extent$$1[2]) {
      extent$$1[2] = coordinate[0];
    }
    if (coordinate[1] < extent$$1[1]) {
      extent$$1[1] = coordinate[1];
    }
    if (coordinate[1] > extent$$1[3]) {
      extent$$1[3] = coordinate[1];
    }
  }


  /**
   * @param {Extent} extent Extent.
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Extent.
   */
  function extendCoordinates(extent$$1, coordinates) {
    for (var i = 0, ii = coordinates.length; i < ii; ++i) {
      extendCoordinate(extent$$1, coordinates[i]);
    }
    return extent$$1;
  }


  /**
   * @param {Extent} extent Extent.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Extent} Extent.
   */
  function extendFlatCoordinates(extent$$1, flatCoordinates, offset, end, stride) {
    for (; offset < end; offset += stride) {
      extendXY(extent$$1, flatCoordinates[offset], flatCoordinates[offset + 1]);
    }
    return extent$$1;
  }


  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   */
  function extendXY(extent$$1, x, y) {
    extent$$1[0] = Math.min(extent$$1[0], x);
    extent$$1[1] = Math.min(extent$$1[1], y);
    extent$$1[2] = Math.max(extent$$1[2], x);
    extent$$1[3] = Math.max(extent$$1[3], y);
  }


  /**
   * This function calls `callback` for each corner of the extent. If the
   * callback returns a truthy value the function returns that value
   * immediately. Otherwise the function returns `false`.
   * @param {Extent} extent Extent.
   * @param {function(this:T, import("./coordinate.js").Coordinate): S} callback Callback.
   * @param {T=} opt_this Value to use as `this` when executing `callback`.
   * @return {S|boolean} Value.
   * @template S, T
   */
  function forEachCorner(extent$$1, callback, opt_this) {
    var val;
    val = callback.call(opt_this, getBottomLeft(extent$$1));
    if (val) {
      return val;
    }
    val = callback.call(opt_this, getBottomRight(extent$$1));
    if (val) {
      return val;
    }
    val = callback.call(opt_this, getTopRight(extent$$1));
    if (val) {
      return val;
    }
    val = callback.call(opt_this, getTopLeft(extent$$1));
    if (val) {
      return val;
    }
    return false;
  }


  /**
   * Get the size of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Area.
   * @api
   */
  function getArea(extent$$1) {
    var area = 0;
    if (!isEmpty$2(extent$$1)) {
      area = getWidth(extent$$1) * getHeight(extent$$1);
    }
    return area;
  }


  /**
   * Get the bottom left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
   * @api
   */
  function getBottomLeft(extent$$1) {
    return [extent$$1[0], extent$$1[1]];
  }


  /**
   * Get the bottom right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
   * @api
   */
  function getBottomRight(extent$$1) {
    return [extent$$1[2], extent$$1[1]];
  }


  /**
   * Get the center coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Center.
   * @api
   */
  function getCenter(extent$$1) {
    return [(extent$$1[0] + extent$$1[2]) / 2, (extent$$1[1] + extent$$1[3]) / 2];
  }


  /**
   * Get a corner coordinate of an extent.
   * @param {Extent} extent Extent.
   * @param {Corner} corner Corner.
   * @return {import("./coordinate.js").Coordinate} Corner coordinate.
   */
  function getCorner(extent$$1, corner) {
    var coordinate;
    if (corner === Corner.BOTTOM_LEFT) {
      coordinate = getBottomLeft(extent$$1);
    } else if (corner === Corner.BOTTOM_RIGHT) {
      coordinate = getBottomRight(extent$$1);
    } else if (corner === Corner.TOP_LEFT) {
      coordinate = getTopLeft(extent$$1);
    } else if (corner === Corner.TOP_RIGHT) {
      coordinate = getTopRight(extent$$1);
    } else {
      assert(false, 13); // Invalid corner
    }
    return coordinate;
  }


  /**
   * @param {import("./coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {import("./size.js").Size} size Size.
   * @param {Extent=} opt_extent Destination extent.
   * @return {Extent} Extent.
   */
  function getForViewAndSize(center, resolution, rotation, size$$1, opt_extent) {
    var dx = resolution * size$$1[0] / 2;
    var dy = resolution * size$$1[1] / 2;
    var cosRotation = Math.cos(rotation);
    var sinRotation = Math.sin(rotation);
    var xCos = dx * cosRotation;
    var xSin = dx * sinRotation;
    var yCos = dy * cosRotation;
    var ySin = dy * sinRotation;
    var x = center[0];
    var y = center[1];
    var x0 = x - xCos + ySin;
    var x1 = x - xCos - ySin;
    var x2 = x + xCos - ySin;
    var x3 = x + xCos + ySin;
    var y0 = y - xSin - yCos;
    var y1 = y - xSin + yCos;
    var y2 = y + xSin + yCos;
    var y3 = y + xSin - yCos;
    return createOrUpdate(
      Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3),
      Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3),
      opt_extent);
  }


  /**
   * Get the height of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Height.
   * @api
   */
  function getHeight(extent$$1) {
    return extent$$1[3] - extent$$1[1];
  }


  /**
   * Get the intersection of two extents.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @param {Extent=} opt_extent Optional extent to populate with intersection.
   * @return {Extent} Intersecting extent.
   * @api
   */
  function getIntersection(extent1, extent2, opt_extent) {
    var intersection = opt_extent ? opt_extent : createEmpty();
    if (intersects(extent1, extent2)) {
      if (extent1[0] > extent2[0]) {
        intersection[0] = extent1[0];
      } else {
        intersection[0] = extent2[0];
      }
      if (extent1[1] > extent2[1]) {
        intersection[1] = extent1[1];
      } else {
        intersection[1] = extent2[1];
      }
      if (extent1[2] < extent2[2]) {
        intersection[2] = extent1[2];
      } else {
        intersection[2] = extent2[2];
      }
      if (extent1[3] < extent2[3]) {
        intersection[3] = extent1[3];
      } else {
        intersection[3] = extent2[3];
      }
    } else {
      createOrUpdateEmpty(intersection);
    }
    return intersection;
  }


  /**
   * Get the top left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top left coordinate.
   * @api
   */
  function getTopLeft(extent$$1) {
    return [extent$$1[0], extent$$1[3]];
  }


  /**
   * Get the top right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top right coordinate.
   * @api
   */
  function getTopRight(extent$$1) {
    return [extent$$1[2], extent$$1[3]];
  }


  /**
   * Get the width of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Width.
   * @api
   */
  function getWidth(extent$$1) {
    return extent$$1[2] - extent$$1[0];
  }


  /**
   * Determine if one extent intersects another.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent.
   * @return {boolean} The two extents intersect.
   * @api
   */
  function intersects(extent1, extent2) {
    return extent1[0] <= extent2[2] &&
        extent1[2] >= extent2[0] &&
        extent1[1] <= extent2[3] &&
        extent1[3] >= extent2[1];
  }


  /**
   * Determine if an extent is empty.
   * @param {Extent} extent Extent.
   * @return {boolean} Is empty.
   * @api
   */
  function isEmpty$2(extent$$1) {
    return extent$$1[2] < extent$$1[0] || extent$$1[3] < extent$$1[1];
  }


  /**
   * @param {Extent} extent Extent.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function returnOrUpdate(extent$$1, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = extent$$1[0];
      opt_extent[1] = extent$$1[1];
      opt_extent[2] = extent$$1[2];
      opt_extent[3] = extent$$1[3];
      return opt_extent;
    } else {
      return extent$$1;
    }
  }


  /**
   * @param {Extent} extent Extent.
   * @param {number} value Value.
   */
  function scaleFromCenter(extent$$1, value) {
    var deltaX = ((extent$$1[2] - extent$$1[0]) / 2) * (value - 1);
    var deltaY = ((extent$$1[3] - extent$$1[1]) / 2) * (value - 1);
    extent$$1[0] -= deltaX;
    extent$$1[2] += deltaX;
    extent$$1[1] -= deltaY;
    extent$$1[3] += deltaY;
  }


  /**
   * Determine if the segment between two coordinates intersects (crosses,
   * touches, or is contained by) the provided extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
   * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
   * @return {boolean} The segment intersects the extent.
   */
  function intersectsSegment(extent$$1, start, end) {
    var intersects = false;
    var startRel = coordinateRelationship(extent$$1, start);
    var endRel = coordinateRelationship(extent$$1, end);
    if (startRel === Relationship.INTERSECTING ||
        endRel === Relationship.INTERSECTING) {
      intersects = true;
    } else {
      var minX = extent$$1[0];
      var minY = extent$$1[1];
      var maxX = extent$$1[2];
      var maxY = extent$$1[3];
      var startX = start[0];
      var startY = start[1];
      var endX = end[0];
      var endY = end[1];
      var slope = (endY - startY) / (endX - startX);
      var x, y;
      if (!!(endRel & Relationship.ABOVE) &&
          !(startRel & Relationship.ABOVE)) {
        // potentially intersects top
        x = endX - ((endY - maxY) / slope);
        intersects = x >= minX && x <= maxX;
      }
      if (!intersects && !!(endRel & Relationship.RIGHT) &&
          !(startRel & Relationship.RIGHT)) {
        // potentially intersects right
        y = endY - ((endX - maxX) * slope);
        intersects = y >= minY && y <= maxY;
      }
      if (!intersects && !!(endRel & Relationship.BELOW) &&
          !(startRel & Relationship.BELOW)) {
        // potentially intersects bottom
        x = endX - ((endY - minY) / slope);
        intersects = x >= minX && x <= maxX;
      }
      if (!intersects && !!(endRel & Relationship.LEFT) &&
          !(startRel & Relationship.LEFT)) {
        // potentially intersects left
        y = endY - ((endX - minX) * slope);
        intersects = y >= minY && y <= maxY;
      }

    }
    return intersects;
  }

  /**
   * @module ol/geom/GeometryLayout
   */

  /**
   * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
   * or measure ('M') coordinate is available. Supported values are `'XY'`,
   * `'XYZ'`, `'XYM'`, `'XYZM'`.
   * @enum {string}
   */
  var GeometryLayout = {
    XY: 'XY',
    XYZ: 'XYZ',
    XYM: 'XYM',
    XYZM: 'XYZM'
  };

  /**
   * @module ol/geom/GeometryType
   */

  /**
   * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
   * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
   * `'GeometryCollection'`, `'Circle'`.
   * @enum {string}
   */
  var GeometryType = {
    POINT: 'Point',
    LINE_STRING: 'LineString',
    LINEAR_RING: 'LinearRing',
    POLYGON: 'Polygon',
    MULTI_POINT: 'MultiPoint',
    MULTI_LINE_STRING: 'MultiLineString',
    MULTI_POLYGON: 'MultiPolygon',
    GEOMETRY_COLLECTION: 'GeometryCollection',
    CIRCLE: 'Circle'
  };

  /**
   * @module ol/geom/flat/transform
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var i = 0;
    for (var j = offset; j < end; j += stride) {
      var x = flatCoordinates[j];
      var y = flatCoordinates[j + 1];
      dest[i++] = transform[0] * x + transform[2] * y + transform[4];
      dest[i++] = transform[1] * x + transform[3] * y + transform[5];
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} angle Angle.
   * @param {Array<number>} anchor Rotation anchor point.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    var anchorX = anchor[0];
    var anchorY = anchor[1];
    var i = 0;
    for (var j = offset; j < end; j += stride) {
      var deltaX = flatCoordinates[j] - anchorX;
      var deltaY = flatCoordinates[j + 1] - anchorY;
      dest[i++] = anchorX + deltaX * cos - deltaY * sin;
      dest[i++] = anchorY + deltaX * sin + deltaY * cos;
      for (var k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }


  /**
   * Scale the coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} sx Scale factor in the x-direction.
   * @param {number} sy Scale factor in the y-direction.
   * @param {Array<number>} anchor Scale anchor point.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var anchorX = anchor[0];
    var anchorY = anchor[1];
    var i = 0;
    for (var j = offset; j < end; j += stride) {
      var deltaX = flatCoordinates[j] - anchorX;
      var deltaY = flatCoordinates[j + 1] - anchorY;
      dest[i++] = anchorX + sx * deltaX;
      dest[i++] = anchorY + sy * deltaY;
      for (var k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} deltaX Delta X.
   * @param {number} deltaY Delta Y.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var i = 0;
    for (var j = offset; j < end; j += stride) {
      dest[i++] = flatCoordinates[j] + deltaX;
      dest[i++] = flatCoordinates[j + 1] + deltaY;
      for (var k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * @module ol/math
   */

  /**
   * Takes a number and clamps it to within the provided bounds.
   * @param {number} value The input number.
   * @param {number} min The minimum value to return.
   * @param {number} max The maximum value to return.
   * @return {number} The input number if it is within bounds, or the nearest
   *     number within the bounds.
   */
  function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }


  /**
   * Return the hyperbolic cosine of a given number. The method will use the
   * native `Math.cosh` function if it is available, otherwise the hyperbolic
   * cosine will be calculated via the reference implementation of the Mozilla
   * developer network.
   *
   * @param {number} x X.
   * @return {number} Hyperbolic cosine of x.
   */
  var cosh = (function() {
    // Wrapped in a iife, to save the overhead of checking for the native
    // implementation on every invocation.
    var cosh;
    if ('cosh' in Math) {
      // The environment supports the native Math.cosh function, use it…
      cosh = Math.cosh;
    } else {
      // … else, use the reference implementation of MDN:
      cosh = function(x) {
        var y = /** @type {Math} */ (Math).exp(x);
        return (y + 1 / y) / 2;
      };
    }
    return cosh;
  }());


  /**
   * @param {number} x X.
   * @return {number} The smallest power of two greater than or equal to x.
   */
  function roundUpToPowerOfTwo(x) {
    assert(0 < x, 29); // `x` must be greater than `0`
    return Math.pow(2, Math.ceil(Math.log(x) / Math.LN2));
  }


  /**
   * Returns the square of the closest distance between the point (x, y) and the
   * line segment (x1, y1) to (x2, y2).
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    if (dx !== 0 || dy !== 0) {
      var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
      if (t > 1) {
        x1 = x2;
        y1 = y2;
      } else if (t > 0) {
        x1 += dx * t;
        y1 += dy * t;
      }
    }
    return squaredDistance(x, y, x1, y1);
  }


  /**
   * Returns the square of the distance between the points (x1, y1) and (x2, y2).
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredDistance(x1, y1, x2, y2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    return dx * dx + dy * dy;
  }


  /**
   * Converts radians to to degrees.
   *
   * @param {number} angleInRadians Angle in radians.
   * @return {number} Angle in degrees.
   */
  function toDegrees(angleInRadians) {
    return angleInRadians * 180 / Math.PI;
  }


  /**
   * Converts degrees to radians.
   *
   * @param {number} angleInDegrees Angle in degrees.
   * @return {number} Angle in radians.
   */
  function toRadians(angleInDegrees) {
    return angleInDegrees * Math.PI / 180;
  }

  /**
   * Returns the modulo of a / b, depending on the sign of b.
   *
   * @param {number} a Dividend.
   * @param {number} b Divisor.
   * @return {number} Modulo.
   */
  function modulo(a, b) {
    var r = a % b;
    return r * b < 0 ? r + b : r;
  }

  /**
   * Calculates the linearly interpolated value of x between a and b.
   *
   * @param {number} a Number
   * @param {number} b Number
   * @param {number} x Value to be interpolated.
   * @return {number} Interpolated value.
   */
  function lerp(a, b, x) {
    return a + x * (b - a);
  }

  /**
   * @license
   * Latitude/longitude spherical geodesy formulae taken from
   * http://www.movable-type.co.uk/scripts/latlong.html
   * Licensed under CC-BY-3.0.
   */


  /**
   * Object literal with options for the {@link getLength} or {@link getArea}
   * functions.
   * @typedef {Object} SphereMetricOptions
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857']
   * Projection of the  geometry.  By default, the geometry is assumed to be in
   * Web Mercator.
   * @property {number} [radius=6371008.8] Sphere radius.  By default, the radius of the
   * earth is used (Clarke 1866 Authalic Sphere).
   */


  /**
   * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
   * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
   * @type {number}
   */
  var DEFAULT_RADIUS = 6371008.8;


  /**
   * Get the great circle distance (in meters) between two geographic coordinates.
   * @param {Array} c1 Starting coordinate.
   * @param {Array} c2 Ending coordinate.
   * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
   *     mean radius using the WGS84 ellipsoid.
   * @return {number} The great circle distance between the points (in meters).
   * @api
   */
  function getDistance(c1, c2, opt_radius) {
    var radius = opt_radius || DEFAULT_RADIUS;
    var lat1 = toRadians(c1[1]);
    var lat2 = toRadians(c2[1]);
    var deltaLatBy2 = (lat2 - lat1) / 2;
    var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;
    var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
        Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) *
        Math.cos(lat1) * Math.cos(lat2);
    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  }


  /**
   * Returns the coordinate at the given distance and bearing from `c1`.
   *
   * @param {import("./coordinate.js").Coordinate} c1 The origin point (`[lon, lat]` in degrees).
   * @param {number} distance The great-circle distance between the origin
   *     point and the target point.
   * @param {number} bearing The bearing (in radians).
   * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
   *     mean radius using the WGS84 ellipsoid.
   * @return {import("./coordinate.js").Coordinate} The target point.
   */
  function offset(c1, distance, bearing, opt_radius) {
    var radius = opt_radius || DEFAULT_RADIUS;
    var lat1 = toRadians(c1[1]);
    var lon1 = toRadians(c1[0]);
    var dByR = distance / radius;
    var lat = Math.asin(
      Math.sin(lat1) * Math.cos(dByR) +
        Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));
    var lon = lon1 + Math.atan2(
      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),
      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));
    return [toDegrees(lon), toDegrees(lat)];
  }

  /**
   * @module ol/proj/Units
   */

  /**
   * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
   * `'us-ft'`.
   * @enum {string}
   */
  var Units$1 = {
    DEGREES: 'degrees',
    FEET: 'ft',
    METERS: 'm',
    PIXELS: 'pixels',
    TILE_PIXELS: 'tile-pixels',
    USFEET: 'us-ft'
  };


  /**
   * Meters per unit lookup table.
   * @const
   * @type {Object<Units, number>}
   * @api
   */
  var METERS_PER_UNIT = {};
  // use the radius of the Normal sphere
  METERS_PER_UNIT[Units$1.DEGREES] = 2 * Math.PI * 6370997 / 360;
  METERS_PER_UNIT[Units$1.FEET] = 0.3048;
  METERS_PER_UNIT[Units$1.METERS] = 1;
  METERS_PER_UNIT[Units$1.USFEET] = 1200 / 3937;

  /**
   * @module ol/proj/Projection
   */


  /**
   * @typedef {Object} Options
   * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
   * @property {import("./Units.js").default|string} [units] Units. Required unless a
   * proj4 projection is defined for `code`.
   * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
   * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
   * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
   * @property {number} [metersPerUnit] The meters per unit for the SRS.
   * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}
   * lookup table.
   * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
   * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
   * Function to determine resolution at a point. The function is called with a
   * `{number}` view resolution and an `{import("../coordinate.js").Coordinate}` as arguments, and returns
   * the `{number}` resolution at the passed coordinate. If this is `undefined`,
   * the default {@link module:ol/proj#getPointResolution} function will be used.
   */


  /**
   * @classdesc
   * Projection definition class. One of these is created for each projection
   * supported in the application and stored in the {@link module:ol/proj} namespace.
   * You can use these in applications, but this is not required, as API params
   * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
   * code will suffice.
   *
   * You can use {@link module:ol/proj~get} to retrieve the object for a particular
   * projection.
   *
   * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
   * with the following aliases:
   * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
   *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
   *     http://www.opengis.net/gml/srs/epsg.xml#4326,
   *     urn:x-ogc:def:crs:EPSG:4326
   * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
   *     urn:ogc:def:crs:EPSG:6.18:3:3857,
   *     http://www.opengis.net/gml/srs/epsg.xml#3857
   *
   * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
   * be added using `proj4.defs()`. After all required projection definitions are
   * added, call the {@link module:ol/proj/proj4~register} function.
   *
   * @api
   */
  var Projection$1 = function Projection$$1(options) {
    /**
     * @private
     * @type {string}
     */
    this.code_ = options.code;

    /**
     * Units of projected coordinates. When set to `TILE_PIXELS`, a
     * `this.extent_` and `this.worldExtent_` must be configured properly for each
     * tile.
     * @private
     * @type {import("./Units.js").default}
     */
    this.units_ = /** @type {import("./Units.js").default} */ (options.units);

    /**
     * Validity extent of the projection in projected coordinates. For projections
     * with `TILE_PIXELS` units, this is the extent of the tile in
     * tile pixel space.
     * @private
     * @type {import("../extent.js").Extent}
     */
    this.extent_ = options.extent !== undefined ? options.extent : null;

    /**
     * Extent of the world in EPSG:4326. For projections with
     * `TILE_PIXELS` units, this is the extent of the tile in
     * projected coordinate space.
     * @private
     * @type {import("../extent.js").Extent}
     */
    this.worldExtent_ = options.worldExtent !== undefined ?
      options.worldExtent : null;

    /**
     * @private
     * @type {string}
     */
    this.axisOrientation_ = options.axisOrientation !== undefined ?
      options.axisOrientation : 'enu';

    /**
     * @private
     * @type {boolean}
     */
    this.global_ = options.global !== undefined ? options.global : false;

    /**
     * @private
     * @type {boolean}
     */
    this.canWrapX_ = !!(this.global_ && this.extent_);

    /**
     * @private
     * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
     */
    this.getPointResolutionFunc_ = options.getPointResolution;

    /**
     * @private
     * @type {import("../tilegrid/TileGrid.js").default}
     */
    this.defaultTileGrid_ = null;

    /**
     * @private
     * @type {number|undefined}
     */
    this.metersPerUnit_ = options.metersPerUnit;
  };

  /**
   * @return {boolean} The projection is suitable for wrapping the x-axis
   */
  Projection$1.prototype.canWrapX = function canWrapX () {
    return this.canWrapX_;
  };

  /**
   * Get the code for this projection, e.g. 'EPSG:4326'.
   * @return {string} Code.
   * @api
   */
  Projection$1.prototype.getCode = function getCode () {
    return this.code_;
  };

  /**
   * Get the validity extent for this projection.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  Projection$1.prototype.getExtent = function getExtent () {
    return this.extent_;
  };

  /**
   * Get the units of this projection.
   * @return {import("./Units.js").default} Units.
   * @api
   */
  Projection$1.prototype.getUnits = function getUnits () {
    return this.units_;
  };

  /**
   * Get the amount of meters per unit of this projection.If the projection is
   * not configured with `metersPerUnit` or a units identifier, the return is
   * `undefined`.
   * @return {number|undefined} Meters.
   * @api
   */
  Projection$1.prototype.getMetersPerUnit = function getMetersPerUnit () {
    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];
  };

  /**
   * Get the world extent for this projection.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  Projection$1.prototype.getWorldExtent = function getWorldExtent () {
    return this.worldExtent_;
  };

  /**
   * Get the axis orientation of this projection.
   * Example values are:
   * enu - the default easting, northing, elevation.
   * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
   *   or south orientated transverse mercator.
   * wnu - westing, northing, up - some planetary coordinate systems have
   *   "west positive" coordinate systems
   * @return {string} Axis orientation.
   * @api
   */
  Projection$1.prototype.getAxisOrientation = function getAxisOrientation () {
    return this.axisOrientation_;
  };

  /**
   * Is this projection a global projection which spans the whole world?
   * @return {boolean} Whether the projection is global.
   * @api
   */
  Projection$1.prototype.isGlobal = function isGlobal () {
    return this.global_;
  };

  /**
   * Set if the projection is a global projection which spans the whole world
   * @param {boolean} global Whether the projection is global.
   * @api
   */
  Projection$1.prototype.setGlobal = function setGlobal (global) {
    this.global_ = global;
    this.canWrapX_ = !!(global && this.extent_);
  };

  /**
   * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
   */
  Projection$1.prototype.getDefaultTileGrid = function getDefaultTileGrid () {
    return this.defaultTileGrid_;
  };

  /**
   * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
   */
  Projection$1.prototype.setDefaultTileGrid = function setDefaultTileGrid (tileGrid) {
    this.defaultTileGrid_ = tileGrid;
  };

  /**
   * Set the validity extent for this projection.
   * @param {import("../extent.js").Extent} extent Extent.
   * @api
   */
  Projection$1.prototype.setExtent = function setExtent (extent$$1) {
    this.extent_ = extent$$1;
    this.canWrapX_ = !!(this.global_ && extent$$1);
  };

  /**
   * Set the world extent for this projection.
   * @param {import("../extent.js").Extent} worldExtent World extent
   *   [minlon, minlat, maxlon, maxlat].
   * @api
   */
  Projection$1.prototype.setWorldExtent = function setWorldExtent (worldExtent) {
    this.worldExtent_ = worldExtent;
  };

  /**
   * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}
   * for this projection.
   * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
   * @api
   */
  Projection$1.prototype.setGetPointResolution = function setGetPointResolution (func) {
    this.getPointResolutionFunc_ = func;
  };

  /**
   * Get the custom point resolution function for this projection (if set).
   * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
   * resolution function (if set).
   */
  Projection$1.prototype.getPointResolutionFunc = function getPointResolutionFunc () {
    return this.getPointResolutionFunc_;
  };

  /**
   * @module ol/proj/epsg3857
   */


  /**
   * Radius of WGS84 sphere
   *
   * @const
   * @type {number}
   */
  var RADIUS = 6378137;


  /**
   * @const
   * @type {number}
   */
  var HALF_SIZE = Math.PI * RADIUS;


  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  var EXTENT = [
    -HALF_SIZE, -HALF_SIZE,
    HALF_SIZE, HALF_SIZE
  ];


  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  var WORLD_EXTENT = [-180, -85, 180, 85];


  /**
   * @classdesc
   * Projection object for web/spherical Mercator (EPSG:3857).
   */
  var EPSG3857Projection = /*@__PURE__*/(function (Projection$$1) {
    function EPSG3857Projection(code) {
      Projection$$1.call(this, {
        code: code,
        units: Units$1.METERS,
        extent: EXTENT,
        global: true,
        worldExtent: WORLD_EXTENT,
        getPointResolution: function(resolution, point) {
          return resolution / cosh(point[1] / RADIUS);
        }
      });

    }

    if ( Projection$$1 ) EPSG3857Projection.__proto__ = Projection$$1;
    EPSG3857Projection.prototype = Object.create( Projection$$1 && Projection$$1.prototype );
    EPSG3857Projection.prototype.constructor = EPSG3857Projection;

    return EPSG3857Projection;
  }(Projection$1));


  /**
   * Projections equal to EPSG:3857.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  var PROJECTIONS = [
    new EPSG3857Projection('EPSG:3857'),
    new EPSG3857Projection('EPSG:102100'),
    new EPSG3857Projection('EPSG:102113'),
    new EPSG3857Projection('EPSG:900913'),
    new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),
    new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),
    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')
  ];


  /**
   * Transformation from EPSG:4326 to EPSG:3857.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension (default is `2`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function fromEPSG4326(input, opt_output, opt_dimension) {
    var length = input.length;
    var dimension = opt_dimension > 1 ? opt_dimension : 2;
    var output = opt_output;
    if (output === undefined) {
      if (dimension > 2) {
        // preserve values beyond second dimension
        output = input.slice();
      } else {
        output = new Array(length);
      }
    }
    var halfSize = HALF_SIZE;
    for (var i = 0; i < length; i += dimension) {
      output[i] = halfSize * input[i] / 180;
      var y = RADIUS *
          Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));
      if (y > halfSize) {
        y = halfSize;
      } else if (y < -halfSize) {
        y = -halfSize;
      }
      output[i + 1] = y;
    }
    return output;
  }


  /**
   * Transformation from EPSG:3857 to EPSG:4326.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension (default is `2`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function toEPSG4326(input, opt_output, opt_dimension) {
    var length = input.length;
    var dimension = opt_dimension > 1 ? opt_dimension : 2;
    var output = opt_output;
    if (output === undefined) {
      if (dimension > 2) {
        // preserve values beyond second dimension
        output = input.slice();
      } else {
        output = new Array(length);
      }
    }
    for (var i = 0; i < length; i += dimension) {
      output[i] = 180 * input[i] / HALF_SIZE;
      output[i + 1] = 360 * Math.atan(
        Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;
    }
    return output;
  }

  /**
   * @module ol/proj/epsg4326
   */


  /**
   * Semi-major radius of the WGS84 ellipsoid.
   *
   * @const
   * @type {number}
   */
  var RADIUS$1 = 6378137;


  /**
   * Extent of the EPSG:4326 projection which is the whole world.
   *
   * @const
   * @type {import("../extent.js").Extent}
   */
  var EXTENT$1 = [-180, -90, 180, 90];


  /**
   * @const
   * @type {number}
   */
  var METERS_PER_UNIT$1 = Math.PI * RADIUS$1 / 180;


  /**
   * @classdesc
   * Projection object for WGS84 geographic coordinates (EPSG:4326).
   *
   * Note that OpenLayers does not strictly comply with the EPSG definition.
   * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
   * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
   */
  var EPSG4326Projection = /*@__PURE__*/(function (Projection$$1) {
    function EPSG4326Projection(code, opt_axisOrientation) {
      Projection$$1.call(this, {
        code: code,
        units: Units$1.DEGREES,
        extent: EXTENT$1,
        axisOrientation: opt_axisOrientation,
        global: true,
        metersPerUnit: METERS_PER_UNIT$1,
        worldExtent: EXTENT$1
      });

    }

    if ( Projection$$1 ) EPSG4326Projection.__proto__ = Projection$$1;
    EPSG4326Projection.prototype = Object.create( Projection$$1 && Projection$$1.prototype );
    EPSG4326Projection.prototype.constructor = EPSG4326Projection;

    return EPSG4326Projection;
  }(Projection$1));


  /**
   * Projections equal to EPSG:4326.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  var PROJECTIONS$1 = [
    new EPSG4326Projection('CRS:84'),
    new EPSG4326Projection('EPSG:4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
    new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
    new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
    new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu')
  ];

  /**
   * @module ol/proj/projections
   */


  /**
   * @type {Object<string, import("./Projection.js").default>}
   */
  var cache = {};


  /**
   * Get a cached projection by code.
   * @param {string} code The code for the projection.
   * @return {import("./Projection.js").default} The projection (if cached).
   */
  function get$1(code) {
    return cache[code] || null;
  }


  /**
   * Add a projection to the cache.
   * @param {string} code The projection code.
   * @param {import("./Projection.js").default} projection The projection to cache.
   */
  function add(code, projection) {
    cache[code] = projection;
  }

  /**
   * @module ol/proj/transforms
   */


  /**
   * @private
   * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
   */
  var transforms$1 = {};


  /**
   * Registers a conversion function to convert coordinates from the source
   * projection to the destination projection.
   *
   * @param {import("./Projection.js").default} source Source.
   * @param {import("./Projection.js").default} destination Destination.
   * @param {import("../proj.js").TransformFunction} transformFn Transform.
   */
  function add$1(source, destination, transformFn) {
    var sourceCode = source.getCode();
    var destinationCode = destination.getCode();
    if (!(sourceCode in transforms$1)) {
      transforms$1[sourceCode] = {};
    }
    transforms$1[sourceCode][destinationCode] = transformFn;
  }


  /**
   * Get a transform given a source code and a destination code.
   * @param {string} sourceCode The code for the source projection.
   * @param {string} destinationCode The code for the destination projection.
   * @return {import("../proj.js").TransformFunction|undefined} The transform function (if found).
   */
  function get$2(sourceCode, destinationCode) {
    var transform;
    if (sourceCode in transforms$1 && destinationCode in transforms$1[sourceCode]) {
      transform = transforms$1[sourceCode][destinationCode];
    }
    return transform;
  }

  /**
   * @module ol/proj
   */

  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension.
   * @return {Array<number>} Output coordinate array (new array, same coordinate
   *     values).
   */
  function cloneTransform(input, opt_output, opt_dimension) {
    var output;
    if (opt_output !== undefined) {
      for (var i = 0, ii = input.length; i < ii; ++i) {
        opt_output[i] = input[i];
      }
      output = opt_output;
    } else {
      output = input.slice();
    }
    return output;
  }


  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension.
   * @return {Array<number>} Input coordinate array (same array as input).
   */
  function identityTransform(input, opt_output, opt_dimension) {
    if (opt_output !== undefined && input !== opt_output) {
      for (var i = 0, ii = input.length; i < ii; ++i) {
        opt_output[i] = input[i];
      }
      input = opt_output;
    }
    return input;
  }


  /**
   * Add a Projection object to the list of supported projections that can be
   * looked up by their code.
   *
   * @param {Projection} projection Projection instance.
   * @api
   */
  function addProjection(projection) {
    add(projection.getCode(), projection);
    add$1(projection, projection, cloneTransform);
  }


  /**
   * @param {Array<Projection>} projections Projections.
   */
  function addProjections(projections) {
    projections.forEach(addProjection);
  }


  /**
   * Fetches a Projection object for the code specified.
   *
   * @param {ProjectionLike} projectionLike Either a code string which is
   *     a combination of authority and identifier such as "EPSG:4326", or an
   *     existing projection object, or undefined.
   * @return {Projection} Projection object, or null if not in list.
   * @api
   */
  function get$3(projectionLike) {
    return typeof projectionLike === 'string' ?
      get$1(/** @type {string} */ (projectionLike)) :
      (/** @type {Projection} */ (projectionLike) || null);
  }


  /**
   * Get the resolution of the point in degrees or distance units.
   * For projections with degrees as the unit this will simply return the
   * provided resolution. For other projections the point resolution is
   * by default estimated by transforming the 'point' pixel to EPSG:4326,
   * measuring its width and height on the normal sphere,
   * and taking the average of the width and height.
   * A custom function can be provided for a specific projection, either
   * by setting the `getPointResolution` option in the
   * {@link module:ol/proj/Projection~Projection} constructor or by using
   * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
   * projection object.
   * @param {ProjectionLike} projection The projection.
   * @param {number} resolution Nominal resolution in projection units.
   * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
   * @param {Units=} opt_units Units to get the point resolution in.
   * Default is the projection's units.
   * @return {number} Point resolution.
   * @api
   */
  function getPointResolution(projection, resolution, point, opt_units) {
    projection = get$3(projection);
    var pointResolution;
    var getter = projection.getPointResolutionFunc();
    if (getter) {
      pointResolution = getter(resolution, point);
    } else {
      var units = projection.getUnits();
      if (units == Units$1.DEGREES && !opt_units || opt_units == Units$1.DEGREES) {
        pointResolution = resolution;
      } else {
        // Estimate point resolution by transforming the center pixel to EPSG:4326,
        // measuring its width and height on the normal sphere, and taking the
        // average of the width and height.
        var toEPSG4326$$1 = getTransformFromProjections(projection, get$3('EPSG:4326'));
        var vertices = [
          point[0] - resolution / 2, point[1],
          point[0] + resolution / 2, point[1],
          point[0], point[1] - resolution / 2,
          point[0], point[1] + resolution / 2
        ];
        vertices = toEPSG4326$$1(vertices, vertices, 2);
        var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));
        var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));
        pointResolution = (width + height) / 2;
        var metersPerUnit = opt_units ?
          METERS_PER_UNIT[opt_units] :
          projection.getMetersPerUnit();
        if (metersPerUnit !== undefined) {
          pointResolution /= metersPerUnit;
        }
      }
    }
    return pointResolution;
  }


  /**
   * Registers transformation functions that don't alter coordinates. Those allow
   * to transform between projections with equal meaning.
   *
   * @param {Array<Projection>} projections Projections.
   * @api
   */
  function addEquivalentProjections(projections) {
    addProjections(projections);
    projections.forEach(function(source) {
      projections.forEach(function(destination) {
        if (source !== destination) {
          add$1(source, destination, cloneTransform);
        }
      });
    });
  }


  /**
   * Registers transformation functions to convert coordinates in any projection
   * in projection1 to any projection in projection2.
   *
   * @param {Array<Projection>} projections1 Projections with equal
   *     meaning.
   * @param {Array<Projection>} projections2 Projections with equal
   *     meaning.
   * @param {TransformFunction} forwardTransform Transformation from any
   *   projection in projection1 to any projection in projection2.
   * @param {TransformFunction} inverseTransform Transform from any projection
   *   in projection2 to any projection in projection1..
   */
  function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {
    projections1.forEach(function(projection1) {
      projections2.forEach(function(projection2) {
        add$1(projection1, projection2, forwardTransform);
        add$1(projection2, projection1, inverseTransform);
      });
    });
  }


  /**
   * @param {Projection|string|undefined} projection Projection.
   * @param {string} defaultCode Default code.
   * @return {Projection} Projection.
   */
  function createProjection(projection, defaultCode) {
    if (!projection) {
      return get$3(defaultCode);
    } else if (typeof projection === 'string') {
      return get$3(projection);
    } else {
      return (
        /** @type {Projection} */ (projection)
      );
    }
  }


  /**
   * Checks if two projections are the same, that is every coordinate in one
   * projection does represent the same geographic point as the same coordinate in
   * the other projection.
   *
   * @param {Projection} projection1 Projection 1.
   * @param {Projection} projection2 Projection 2.
   * @return {boolean} Equivalent.
   * @api
   */
  function equivalent(projection1, projection2) {
    if (projection1 === projection2) {
      return true;
    }
    var equalUnits = projection1.getUnits() === projection2.getUnits();
    if (projection1.getCode() === projection2.getCode()) {
      return equalUnits;
    } else {
      var transformFunc = getTransformFromProjections(projection1, projection2);
      return transformFunc === cloneTransform && equalUnits;
    }
  }


  /**
   * Searches in the list of transform functions for the function for converting
   * coordinates from the source projection to the destination projection.
   *
   * @param {Projection} sourceProjection Source Projection object.
   * @param {Projection} destinationProjection Destination Projection
   *     object.
   * @return {TransformFunction} Transform function.
   */
  function getTransformFromProjections(sourceProjection, destinationProjection) {
    var sourceCode = sourceProjection.getCode();
    var destinationCode = destinationProjection.getCode();
    var transformFunc = get$2(sourceCode, destinationCode);
    if (!transformFunc) {
      transformFunc = identityTransform;
    }
    return transformFunc;
  }


  /**
   * Given the projection-like objects, searches for a transformation
   * function to convert a coordinates array from the source projection to the
   * destination projection.
   *
   * @param {ProjectionLike} source Source.
   * @param {ProjectionLike} destination Destination.
   * @return {TransformFunction} Transform function.
   * @api
   */
  function getTransform(source, destination) {
    var sourceProjection = get$3(source);
    var destinationProjection = get$3(destination);
    return getTransformFromProjections(sourceProjection, destinationProjection);
  }

  /**
   * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
   * by when this module is executed and should only need to be called again after
   * `clearAllProjections()` is called (e.g. in tests).
   */
  function addCommon() {
    // Add transformations that don't alter coordinates to convert within set of
    // projections with equal meaning.
    addEquivalentProjections(PROJECTIONS);
    addEquivalentProjections(PROJECTIONS$1);
    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
    // coordinates and back.
    addEquivalentTransforms(PROJECTIONS$1, PROJECTIONS, fromEPSG4326, toEPSG4326);
  }

  addCommon();

  /**
   * @module ol/transform
   */


  /**
   * An array representing an affine 2d transformation for use with
   * {@link module:ol/transform} functions. The array has 6 elements.
   * @typedef {!Array<number>} Transform
   */


  /**
   * Collection of affine 2d transformation functions. The functions work on an
   * array of 6 elements. The element order is compatible with the [SVGMatrix
   * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
   * a subset (elements a to f) of a 3×3 matrix:
   * ```
   * [ a c e ]
   * [ b d f ]
   * [ 0 0 1 ]
   * ```
   */


  /**
   * @private
   * @type {Transform}
   */
  var tmp_ = new Array(6);


  /**
   * Create an identity transform.
   * @return {!Transform} Identity transform.
   */
  function create() {
    return [1, 0, 0, 1, 0, 0];
  }


  /**
   * Resets the given transform to an identity transform.
   * @param {!Transform} transform Transform.
   * @return {!Transform} Transform.
   */
  function reset(transform) {
    return set$1(transform, 1, 0, 0, 1, 0, 0);
  }


  /**
   * Multiply the underlying matrices of two transforms and return the result in
   * the first transform.
   * @param {!Transform} transform1 Transform parameters of matrix 1.
   * @param {!Transform} transform2 Transform parameters of matrix 2.
   * @return {!Transform} transform1 multiplied with transform2.
   */
  function multiply(transform1, transform2) {
    var a1 = transform1[0];
    var b1 = transform1[1];
    var c1 = transform1[2];
    var d1 = transform1[3];
    var e1 = transform1[4];
    var f1 = transform1[5];
    var a2 = transform2[0];
    var b2 = transform2[1];
    var c2 = transform2[2];
    var d2 = transform2[3];
    var e2 = transform2[4];
    var f2 = transform2[5];

    transform1[0] = a1 * a2 + c1 * b2;
    transform1[1] = b1 * a2 + d1 * b2;
    transform1[2] = a1 * c2 + c1 * d2;
    transform1[3] = b1 * c2 + d1 * d2;
    transform1[4] = a1 * e2 + c1 * f2 + e1;
    transform1[5] = b1 * e2 + d1 * f2 + f1;

    return transform1;
  }

  /**
   * Set the transform components a-f on a given transform.
   * @param {!Transform} transform Transform.
   * @param {number} a The a component of the transform.
   * @param {number} b The b component of the transform.
   * @param {number} c The c component of the transform.
   * @param {number} d The d component of the transform.
   * @param {number} e The e component of the transform.
   * @param {number} f The f component of the transform.
   * @return {!Transform} Matrix with transform applied.
   */
  function set$1(transform, a, b, c, d, e, f) {
    transform[0] = a;
    transform[1] = b;
    transform[2] = c;
    transform[3] = d;
    transform[4] = e;
    transform[5] = f;
    return transform;
  }


  /**
   * Set transform on one matrix from another matrix.
   * @param {!Transform} transform1 Matrix to set transform to.
   * @param {!Transform} transform2 Matrix to set transform from.
   * @return {!Transform} transform1 with transform from transform2 applied.
   */
  function setFromArray(transform1, transform2) {
    transform1[0] = transform2[0];
    transform1[1] = transform2[1];
    transform1[2] = transform2[2];
    transform1[3] = transform2[3];
    transform1[4] = transform2[4];
    transform1[5] = transform2[5];
    return transform1;
  }


  /**
   * Transforms the given coordinate with the given transform returning the
   * resulting, transformed coordinate. The coordinate will be modified in-place.
   *
   * @param {Transform} transform The transformation.
   * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
   * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
   *     chained together.
   */
  function apply(transform, coordinate) {
    var x = coordinate[0];
    var y = coordinate[1];
    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
    return coordinate;
  }


  /**
   * Applies rotation to the given transform.
   * @param {!Transform} transform Transform.
   * @param {number} angle Angle in radians.
   * @return {!Transform} The rotated transform.
   */
  function rotate$1(transform, angle) {
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    return multiply(transform, set$1(tmp_, cos, sin, -sin, cos, 0, 0));
  }


  /**
   * Applies scale to a given transform.
   * @param {!Transform} transform Transform.
   * @param {number} x Scale factor x.
   * @param {number} y Scale factor y.
   * @return {!Transform} The scaled transform.
   */
  function scale$1(transform, x, y) {
    return multiply(transform, set$1(tmp_, x, 0, 0, y, 0, 0));
  }


  /**
   * Applies translation to the given transform.
   * @param {!Transform} transform Transform.
   * @param {number} dx Translation x.
   * @param {number} dy Translation y.
   * @return {!Transform} The translated transform.
   */
  function translate$1(transform, dx, dy) {
    return multiply(transform, set$1(tmp_, 1, 0, 0, 1, dx, dy));
  }


  /**
   * Creates a composite transform given an initial translation, scale, rotation, and
   * final translation (in that order only, not commutative).
   * @param {!Transform} transform The transform (will be modified in place).
   * @param {number} dx1 Initial translation x.
   * @param {number} dy1 Initial translation y.
   * @param {number} sx Scale factor x.
   * @param {number} sy Scale factor y.
   * @param {number} angle Rotation (in counter-clockwise radians).
   * @param {number} dx2 Final translation x.
   * @param {number} dy2 Final translation y.
   * @return {!Transform} The composite transform.
   */
  function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
    var sin = Math.sin(angle);
    var cos = Math.cos(angle);
    transform[0] = sx * cos;
    transform[1] = sy * sin;
    transform[2] = -sx * sin;
    transform[3] = sy * cos;
    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
    return transform;
  }


  /**
   * Invert the given transform.
   * @param {!Transform} transform Transform.
   * @return {!Transform} Inverse of the transform.
   */
  function invert(transform) {
    var det = determinant(transform);
    assert(det !== 0, 32); // Transformation matrix cannot be inverted

    var a = transform[0];
    var b = transform[1];
    var c = transform[2];
    var d = transform[3];
    var e = transform[4];
    var f = transform[5];

    transform[0] = d / det;
    transform[1] = -b / det;
    transform[2] = -c / det;
    transform[3] = a / det;
    transform[4] = (c * f - d * e) / det;
    transform[5] = -(a * f - b * e) / det;

    return transform;
  }


  /**
   * Returns the determinant of the given matrix.
   * @param {!Transform} mat Matrix.
   * @return {number} Determinant.
   */
  function determinant(mat) {
    return mat[0] * mat[3] - mat[1] * mat[2];
  }

  /**
   * @module ol/geom/Geometry
   */


  /**
   * @type {import("../transform.js").Transform}
   */
  var tmpTransform = create();


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for vector geometries.
   *
   * To get notified of changes to the geometry, register a listener for the
   * generic `change` event on your geometry instance.
   *
   * @abstract
   * @api
   */
  var Geometry = /*@__PURE__*/(function (BaseObject$$1) {
    function Geometry() {

      BaseObject$$1.call(this);

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = createEmpty();

      /**
       * @private
       * @type {number}
       */
      this.extentRevision_ = -1;

      /**
       * @protected
       * @type {Object<string, Geometry>}
       */
      this.simplifiedGeometryCache = {};

      /**
       * @protected
       * @type {number}
       */
      this.simplifiedGeometryMaxMinSquaredTolerance = 0;

      /**
       * @protected
       * @type {number}
       */
      this.simplifiedGeometryRevision = 0;

    }

    if ( BaseObject$$1 ) Geometry.__proto__ = BaseObject$$1;
    Geometry.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Geometry.prototype.constructor = Geometry;

    /**
     * Make a complete copy of the geometry.
     * @abstract
     * @return {!Geometry} Clone.
     */
    Geometry.prototype.clone = function clone () {
      return abstract();
    };

    /**
     * @abstract
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    Geometry.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      return abstract();
    };

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    Geometry.prototype.containsXY = function containsXY$$1 (x, y) {
      return false;
    };

    /**
     * Return the closest point of the geometry to the passed point as
     * {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} point Point.
     * @param {import("../coordinate.js").Coordinate=} opt_closestPoint Closest point.
     * @return {import("../coordinate.js").Coordinate} Closest point.
     * @api
     */
    Geometry.prototype.getClosestPoint = function getClosestPoint (point, opt_closestPoint) {
      var closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];
      this.closestPointXY(point[0], point[1], closestPoint, Infinity);
      return closestPoint;
    };

    /**
     * Returns true if this geometry includes the specified coordinate. If the
     * coordinate is on the boundary of the geometry, returns false.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} Contains coordinate.
     * @api
     */
    Geometry.prototype.intersectsCoordinate = function intersectsCoordinate (coordinate) {
      return this.containsXY(coordinate[0], coordinate[1]);
    };

    /**
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */
    Geometry.prototype.computeExtent = function computeExtent (extent$$1) {
      return abstract();
    };

    /**
     * Get the extent of the geometry.
     * @param {import("../extent.js").Extent=} opt_extent Extent.
     * @return {import("../extent.js").Extent} extent Extent.
     * @api
     */
    Geometry.prototype.getExtent = function getExtent (opt_extent) {
      if (this.extentRevision_ != this.getRevision()) {
        this.extent_ = this.computeExtent(this.extent_);
        this.extentRevision_ = this.getRevision();
      }
      return returnOrUpdate(this.extent_, opt_extent);
    };

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} angle Rotation angle in radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */
    Geometry.prototype.rotate = function rotate$$1 (angle, anchor) {
      abstract();
    };

    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number=} opt_sy The scaling factor in the y-direction (defaults to
     *     sx).
     * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     */
    Geometry.prototype.scale = function scale$$1 (sx, opt_sy, opt_anchor) {
      abstract();
    };

    /**
     * Create a simplified version of this geometry.  For linestrings, this uses
     * the the {@link
     * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
     * Douglas Peucker} algorithm.  For polygons, a quantization-based
     * simplification is used to preserve topology.
     * @param {number} tolerance The tolerance distance for simplification.
     * @return {Geometry} A new, simplified version of the original geometry.
     * @api
     */
    Geometry.prototype.simplify = function simplify (tolerance) {
      return this.getSimplifiedGeometry(tolerance * tolerance);
    };

    /**
     * Create a simplified version of this geometry using the Douglas Peucker
     * algorithm.
     * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
     * @abstract
     * @param {number} squaredTolerance Squared tolerance.
     * @return {Geometry} Simplified geometry.
     */
    Geometry.prototype.getSimplifiedGeometry = function getSimplifiedGeometry (squaredTolerance) {
      return abstract();
    };

    /**
     * Get the type of this geometry.
     * @abstract
     * @return {import("./GeometryType.js").default} Geometry type.
     */
    Geometry.prototype.getType = function getType () {
      return abstract();
    };

    /**
     * Apply a transform function to each coordinate of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @abstract
     * @param {import("../proj.js").TransformFunction} transformFn Transform.
     */
    Geometry.prototype.applyTransform = function applyTransform$$1 (transformFn) {
      abstract();
    };

    /**
     * Test if the geometry and the passed extent intersect.
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     */
    Geometry.prototype.intersectsExtent = function intersectsExtent (extent$$1) {
      return abstract();
    };

    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @abstract
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */
    Geometry.prototype.translate = function translate$$1 (deltaX, deltaY) {
      abstract();
    };

    /**
     * Transform each coordinate of the geometry from one coordinate reference
     * system to another. The geometry is modified in place.
     * For example, a line will be transformed to a line and a circle to a circle.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     *
     * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @return {Geometry} This geometry.  Note that original geometry is
     *     modified in place.
     * @api
     */
    Geometry.prototype.transform = function transform$$1 (source, destination) {
      /** @type {import("../proj/Projection.js").default} */
      var sourceProj = get$3(source);
      var transformFn = sourceProj.getUnits() == Units$1.TILE_PIXELS ?
        function(inCoordinates, outCoordinates, stride) {
          var pixelExtent = sourceProj.getExtent();
          var projectedExtent = sourceProj.getWorldExtent();
          var scale$$1 = getHeight(projectedExtent) / getHeight(pixelExtent);
          compose(tmpTransform,
            projectedExtent[0], projectedExtent[3],
            scale$$1, -scale$$1, 0,
            0, 0);
          transform2D(inCoordinates, 0, inCoordinates.length, stride,
            tmpTransform, outCoordinates);
          return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);
        } :
        getTransform(sourceProj, destination);
      this.applyTransform(transformFn);
      return this;
    };

    return Geometry;
  }(BaseObject));

  /**
   * @module ol/geom/SimpleGeometry
   */

  /**
   * @classdesc
   * Abstract base class; only used for creating subclasses; do not instantiate
   * in apps, as cannot be rendered.
   *
   * @abstract
   * @api
   */
  var SimpleGeometry = /*@__PURE__*/(function (Geometry$$1) {
    function SimpleGeometry() {

      Geometry$$1.call(this);

      /**
       * @protected
       * @type {GeometryLayout}
       */
      this.layout = GeometryLayout.XY;

      /**
       * @protected
       * @type {number}
       */
      this.stride = 2;

      /**
       * @protected
       * @type {Array<number>}
       */
      this.flatCoordinates = null;

    }

    if ( Geometry$$1 ) SimpleGeometry.__proto__ = Geometry$$1;
    SimpleGeometry.prototype = Object.create( Geometry$$1 && Geometry$$1.prototype );
    SimpleGeometry.prototype.constructor = SimpleGeometry;

    /**
     * @inheritDoc
     */
    SimpleGeometry.prototype.computeExtent = function computeExtent (extent$$1) {
      return createOrUpdateFromFlatCoordinates(this.flatCoordinates,
        0, this.flatCoordinates.length, this.stride, extent$$1);
    };

    /**
     * @abstract
     * @return {Array} Coordinates.
     */
    SimpleGeometry.prototype.getCoordinates = function getCoordinates () {
      return abstract();
    };

    /**
     * Return the first coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} First coordinate.
     * @api
     */
    SimpleGeometry.prototype.getFirstCoordinate = function getFirstCoordinate () {
      return this.flatCoordinates.slice(0, this.stride);
    };

    /**
     * @return {Array<number>} Flat coordinates.
     */
    SimpleGeometry.prototype.getFlatCoordinates = function getFlatCoordinates () {
      return this.flatCoordinates;
    };

    /**
     * Return the last coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} Last point.
     * @api
     */
    SimpleGeometry.prototype.getLastCoordinate = function getLastCoordinate () {
      return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
    };

    /**
     * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.
     * @return {GeometryLayout} Layout.
     * @api
     */
    SimpleGeometry.prototype.getLayout = function getLayout () {
      return this.layout;
    };

    /**
     * @inheritDoc
     */
    SimpleGeometry.prototype.getSimplifiedGeometry = function getSimplifiedGeometry (squaredTolerance) {
      if (this.simplifiedGeometryRevision != this.getRevision()) {
        clear(this.simplifiedGeometryCache);
        this.simplifiedGeometryMaxMinSquaredTolerance = 0;
        this.simplifiedGeometryRevision = this.getRevision();
      }
      // If squaredTolerance is negative or if we know that simplification will not
      // have any effect then just return this.
      if (squaredTolerance < 0 ||
          (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
           squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {
        return this;
      }
      var key = squaredTolerance.toString();
      if (this.simplifiedGeometryCache.hasOwnProperty(key)) {
        return this.simplifiedGeometryCache[key];
      } else {
        var simplifiedGeometry =
            this.getSimplifiedGeometryInternal(squaredTolerance);
        var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
          this.simplifiedGeometryCache[key] = simplifiedGeometry;
          return simplifiedGeometry;
        } else {
          // Simplification did not actually remove any coordinates.  We now know
          // that any calls to getSimplifiedGeometry with a squaredTolerance less
          // than or equal to the current squaredTolerance will also not have any
          // effect.  This allows us to short circuit simplification (saving CPU
          // cycles) and prevents the cache of simplified geometries from filling
          // up with useless identical copies of this geometry (saving memory).
          this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
          return this;
        }
      }
    };

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {SimpleGeometry} Simplified geometry.
     * @protected
     */
    SimpleGeometry.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      return this;
    };

    /**
     * @return {number} Stride.
     */
    SimpleGeometry.prototype.getStride = function getStride () {
      return this.stride;
    };

    /**
     * @param {GeometryLayout} layout Layout.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     */
    SimpleGeometry.prototype.setFlatCoordinates = function setFlatCoordinates (layout, flatCoordinates) {
      this.stride = getStrideForLayout(layout);
      this.layout = layout;
      this.flatCoordinates = flatCoordinates;
    };

    /**
     * @abstract
     * @param {!Array} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     */
    SimpleGeometry.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      abstract();
    };

    /**
     * @param {GeometryLayout|undefined} layout Layout.
     * @param {Array} coordinates Coordinates.
     * @param {number} nesting Nesting.
     * @protected
     */
    SimpleGeometry.prototype.setLayout = function setLayout (layout, coordinates, nesting) {
      /** @type {number} */
      var stride;
      if (layout) {
        stride = getStrideForLayout(layout);
      } else {
        for (var i = 0; i < nesting; ++i) {
          if (coordinates.length === 0) {
            this.layout = GeometryLayout.XY;
            this.stride = 2;
            return;
          } else {
            coordinates = /** @type {Array} */ (coordinates[0]);
          }
        }
        stride = coordinates.length;
        layout = getLayoutForStride(stride);
      }
      this.layout = layout;
      this.stride = stride;
    };

    /**
     * @inheritDoc
     * @api
     */
    SimpleGeometry.prototype.applyTransform = function applyTransform$$1 (transformFn) {
      if (this.flatCoordinates) {
        transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
        this.changed();
      }
    };

    /**
     * @inheritDoc
     * @api
     */
    SimpleGeometry.prototype.rotate = function rotate$1 (angle, anchor) {
      var flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        var stride = this.getStride();
        rotate(
          flatCoordinates, 0, flatCoordinates.length,
          stride, angle, anchor, flatCoordinates);
        this.changed();
      }
    };

    /**
     * @inheritDoc
     * @api
     */
    SimpleGeometry.prototype.scale = function scale$1 (sx, opt_sy, opt_anchor) {
      var sy = opt_sy;
      if (sy === undefined) {
        sy = sx;
      }
      var anchor = opt_anchor;
      if (!anchor) {
        anchor = getCenter(this.getExtent());
      }
      var flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        var stride = this.getStride();
        scale(
          flatCoordinates, 0, flatCoordinates.length,
          stride, sx, sy, anchor, flatCoordinates);
        this.changed();
      }
    };

    /**
     * @inheritDoc
     * @api
     */
    SimpleGeometry.prototype.translate = function translate$1 (deltaX, deltaY) {
      var flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        var stride = this.getStride();
        translate(
          flatCoordinates, 0, flatCoordinates.length, stride,
          deltaX, deltaY, flatCoordinates);
        this.changed();
      }
    };

    return SimpleGeometry;
  }(Geometry));


  /**
   * @param {number} stride Stride.
   * @return {GeometryLayout} layout Layout.
   */
  function getLayoutForStride(stride) {
    var layout;
    if (stride == 2) {
      layout = GeometryLayout.XY;
    } else if (stride == 3) {
      layout = GeometryLayout.XYZ;
    } else if (stride == 4) {
      layout = GeometryLayout.XYZM;
    }
    return (
      /** @type {GeometryLayout} */ (layout)
    );
  }


  /**
   * @param {GeometryLayout} layout Layout.
   * @return {number} Stride.
   */
  function getStrideForLayout(layout) {
    var stride;
    if (layout == GeometryLayout.XY) {
      stride = 2;
    } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {
      stride = 3;
    } else if (layout == GeometryLayout.XYZM) {
      stride = 4;
    }
    return /** @type {number} */ (stride);
  }


  /**
   * @param {SimpleGeometry} simpleGeometry Simple geometry.
   * @param {import("../transform.js").Transform} transform Transform.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed flat coordinates.
   */
  function transformGeom2D(simpleGeometry, transform, opt_dest) {
    var flatCoordinates = simpleGeometry.getFlatCoordinates();
    if (!flatCoordinates) {
      return null;
    } else {
      var stride = simpleGeometry.getStride();
      return transform2D(
        flatCoordinates, 0, flatCoordinates.length, stride,
        transform, opt_dest);
    }
  }

  /**
   * @module ol/geom/flat/area
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRing(flatCoordinates, offset, end, stride) {
    var twiceArea = 0;
    var x1 = flatCoordinates[end - stride];
    var y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      var x2 = flatCoordinates[offset];
      var y2 = flatCoordinates[offset + 1];
      twiceArea += y1 * x2 - x1 * y2;
      x1 = x2;
      y1 = y2;
    }
    return twiceArea / 2;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRings(flatCoordinates, offset, ends, stride) {
    var area = 0;
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      area += linearRing(flatCoordinates, offset, end, stride);
      offset = end;
    }
    return area;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRingss(flatCoordinates, offset, endss, stride) {
    var area = 0;
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      area += linearRings(flatCoordinates, offset, ends, stride);
      offset = ends[ends.length - 1];
    }
    return area;
  }

  /**
   * @module ol/geom/flat/closest
   */


  /**
   * Returns the point on the 2D line segment flatCoordinates[offset1] to
   * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
   * dimensions are linearly interpolated.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset1 Offset 1.
   * @param {number} offset2 Offset 2.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   */
  function assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
    var x1 = flatCoordinates[offset1];
    var y1 = flatCoordinates[offset1 + 1];
    var dx = flatCoordinates[offset2] - x1;
    var dy = flatCoordinates[offset2 + 1] - y1;
    var offset;
    if (dx === 0 && dy === 0) {
      offset = offset1;
    } else {
      var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
      if (t > 1) {
        offset = offset2;
      } else if (t > 0) {
        for (var i = 0; i < stride; ++i) {
          closestPoint[i] = lerp(flatCoordinates[offset1 + i],
            flatCoordinates[offset2 + i], t);
        }
        closestPoint.length = stride;
        return;
      } else {
        offset = offset1;
      }
    }
    for (var i$1 = 0; i$1 < stride; ++i$1) {
      closestPoint[i$1] = flatCoordinates[offset + i$1];
    }
    closestPoint.length = stride;
  }


  /**
   * Return the squared of the largest distance between any pair of consecutive
   * coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
    var x1 = flatCoordinates[offset];
    var y1 = flatCoordinates[offset + 1];
    for (offset += stride; offset < end; offset += stride) {
      var x2 = flatCoordinates[offset];
      var y2 = flatCoordinates[offset + 1];
      var squaredDelta = squaredDistance(x1, y1, x2, y2);
      if (squaredDelta > max) {
        max = squaredDelta;
      }
      x1 = x2;
      y1 = y2;
    }
    return max;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      max = maxSquaredDelta(
        flatCoordinates, offset, end, stride, max);
      offset = end;
    }
    return max;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      max = arrayMaxSquaredDelta(
        flatCoordinates, offset, ends, stride, max);
      offset = ends[ends.length - 1];
    }
    return max;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestPoint(flatCoordinates, offset, end,
    stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
    opt_tmpPoint) {
    if (offset == end) {
      return minSquaredDistance;
    }
    var i, squaredDistance$$1;
    if (maxDelta === 0) {
      // All points are identical, so just test the first point.
      squaredDistance$$1 = squaredDistance(
        x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
      if (squaredDistance$$1 < minSquaredDistance) {
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[offset + i];
        }
        closestPoint.length = stride;
        return squaredDistance$$1;
      } else {
        return minSquaredDistance;
      }
    }
    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
    var index = offset + stride;
    while (index < end) {
      assignClosest(
        flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
      squaredDistance$$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
      if (squaredDistance$$1 < minSquaredDistance) {
        minSquaredDistance = squaredDistance$$1;
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = tmpPoint[i];
        }
        closestPoint.length = stride;
        index += stride;
      } else {
        // Skip ahead multiple points, because we know that all the skipped
        // points cannot be any closer than the closest point we have found so
        // far.  We know this because we know how close the current point is, how
        // close the closest point we have found so far is, and the maximum
        // distance between consecutive points.  For example, if we're currently
        // at distance 10, the best we've found so far is 3, and that the maximum
        // distance between consecutive points is 2, then we'll need to skip at
        // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
        // finding a closer point.  We use Math.max(..., 1) to ensure that we
        // always advance at least one point, to avoid an infinite loop.
        index += stride * Math.max(
          ((Math.sqrt(squaredDistance$$1) -
              Math.sqrt(minSquaredDistance)) / maxDelta) | 0, 1);
      }
    }
    if (isRing) {
      // Check the closing segment.
      assignClosest(
        flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
      squaredDistance$$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
      if (squaredDistance$$1 < minSquaredDistance) {
        minSquaredDistance = squaredDistance$$1;
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = tmpPoint[i];
        }
        closestPoint.length = stride;
      }
    }
    return minSquaredDistance;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestArrayPoint(flatCoordinates, offset, ends,
    stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
    opt_tmpPoint) {
    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      minSquaredDistance = assignClosestPoint(
        flatCoordinates, offset, end, stride,
        maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
      offset = end;
    }
    return minSquaredDistance;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestMultiArrayPoint(flatCoordinates, offset,
    endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
    opt_tmpPoint) {
    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      minSquaredDistance = assignClosestArrayPoint(
        flatCoordinates, offset, ends, stride,
        maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
      offset = ends[ends.length - 1];
    }
    return minSquaredDistance;
  }

  /**
   * @module ol/geom/flat/deflate
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
    for (var i = 0, ii = coordinate.length; i < ii; ++i) {
      flatCoordinates[offset++] = coordinate[i];
    }
    return offset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
    for (var i = 0, ii = coordinates.length; i < ii; ++i) {
      var coordinate = coordinates[i];
      for (var j = 0; j < stride; ++j) {
        flatCoordinates[offset++] = coordinate[j];
      }
    }
    return offset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
   * @param {number} stride Stride.
   * @param {Array<number>=} opt_ends Ends.
   * @return {Array<number>} Ends.
   */
  function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
    var ends = opt_ends ? opt_ends : [];
    var i = 0;
    for (var j = 0, jj = coordinatess.length; j < jj; ++j) {
      var end = deflateCoordinates(
        flatCoordinates, offset, coordinatess[j], stride);
      ends[i++] = end;
      offset = end;
    }
    ends.length = i;
    return ends;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} coordinatesss Coordinatesss.
   * @param {number} stride Stride.
   * @param {Array<Array<number>>=} opt_endss Endss.
   * @return {Array<Array<number>>} Endss.
   */
  function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, opt_endss) {
    var endss = opt_endss ? opt_endss : [];
    var i = 0;
    for (var j = 0, jj = coordinatesss.length; j < jj; ++j) {
      var ends = deflateCoordinatesArray(
        flatCoordinates, offset, coordinatesss[j], stride, endss[i]);
      endss[i++] = ends;
      offset = ends[ends.length - 1];
    }
    endss.length = i;
    return endss;
  }

  /**
   * @module ol/geom/flat/inflate
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Array<import("../../coordinate.js").Coordinate>=} opt_coordinates Coordinates.
   * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
   */
  function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {
    var coordinates = opt_coordinates !== undefined ? opt_coordinates : [];
    var i = 0;
    for (var j = offset; j < end; j += stride) {
      coordinates[i++] = flatCoordinates.slice(j, j + stride);
    }
    coordinates.length = i;
    return coordinates;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>=} opt_coordinatess Coordinatess.
   * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
   */
  function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {
    var coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];
    var i = 0;
    for (var j = 0, jj = ends.length; j < jj; ++j) {
      var end = ends[j];
      coordinatess[i++] = inflateCoordinates(
        flatCoordinates, offset, end, stride, coordinatess[i]);
      offset = end;
    }
    coordinatess.length = i;
    return coordinatess;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>=} opt_coordinatesss
   *     Coordinatesss.
   * @return {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} Coordinatesss.
   */
  function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, opt_coordinatesss) {
    var coordinatesss = opt_coordinatesss !== undefined ? opt_coordinatesss : [];
    var i = 0;
    for (var j = 0, jj = endss.length; j < jj; ++j) {
      var ends = endss[j];
      coordinatesss[i++] = inflateCoordinatesArray(
        flatCoordinates, offset, ends, stride, coordinatesss[i]);
      offset = ends[ends.length - 1];
    }
    coordinatesss.length = i;
    return coordinatesss;
  }

  /**
   * @module ol/geom/flat/simplify
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function douglasPeucker(flatCoordinates, offset, end,
    stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    var n = (end - offset) / stride;
    if (n < 3) {
      for (; offset < end; offset += stride) {
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset];
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset + 1];
      }
      return simplifiedOffset;
    }
    /** @type {Array<number>} */
    var markers = new Array(n);
    markers[0] = 1;
    markers[n - 1] = 1;
    /** @type {Array<number>} */
    var stack = [offset, end - stride];
    var index = 0;
    while (stack.length > 0) {
      var last = stack.pop();
      var first = stack.pop();
      var maxSquaredDistance = 0;
      var x1 = flatCoordinates[first];
      var y1 = flatCoordinates[first + 1];
      var x2 = flatCoordinates[last];
      var y2 = flatCoordinates[last + 1];
      for (var i = first + stride; i < last; i += stride) {
        var x = flatCoordinates[i];
        var y = flatCoordinates[i + 1];
        var squaredDistance$$1 = squaredSegmentDistance(
          x, y, x1, y1, x2, y2);
        if (squaredDistance$$1 > maxSquaredDistance) {
          index = i;
          maxSquaredDistance = squaredDistance$$1;
        }
      }
      if (maxSquaredDistance > squaredTolerance) {
        markers[(index - offset) / stride] = 1;
        if (first + stride < index) {
          stack.push(first, index);
        }
        if (index + stride < last) {
          stack.push(index, last);
        }
      }
    }
    for (var i$1 = 0; i$1 < n; ++i$1) {
      if (markers[i$1]) {
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset + i$1 * stride];
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset + i$1 * stride + 1];
      }
    }
    return simplifiedOffset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function douglasPeuckerArray(flatCoordinates, offset,
    ends, stride, squaredTolerance, simplifiedFlatCoordinates,
    simplifiedOffset, simplifiedEnds) {
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      simplifiedOffset = douglasPeucker(
        flatCoordinates, offset, end, stride, squaredTolerance,
        simplifiedFlatCoordinates, simplifiedOffset);
      simplifiedEnds.push(simplifiedOffset);
      offset = end;
    }
    return simplifiedOffset;
  }


  /**
   * @param {number} value Value.
   * @param {number} tolerance Tolerance.
   * @return {number} Rounded value.
   */
  function snap(value, tolerance) {
    return tolerance * Math.round(value / tolerance);
  }


  /**
   * Simplifies a line string using an algorithm designed by Tim Schaub.
   * Coordinates are snapped to the nearest value in a virtual grid and
   * consecutive duplicate coordinates are discarded.  This effectively preserves
   * topology as the simplification of any subsection of a line string is
   * independent of the rest of the line string.  This means that, for examples,
   * the common edge between two polygons will be simplified to the same line
   * string independently in both polygons.  This implementation uses a single
   * pass over the coordinates and eliminates intermediate collinear points.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function quantize(flatCoordinates, offset, end, stride,
    tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    // do nothing if the line is empty
    if (offset == end) {
      return simplifiedOffset;
    }
    // snap the first coordinate (P1)
    var x1 = snap(flatCoordinates[offset], tolerance);
    var y1 = snap(flatCoordinates[offset + 1], tolerance);
    offset += stride;
    // add the first coordinate to the output
    simplifiedFlatCoordinates[simplifiedOffset++] = x1;
    simplifiedFlatCoordinates[simplifiedOffset++] = y1;
    // find the next coordinate that does not snap to the same value as the first
    // coordinate (P2)
    var x2, y2;
    do {
      x2 = snap(flatCoordinates[offset], tolerance);
      y2 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      if (offset == end) {
        // all coordinates snap to the same value, the line collapses to a point
        // push the last snapped value anyway to ensure that the output contains
        // at least two points
        // FIXME should we really return at least two points anyway?
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        return simplifiedOffset;
      }
    } while (x2 == x1 && y2 == y1);
    while (offset < end) {
      // snap the next coordinate (P3)
      var x3 = snap(flatCoordinates[offset], tolerance);
      var y3 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      // skip P3 if it is equal to P2
      if (x3 == x2 && y3 == y2) {
        continue;
      }
      // calculate the delta between P1 and P2
      var dx1 = x2 - x1;
      var dy1 = y2 - y1;
      // calculate the delta between P3 and P1
      var dx2 = x3 - x1;
      var dy2 = y3 - y1;
      // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
      // P1 in the same direction then P2 is on the straight line between P1 and
      // P3
      if ((dx1 * dy2 == dy1 * dx2) &&
          ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
          ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {
        // discard P2 and set P2 = P3
        x2 = x3;
        y2 = y3;
        continue;
      }
      // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
      // between P3 and P1 or on the opposite half of the line to P2.  add P2,
      // and continue with P1 = P2 and P2 = P3
      simplifiedFlatCoordinates[simplifiedOffset++] = x2;
      simplifiedFlatCoordinates[simplifiedOffset++] = y2;
      x1 = x2;
      y1 = y2;
      x2 = x3;
      y2 = y3;
    }
    // add the last point (P2)
    simplifiedFlatCoordinates[simplifiedOffset++] = x2;
    simplifiedFlatCoordinates[simplifiedOffset++] = y2;
    return simplifiedOffset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function quantizeArray(
    flatCoordinates, offset, ends, stride,
    tolerance,
    simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      simplifiedOffset = quantize(
        flatCoordinates, offset, end, stride,
        tolerance,
        simplifiedFlatCoordinates, simplifiedOffset);
      simplifiedEnds.push(simplifiedOffset);
      offset = end;
    }
    return simplifiedOffset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
   * @return {number} Simplified offset.
   */
  function quantizeMultiArray(
    flatCoordinates, offset, endss, stride,
    tolerance,
    simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      var simplifiedEnds = [];
      simplifiedOffset = quantizeArray(
        flatCoordinates, offset, ends, stride,
        tolerance,
        simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
      simplifiedEndss.push(simplifiedEnds);
      offset = ends[ends.length - 1];
    }
    return simplifiedOffset;
  }

  /**
   * @module ol/geom/LinearRing
   */

  /**
   * @classdesc
   * Linear ring geometry. Only used as part of polygon; cannot be rendered
   * on its own.
   *
   * @api
   */
  var LinearRing = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function LinearRing(coordinates, opt_layout) {

      SimpleGeometry$$1.call(this);

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
      } else {
        this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
      }

    }

    if ( SimpleGeometry$$1 ) LinearRing.__proto__ = SimpleGeometry$$1;
    LinearRing.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    LinearRing.prototype.constructor = LinearRing;

    /**
     * Make a complete copy of the geometry.
     * @return {!LinearRing} Clone.
     * @override
     * @api
     */
    LinearRing.prototype.clone = function clone () {
      return new LinearRing(this.flatCoordinates.slice(), this.layout);
    };

    /**
     * @inheritDoc
     */
    LinearRing.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(maxSquaredDelta(
          this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestPoint(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    };

    /**
     * Return the area of the linear ring on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    LinearRing.prototype.getArea = function getArea$$1 () {
      return linearRing(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };

    /**
     * Return the coordinates of the linear ring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @override
     * @api
     */
    LinearRing.prototype.getCoordinates = function getCoordinates () {
      return inflateCoordinates(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };

    /**
     * @inheritDoc
     */
    LinearRing.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      var simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = douglasPeucker(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        squaredTolerance, simplifiedFlatCoordinates, 0);
      return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);
    };

    /**
     * @inheritDoc
     * @api
     */
    LinearRing.prototype.getType = function getType () {
      return GeometryType.LINEAR_RING;
    };

    /**
     * @inheritDoc
     */
    LinearRing.prototype.intersectsExtent = function intersectsExtent (extent$$1) {
      return false;
    };

    /**
     * Set the coordinates of the linear ring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    LinearRing.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    };

    return LinearRing;
  }(SimpleGeometry));

  /**
   * @module ol/geom/Point
   */

  /**
   * @classdesc
   * Point geometry.
   *
   * @api
   */
  var Point$1 = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function Point$$1(coordinates, opt_layout) {
      SimpleGeometry$$1.call(this);
      this.setCoordinates(coordinates, opt_layout);
    }

    if ( SimpleGeometry$$1 ) Point$$1.__proto__ = SimpleGeometry$$1;
    Point$$1.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    Point$$1.prototype.constructor = Point$$1;

    /**
     * Make a complete copy of the geometry.
     * @return {!Point} Clone.
     * @override
     * @api
     */
    Point$$1.prototype.clone = function clone () {
      var point = new Point$$1(this.flatCoordinates.slice(), this.layout);
      return point;
    };

    /**
     * @inheritDoc
     */
    Point$$1.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      var flatCoordinates = this.flatCoordinates;
      var squaredDistance$$1 = squaredDistance(x, y, flatCoordinates[0], flatCoordinates[1]);
      if (squaredDistance$$1 < minSquaredDistance) {
        var stride = this.stride;
        for (var i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[i];
        }
        closestPoint.length = stride;
        return squaredDistance$$1;
      } else {
        return minSquaredDistance;
      }
    };

    /**
     * Return the coordinate of the point.
     * @return {import("../coordinate.js").Coordinate} Coordinates.
     * @override
     * @api
     */
    Point$$1.prototype.getCoordinates = function getCoordinates () {
      return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
    };

    /**
     * @inheritDoc
     */
    Point$$1.prototype.computeExtent = function computeExtent (extent$$1) {
      return createOrUpdateFromCoordinate(this.flatCoordinates, extent$$1);
    };

    /**
     * @inheritDoc
     * @api
     */
    Point$$1.prototype.getType = function getType () {
      return GeometryType.POINT;
    };

    /**
     * @inheritDoc
     * @api
     */
    Point$$1.prototype.intersectsExtent = function intersectsExtent (extent$$1) {
      return containsXY(extent$$1, this.flatCoordinates[0], this.flatCoordinates[1]);
    };

    /**
     * @inheritDoc
     * @api
     */
    Point$$1.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 0);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinate(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    };

    return Point$$1;
  }(SimpleGeometry));

  /**
   * @module ol/geom/flat/contains
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} Contains extent.
   */
  function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent$$1) {
    var outside = forEachCorner(extent$$1,
      /**
       * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
       * @return {boolean} Contains (x, y).
       */
      function(coordinate) {
        return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
      });
    return !outside;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {
    // http://geomalgorithms.com/a03-_inclusion.html
    // Copyright 2000 softSurfer, 2012 Dan Sunday
    // This code may be freely used and modified for any purpose
    // providing that this copyright notice is included with it.
    // SoftSurfer makes no warranty for this code, and cannot be held
    // liable for any real or imagined damage resulting from its use.
    // Users of this code must verify correctness for their application.
    var wn = 0;
    var x1 = flatCoordinates[end - stride];
    var y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      var x2 = flatCoordinates[offset];
      var y2 = flatCoordinates[offset + 1];
      if (y1 <= y) {
        if (y2 > y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) > 0) {
          wn++;
        }
      } else if (y2 <= y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) < 0) {
        wn--;
      }
      x1 = x2;
      y1 = y2;
    }
    return wn !== 0;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {
    if (ends.length === 0) {
      return false;
    }
    if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
      return false;
    }
    for (var i = 1, ii = ends.length; i < ii; ++i) {
      if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {
        return false;
      }
    }
    return true;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {
    if (endss.length === 0) {
      return false;
    }
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
        return true;
      }
      offset = ends[ends.length - 1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/interiorpoint
   */


  /**
   * Calculates a point that is likely to lie in the interior of the linear rings.
   * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @param {number} flatCentersOffset Flat center offset.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Destination point as XYM coordinate, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointOfArray(flatCoordinates, offset,
    ends, stride, flatCenters, flatCentersOffset, opt_dest) {
    var i, ii, x, x1, x2, y1, y2;
    var y = flatCenters[flatCentersOffset + 1];
    /** @type {Array<number>} */
    var intersections = [];
    // Calculate intersections with the horizontal line
    for (var r = 0, rr = ends.length; r < rr; ++r) {
      var end = ends[r];
      x1 = flatCoordinates[end - stride];
      y1 = flatCoordinates[end - stride + 1];
      for (i = offset; i < end; i += stride) {
        x2 = flatCoordinates[i];
        y2 = flatCoordinates[i + 1];
        if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
          x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;
          intersections.push(x);
        }
        x1 = x2;
        y1 = y2;
      }
    }
    // Find the longest segment of the horizontal line that has its center point
    // inside the linear ring.
    var pointX = NaN;
    var maxSegmentLength = -Infinity;
    intersections.sort(numberSafeCompareFunction);
    x1 = intersections[0];
    for (i = 1, ii = intersections.length; i < ii; ++i) {
      x2 = intersections[i];
      var segmentLength = Math.abs(x2 - x1);
      if (segmentLength > maxSegmentLength) {
        x = (x1 + x2) / 2;
        if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
          pointX = x;
          maxSegmentLength = segmentLength;
        }
      }
      x1 = x2;
    }
    if (isNaN(pointX)) {
      // There is no horizontal line that has its center point inside the linear
      // ring.  Use the center of the the linear ring's extent.
      pointX = flatCenters[flatCentersOffset];
    }
    if (opt_dest) {
      opt_dest.push(pointX, y, maxSegmentLength);
      return opt_dest;
    } else {
      return [pointX, y, maxSegmentLength];
    }
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @return {Array<number>} Interior points as XYM coordinates, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {
    var interiorPoints = [];
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      interiorPoints = getInteriorPointOfArray(flatCoordinates,
        offset, ends, stride, flatCenters, 2 * i, interiorPoints);
      offset = ends[ends.length - 1];
    }
    return interiorPoints;
  }

  /**
   * @module ol/geom/flat/segments
   */


  /**
   * This function calls `callback` for each segment of the flat coordinates
   * array. If the callback returns a truthy value the function returns that
   * value immediately. Otherwise the function returns `false`.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {function(this: S, import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
   *     called for each segment.
   * @param {S=} opt_this The object to be used as the value of 'this'
   *     within callback.
   * @return {T|boolean} Value.
   * @template T,S
   */
  function forEach$1(flatCoordinates, offset, end, stride, callback, opt_this) {
    var point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];
    var point2 = [];
    var ret;
    for (; (offset + stride) < end; offset += stride) {
      point2[0] = flatCoordinates[offset + stride];
      point2[1] = flatCoordinates[offset + stride + 1];
      ret = callback.call(opt_this, point1, point2);
      if (ret) {
        return ret;
      }
      point1[0] = point2[0];
      point1[1] = point2[1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/intersectsextent
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineString(flatCoordinates, offset, end, stride, extent$$1) {
    var coordinatesExtent = extendFlatCoordinates(
      createEmpty(), flatCoordinates, offset, end, stride);
    if (!intersects(extent$$1, coordinatesExtent)) {
      return false;
    }
    if (containsExtent(extent$$1, coordinatesExtent)) {
      return true;
    }
    if (coordinatesExtent[0] >= extent$$1[0] &&
        coordinatesExtent[2] <= extent$$1[2]) {
      return true;
    }
    if (coordinatesExtent[1] >= extent$$1[1] &&
        coordinatesExtent[3] <= extent$$1[3]) {
      return true;
    }
    return forEach$1(flatCoordinates, offset, end, stride,
      /**
       * @param {import("../../coordinate.js").Coordinate} point1 Start point.
       * @param {import("../../coordinate.js").Coordinate} point2 End point.
       * @return {boolean} `true` if the segment and the extent intersect,
       *     `false` otherwise.
       */
      function(point1, point2) {
        return intersectsSegment(extent$$1, point1, point2);
      });
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent$$1) {
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      if (intersectsLineString(
        flatCoordinates, offset, ends[i], stride, extent$$1)) {
        return true;
      }
      offset = ends[i];
    }
    return false;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRing(flatCoordinates, offset, end, stride, extent$$1) {
    if (intersectsLineString(
      flatCoordinates, offset, end, stride, extent$$1)) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent$$1[0], extent$$1[1])) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent$$1[0], extent$$1[3])) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent$$1[2], extent$$1[1])) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent$$1[2], extent$$1[3])) {
      return true;
    }
    return false;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent$$1) {
    if (!intersectsLinearRing(
      flatCoordinates, offset, ends[0], stride, extent$$1)) {
      return false;
    }
    if (ends.length === 1) {
      return true;
    }
    for (var i = 1, ii = ends.length; i < ii; ++i) {
      if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent$$1)) {
        if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent$$1)) {
          return false;
        }
      }
    }
    return true;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent$$1) {
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      if (intersectsLinearRingArray(
        flatCoordinates, offset, ends, stride, extent$$1)) {
        return true;
      }
      offset = ends[ends.length - 1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/reverse
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   */
  function coordinates(flatCoordinates, offset, end, stride) {
    while (offset < end - stride) {
      for (var i = 0; i < stride; ++i) {
        var tmp = flatCoordinates[offset + i];
        flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
        flatCoordinates[end - stride + i] = tmp;
      }
      offset += stride;
      end -= stride;
    }
  }

  /**
   * @module ol/geom/flat/orient
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {boolean} Is clockwise.
   */
  function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
    // http://tinyurl.com/clockwise-method
    // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp
    var edge = 0;
    var x1 = flatCoordinates[end - stride];
    var y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      var x2 = flatCoordinates[offset];
      var y2 = flatCoordinates[offset + 1];
      edge += (x2 - x1) * (y2 + y1);
      x1 = x2;
      y1 = y2;
    }
    return edge > 0;
  }


  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingIsOriented(flatCoordinates, offset, ends, stride, opt_right) {
    var right = opt_right !== undefined ? opt_right : false;
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      var isClockwise = linearRingIsClockwise(
        flatCoordinates, offset, end, stride);
      if (i === 0) {
        if ((right && isClockwise) || (!right && !isClockwise)) {
          return false;
        }
      } else {
        if ((right && !isClockwise) || (!right && isClockwise)) {
          return false;
        }
      }
      offset = end;
    }
    return true;
  }


  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingsAreOriented(flatCoordinates, offset, endss, stride, opt_right) {
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      if (!linearRingIsOriented(
        flatCoordinates, offset, endss[i], stride, opt_right)) {
        return false;
      }
    }
    return true;
  }


  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {
    var right = opt_right !== undefined ? opt_right : false;
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      var isClockwise = linearRingIsClockwise(
        flatCoordinates, offset, end, stride);
      var reverse = i === 0 ?
        (right && isClockwise) || (!right && !isClockwise) :
        (right && !isClockwise) || (!right && isClockwise);
      if (reverse) {
        coordinates(flatCoordinates, offset, end, stride);
      }
      offset = end;
    }
    return offset;
  }


  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      offset = orientLinearRings(
        flatCoordinates, offset, endss[i], stride, opt_right);
    }
    return offset;
  }

  /**
   * @module ol/geom/Polygon
   */

  /**
   * @classdesc
   * Polygon geometry.
   *
   * @api
   */
  var Polygon$1 = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function Polygon$$1(coordinates, opt_layout, opt_ends) {

      SimpleGeometry$$1.call(this);

      /**
       * @type {Array<number>}
       * @private
       */
      this.ends_ = [];

      /**
       * @private
       * @type {number}
       */
      this.flatInteriorPointRevision_ = -1;

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.flatInteriorPoint_ = null;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.orientedRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.orientedFlatCoordinates_ = null;

      if (opt_layout !== undefined && opt_ends) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
        this.ends_ = opt_ends;
      } else {
        this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
      }

    }

    if ( SimpleGeometry$$1 ) Polygon$$1.__proto__ = SimpleGeometry$$1;
    Polygon$$1.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    Polygon$$1.prototype.constructor = Polygon$$1;

    /**
     * Append the passed linear ring to this polygon.
     * @param {LinearRing} linearRing Linear ring.
     * @api
     */
    Polygon$$1.prototype.appendLinearRing = function appendLinearRing (linearRing$$1) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = linearRing$$1.getFlatCoordinates().slice();
      } else {
        extend(this.flatCoordinates, linearRing$$1.getFlatCoordinates());
      }
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    };

    /**
     * Make a complete copy of the geometry.
     * @return {!Polygon} Clone.
     * @override
     * @api
     */
    Polygon$$1.prototype.clone = function clone () {
      return new Polygon$$1(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
    };

    /**
     * @inheritDoc
     */
    Polygon$$1.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(
          this.flatCoordinates, 0, this.ends_, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestArrayPoint(
        this.flatCoordinates, 0, this.ends_, this.stride,
        this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    };

    /**
     * @inheritDoc
     */
    Polygon$$1.prototype.containsXY = function containsXY$$1 (x, y) {
      return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
    };

    /**
     * Return the area of the polygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    Polygon$$1.prototype.getArea = function getArea$$1 () {
      return linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
    };

    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for polygons.
     *
     * @param {boolean=} opt_right Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @override
     * @api
     */
    Polygon$$1.prototype.getCoordinates = function getCoordinates (opt_right) {
      var flatCoordinates;
      if (opt_right !== undefined) {
        flatCoordinates = this.getOrientedFlatCoordinates().slice();
        orientLinearRings(
          flatCoordinates, 0, this.ends_, this.stride, opt_right);
      } else {
        flatCoordinates = this.flatCoordinates;
      }

      return inflateCoordinatesArray(
        flatCoordinates, 0, this.ends_, this.stride);
    };

    /**
     * @return {Array<number>} Ends.
     */
    Polygon$$1.prototype.getEnds = function getEnds () {
      return this.ends_;
    };

    /**
     * @return {Array<number>} Interior point.
     */
    Polygon$$1.prototype.getFlatInteriorPoint = function getFlatInteriorPoint () {
      if (this.flatInteriorPointRevision_ != this.getRevision()) {
        var flatCenter = getCenter(this.getExtent());
        this.flatInteriorPoint_ = getInteriorPointOfArray(
          this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride,
          flatCenter, 0);
        this.flatInteriorPointRevision_ = this.getRevision();
      }
      return this.flatInteriorPoint_;
    };

    /**
     * Return an interior point of the polygon.
     * @return {Point} Interior point as XYM coordinate, where M is the
     * length of the horizontal intersection that the point belongs to.
     * @api
     */
    Polygon$$1.prototype.getInteriorPoint = function getInteriorPoint () {
      return new Point$1(this.getFlatInteriorPoint(), GeometryLayout.XYM);
    };

    /**
     * Return the number of rings of the polygon,  this includes the exterior
     * ring and any interior rings.
     *
     * @return {number} Number of rings.
     * @api
     */
    Polygon$$1.prototype.getLinearRingCount = function getLinearRingCount () {
      return this.ends_.length;
    };

    /**
     * Return the Nth linear ring of the polygon geometry. Return `null` if the
     * given index is out of range.
     * The exterior linear ring is available at index `0` and the interior rings
     * at index `1` and beyond.
     *
     * @param {number} index Index.
     * @return {LinearRing} Linear ring.
     * @api
     */
    Polygon$$1.prototype.getLinearRing = function getLinearRing (index) {
      if (index < 0 || this.ends_.length <= index) {
        return null;
      }
      return new LinearRing(this.flatCoordinates.slice(
        index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
    };

    /**
     * Return the linear rings of the polygon.
     * @return {Array<LinearRing>} Linear rings.
     * @api
     */
    Polygon$$1.prototype.getLinearRings = function getLinearRings () {
      var layout = this.layout;
      var flatCoordinates = this.flatCoordinates;
      var ends = this.ends_;
      var linearRings$$1 = [];
      var offset$$1 = 0;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        var end = ends[i];
        var linearRing$$1 = new LinearRing(flatCoordinates.slice(offset$$1, end), layout);
        linearRings$$1.push(linearRing$$1);
        offset$$1 = end;
      }
      return linearRings$$1;
    };

    /**
     * @return {Array<number>} Oriented flat coordinates.
     */
    Polygon$$1.prototype.getOrientedFlatCoordinates = function getOrientedFlatCoordinates () {
      if (this.orientedRevision_ != this.getRevision()) {
        var flatCoordinates = this.flatCoordinates;
        if (linearRingIsOriented(
          flatCoordinates, 0, this.ends_, this.stride)) {
          this.orientedFlatCoordinates_ = flatCoordinates;
        } else {
          this.orientedFlatCoordinates_ = flatCoordinates.slice();
          this.orientedFlatCoordinates_.length =
              orientLinearRings(
                this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
        }
        this.orientedRevision_ = this.getRevision();
      }
      return this.orientedFlatCoordinates_;
    };

    /**
     * @inheritDoc
     */
    Polygon$$1.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      var simplifiedFlatCoordinates = [];
      var simplifiedEnds = [];
      simplifiedFlatCoordinates.length = quantizeArray(
        this.flatCoordinates, 0, this.ends_, this.stride,
        Math.sqrt(squaredTolerance),
        simplifiedFlatCoordinates, 0, simplifiedEnds);
      return new Polygon$$1(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
    };

    /**
     * @inheritDoc
     * @api
     */
    Polygon$$1.prototype.getType = function getType () {
      return GeometryType.POLYGON;
    };

    /**
     * @inheritDoc
     * @api
     */
    Polygon$$1.prototype.intersectsExtent = function intersectsExtent (extent$$1) {
      return intersectsLinearRingArray(
        this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent$$1);
    };

    /**
     * Set the coordinates of the polygon.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    Polygon$$1.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 2);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      var ends = deflateCoordinatesArray(
        this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
      this.changed();
    };

    return Polygon$$1;
  }(SimpleGeometry));


  /**
   * Create an approximation of a circle on the surface of a sphere.
   * @param {import("../coordinate.js").Coordinate} center Center (`[lon, lat]` in degrees).
   * @param {number} radius The great-circle distance from the center to
   *     the polygon vertices.
   * @param {number=} opt_n Optional number of vertices for the resulting
   *     polygon. Default is `32`.
   * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to
   *     the Earth's mean radius using the WGS84 ellipsoid).
   * @return {Polygon} The "circular" polygon.
   * @api
   */
  function circular(center, radius, opt_n, opt_sphereRadius) {
    var n = opt_n ? opt_n : 32;
    /** @type {Array<number>} */
    var flatCoordinates = [];
    for (var i = 0; i < n; ++i) {
      extend(flatCoordinates, offset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));
    }
    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
    return new Polygon$1(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);
  }


  /**
   * Create a polygon from an extent. The layout used is `XY`.
   * @param {import("../extent.js").Extent} extent The extent.
   * @return {Polygon} The polygon.
   * @api
   */
  function fromExtent(extent$$1) {
    var minX = extent$$1[0];
    var minY = extent$$1[1];
    var maxX = extent$$1[2];
    var maxY = extent$$1[3];
    var flatCoordinates =
        [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];
    return new Polygon$1(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);
  }


  /**
   * Create a regular polygon from a circle.
   * @param {import("./Circle.js").default} circle Circle geometry.
   * @param {number=} opt_sides Number of sides of the polygon. Default is 32.
   * @param {number=} opt_angle Start angle for the first vertex of the polygon in
   *     radians. Default is 0.
   * @return {Polygon} Polygon geometry.
   * @api
   */
  function fromCircle(circle, opt_sides, opt_angle) {
    var sides = opt_sides ? opt_sides : 32;
    var stride = circle.getStride();
    var layout = circle.getLayout();
    var center = circle.getCenter();
    var arrayLength = stride * (sides + 1);
    var flatCoordinates = new Array(arrayLength);
    for (var i = 0; i < arrayLength; i += stride) {
      flatCoordinates[i] = 0;
      flatCoordinates[i + 1] = 0;
      for (var j = 2; j < stride; j++) {
        flatCoordinates[i + j] = center[j];
      }
    }
    var ends = [flatCoordinates.length];
    var polygon = new Polygon$1(flatCoordinates, layout, ends);
    makeRegular(polygon, center, circle.getRadius(), opt_angle);
    return polygon;
  }


  /**
   * Modify the coordinates of a polygon to make it a regular polygon.
   * @param {Polygon} polygon Polygon geometry.
   * @param {import("../coordinate.js").Coordinate} center Center of the regular polygon.
   * @param {number} radius Radius of the regular polygon.
   * @param {number=} opt_angle Start angle for the first vertex of the polygon in
   *     radians. Default is 0.
   */
  function makeRegular(polygon, center, radius, opt_angle) {
    var flatCoordinates = polygon.getFlatCoordinates();
    var stride = polygon.getStride();
    var sides = flatCoordinates.length / stride - 1;
    var startAngle = opt_angle ? opt_angle : 0;
    for (var i = 0; i <= sides; ++i) {
      var offset$$1 = i * stride;
      var angle = startAngle + (modulo(i, sides) * 2 * Math.PI / sides);
      flatCoordinates[offset$$1] = center[0] + (radius * Math.cos(angle));
      flatCoordinates[offset$$1 + 1] = center[1] + (radius * Math.sin(angle));
    }
    polygon.changed();
  }

  /**
   * @module ol/webgl
   */


  /**
   * Constants taken from goog.webgl
   */


  /**
   * @const
   * @type {number}
   */
  var ONE = 1;


  /**
   * @const
   * @type {number}
   */
  var SRC_ALPHA = 0x0302;


  /**
   * @const
   * @type {number}
   */
  var COLOR_ATTACHMENT0 = 0x8CE0;


  /**
   * @const
   * @type {number}
   */
  var COLOR_BUFFER_BIT = 0x00004000;


  /**
   * @const
   * @type {number}
   */
  var TRIANGLES = 0x0004;


  /**
   * @const
   * @type {number}
   */
  var TRIANGLE_STRIP = 0x0005;


  /**
   * @const
   * @type {number}
   */
  var ONE_MINUS_SRC_ALPHA = 0x0303;


  /**
   * @const
   * @type {number}
   */
  var ARRAY_BUFFER = 0x8892;


  /**
   * @const
   * @type {number}
   */
  var ELEMENT_ARRAY_BUFFER = 0x8893;


  /**
   * @const
   * @type {number}
   */
  var STREAM_DRAW = 0x88E0;


  /**
   * @const
   * @type {number}
   */
  var STATIC_DRAW = 0x88E4;


  /**
   * @const
   * @type {number}
   */
  var DYNAMIC_DRAW = 0x88E8;


  /**
   * @const
   * @type {number}
   */
  var CULL_FACE = 0x0B44;


  /**
   * @const
   * @type {number}
   */
  var BLEND = 0x0BE2;


  /**
   * @const
   * @type {number}
   */
  var STENCIL_TEST = 0x0B90;


  /**
   * @const
   * @type {number}
   */
  var DEPTH_TEST = 0x0B71;


  /**
   * @const
   * @type {number}
   */
  var SCISSOR_TEST = 0x0C11;


  /**
   * @const
   * @type {number}
   */
  var UNSIGNED_BYTE = 0x1401;


  /**
   * @const
   * @type {number}
   */
  var UNSIGNED_SHORT = 0x1403;


  /**
   * @const
   * @type {number}
   */
  var UNSIGNED_INT = 0x1405;


  /**
   * @const
   * @type {number}
   */
  var FLOAT = 0x1406;


  /**
   * @const
   * @type {number}
   */
  var RGBA = 0x1908;


  /**
   * @const
   * @type {number}
   */
  var FRAGMENT_SHADER = 0x8B30;


  /**
   * @const
   * @type {number}
   */
  var VERTEX_SHADER = 0x8B31;


  /**
   * @const
   * @type {number}
   */
  var LINEAR = 0x2601;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE_MAG_FILTER = 0x2800;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE_MIN_FILTER = 0x2801;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE_WRAP_S = 0x2802;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE_WRAP_T = 0x2803;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE_2D = 0x0DE1;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE0 = 0x84C0;


  /**
   * @const
   * @type {number}
   */
  var CLAMP_TO_EDGE = 0x812F;


  /**
   * @const
   * @type {number}
   */
  var FRAMEBUFFER = 0x8D40;


  /** end of goog.webgl constants
   */


  /**
   * @const
   * @type {Array<string>}
   */
  var CONTEXT_IDS = [
    'experimental-webgl',
    'webgl',
    'webkit-3d',
    'moz-webgl'
  ];


  /**
   * @param {HTMLCanvasElement} canvas Canvas.
   * @param {Object=} opt_attributes Attributes.
   * @return {WebGLRenderingContext} WebGL rendering context.
   */
  function getContext(canvas, opt_attributes) {
    var ii = CONTEXT_IDS.length;
    for (var i = 0; i < ii; ++i) {
      try {
        var context = canvas.getContext(CONTEXT_IDS[i], opt_attributes);
        if (context) {
          return /** @type {!WebGLRenderingContext} */ (context);
        }
      } catch (e) {
        // pass
      }
    }
    return null;
  }


  /**
   * The maximum supported WebGL texture size in pixels. If WebGL is not
   * supported, the value is set to `undefined`.
   * @type {number|undefined}
   */
  var MAX_TEXTURE_SIZE; // value is set below


  /**
   * List of supported WebGL extensions.
   * @type {Array<string>}
   */
  var EXTENSIONS; // value is set below

  //TODO Remove side effects
  if (typeof window !== 'undefined' && 'WebGLRenderingContext' in window) {
    try {
      var canvas = /** @type {HTMLCanvasElement} */ (document.createElement('canvas'));
      var gl = getContext(canvas, {failIfMajorPerformanceCaveat: true});
      if (gl) {
        MAX_TEXTURE_SIZE = /** @type {number} */ (gl.getParameter(gl.MAX_TEXTURE_SIZE));
        EXTENSIONS = gl.getSupportedExtensions();
      }
    } catch (e) {
      // pass
    }
  }

  /**
   * @module ol/has
   */

  var ua = typeof navigator !== 'undefined' ?
    navigator.userAgent.toLowerCase() : '';

  /**
   * User agent string says we are dealing with Firefox as browser.
   * @type {boolean}
   */
  var FIREFOX = ua.indexOf('firefox') !== -1;

  /**
   * User agent string says we are dealing with Safari as browser.
   * @type {boolean}
   */
  var SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;

  /**
   * User agent string says we are dealing with a WebKit engine.
   * @type {boolean}
   */
  var WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;

  /**
   * User agent string says we are dealing with a Mac as platform.
   * @type {boolean}
   */
  var MAC = ua.indexOf('macintosh') !== -1;


  /**
   * The ratio between physical pixels and device-independent pixels
   * (dips) on the device (`window.devicePixelRatio`).
   * @const
   * @type {number}
   * @api
   */
  var DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;


  /**
   * True if the browser's Canvas implementation implements {get,set}LineDash.
   * @type {boolean}
   */
  var CANVAS_LINE_DASH = function() {
    var has = false;
    try {
      has = !!document.createElement('canvas').getContext('2d').setLineDash;
    } catch (e) {
      // pass
    }
    return has;
  }();


  /**
   * Is HTML5 geolocation supported in the current browser?
   * @const
   * @type {boolean}
   * @api
   */
  var GEOLOCATION = 'geolocation' in navigator;


  /**
   * True if browser supports touch events.
   * @const
   * @type {boolean}
   * @api
   */
  var TOUCH = 'ontouchstart' in window;


  /**
   * True if browser supports pointer events.
   * @const
   * @type {boolean}
   */
  var POINTER = 'PointerEvent' in window;


  /**
   * True if browser supports ms pointer events (IE 10).
   * @const
   * @type {boolean}
   */
  var MSPOINTER = !!(navigator.msPointerEnabled);

  /**
   * @module ol/Geolocation
   */


  /**
   * @enum {string}
   */
  var Property$1 = {
    ACCURACY: 'accuracy',
    ACCURACY_GEOMETRY: 'accuracyGeometry',
    ALTITUDE: 'altitude',
    ALTITUDE_ACCURACY: 'altitudeAccuracy',
    HEADING: 'heading',
    POSITION: 'position',
    PROJECTION: 'projection',
    SPEED: 'speed',
    TRACKING: 'tracking',
    TRACKING_OPTIONS: 'trackingOptions'
  };


  /**
   * @classdesc
   * Events emitted on Geolocation error.
   */
  var GeolocationError = /*@__PURE__*/(function (Event$$1) {
    function GeolocationError(error) {
      Event$$1.call(this, EventType.ERROR);

      /**
       * @type {number}
       */
      this.code = error.code;

      /**
       * @type {string}
       */
      this.message = error.message;
    }

    if ( Event$$1 ) GeolocationError.__proto__ = Event$$1;
    GeolocationError.prototype = Object.create( Event$$1 && Event$$1.prototype );
    GeolocationError.prototype.constructor = GeolocationError;

    return GeolocationError;
  }(Event));


  /**
   * @typedef {Object} Options
   * @property {boolean} [tracking=false] Start Tracking right after
   * instantiation.
   * @property {PositionOptions} [trackingOptions] Tracking options.
   * See http://www.w3.org/TR/geolocation-API/#position_options_interface.
   * @property {import("./proj.js").ProjectionLike} [projection] The projection the position
   * is reported in.
   */


  /**
   * @classdesc
   * Helper class for providing HTML5 Geolocation capabilities.
   * The [Geolocation API](http://www.w3.org/TR/geolocation-API/)
   * is used to locate a user's position.
   *
   * To get notified of position changes, register a listener for the generic
   * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.
   *
   * Example:
   *
   *     var geolocation = new Geolocation({
   *       // take the projection to use from the map's view
   *       projection: view.getProjection()
   *     });
   *     // listen to changes in position
   *     geolocation.on('change', function(evt) {
   *       window.console.log(geolocation.getPosition());
   *     });
   *
   * @fires error
   * @api
   */
  var Geolocation$1 = /*@__PURE__*/(function (BaseObject$$1) {
    function Geolocation$$1(opt_options) {

      BaseObject$$1.call(this);

      var options = opt_options || {};

      /**
       * The unprojected (EPSG:4326) device position.
       * @private
       * @type {import("./coordinate.js").Coordinate}
       */
      this.position_ = null;

      /**
       * @private
       * @type {import("./proj.js").TransformFunction}
       */
      this.transform_ = identityTransform;

      /**
       * @private
       * @type {number|undefined}
       */
      this.watchId_ = undefined;

      listen(
        this, getChangeEventType(Property$1.PROJECTION),
        this.handleProjectionChanged_, this);
      listen(
        this, getChangeEventType(Property$1.TRACKING),
        this.handleTrackingChanged_, this);

      if (options.projection !== undefined) {
        this.setProjection(options.projection);
      }
      if (options.trackingOptions !== undefined) {
        this.setTrackingOptions(options.trackingOptions);
      }

      this.setTracking(options.tracking !== undefined ? options.tracking : false);

    }

    if ( BaseObject$$1 ) Geolocation$$1.__proto__ = BaseObject$$1;
    Geolocation$$1.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Geolocation$$1.prototype.constructor = Geolocation$$1;

    /**
     * @inheritDoc
     */
    Geolocation$$1.prototype.disposeInternal = function disposeInternal () {
      this.setTracking(false);
      BaseObject$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @private
     */
    Geolocation$$1.prototype.handleProjectionChanged_ = function handleProjectionChanged_ () {
      var projection = this.getProjection();
      if (projection) {
        this.transform_ = getTransformFromProjections(
          get$3('EPSG:4326'), projection);
        if (this.position_) {
          this.set(Property$1.POSITION, this.transform_(this.position_));
        }
      }
    };

    /**
     * @private
     */
    Geolocation$$1.prototype.handleTrackingChanged_ = function handleTrackingChanged_ () {
      if (GEOLOCATION) {
        var tracking = this.getTracking();
        if (tracking && this.watchId_ === undefined) {
          this.watchId_ = navigator.geolocation.watchPosition(
            this.positionChange_.bind(this),
            this.positionError_.bind(this),
            this.getTrackingOptions());
        } else if (!tracking && this.watchId_ !== undefined) {
          navigator.geolocation.clearWatch(this.watchId_);
          this.watchId_ = undefined;
        }
      }
    };

    /**
     * @private
     * @param {Position} position position event.
     */
    Geolocation$$1.prototype.positionChange_ = function positionChange_ (position) {
      var coords = position.coords;
      this.set(Property$1.ACCURACY, coords.accuracy);
      this.set(Property$1.ALTITUDE,
        coords.altitude === null ? undefined : coords.altitude);
      this.set(Property$1.ALTITUDE_ACCURACY,
        coords.altitudeAccuracy === null ?
          undefined : coords.altitudeAccuracy);
      this.set(Property$1.HEADING, coords.heading === null ?
        undefined : toRadians(coords.heading));
      if (!this.position_) {
        this.position_ = [coords.longitude, coords.latitude];
      } else {
        this.position_[0] = coords.longitude;
        this.position_[1] = coords.latitude;
      }
      var projectedPosition = this.transform_(this.position_);
      this.set(Property$1.POSITION, projectedPosition);
      this.set(Property$1.SPEED,
        coords.speed === null ? undefined : coords.speed);
      var geometry = circular(this.position_, coords.accuracy);
      geometry.applyTransform(this.transform_);
      this.set(Property$1.ACCURACY_GEOMETRY, geometry);
      this.changed();
    };

    /**
     * Triggered when the Geolocation returns an error.
     * @event error
     * @api
     */

    /**
     * @private
     * @param {PositionError} error error object.
     */
    Geolocation$$1.prototype.positionError_ = function positionError_ (error) {
      this.setTracking(false);
      this.dispatchEvent(new GeolocationError(error));
    };

    /**
     * Get the accuracy of the position in meters.
     * @return {number|undefined} The accuracy of the position measurement in
     *     meters.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.getAccuracy = function getAccuracy () {
      return /** @type {number|undefined} */ (this.get(Property$1.ACCURACY));
    };

    /**
     * Get a geometry of the position accuracy.
     * @return {?import("./geom/Polygon.js").default} A geometry of the position accuracy.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.getAccuracyGeometry = function getAccuracyGeometry () {
      return (
        /** @type {?import("./geom/Polygon.js").default} */ (this.get(Property$1.ACCURACY_GEOMETRY) || null)
      );
    };

    /**
     * Get the altitude associated with the position.
     * @return {number|undefined} The altitude of the position in meters above mean
     *     sea level.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.getAltitude = function getAltitude () {
      return /** @type {number|undefined} */ (this.get(Property$1.ALTITUDE));
    };

    /**
     * Get the altitude accuracy of the position.
     * @return {number|undefined} The accuracy of the altitude measurement in
     *     meters.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.getAltitudeAccuracy = function getAltitudeAccuracy () {
      return /** @type {number|undefined} */ (this.get(Property$1.ALTITUDE_ACCURACY));
    };

    /**
     * Get the heading as radians clockwise from North.
     * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`
     * is set to `true` in the tracking options.
     * @return {number|undefined} The heading of the device in radians from north.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.getHeading = function getHeading () {
      return /** @type {number|undefined} */ (this.get(Property$1.HEADING));
    };

    /**
     * Get the position of the device.
     * @return {import("./coordinate.js").Coordinate|undefined} The current position of the device reported
     *     in the current projection.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.getPosition = function getPosition () {
      return (
        /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(Property$1.POSITION))
      );
    };

    /**
     * Get the projection associated with the position.
     * @return {import("./proj/Projection.js").default|undefined} The projection the position is
     *     reported in.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.getProjection = function getProjection () {
      return (
        /** @type {import("./proj/Projection.js").default|undefined} */ (this.get(Property$1.PROJECTION))
      );
    };

    /**
     * Get the speed in meters per second.
     * @return {number|undefined} The instantaneous speed of the device in meters
     *     per second.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.getSpeed = function getSpeed () {
      return /** @type {number|undefined} */ (this.get(Property$1.SPEED));
    };

    /**
     * Determine if the device location is being tracked.
     * @return {boolean} The device location is being tracked.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.getTracking = function getTracking () {
      return /** @type {boolean} */ (this.get(Property$1.TRACKING));
    };

    /**
     * Get the tracking options.
     * See http://www.w3.org/TR/geolocation-API/#position-options.
     * @return {PositionOptions|undefined} PositionOptions as defined by
     *     the [HTML5 Geolocation spec
     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
     * @observable
     * @api
     */
    Geolocation$$1.prototype.getTrackingOptions = function getTrackingOptions () {
      return /** @type {PositionOptions|undefined} */ (this.get(Property$1.TRACKING_OPTIONS));
    };

    /**
     * Set the projection to use for transforming the coordinates.
     * @param {import("./proj.js").ProjectionLike} projection The projection the position is
     *     reported in.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.setProjection = function setProjection (projection) {
      this.set(Property$1.PROJECTION, get$3(projection));
    };

    /**
     * Enable or disable tracking.
     * @param {boolean} tracking Enable tracking.
     * @observable
     * @api
     */
    Geolocation$$1.prototype.setTracking = function setTracking (tracking) {
      this.set(Property$1.TRACKING, tracking);
    };

    /**
     * Set the tracking options.
     * See http://www.w3.org/TR/geolocation-API/#position-options.
     * @param {PositionOptions} options PositionOptions as defined by the
     *     [HTML5 Geolocation spec
     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
     * @observable
     * @api
     */
    Geolocation$$1.prototype.setTrackingOptions = function setTrackingOptions (options) {
      this.set(Property$1.TRACKING_OPTIONS, options);
    };

    return Geolocation$$1;
  }(BaseObject));

  /**
   * @module ol/string
   */

  /**
   * @module ol/coordinate
   */


  /**
   * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
   * @typedef {Array<number>} Coordinate
   * @api
   */


  /**
   * A function that takes a {@link module:ol/coordinate~Coordinate} and
   * transforms it into a `{string}`.
   *
   * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
   * @api
   */


  /**
   * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {add} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     add(coord, [-2, 4]);
   *     // coord is now [5.85, 51.983333]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {Coordinate} delta Delta.
   * @return {Coordinate} The input coordinate adjusted by
   * the given delta.
   * @api
   */
  function add$2(coordinate, delta) {
    coordinate[0] += delta[0];
    coordinate[1] += delta[1];
    return coordinate;
  }


  /**
   * Calculates the point closest to the passed coordinate on the passed circle.
   *
   * @param {Coordinate} coordinate The coordinate.
   * @param {import("./geom/Circle.js").default} circle The circle.
   * @return {Coordinate} Closest point on the circumference.
   */
  function closestOnCircle(coordinate, circle) {
    var r = circle.getRadius();
    var center = circle.getCenter();
    var x0 = center[0];
    var y0 = center[1];
    var x1 = coordinate[0];
    var y1 = coordinate[1];

    var dx = x1 - x0;
    var dy = y1 - y0;
    if (dx === 0 && dy === 0) {
      dx = 1;
    }
    var d = Math.sqrt(dx * dx + dy * dy);

    var x = x0 + r * dx / d;
    var y = y0 + r * dy / d;

    return [x, y];
  }


  /**
   * Calculates the point closest to the passed coordinate on the passed segment.
   * This is the foot of the perpendicular of the coordinate to the segment when
   * the foot is on the segment, or the closest segment coordinate when the foot
   * is outside the segment.
   *
   * @param {Coordinate} coordinate The coordinate.
   * @param {Array<Coordinate>} segment The two coordinates
   * of the segment.
   * @return {Coordinate} The foot of the perpendicular of
   * the coordinate to the segment.
   */
  function closestOnSegment(coordinate, segment) {
    var x0 = coordinate[0];
    var y0 = coordinate[1];
    var start = segment[0];
    var end = segment[1];
    var x1 = start[0];
    var y1 = start[1];
    var x2 = end[0];
    var y2 = end[1];
    var dx = x2 - x1;
    var dy = y2 - y1;
    var along = (dx === 0 && dy === 0) ? 0 :
      ((dx * (x0 - x1)) + (dy * (y0 - y1))) / ((dx * dx + dy * dy) || 0);
    var x, y;
    if (along <= 0) {
      x = x1;
      y = y1;
    } else if (along >= 1) {
      x = x2;
      y = y2;
    } else {
      x = x1 + along * dx;
      y = y1 + along * dy;
    }
    return [x, y];
  }


  /**
   * @param {Coordinate} coordinate1 First coordinate.
   * @param {Coordinate} coordinate2 Second coordinate.
   * @return {boolean} The two coordinates are equal.
   */
  function equals$2(coordinate1, coordinate2) {
    var equals = true;
    for (var i = coordinate1.length - 1; i >= 0; --i) {
      if (coordinate1[i] != coordinate2[i]) {
        equals = false;
        break;
      }
    }
    return equals;
  }


  /**
   * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
   * returned by the function.
   *
   * Example:
   *
   *     import {rotate} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     var rotateRadians = Math.PI / 2; // 90 degrees
   *     rotate(coord, rotateRadians);
   *     // coord is now [-47.983333, 7.85]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} angle Angle in radian.
   * @return {Coordinate} Coordinate.
   * @api
   */
  function rotate$2(coordinate, angle) {
    var cosAngle = Math.cos(angle);
    var sinAngle = Math.sin(angle);
    var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    coordinate[0] = x;
    coordinate[1] = y;
    return coordinate;
  }


  /**
   * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {scale as scaleCoordinate} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     var scale = 1.2;
   *     scaleCoordinate(coord, scale);
   *     // coord is now [9.42, 57.5799996]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} scale Scale factor.
   * @return {Coordinate} Coordinate.
   */
  function scale$2(coordinate, scale) {
    coordinate[0] *= scale;
    coordinate[1] *= scale;
    return coordinate;
  }


  /**
   * @param {Coordinate} coord1 First coordinate.
   * @param {Coordinate} coord2 Second coordinate.
   * @return {number} Squared distance between coord1 and coord2.
   */
  function squaredDistance$1(coord1, coord2) {
    var dx = coord1[0] - coord2[0];
    var dy = coord1[1] - coord2[1];
    return dx * dx + dy * dy;
  }


  /**
   * @param {Coordinate} coord1 First coordinate.
   * @param {Coordinate} coord2 Second coordinate.
   * @return {number} Distance between coord1 and coord2.
   */
  function distance$1(coord1, coord2) {
    return Math.sqrt(squaredDistance$1(coord1, coord2));
  }


  /**
   * Calculate the squared distance from a coordinate to a line segment.
   *
   * @param {Coordinate} coordinate Coordinate of the point.
   * @param {Array<Coordinate>} segment Line segment (2
   * coordinates).
   * @return {number} Squared distance from the point to the line segment.
   */
  function squaredDistanceToSegment(coordinate, segment) {
    return squaredDistance$1(coordinate,
      closestOnSegment(coordinate, segment));
  }

  /**
   * @module ol/geom/flat/interpolate
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} fraction Fraction.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Destination.
   */
  function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {
    var pointX = NaN;
    var pointY = NaN;
    var n = (end - offset) / stride;
    if (n === 1) {
      pointX = flatCoordinates[offset];
      pointY = flatCoordinates[offset + 1];
    } else if (n == 2) {
      pointX = (1 - fraction) * flatCoordinates[offset] +
          fraction * flatCoordinates[offset + stride];
      pointY = (1 - fraction) * flatCoordinates[offset + 1] +
          fraction * flatCoordinates[offset + stride + 1];
    } else if (n !== 0) {
      var x1 = flatCoordinates[offset];
      var y1 = flatCoordinates[offset + 1];
      var length = 0;
      var cumulativeLengths = [0];
      for (var i = offset + stride; i < end; i += stride) {
        var x2 = flatCoordinates[i];
        var y2 = flatCoordinates[i + 1];
        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        cumulativeLengths.push(length);
        x1 = x2;
        y1 = y2;
      }
      var target = fraction * length;
      var index = binarySearch(cumulativeLengths, target);
      if (index < 0) {
        var t = (target - cumulativeLengths[-index - 2]) /
            (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
        var o = offset + (-index - 2) * stride;
        pointX = lerp(
          flatCoordinates[o], flatCoordinates[o + stride], t);
        pointY = lerp(
          flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);
      } else {
        pointX = flatCoordinates[offset + index * stride];
        pointY = flatCoordinates[offset + index * stride + 1];
      }
    }
    if (opt_dest) {
      opt_dest[0] = pointX;
      opt_dest[1] = pointY;
      return opt_dest;
    } else {
      return [pointX, pointY];
    }
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @return {import("../../coordinate.js").Coordinate} Coordinate.
   */
  function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {
    if (end == offset) {
      return null;
    }
    var coordinate;
    if (m < flatCoordinates[offset + stride - 1]) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(offset, offset + stride);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    } else if (flatCoordinates[end - 1] < m) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(end - stride, end);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    }
    // FIXME use O(1) search
    if (m == flatCoordinates[offset + stride - 1]) {
      return flatCoordinates.slice(offset, offset + stride);
    }
    var lo = offset / stride;
    var hi = end / stride;
    while (lo < hi) {
      var mid = (lo + hi) >> 1;
      if (m < flatCoordinates[(mid + 1) * stride - 1]) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    var m0 = flatCoordinates[lo * stride - 1];
    if (m == m0) {
      return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
    }
    var m1 = flatCoordinates[(lo + 1) * stride - 1];
    var t = (m - m0) / (m1 - m0);
    coordinate = [];
    for (var i = 0; i < stride - 1; ++i) {
      coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i],
        flatCoordinates[lo * stride + i], t));
    }
    coordinate.push(m);
    return coordinate;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @param {boolean} interpolate Interpolate.
   * @return {import("../../coordinate.js").Coordinate} Coordinate.
   */
  function lineStringsCoordinateAtM(
    flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {
    if (interpolate) {
      return lineStringCoordinateAtM(
        flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);
    }
    var coordinate;
    if (m < flatCoordinates[stride - 1]) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(0, stride);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    }
    if (flatCoordinates[flatCoordinates.length - 1] < m) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    }
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      if (offset == end) {
        continue;
      }
      if (m < flatCoordinates[offset + stride - 1]) {
        return null;
      } else if (m <= flatCoordinates[end - 1]) {
        return lineStringCoordinateAtM(
          flatCoordinates, offset, end, stride, m, false);
      }
      offset = end;
    }
    return null;
  }

  /**
   * @module ol/geom/flat/length
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Length.
   */
  function lineStringLength(flatCoordinates, offset, end, stride) {
    var x1 = flatCoordinates[offset];
    var y1 = flatCoordinates[offset + 1];
    var length = 0;
    for (var i = offset + stride; i < end; i += stride) {
      var x2 = flatCoordinates[i];
      var y2 = flatCoordinates[i + 1];
      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      x1 = x2;
      y1 = y2;
    }
    return length;
  }

  /**
   * @module ol/geom/LineString
   */

  /**
   * @classdesc
   * Linestring geometry.
   *
   * @api
   */
  var LineString$1 = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function LineString$$1(coordinates, opt_layout) {

      SimpleGeometry$$1.call(this);

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.flatMidpoint_ = null;

      /**
       * @private
       * @type {number}
       */
      this.flatMidpointRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
      } else {
        this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
      }

    }

    if ( SimpleGeometry$$1 ) LineString$$1.__proto__ = SimpleGeometry$$1;
    LineString$$1.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    LineString$$1.prototype.constructor = LineString$$1;

    /**
     * Append the passed coordinate to the coordinates of the linestring.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @api
     */
    LineString$$1.prototype.appendCoordinate = function appendCoordinate (coordinate) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = coordinate.slice();
      } else {
        extend(this.flatCoordinates, coordinate);
      }
      this.changed();
    };

    /**
     * Make a complete copy of the geometry.
     * @return {!LineString} Clone.
     * @override
     * @api
     */
    LineString$$1.prototype.clone = function clone () {
      return new LineString$$1(this.flatCoordinates.slice(), this.layout);
    };

    /**
     * @inheritDoc
     */
    LineString$$1.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(maxSquaredDelta(
          this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestPoint(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
    };

    /**
     * Iterate over each segment, calling the provided callback.
     * If the callback returns a truthy value the function returns that
     * value immediately. Otherwise the function returns `false`.
     *
     * @param {function(this: S, import("../coordinate.js").Coordinate, import("../coordinate.js").Coordinate): T} callback Function
     *     called for each segment.
     * @return {T|boolean} Value.
     * @template T,S
     * @api
     */
    LineString$$1.prototype.forEachSegment = function forEachSegment$1 (callback) {
      return forEach$1(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);
    };

    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * @param {number} m M.
     * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate} Coordinate.
     * @api
     */
    LineString$$1.prototype.getCoordinateAtM = function getCoordinateAtM (m, opt_extrapolate) {
      if (this.layout != GeometryLayout.XYM &&
          this.layout != GeometryLayout.XYZM) {
        return null;
      }
      var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
      return lineStringCoordinateAtM(this.flatCoordinates, 0,
        this.flatCoordinates.length, this.stride, m, extrapolate);
    };

    /**
     * Return the coordinates of the linestring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @override
     * @api
     */
    LineString$$1.prototype.getCoordinates = function getCoordinates () {
      return inflateCoordinates(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };

    /**
     * Return the coordinate at the provided fraction along the linestring.
     * The `fraction` is a number between 0 and 1, where 0 is the start of the
     * linestring and 1 is the end.
     * @param {number} fraction Fraction.
     * @param {import("../coordinate.js").Coordinate=} opt_dest Optional coordinate whose values will
     *     be modified. If not provided, a new coordinate will be returned.
     * @return {import("../coordinate.js").Coordinate} Coordinate of the interpolated point.
     * @api
     */
    LineString$$1.prototype.getCoordinateAt = function getCoordinateAt (fraction, opt_dest) {
      return interpolatePoint(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        fraction, opt_dest);
    };

    /**
     * Return the length of the linestring on projected plane.
     * @return {number} Length (on projected plane).
     * @api
     */
    LineString$$1.prototype.getLength = function getLength () {
      return lineStringLength(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };

    /**
     * @return {Array<number>} Flat midpoint.
     */
    LineString$$1.prototype.getFlatMidpoint = function getFlatMidpoint () {
      if (this.flatMidpointRevision_ != this.getRevision()) {
        this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);
        this.flatMidpointRevision_ = this.getRevision();
      }
      return this.flatMidpoint_;
    };

    /**
     * @inheritDoc
     */
    LineString$$1.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      var simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = douglasPeucker(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        squaredTolerance, simplifiedFlatCoordinates, 0);
      return new LineString$$1(simplifiedFlatCoordinates, GeometryLayout.XY);
    };

    /**
     * @inheritDoc
     * @api
     */
    LineString$$1.prototype.getType = function getType () {
      return GeometryType.LINE_STRING;
    };

    /**
     * @inheritDoc
     * @api
     */
    LineString$$1.prototype.intersectsExtent = function intersectsExtent (extent$$1) {
      return intersectsLineString(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        extent$$1);
    };

    /**
     * Set the coordinates of the linestring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    LineString$$1.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    };

    return LineString$$1;
  }(SimpleGeometry));

  /**
   * @module ol/geom/flat/geodesic
   */

  /**
   * @module ol/render/EventType
   */

  /**
   * @enum {string}
   */
  var RenderEventType = {
    /**
     * @event module:ol/render/Event~RenderEvent#postcompose
     * @api
     */
    POSTCOMPOSE: 'postcompose',
    /**
     * @event module:ol/render/Event~RenderEvent#precompose
     * @api
     */
    PRECOMPOSE: 'precompose',
    /**
     * @event module:ol/render/Event~RenderEvent#render
     * @api
     */
    RENDER: 'render',
    /**
     * Triggered when rendering is complete, i.e. all sources and tiles have
     * finished loading for the current viewport, and all tiles are faded in.
     * @event module:ol/render/Event~RenderEvent#rendercomplete
     * @api
     */
    RENDERCOMPLETE: 'rendercomplete'
  };

  /**
   * @module ol/color
   */


  /**
   * A color represented as a short array [red, green, blue, alpha].
   * red, green, and blue should be integers in the range 0..255 inclusive.
   * alpha should be a float in the range 0..1 inclusive. If no alpha value is
   * given then `1` will be used.
   * @typedef {Array<number>} Color
   * @api
   */


  /**
   * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
   * @const
   * @type {RegExp}
   * @private
   */
  var HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;


  /**
   * Regular expression for matching potential named color style strings.
   * @const
   * @type {RegExp}
   * @private
   */
  var NAMED_COLOR_RE_ = /^([a-z]*)$/i;


  /**
   * Return the color as an rgba string.
   * @param {Color|string} color Color.
   * @return {string} Rgba string.
   * @api
   */
  function asString(color) {
    if (typeof color === 'string') {
      return color;
    } else {
      return toString(color);
    }
  }

  /**
   * Return named color as an rgba string.
   * @param {string} color Named color.
   * @return {string} Rgb string.
   */
  function fromNamed(color) {
    var el = document.createElement('div');
    el.style.color = color;
    if (el.style.color !== '') {
      document.body.appendChild(el);
      var rgb = getComputedStyle(el).color;
      document.body.removeChild(el);
      return rgb;
    } else {
      return '';
    }
  }


  /**
   * @param {string} s String.
   * @return {Color} Color.
   */
  var fromString = (
    function() {

      // We maintain a small cache of parsed strings.  To provide cheap LRU-like
      // semantics, whenever the cache grows too large we simply delete an
      // arbitrary 25% of the entries.

      /**
       * @const
       * @type {number}
       */
      var MAX_CACHE_SIZE = 1024;

      /**
       * @type {Object<string, Color>}
       */
      var cache = {};

      /**
       * @type {number}
       */
      var cacheSize = 0;

      return (
        /**
         * @param {string} s String.
         * @return {Color} Color.
         */
        function(s) {
          var color;
          if (cache.hasOwnProperty(s)) {
            color = cache[s];
          } else {
            if (cacheSize >= MAX_CACHE_SIZE) {
              var i = 0;
              for (var key in cache) {
                if ((i++ & 3) === 0) {
                  delete cache[key];
                  --cacheSize;
                }
              }
            }
            color = fromStringInternal_(s);
            cache[s] = color;
            ++cacheSize;
          }
          return color;
        }
      );

    })();

  /**
   * Return the color as an array. This function maintains a cache of calculated
   * arrays which means the result should not be modified.
   * @param {Color|string} color Color.
   * @return {Color} Color.
   * @api
   */
  function asArray(color) {
    if (Array.isArray(color)) {
      return color;
    } else {
      return fromString(color);
    }
  }

  /**
   * @param {string} s String.
   * @private
   * @return {Color} Color.
   */
  function fromStringInternal_(s) {
    var r, g, b, a, color;

    if (NAMED_COLOR_RE_.exec(s)) {
      s = fromNamed(s);
    }

    if (HEX_COLOR_RE_.exec(s)) { // hex
      var n = s.length - 1; // number of hex digits
      var d; // number of digits per channel
      if (n <= 4) {
        d = 1;
      } else {
        d = 2;
      }
      var hasAlpha = n === 4 || n === 8;
      r = parseInt(s.substr(1 + 0 * d, d), 16);
      g = parseInt(s.substr(1 + 1 * d, d), 16);
      b = parseInt(s.substr(1 + 2 * d, d), 16);
      if (hasAlpha) {
        a = parseInt(s.substr(1 + 3 * d, d), 16);
      } else {
        a = 255;
      }
      if (d == 1) {
        r = (r << 4) + r;
        g = (g << 4) + g;
        b = (b << 4) + b;
        if (hasAlpha) {
          a = (a << 4) + a;
        }
      }
      color = [r, g, b, a / 255];
    } else if (s.indexOf('rgba(') == 0) { // rgba()
      color = s.slice(5, -1).split(',').map(Number);
      normalize$1(color);
    } else if (s.indexOf('rgb(') == 0) { // rgb()
      color = s.slice(4, -1).split(',').map(Number);
      color.push(1);
      normalize$1(color);
    } else {
      assert(false, 14); // Invalid color
    }
    return color;
  }


  /**
   * TODO this function is only used in the test, we probably shouldn't export it
   * @param {Color} color Color.
   * @return {Color} Clamped color.
   */
  function normalize$1(color) {
    color[0] = clamp((color[0] + 0.5) | 0, 0, 255);
    color[1] = clamp((color[1] + 0.5) | 0, 0, 255);
    color[2] = clamp((color[2] + 0.5) | 0, 0, 255);
    color[3] = clamp(color[3], 0, 1);
    return color;
  }


  /**
   * @param {Color} color Color.
   * @return {string} String.
   */
  function toString(color) {
    var r = color[0];
    if (r != (r | 0)) {
      r = (r + 0.5) | 0;
    }
    var g = color[1];
    if (g != (g | 0)) {
      g = (g + 0.5) | 0;
    }
    var b = color[2];
    if (b != (b | 0)) {
      b = (b + 0.5) | 0;
    }
    var a = color[3] === undefined ? 1 : color[3];
    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
  }

  /**
   * @module ol/style/Fill
   */


  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   */


  /**
   * @classdesc
   * Set fill style for vector features.
   * @api
   */
  var Fill$1 = function Fill$$1(opt_options) {

    var options = opt_options || {};

    /**
     * @private
     * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
     */
    this.color_ = options.color !== undefined ? options.color : null;

    /**
     * @private
     * @type {string|undefined}
     */
    this.checksum_ = undefined;
  };

  /**
   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
   * @return {Fill} The cloned style.
   * @api
   */
  Fill$1.prototype.clone = function clone () {
    var color = this.getColor();
    return new Fill$1({
      color: Array.isArray(color) ? color.slice() : color || undefined
    });
  };

  /**
   * Get the fill color.
   * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
   * @api
   */
  Fill$1.prototype.getColor = function getColor () {
    return this.color_;
  };

  /**
   * Set the color.
   *
   * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
   * @api
   */
  Fill$1.prototype.setColor = function setColor (color) {
    this.color_ = color;
    this.checksum_ = undefined;
  };

  /**
   * @return {string} The checksum.
   */
  Fill$1.prototype.getChecksum = function getChecksum () {
    if (this.checksum_ === undefined) {
      var color = this.color_;
      if (color) {
        if (Array.isArray(color) || typeof color == 'string') {
          this.checksum_ = 'f' + asString(/** @type {import("../color.js").Color|string} */ (color));
        } else {
          this.checksum_ = getUid(this.color_);
        }
      } else {
        this.checksum_ = 'f-';
      }
    }

    return this.checksum_;
  };

  /**
   * @module ol/style/Stroke
   */


  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   * @property {string} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {string} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).
   * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on
   * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.
   * @property {number} [lineDashOffset=0] Line dash offset.
   * @property {number} [miterLimit=10] Miter limit.
   * @property {number} [width] Width.
   */


  /**
   * @classdesc
   * Set stroke style for vector features.
   * Note that the defaults given are the Canvas defaults, which will be used if
   * option is not defined. The `get` functions return whatever was entered in
   * the options; they will not return the default.
   * @api
   */
  var Stroke$1 = function Stroke$$1(opt_options) {

    var options = opt_options || {};

    /**
     * @private
     * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
     */
    this.color_ = options.color !== undefined ? options.color : null;

    /**
     * @private
     * @type {string|undefined}
     */
    this.lineCap_ = options.lineCap;

    /**
     * @private
     * @type {Array<number>}
     */
    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;

    /**
     * @private
     * @type {number|undefined}
     */
    this.lineDashOffset_ = options.lineDashOffset;

    /**
     * @private
     * @type {string|undefined}
     */
    this.lineJoin_ = options.lineJoin;

    /**
     * @private
     * @type {number|undefined}
     */
    this.miterLimit_ = options.miterLimit;

    /**
     * @private
     * @type {number|undefined}
     */
    this.width_ = options.width;

    /**
     * @private
     * @type {string|undefined}
     */
    this.checksum_ = undefined;
  };

  /**
   * Clones the style.
   * @return {Stroke} The cloned style.
   * @api
   */
  Stroke$1.prototype.clone = function clone () {
    var color = this.getColor();
    return new Stroke$1({
      color: Array.isArray(color) ? color.slice() : color || undefined,
      lineCap: this.getLineCap(),
      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
      lineDashOffset: this.getLineDashOffset(),
      lineJoin: this.getLineJoin(),
      miterLimit: this.getMiterLimit(),
      width: this.getWidth()
    });
  };

  /**
   * Get the stroke color.
   * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
   * @api
   */
  Stroke$1.prototype.getColor = function getColor () {
    return this.color_;
  };

  /**
   * Get the line cap type for the stroke.
   * @return {string|undefined} Line cap.
   * @api
   */
  Stroke$1.prototype.getLineCap = function getLineCap () {
    return this.lineCap_;
  };

  /**
   * Get the line dash style for the stroke.
   * @return {Array<number>} Line dash.
   * @api
   */
  Stroke$1.prototype.getLineDash = function getLineDash () {
    return this.lineDash_;
  };

  /**
   * Get the line dash offset for the stroke.
   * @return {number|undefined} Line dash offset.
   * @api
   */
  Stroke$1.prototype.getLineDashOffset = function getLineDashOffset () {
    return this.lineDashOffset_;
  };

  /**
   * Get the line join type for the stroke.
   * @return {string|undefined} Line join.
   * @api
   */
  Stroke$1.prototype.getLineJoin = function getLineJoin () {
    return this.lineJoin_;
  };

  /**
   * Get the miter limit for the stroke.
   * @return {number|undefined} Miter limit.
   * @api
   */
  Stroke$1.prototype.getMiterLimit = function getMiterLimit () {
    return this.miterLimit_;
  };

  /**
   * Get the stroke width.
   * @return {number|undefined} Width.
   * @api
   */
  Stroke$1.prototype.getWidth = function getWidth () {
    return this.width_;
  };

  /**
   * Set the color.
   *
   * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
   * @api
   */
  Stroke$1.prototype.setColor = function setColor (color) {
    this.color_ = color;
    this.checksum_ = undefined;
  };

  /**
   * Set the line cap.
   *
   * @param {string|undefined} lineCap Line cap.
   * @api
   */
  Stroke$1.prototype.setLineCap = function setLineCap (lineCap) {
    this.lineCap_ = lineCap;
    this.checksum_ = undefined;
  };

  /**
   * Set the line dash.
   *
   * Please note that Internet Explorer 10 and lower [do not support][mdn] the
   * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this
   * property will have no visual effect in these browsers.
   *
   * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility
   *
   * @param {Array<number>} lineDash Line dash.
   * @api
   */
  Stroke$1.prototype.setLineDash = function setLineDash (lineDash) {
    this.lineDash_ = lineDash;
    this.checksum_ = undefined;
  };

  /**
   * Set the line dash offset.
   *
   * @param {number|undefined} lineDashOffset Line dash offset.
   * @api
   */
  Stroke$1.prototype.setLineDashOffset = function setLineDashOffset (lineDashOffset) {
    this.lineDashOffset_ = lineDashOffset;
    this.checksum_ = undefined;
  };

  /**
   * Set the line join.
   *
   * @param {string|undefined} lineJoin Line join.
   * @api
   */
  Stroke$1.prototype.setLineJoin = function setLineJoin (lineJoin) {
    this.lineJoin_ = lineJoin;
    this.checksum_ = undefined;
  };

  /**
   * Set the miter limit.
   *
   * @param {number|undefined} miterLimit Miter limit.
   * @api
   */
  Stroke$1.prototype.setMiterLimit = function setMiterLimit (miterLimit) {
    this.miterLimit_ = miterLimit;
    this.checksum_ = undefined;
  };

  /**
   * Set the width.
   *
   * @param {number|undefined} width Width.
   * @api
   */
  Stroke$1.prototype.setWidth = function setWidth (width) {
    this.width_ = width;
    this.checksum_ = undefined;
  };

  /**
   * @return {string} The checksum.
   */
  Stroke$1.prototype.getChecksum = function getChecksum () {
    if (this.checksum_ === undefined) {
      this.checksum_ = 's';
      if (this.color_) {
        if (typeof this.color_ === 'string') {
          this.checksum_ += this.color_;
        } else {
          this.checksum_ += getUid(this.color_);
        }
      } else {
        this.checksum_ += '-';
      }
      this.checksum_ += ',' +
          (this.lineCap_ !== undefined ?
            this.lineCap_.toString() : '-') + ',' +
          (this.lineDash_ ?
            this.lineDash_.toString() : '-') + ',' +
          (this.lineDashOffset_ !== undefined ?
            this.lineDashOffset_ : '-') + ',' +
          (this.lineJoin_ !== undefined ?
            this.lineJoin_ : '-') + ',' +
          (this.miterLimit_ !== undefined ?
            this.miterLimit_.toString() : '-') + ',' +
          (this.width_ !== undefined ?
            this.width_.toString() : '-');
    }

    return this.checksum_;
  };

  /**
   * @module ol/style/TextPlacement
   */

  /**
   * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that
   * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
   * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
   * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
   * @enum {string}
   */
  var TextPlacement = {
    POINT: 'point',
    LINE: 'line'
  };

  /**
   * @module ol/style/Text
   */

  /**
   * @module ol/Graticule
   */


  /**
   * @type {Stroke}
   * @private
   * @const
   */
  var DEFAULT_STROKE_STYLE = new Stroke$1({
    color: 'rgba(0,0,0,0.2)'
  });

  /**
   * @module ol/ImageBase
   */

  /**
   * @abstract
   */
  var ImageBase = /*@__PURE__*/(function (EventTarget) {
    function ImageBase(extent$$1, resolution, pixelRatio, state) {

      EventTarget.call(this);

      /**
       * @protected
       * @type {import("./extent.js").Extent}
       */
      this.extent = extent$$1;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.resolution = resolution;

      /**
       * @protected
       * @type {import("./ImageState.js").default}
       */
      this.state = state;

    }

    if ( EventTarget ) ImageBase.__proto__ = EventTarget;
    ImageBase.prototype = Object.create( EventTarget && EventTarget.prototype );
    ImageBase.prototype.constructor = ImageBase;

    /**
     * @protected
     */
    ImageBase.prototype.changed = function changed () {
      this.dispatchEvent(EventType.CHANGE);
    };

    /**
     * @return {import("./extent.js").Extent} Extent.
     */
    ImageBase.prototype.getExtent = function getExtent () {
      return this.extent;
    };

    /**
     * @abstract
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     */
    ImageBase.prototype.getImage = function getImage () {
      return abstract();
    };

    /**
     * @return {number} PixelRatio.
     */
    ImageBase.prototype.getPixelRatio = function getPixelRatio () {
      return this.pixelRatio_;
    };

    /**
     * @return {number} Resolution.
     */
    ImageBase.prototype.getResolution = function getResolution () {
      return /** @type {number} */ (this.resolution);
    };

    /**
     * @return {import("./ImageState.js").default} State.
     */
    ImageBase.prototype.getState = function getState () {
      return this.state;
    };

    /**
     * Load not yet loaded URI.
     * @abstract
     */
    ImageBase.prototype.load = function load () {
      abstract();
    };

    return ImageBase;
  }(Target));

  /**
   * @module ol/ImageState
   */

  /**
   * @enum {number}
   */
  var ImageState = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    ERROR: 3
  };

  /**
   * @module ol/Image
   */


  /**
   * A function that takes an {@link module:ol/Image~Image} for the image and a
   * `{string}` for the src as arguments. It is supposed to make it so the
   * underlying image {@link module:ol/Image~Image#getImage} is assigned the
   * content specified by the src. If not specified, the default is
   *
   *     function(image, src) {
   *       image.getImage().src = src;
   *     }
   *
   * Providing a custom `imageLoadFunction` can be useful to load images with
   * post requests or - in general - through XHR requests, where the src of the
   * image element would be set to a data URI when the content is loaded.
   *
   * @typedef {function(ImageWrapper, string)} LoadFunction
   * @api
   */


  var ImageWrapper = /*@__PURE__*/(function (ImageBase$$1) {
    function ImageWrapper(extent$$1, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {

      ImageBase$$1.call(this, extent$$1, resolution, pixelRatio, ImageState.IDLE);

      /**
       * @private
       * @type {string}
       */
      this.src_ = src;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
       */
      this.image_ = new Image();
      if (crossOrigin !== null) {
        this.image_.crossOrigin = crossOrigin;
      }

      /**
       * @private
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.imageListenerKeys_ = null;

      /**
       * @protected
       * @type {ImageState}
       */
      this.state = ImageState.IDLE;

      /**
       * @private
       * @type {LoadFunction}
       */
      this.imageLoadFunction_ = imageLoadFunction;

    }

    if ( ImageBase$$1 ) ImageWrapper.__proto__ = ImageBase$$1;
    ImageWrapper.prototype = Object.create( ImageBase$$1 && ImageBase$$1.prototype );
    ImageWrapper.prototype.constructor = ImageWrapper;

    /**
     * @inheritDoc
     * @api
     */
    ImageWrapper.prototype.getImage = function getImage () {
      return this.image_;
    };

    /**
     * Tracks loading or read errors.
     *
     * @private
     */
    ImageWrapper.prototype.handleImageError_ = function handleImageError_ () {
      this.state = ImageState.ERROR;
      this.unlistenImage_();
      this.changed();
    };

    /**
     * Tracks successful image load.
     *
     * @private
     */
    ImageWrapper.prototype.handleImageLoad_ = function handleImageLoad_ () {
      if (this.resolution === undefined) {
        this.resolution = getHeight(this.extent) / this.image_.height;
      }
      this.state = ImageState.LOADED;
      this.unlistenImage_();
      this.changed();
    };

    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     * @override
     * @api
     */
    ImageWrapper.prototype.load = function load () {
      if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {
        this.state = ImageState.LOADING;
        this.changed();
        this.imageListenerKeys_ = [
          listenOnce(this.image_, EventType.ERROR,
            this.handleImageError_, this),
          listenOnce(this.image_, EventType.LOAD,
            this.handleImageLoad_, this)
        ];
        this.imageLoadFunction_(this, this.src_);
      }
    };

    /**
     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
     */
    ImageWrapper.prototype.setImage = function setImage (image) {
      this.image_ = image;
    };

    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */
    ImageWrapper.prototype.unlistenImage_ = function unlistenImage_ () {
      this.imageListenerKeys_.forEach(unlistenByKey);
      this.imageListenerKeys_ = null;
    };

    return ImageWrapper;
  }(ImageBase));

  /**
   * @module ol/ImageCanvas
   */


  /**
   * A function that is called to trigger asynchronous canvas drawing.  It is
   * called with a "done" callback that should be called when drawing is done.
   * If any error occurs during drawing, the "done" callback should be called with
   * that error.
   *
   * @typedef {function(function(Error=))} Loader
   */


  var ImageCanvas = /*@__PURE__*/(function (ImageBase$$1) {
    function ImageCanvas(extent$$1, resolution, pixelRatio, canvas, opt_loader) {

      var state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;

      ImageBase$$1.call(this, extent$$1, resolution, pixelRatio, state);

      /**
       * Optional canvas loader function.
       * @type {?Loader}
       * @private
       */
      this.loader_ = opt_loader !== undefined ? opt_loader : null;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = canvas;

      /**
       * @private
       * @type {Error}
       */
      this.error_ = null;

    }

    if ( ImageBase$$1 ) ImageCanvas.__proto__ = ImageBase$$1;
    ImageCanvas.prototype = Object.create( ImageBase$$1 && ImageBase$$1.prototype );
    ImageCanvas.prototype.constructor = ImageCanvas;

    /**
     * Get any error associated with asynchronous rendering.
     * @return {Error} Any error that occurred during rendering.
     */
    ImageCanvas.prototype.getError = function getError () {
      return this.error_;
    };

    /**
     * Handle async drawing complete.
     * @param {Error=} err Any error during drawing.
     * @private
     */
    ImageCanvas.prototype.handleLoad_ = function handleLoad_ (err) {
      if (err) {
        this.error_ = err;
        this.state = ImageState.ERROR;
      } else {
        this.state = ImageState.LOADED;
      }
      this.changed();
    };

    /**
     * @inheritDoc
     */
    ImageCanvas.prototype.load = function load () {
      if (this.state == ImageState.IDLE) {
        this.state = ImageState.LOADING;
        this.changed();
        this.loader_(this.handleLoad_.bind(this));
      }
    };

    /**
     * @return {HTMLCanvasElement} Canvas element.
     */
    ImageCanvas.prototype.getImage = function getImage () {
      return this.canvas_;
    };

    return ImageCanvas;
  }(ImageBase));

  /**
   * @module ol/TileState
   */

  /**
   * @enum {number}
   */
  var TileState = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    /**
     * Indicates that tile loading failed
     * @type {number}
     */
    ERROR: 3,
    EMPTY: 4,
    ABORT: 5
  };

  /**
   * @module ol/easing
   */


  /**
   * Start slow and speed up.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeIn(t) {
    return Math.pow(t, 3);
  }


  /**
   * Start fast and slow down.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeOut(t) {
    return 1 - easeIn(1 - t);
  }


  /**
   * Start slow, speed up, and then slow down again.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function inAndOut(t) {
    return 3 * t * t - 2 * t * t * t;
  }


  /**
   * Maintain a constant speed over time.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function linear(t) {
    return t;
  }

  /**
   * @module ol/Tile
   */


  /**
   * A function that takes an {@link module:ol/Tile} for the tile and a
   * `{string}` for the url as arguments. The default is
   * ```js
   * source.setTileLoadFunction(function(tile, src) {
   *   tile.getImage().src = src;
   * });
   * ```
   * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
   * error handling:
   *
   * ```js
   * import TileState from 'ol/TileState';
   *
   * source.setTileLoadFunction(function(tile, src) {
   *   var xhr = new XMLHttpRequest();
   *   xhr.responseType = 'blob';
   *   xhr.addEventListener('loadend', function (evt) {
   *     var data = this.response;
   *     if (data !== undefined) {
   *       tile.getImage().src = URL.createObjectURL(data);
   *     } else {
   *       tile.setState(TileState.ERROR);
   *     }
   *   });
   *   xhr.addEventListener('error', function () {
   *     tile.setState(TileState.ERROR);
   *   });
   *   xhr.open('GET', src);
   *   xhr.send();
   * });
   * ```
   *
   * @typedef {function(Tile, string)} LoadFunction
   * @api
   */

  /**
   * {@link module:ol/source/Tile~Tile} sources use a function of this type to get
   * the url that provides a tile for a given tile coordinate.
   *
   * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
   * coordinate, a `{number}` representing the pixel ratio and a
   * {@link module:ol/proj/Projection} for the projection  as arguments
   * and returns a `{string}` representing the tile URL, or undefined if no tile
   * should be requested for the passed tile coordinate.
   *
   * @typedef {function(import("./tilecoord.js").TileCoord, number,
   *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
   * @api
   */


  /**
   * @typedef {Object} Options
   * @property {number} [transition=250] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @api
   */


  /**
   * @classdesc
   * Base class for tiles.
   *
   * @abstract
   */
  var Tile = /*@__PURE__*/(function (EventTarget) {
    function Tile(tileCoord, state, opt_options) {
      EventTarget.call(this);

      var options = opt_options ? opt_options : {};

      /**
       * @type {import("./tilecoord.js").TileCoord}
       */
      this.tileCoord = tileCoord;

      /**
       * @protected
       * @type {TileState}
       */
      this.state = state;

      /**
       * An "interim" tile for this tile. The interim tile may be used while this
       * one is loading, for "smooth" transitions when changing params/dimensions
       * on the source.
       * @type {Tile}
       */
      this.interimTile = null;

      /**
       * A key assigned to the tile. This is used by the tile source to determine
       * if this tile can effectively be used, or if a new tile should be created
       * and this one be used as an interim tile for this new tile.
       * @type {string}
       */
      this.key = '';

      /**
       * The duration for the opacity transition.
       * @type {number}
       */
      this.transition_ = options.transition === undefined ? 250 : options.transition;

      /**
       * Lookup of start times for rendering transitions.  If the start time is
       * equal to -1, the transition is complete.
       * @type {Object<string, number>}
       */
      this.transitionStarts_ = {};

    }

    if ( EventTarget ) Tile.__proto__ = EventTarget;
    Tile.prototype = Object.create( EventTarget && EventTarget.prototype );
    Tile.prototype.constructor = Tile;

    /**
     * @protected
     */
    Tile.prototype.changed = function changed () {
      this.dispatchEvent(EventType.CHANGE);
    };

    /**
     * @return {string} Key.
     */
    Tile.prototype.getKey = function getKey () {
      return this.key + '/' + this.tileCoord;
    };

    /**
     * Get the interim tile most suitable for rendering using the chain of interim
     * tiles. This corresponds to the  most recent tile that has been loaded, if no
     * such tile exists, the original tile is returned.
     * @return {!Tile} Best tile for rendering.
     */
    Tile.prototype.getInterimTile = function getInterimTile () {
      if (!this.interimTile) {
        //empty chain
        return this;
      }
      var tile = this.interimTile;

      // find the first loaded tile and return it. Since the chain is sorted in
      // decreasing order of creation time, there is no need to search the remainder
      // of the list (all those tiles correspond to older requests and will be
      // cleaned up by refreshInterimChain)
      do {
        if (tile.getState() == TileState.LOADED) {
          return tile;
        }
        tile = tile.interimTile;
      } while (tile);

      // we can not find a better tile
      return this;
    };

    /**
     * Goes through the chain of interim tiles and discards sections of the chain
     * that are no longer relevant.
     */
    Tile.prototype.refreshInterimChain = function refreshInterimChain () {
      if (!this.interimTile) {
        return;
      }

      var tile = this.interimTile;
      var prev = /** @type {Tile} */ (this);

      do {
        if (tile.getState() == TileState.LOADED) {
          //we have a loaded tile, we can discard the rest of the list
          //we would could abort any LOADING tile request
          //older than this tile (i.e. any LOADING tile following this entry in the chain)
          tile.interimTile = null;
          break;
        } else if (tile.getState() == TileState.LOADING) {
          //keep this LOADING tile any loaded tiles later in the chain are
          //older than this tile, so we're still interested in the request
          prev = tile;
        } else if (tile.getState() == TileState.IDLE) {
          //the head of the list is the most current tile, we don't need
          //to start any other requests for this chain
          prev.interimTile = tile.interimTile;
        } else {
          prev = tile;
        }
        tile = prev.interimTile;
      } while (tile);
    };

    /**
     * Get the tile coordinate for this tile.
     * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
     * @api
     */
    Tile.prototype.getTileCoord = function getTileCoord () {
      return this.tileCoord;
    };

    /**
     * @return {TileState} State.
     */
    Tile.prototype.getState = function getState () {
      return this.state;
    };

    /**
     * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
     * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
     * when the tile cannot be loaded. Otherwise the tile cannot be removed from
     * the tile queue and will block other requests.
     * @param {TileState} state State.
     * @api
     */
    Tile.prototype.setState = function setState (state) {
      this.state = state;
      this.changed();
    };

    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     * @abstract
     * @api
     */
    Tile.prototype.load = function load () {};

    /**
     * Get the alpha value for rendering.
     * @param {string} id An id for the renderer.
     * @param {number} time The render frame time.
     * @return {number} A number between 0 and 1.
     */
    Tile.prototype.getAlpha = function getAlpha (id, time) {
      if (!this.transition_) {
        return 1;
      }

      var start = this.transitionStarts_[id];
      if (!start) {
        start = time;
        this.transitionStarts_[id] = start;
      } else if (start === -1) {
        return 1;
      }

      var delta = time - start + (1000 / 60); // avoid rendering at 0
      if (delta >= this.transition_) {
        return 1;
      }
      return easeIn(delta / this.transition_);
    };

    /**
     * Determine if a tile is in an alpha transition.  A tile is considered in
     * transition if tile.getAlpha() has not yet been called or has been called
     * and returned 1.
     * @param {string} id An id for the renderer.
     * @return {boolean} The tile is in transition.
     */
    Tile.prototype.inTransition = function inTransition (id) {
      if (!this.transition_) {
        return false;
      }
      return this.transitionStarts_[id] !== -1;
    };

    /**
     * Mark a transition as complete.
     * @param {string} id An id for the renderer.
     */
    Tile.prototype.endTransition = function endTransition (id) {
      if (this.transition_) {
        this.transitionStarts_[id] = -1;
      }
    };

    return Tile;
  }(Target));

  /**
   * @module ol/dom
   */


  /**
   * Create an html canvas element and returns its 2d context.
   * @param {number=} opt_width Canvas width.
   * @param {number=} opt_height Canvas height.
   * @return {CanvasRenderingContext2D} The context.
   */
  function createCanvasContext2D(opt_width, opt_height) {
    var canvas = /** @type {HTMLCanvasElement} */ (document.createElement('canvas'));
    if (opt_width) {
      canvas.width = opt_width;
    }
    if (opt_height) {
      canvas.height = opt_height;
    }
    return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));
  }


  /**
   * Get the current computed width for the given element including margin,
   * padding and border.
   * Equivalent to jQuery's `$(el).outerWidth(true)`.
   * @param {!HTMLElement} element Element.
   * @return {number} The width.
   */
  function outerWidth(element) {
    var width = element.offsetWidth;
    var style = getComputedStyle(element);
    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);

    return width;
  }


  /**
   * Get the current computed height for the given element including margin,
   * padding and border.
   * Equivalent to jQuery's `$(el).outerHeight(true)`.
   * @param {!HTMLElement} element Element.
   * @return {number} The height.
   */
  function outerHeight(element) {
    var height = element.offsetHeight;
    var style = getComputedStyle(element);
    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);

    return height;
  }

  /**
   * @param {Node} newNode Node to replace old node
   * @param {Node} oldNode The node to be replaced
   */
  function replaceNode(newNode, oldNode) {
    var parent = oldNode.parentNode;
    if (parent) {
      parent.replaceChild(newNode, oldNode);
    }
  }

  /**
   * @param {Node} node The node to remove.
   * @returns {Node} The node that was removed or null.
   */
  function removeNode(node) {
    return node && node.parentNode ? node.parentNode.removeChild(node) : null;
  }

  /**
   * @param {Node} node The node to remove the children from.
   */
  function removeChildren(node) {
    while (node.lastChild) {
      node.removeChild(node.lastChild);
    }
  }

  /**
   * @module ol/ImageTile
   */


  var ImageTile = /*@__PURE__*/(function (Tile$$1) {
    function ImageTile(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {

      Tile$$1.call(this, tileCoord, state, opt_options);

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ = crossOrigin;

      /**
       * Image URI
       *
       * @private
       * @type {string}
       */
      this.src_ = src;

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      this.image_ = new Image();
      if (crossOrigin !== null) {
        this.image_.crossOrigin = crossOrigin;
      }

      /**
       * @private
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.imageListenerKeys_ = null;

      /**
       * @private
       * @type {import("./Tile.js").LoadFunction}
       */
      this.tileLoadFunction_ = tileLoadFunction;

    }

    if ( Tile$$1 ) ImageTile.__proto__ = Tile$$1;
    ImageTile.prototype = Object.create( Tile$$1 && Tile$$1.prototype );
    ImageTile.prototype.constructor = ImageTile;

    /**
     * @inheritDoc
     */
    ImageTile.prototype.disposeInternal = function disposeInternal () {
      if (this.state == TileState.LOADING) {
        this.unlistenImage_();
        this.image_ = getBlankImage();
      }
      if (this.interimTile) {
        this.interimTile.dispose();
      }
      this.state = TileState.ABORT;
      this.changed();
      Tile$$1.prototype.disposeInternal.call(this);
    };

    /**
     * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @api
     */
    ImageTile.prototype.getImage = function getImage () {
      return this.image_;
    };

    /**
     * @inheritDoc
     */
    ImageTile.prototype.getKey = function getKey () {
      return this.src_;
    };

    /**
     * Tracks loading or read errors.
     *
     * @private
     */
    ImageTile.prototype.handleImageError_ = function handleImageError_ () {
      this.state = TileState.ERROR;
      this.unlistenImage_();
      this.image_ = getBlankImage();
      this.changed();
    };

    /**
     * Tracks successful image load.
     *
     * @private
     */
    ImageTile.prototype.handleImageLoad_ = function handleImageLoad_ () {
      var image = /** @type {HTMLImageElement} */ (this.image_);
      if (image.naturalWidth && image.naturalHeight) {
        this.state = TileState.LOADED;
      } else {
        this.state = TileState.EMPTY;
      }
      this.unlistenImage_();
      this.changed();
    };

    /**
     * @inheritDoc
     * @api
     */
    ImageTile.prototype.load = function load () {
      if (this.state == TileState.ERROR) {
        this.state = TileState.IDLE;
        this.image_ = new Image();
        if (this.crossOrigin_ !== null) {
          this.image_.crossOrigin = this.crossOrigin_;
        }
      }
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        this.changed();
        this.imageListenerKeys_ = [
          listenOnce(this.image_, EventType.ERROR,
            this.handleImageError_, this),
          listenOnce(this.image_, EventType.LOAD,
            this.handleImageLoad_, this)
        ];
        this.tileLoadFunction_(this, this.src_);
      }
    };

    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */
    ImageTile.prototype.unlistenImage_ = function unlistenImage_ () {
      this.imageListenerKeys_.forEach(unlistenByKey);
      this.imageListenerKeys_ = null;
    };

    return ImageTile;
  }(Tile));


  /**
   * Get a 1-pixel blank image.
   * @return {HTMLCanvasElement} Blank image.
   */
  function getBlankImage() {
    var ctx = createCanvasContext2D(1, 1);
    ctx.fillStyle = 'rgba(0,0,0,0)';
    ctx.fillRect(0, 0, 1, 1);
    return ctx.canvas;
  }

  /**
   * @module ol/Kinetic
   */

  /**
   * @classdesc
   * Implementation of inertial deceleration for map movement.
   *
   * @api
   */
  var Kinetic = function Kinetic(decay, minVelocity, delay) {

    /**
     * @private
     * @type {number}
     */
    this.decay_ = decay;

    /**
     * @private
     * @type {number}
     */
    this.minVelocity_ = minVelocity;

    /**
     * @private
     * @type {number}
     */
    this.delay_ = delay;

    /**
     * @private
     * @type {Array<number>}
     */
    this.points_ = [];

    /**
     * @private
     * @type {number}
     */
    this.angle_ = 0;

    /**
     * @private
     * @type {number}
     */
    this.initialVelocity_ = 0;
  };

  /**
   * FIXME empty description for jsdoc
   */
  Kinetic.prototype.begin = function begin () {
    this.points_.length = 0;
    this.angle_ = 0;
    this.initialVelocity_ = 0;
  };

  /**
   * @param {number} x X.
   * @param {number} y Y.
   */
  Kinetic.prototype.update = function update (x, y) {
    this.points_.push(x, y, Date.now());
  };

  /**
   * @return {boolean} Whether we should do kinetic animation.
   */
  Kinetic.prototype.end = function end () {
    if (this.points_.length < 6) {
      // at least 2 points are required (i.e. there must be at least 6 elements
      // in the array)
      return false;
    }
    var delay = Date.now() - this.delay_;
    var lastIndex = this.points_.length - 3;
    if (this.points_[lastIndex + 2] < delay) {
      // the last tracked point is too old, which means that the user stopped
      // panning before releasing the map
      return false;
    }

    // get the first point which still falls into the delay time
    var firstIndex = lastIndex - 3;
    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
      firstIndex -= 3;
    }

    var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
    // we don't want a duration of 0 (divide by zero)
    // we also make sure the user panned for a duration of at least one frame
    // (1/60s) to compute sane displacement values
    if (duration < 1000 / 60) {
      return false;
    }

    var dx = this.points_[lastIndex] - this.points_[firstIndex];
    var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
    this.angle_ = Math.atan2(dy, dx);
    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
    return this.initialVelocity_ > this.minVelocity_;
  };

  /**
   * @return {number} Total distance travelled (pixels).
   */
  Kinetic.prototype.getDistance = function getDistance () {
    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
  };

  /**
   * @return {number} Angle of the kinetic panning animation (radians).
   */
  Kinetic.prototype.getAngle = function getAngle () {
    return this.angle_;
  };

  /**
   * @module ol/MapEvent
   */

  /**
   * @classdesc
   * Events emitted as map events are instances of this type.
   * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.
   */
  var MapEvent = /*@__PURE__*/(function (Event$$1) {
    function MapEvent(type, map, opt_frameState) {

      Event$$1.call(this, type);

      /**
       * The map where the event occurred.
       * @type {import("./PluggableMap.js").default}
       * @api
       */
      this.map = map;

      /**
       * The frame state at the time of the event.
       * @type {?import("./PluggableMap.js").FrameState}
       * @api
       */
      this.frameState = opt_frameState !== undefined ? opt_frameState : null;

    }

    if ( Event$$1 ) MapEvent.__proto__ = Event$$1;
    MapEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    MapEvent.prototype.constructor = MapEvent;

    return MapEvent;
  }(Event));

  /**
   * @module ol/MapBrowserEvent
   */

  /**
   * @classdesc
   * Events emitted as map browser events are instances of this type.
   * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.
   */
  var MapBrowserEvent = /*@__PURE__*/(function (MapEvent$$1) {
    function MapBrowserEvent(type, map, browserEvent, opt_dragging, opt_frameState) {

      MapEvent$$1.call(this, type, map, opt_frameState);

      /**
       * The original browser event.
       * @const
       * @type {Event}
       * @api
       */
      this.originalEvent = browserEvent;

      /**
       * The map pixel relative to the viewport corresponding to the original browser event.
       * @type {import("./pixel.js").Pixel}
       * @api
       */
      this.pixel = map.getEventPixel(browserEvent);

      /**
       * The coordinate in view projection corresponding to the original browser event.
       * @type {import("./coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = map.getCoordinateFromPixel(this.pixel);

      /**
       * Indicates if the map is currently being dragged. Only set for
       * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
       *
       * @type {boolean}
       * @api
       */
      this.dragging = opt_dragging !== undefined ? opt_dragging : false;

    }

    if ( MapEvent$$1 ) MapBrowserEvent.__proto__ = MapEvent$$1;
    MapBrowserEvent.prototype = Object.create( MapEvent$$1 && MapEvent$$1.prototype );
    MapBrowserEvent.prototype.constructor = MapBrowserEvent;

    /**
     * Prevents the default browser action.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
     * @override
     * @api
     */
    MapBrowserEvent.prototype.preventDefault = function preventDefault () {
      MapEvent$$1.prototype.preventDefault.call(this);
      this.originalEvent.preventDefault();
    };

    /**
     * Prevents further propagation of the current event.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
     * @override
     * @api
     */
    MapBrowserEvent.prototype.stopPropagation = function stopPropagation () {
      MapEvent$$1.prototype.stopPropagation.call(this);
      this.originalEvent.stopPropagation();
    };

    return MapBrowserEvent;
  }(MapEvent));

  /**
   * @module ol/MapBrowserEventType
   */

  /**
   * Constants for event names.
   * @enum {string}
   */
  var MapBrowserEventType = {

    /**
     * A true single click with no dragging and no double click. Note that this
     * event is delayed by 250 ms to ensure that it is not a double click.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
     * @api
     */
    SINGLECLICK: 'singleclick',

    /**
     * A click with no dragging. A double click will fire two of this.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
     * @api
     */
    CLICK: EventType.CLICK,

    /**
     * A true double click, with no dragging.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
     * @api
     */
    DBLCLICK: EventType.DBLCLICK,

    /**
     * Triggered when a pointer is dragged.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
     * @api
     */
    POINTERDRAG: 'pointerdrag',

    /**
     * Triggered when a pointer is moved. Note that on touch devices this is
     * triggered when the map is panned, so is not the same as mousemove.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
     * @api
     */
    POINTERMOVE: 'pointermove',

    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    POINTERCANCEL: 'pointercancel'
  };

  /**
   * @module ol/MapBrowserPointerEvent
   */

  var MapBrowserPointerEvent = /*@__PURE__*/(function (MapBrowserEvent$$1) {
    function MapBrowserPointerEvent(type, map, pointerEvent, opt_dragging, opt_frameState) {

      MapBrowserEvent$$1.call(this, type, map, pointerEvent.originalEvent, opt_dragging, opt_frameState);

      /**
       * @const
       * @type {import("./pointer/PointerEvent.js").default}
       */
      this.pointerEvent = pointerEvent;

    }

    if ( MapBrowserEvent$$1 ) MapBrowserPointerEvent.__proto__ = MapBrowserEvent$$1;
    MapBrowserPointerEvent.prototype = Object.create( MapBrowserEvent$$1 && MapBrowserEvent$$1.prototype );
    MapBrowserPointerEvent.prototype.constructor = MapBrowserPointerEvent;

    return MapBrowserPointerEvent;
  }(MapBrowserEvent));

  /**
   * @module ol/pointer/EventType
   */

  /**
   * Constants for event names.
   * @enum {string}
   */
  var PointerEventType = {
    POINTERMOVE: 'pointermove',
    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    POINTERCANCEL: 'pointercancel'
  };

  /**
   * @module ol/pointer/EventSource
   */

  var EventSource = function EventSource(dispatcher, mapping) {

    /**
     * @type {import("./PointerEventHandler.js").default}
     */
    this.dispatcher = dispatcher;

    /**
     * @private
     * @const
     * @type {!Object<string, function(Event)>}
     */
    this.mapping_ = mapping;
  };

  /**
   * List of events supported by this source.
   * @return {Array<string>} Event names
   */
  EventSource.prototype.getEvents = function getEvents () {
    return Object.keys(this.mapping_);
  };

  /**
   * Returns the handler that should handle a given event type.
   * @param {string} eventType The event type.
   * @return {function(Event)} Handler
   */
  EventSource.prototype.getHandlerForEvent = function getHandlerForEvent (eventType) {
    return this.mapping_[eventType];
  };

  /**
   * @module ol/pointer/MouseSource
   */


  /**
   * @type {number}
   */
  var POINTER_ID = 1;


  /**
   * @type {string}
   */
  var POINTER_TYPE = 'mouse';


  /**
   * Radius around touchend that swallows mouse events.
   *
   * @type {number}
   */
  var DEDUP_DIST = 25;

  /**
   * Handler for `mousedown`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mousedown(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      // TODO(dfreedman) workaround for some elements not sending mouseup
      // http://crbug/149091
      if (POINTER_ID.toString() in this.pointerMap) {
        this.cancel(inEvent);
      }
      var e = prepareEvent(inEvent, this.dispatcher);
      this.pointerMap[POINTER_ID.toString()] = inEvent;
      this.dispatcher.down(e, inEvent);
    }
  }

  /**
   * Handler for `mousemove`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mousemove(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      var e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.move(e, inEvent);
    }
  }

  /**
   * Handler for `mouseup`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mouseup(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      var p = this.pointerMap[POINTER_ID.toString()];

      if (p && p.button === inEvent.button) {
        var e = prepareEvent(inEvent, this.dispatcher);
        this.dispatcher.up(e, inEvent);
        this.cleanupMouse();
      }
    }
  }

  /**
   * Handler for `mouseover`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mouseover(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      var e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.enterOver(e, inEvent);
    }
  }

  /**
   * Handler for `mouseout`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mouseout(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      var e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.leaveOut(e, inEvent);
    }
  }


  var MouseSource = /*@__PURE__*/(function (EventSource$$1) {
    function MouseSource(dispatcher) {
      var mapping = {
        'mousedown': mousedown,
        'mousemove': mousemove,
        'mouseup': mouseup,
        'mouseover': mouseover,
        'mouseout': mouseout
      };
      EventSource$$1.call(this, dispatcher, mapping);

      /**
       * @const
       * @type {!Object<string, Event|Object>}
       */
      this.pointerMap = dispatcher.pointerMap;

      /**
       * @const
       * @type {Array<import("../pixel.js").Pixel>}
       */
      this.lastTouches = [];
    }

    if ( EventSource$$1 ) MouseSource.__proto__ = EventSource$$1;
    MouseSource.prototype = Object.create( EventSource$$1 && EventSource$$1.prototype );
    MouseSource.prototype.constructor = MouseSource;

    /**
     * Detect if a mouse event was simulated from a touch by
     * checking if previously there was a touch event at the
     * same position.
     *
     * FIXME - Known problem with the native Android browser on
     * Samsung GT-I9100 (Android 4.1.2):
     * In case the page is scrolled, this function does not work
     * correctly when a canvas is used (WebGL or canvas renderer).
     * Mouse listeners on canvas elements (for this browser), create
     * two mouse events: One 'good' and one 'bad' one (on other browsers or
     * when a div is used, there is only one event). For the 'bad' one,
     * clientX/clientY and also pageX/pageY are wrong when the page
     * is scrolled. Because of that, this function can not detect if
     * the events were simulated from a touch event. As result, a
     * pointer event at a wrong position is dispatched, which confuses
     * the map interactions.
     * It is unclear, how one can get the correct position for the event
     * or detect that the positions are invalid.
     *
     * @private
     * @param {MouseEvent} inEvent The in event.
     * @return {boolean} True, if the event was generated by a touch.
     */
    MouseSource.prototype.isEventSimulatedFromTouch_ = function isEventSimulatedFromTouch_ (inEvent) {
      var lts = this.lastTouches;
      var x = inEvent.clientX;
      var y = inEvent.clientY;
      for (var i = 0, l = lts.length, t = (void 0); i < l && (t = lts[i]); i++) {
        // simulated mouse events will be swallowed near a primary touchend
        var dx = Math.abs(x - t[0]);
        var dy = Math.abs(y - t[1]);
        if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {
          return true;
        }
      }
      return false;
    };

    /**
     * Dispatches a `pointercancel` event.
     *
     * @param {Event} inEvent The in event.
     */
    MouseSource.prototype.cancel = function cancel (inEvent) {
      var e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.cancel(e, inEvent);
      this.cleanupMouse();
    };

    /**
     * Remove the mouse from the list of active pointers.
     */
    MouseSource.prototype.cleanupMouse = function cleanupMouse () {
      delete this.pointerMap[POINTER_ID.toString()];
    };

    return MouseSource;
  }(EventSource));


  /**
   * Creates a copy of the original event that will be used
   * for the fake pointer event.
   *
   * @param {Event} inEvent The in event.
   * @param {import("./PointerEventHandler.js").default} dispatcher Event handler.
   * @return {Object} The copied event.
   */
  function prepareEvent(inEvent, dispatcher) {
    var e = dispatcher.cloneEvent(inEvent, inEvent);

    // forward mouse preventDefault
    var pd = e.preventDefault;
    e.preventDefault = function() {
      inEvent.preventDefault();
      pd();
    };

    e.pointerId = POINTER_ID;
    e.isPrimary = true;
    e.pointerType = POINTER_TYPE;

    return e;
  }

  /**
   * @module ol/pointer/MsSource
   */


  /**
   * @const
   * @type {Array<string>}
   */
  var POINTER_TYPES = [
    '',
    'unavailable',
    'touch',
    'pen',
    'mouse'
  ];

  /**
   * Handler for `msPointerDown`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerDown(inEvent) {
    this.pointerMap[inEvent.pointerId.toString()] = inEvent;
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.down(e, inEvent);
  }

  /**
   * Handler for `msPointerMove`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerMove(inEvent) {
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.move(e, inEvent);
  }

  /**
   * Handler for `msPointerUp`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerUp(inEvent) {
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.up(e, inEvent);
    this.cleanup(inEvent.pointerId);
  }

  /**
   * Handler for `msPointerOut`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerOut(inEvent) {
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.leaveOut(e, inEvent);
  }

  /**
   * Handler for `msPointerOver`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerOver(inEvent) {
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.enterOver(e, inEvent);
  }

  /**
   * Handler for `msPointerCancel`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerCancel(inEvent) {
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.cancel(e, inEvent);
    this.cleanup(inEvent.pointerId);
  }

  /**
   * Handler for `msLostPointerCapture`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msLostPointerCapture(inEvent) {
    var e = this.dispatcher.makeEvent('lostpointercapture', inEvent, inEvent);
    this.dispatcher.dispatchEvent(e);
  }

  /**
   * Handler for `msGotPointerCapture`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msGotPointerCapture(inEvent) {
    var e = this.dispatcher.makeEvent('gotpointercapture', inEvent, inEvent);
    this.dispatcher.dispatchEvent(e);
  }

  var MsSource = /*@__PURE__*/(function (EventSource$$1) {
    function MsSource(dispatcher) {
      var mapping = {
        'MSPointerDown': msPointerDown,
        'MSPointerMove': msPointerMove,
        'MSPointerUp': msPointerUp,
        'MSPointerOut': msPointerOut,
        'MSPointerOver': msPointerOver,
        'MSPointerCancel': msPointerCancel,
        'MSGotPointerCapture': msGotPointerCapture,
        'MSLostPointerCapture': msLostPointerCapture
      };
      EventSource$$1.call(this, dispatcher, mapping);

      /**
       * @const
       * @type {!Object<string, MSPointerEvent|Object>}
       */
      this.pointerMap = dispatcher.pointerMap;
    }

    if ( EventSource$$1 ) MsSource.__proto__ = EventSource$$1;
    MsSource.prototype = Object.create( EventSource$$1 && EventSource$$1.prototype );
    MsSource.prototype.constructor = MsSource;

    /**
     * Creates a copy of the original event that will be used
     * for the fake pointer event.
     *
     * @private
     * @param {MSPointerEvent} inEvent The in event.
     * @return {Object} The copied event.
     */
    MsSource.prototype.prepareEvent_ = function prepareEvent_ (inEvent) {
      /** @type {MSPointerEvent|Object} */
      var e = inEvent;
      if (typeof inEvent.pointerType === 'number') {
        e = this.dispatcher.cloneEvent(inEvent, inEvent);
        e.pointerType = POINTER_TYPES[inEvent.pointerType];
      }

      return e;
    };

    /**
     * Remove this pointer from the list of active pointers.
     * @param {number} pointerId Pointer identifier.
     */
    MsSource.prototype.cleanup = function cleanup (pointerId) {
      delete this.pointerMap[pointerId.toString()];
    };

    return MsSource;
  }(EventSource));

  /**
   * @module ol/pointer/NativeSource
   */

  /**
   * Handler for `pointerdown`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerDown(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointermove`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerMove(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointerup`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerUp(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointerout`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerOut(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointerover`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerOver(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointercancel`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerCancel(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `lostpointercapture`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function lostPointerCapture(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `gotpointercapture`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function gotPointerCapture(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  var NativeSource = /*@__PURE__*/(function (EventSource$$1) {
    function NativeSource(dispatcher) {
      var mapping = {
        'pointerdown': pointerDown,
        'pointermove': pointerMove,
        'pointerup': pointerUp,
        'pointerout': pointerOut,
        'pointerover': pointerOver,
        'pointercancel': pointerCancel,
        'gotpointercapture': gotPointerCapture,
        'lostpointercapture': lostPointerCapture
      };
      EventSource$$1.call(this, dispatcher, mapping);
    }

    if ( EventSource$$1 ) NativeSource.__proto__ = EventSource$$1;
    NativeSource.prototype = Object.create( EventSource$$1 && EventSource$$1.prototype );
    NativeSource.prototype.constructor = NativeSource;

    return NativeSource;
  }(EventSource));

  /**
   * @module ol/pointer/PointerEvent
   */


  /**
   * Is the `buttons` property supported?
   * @type {boolean}
   */
  var HAS_BUTTONS = false;


  var PointerEvent = /*@__PURE__*/(function (_Event) {
    function PointerEvent(type, originalEvent, opt_eventDict) {
      _Event.call(this, type);

      /**
       * @const
       * @type {Event}
       */
      this.originalEvent = originalEvent;

      var eventDict = opt_eventDict ? opt_eventDict : {};

      /**
       * @type {number}
       */
      this.buttons = getButtons(eventDict);

      /**
       * @type {number}
       */
      this.pressure = getPressure(eventDict, this.buttons);

      // MouseEvent related properties

      /**
       * @type {boolean}
       */
      this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;

      /**
       * @type {boolean}
       */
      this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;

      /**
       * @type {Object}
       */
      this.view = 'view' in eventDict ? eventDict['view'] : null;

      /**
       * @type {number}
       */
      this.detail = 'detail' in eventDict ? eventDict['detail'] : null;

      /**
       * @type {number}
       */
      this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;

      /**
       * @type {number}
       */
      this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;

      /**
       * @type {number}
       */
      this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;

      /**
       * @type {number}
       */
      this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;

      /**
       * @type {boolean}
       */
      this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;

      /**
       * @type {boolean}
       */
      this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;

      /**
       * @type {boolean}
       */
      this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;

      /**
       * @type {boolean}
       */
      this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;

      /**
       * @type {number}
       */
      this.button = 'button' in eventDict ? eventDict['button'] : 0;

      /**
       * @type {Node}
       */
      this.relatedTarget = 'relatedTarget' in eventDict ?
        eventDict['relatedTarget'] : null;

      // PointerEvent related properties

      /**
       * @const
       * @type {number}
       */
      this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;

      /**
       * @type {number}
       */
      this.width = 'width' in eventDict ? eventDict['width'] : 0;

      /**
       * @type {number}
       */
      this.height = 'height' in eventDict ? eventDict['height'] : 0;

      /**
       * @type {number}
       */
      this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;

      /**
       * @type {number}
       */
      this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;

      /**
       * @type {string}
       */
      this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';

      /**
       * @type {number}
       */
      this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;

      /**
       * @type {boolean}
       */
      this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false;

      // keep the semantics of preventDefault
      if (originalEvent.preventDefault) {
        this.preventDefault = function() {
          originalEvent.preventDefault();
        };
      }
    }

    if ( _Event ) PointerEvent.__proto__ = _Event;
    PointerEvent.prototype = Object.create( _Event && _Event.prototype );
    PointerEvent.prototype.constructor = PointerEvent;

    return PointerEvent;
  }(Event));


  /**
   * @param {Object<string, ?>} eventDict The event dictionary.
   * @return {number} Button indicator.
   */
  function getButtons(eventDict) {
    // According to the w3c spec,
    // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button
    // MouseEvent.button == 0 can mean either no mouse button depressed, or the
    // left mouse button depressed.
    //
    // As of now, the only way to distinguish between the two states of
    // MouseEvent.button is by using the deprecated MouseEvent.which property, as
    // this maps mouse buttons to positive integers > 0, and uses 0 to mean that
    // no mouse button is held.
    //
    // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,
    // but initMouseEvent does not expose an argument with which to set
    // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set
    // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations
    // of app developers.
    //
    // The only way to propagate the correct state of MouseEvent.which and
    // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0
    // is to call initMouseEvent with a buttonArg value of -1.
    //
    // This is fixed with DOM Level 4's use of buttons
    var buttons;
    if (eventDict.buttons || HAS_BUTTONS) {
      buttons = eventDict.buttons;
    } else {
      switch (eventDict.which) {
        case 1: buttons = 1; break;
        case 2: buttons = 4; break;
        case 3: buttons = 2; break;
        default: buttons = 0;
      }
    }
    return buttons;
  }


  /**
   * @param {Object<string, ?>} eventDict The event dictionary.
   * @param {number} buttons Button indicator.
   * @return {number} The pressure.
   */
  function getPressure(eventDict, buttons) {
    // Spec requires that pointers without pressure specified use 0.5 for down
    // state and 0 for up state.
    var pressure = 0;
    if (eventDict.pressure) {
      pressure = eventDict.pressure;
    } else {
      pressure = buttons ? 0.5 : 0;
    }
    return pressure;
  }


  /**
   * Checks if the `buttons` property is supported.
   */
  (function() {
    try {
      var ev = new MouseEvent('click', {buttons: 1});
      HAS_BUTTONS = ev.buttons === 1;
    } catch (e) {
      // pass
    }
  })();

  /**
   * @module ol/pointer/TouchSource
   */


  /**
   * @type {number}
   */
  var CLICK_COUNT_TIMEOUT = 200;

  /**
   * @type {string}
   */
  var POINTER_TYPE$1 = 'touch';

  /**
   * Handler for `touchstart`, triggers `pointerover`,
   * `pointerenter` and `pointerdown` events.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The in event.
   */
  function touchstart(inEvent) {
    this.vacuumTouches_(inEvent);
    this.setPrimaryTouch_(inEvent.changedTouches[0]);
    this.dedupSynthMouse_(inEvent);
    this.clickCount_++;
    this.processTouches_(inEvent, this.overDown_);
  }

  /**
   * Handler for `touchmove`.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The in event.
   */
  function touchmove(inEvent) {
    this.processTouches_(inEvent, this.moveOverOut_);
  }

  /**
   * Handler for `touchend`, triggers `pointerup`,
   * `pointerout` and `pointerleave` events.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The event.
   */
  function touchend(inEvent) {
    this.dedupSynthMouse_(inEvent);
    this.processTouches_(inEvent, this.upOut_);
  }

  /**
   * Handler for `touchcancel`, triggers `pointercancel`,
   * `pointerout` and `pointerleave` events.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The in event.
   */
  function touchcancel(inEvent) {
    this.processTouches_(inEvent, this.cancelOut_);
  }


  var TouchSource = /*@__PURE__*/(function (EventSource$$1) {
    function TouchSource(dispatcher, mouseSource) {
      var mapping = {
        'touchstart': touchstart,
        'touchmove': touchmove,
        'touchend': touchend,
        'touchcancel': touchcancel
      };
      EventSource$$1.call(this, dispatcher, mapping);

      /**
       * @const
       * @type {!Object<string, Event|Object>}
       */
      this.pointerMap = dispatcher.pointerMap;

      /**
       * @const
       * @type {import("./MouseSource.js").default}
       */
      this.mouseSource = mouseSource;

      /**
       * @private
       * @type {number|undefined}
       */
      this.firstTouchId_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.clickCount_ = 0;

      /**
       * @private
       * @type {?}
       */
      this.resetId_;

      /**
       * Mouse event timeout: This should be long enough to
       * ignore compat mouse events made by touch.
       * @private
       * @type {number}
       */
      this.dedupTimeout_ = 2500;
    }

    if ( EventSource$$1 ) TouchSource.__proto__ = EventSource$$1;
    TouchSource.prototype = Object.create( EventSource$$1 && EventSource$$1.prototype );
    TouchSource.prototype.constructor = TouchSource;

    /**
     * @private
     * @param {Touch} inTouch The in touch.
     * @return {boolean} True, if this is the primary touch.
     */
    TouchSource.prototype.isPrimaryTouch_ = function isPrimaryTouch_ (inTouch) {
      return this.firstTouchId_ === inTouch.identifier;
    };

    /**
     * Set primary touch if there are no pointers, or the only pointer is the mouse.
     * @param {Touch} inTouch The in touch.
     * @private
     */
    TouchSource.prototype.setPrimaryTouch_ = function setPrimaryTouch_ (inTouch) {
      var count = Object.keys(this.pointerMap).length;
      if (count === 0 || (count === 1 && POINTER_ID.toString() in this.pointerMap)) {
        this.firstTouchId_ = inTouch.identifier;
        this.cancelResetClickCount_();
      }
    };

    /**
     * @private
     * @param {PointerEvent} inPointer The in pointer object.
     */
    TouchSource.prototype.removePrimaryPointer_ = function removePrimaryPointer_ (inPointer) {
      if (inPointer.isPrimary) {
        this.firstTouchId_ = undefined;
        this.resetClickCount_();
      }
    };

    /**
     * @private
     */
    TouchSource.prototype.resetClickCount_ = function resetClickCount_ () {
      this.resetId_ = setTimeout(
        this.resetClickCountHandler_.bind(this),
        CLICK_COUNT_TIMEOUT);
    };

    /**
     * @private
     */
    TouchSource.prototype.resetClickCountHandler_ = function resetClickCountHandler_ () {
      this.clickCount_ = 0;
      this.resetId_ = undefined;
    };

    /**
     * @private
     */
    TouchSource.prototype.cancelResetClickCount_ = function cancelResetClickCount_ () {
      if (this.resetId_ !== undefined) {
        clearTimeout(this.resetId_);
      }
    };

    /**
     * @private
     * @param {TouchEvent} browserEvent Browser event
     * @param {Touch} inTouch Touch event
     * @return {PointerEvent} A pointer object.
     */
    TouchSource.prototype.touchToPointer_ = function touchToPointer_ (browserEvent, inTouch) {
      var e = this.dispatcher.cloneEvent(browserEvent, inTouch);
      // Spec specifies that pointerId 1 is reserved for Mouse.
      // Touch identifiers can start at 0.
      // Add 2 to the touch identifier for compatibility.
      e.pointerId = inTouch.identifier + 2;
      // TODO: check if this is necessary?
      //e.target = findTarget(e);
      e.bubbles = true;
      e.cancelable = true;
      e.detail = this.clickCount_;
      e.button = 0;
      e.buttons = 1;
      e.width = inTouch.radiusX || 0;
      e.height = inTouch.radiusY || 0;
      e.pressure = inTouch.force || 0.5;
      e.isPrimary = this.isPrimaryTouch_(inTouch);
      e.pointerType = POINTER_TYPE$1;

      // make sure that the properties that are different for
      // each `Touch` object are not copied from the BrowserEvent object
      e.clientX = inTouch.clientX;
      e.clientY = inTouch.clientY;
      e.screenX = inTouch.screenX;
      e.screenY = inTouch.screenY;

      return e;
    };

    /**
     * @private
     * @param {TouchEvent} inEvent Touch event
     * @param {function(TouchEvent, PointerEvent)} inFunction In function.
     */
    TouchSource.prototype.processTouches_ = function processTouches_ (inEvent, inFunction) {
      var touches = Array.prototype.slice.call(inEvent.changedTouches);
      var count = touches.length;
      function preventDefault() {
        inEvent.preventDefault();
      }
      for (var i = 0; i < count; ++i) {
        var pointer = this.touchToPointer_(inEvent, touches[i]);
        // forward touch preventDefaults
        pointer.preventDefault = preventDefault;
        inFunction.call(this, inEvent, pointer);
      }
    };

    /**
     * @private
     * @param {TouchList} touchList The touch list.
     * @param {number} searchId Search identifier.
     * @return {boolean} True, if the `Touch` with the given id is in the list.
     */
    TouchSource.prototype.findTouch_ = function findTouch_ (touchList, searchId) {
      var l = touchList.length;
      for (var i = 0; i < l; i++) {
        var touch = touchList[i];
        if (touch.identifier === searchId) {
          return true;
        }
      }
      return false;
    };

    /**
     * In some instances, a touchstart can happen without a touchend. This
     * leaves the pointermap in a broken state.
     * Therefore, on every touchstart, we remove the touches that did not fire a
     * touchend event.
     * To keep state globally consistent, we fire a pointercancel for
     * this "abandoned" touch
     *
     * @private
     * @param {TouchEvent} inEvent The in event.
     */
    TouchSource.prototype.vacuumTouches_ = function vacuumTouches_ (inEvent) {
      var touchList = inEvent.touches;
      // pointerMap.getCount() should be < touchList.length here,
      // as the touchstart has not been processed yet.
      var keys = Object.keys(this.pointerMap);
      var count = keys.length;
      if (count >= touchList.length) {
        var d = [];
        for (var i = 0; i < count; ++i) {
          var key = Number(keys[i]);
          var value = this.pointerMap[key];
          // Never remove pointerId == 1, which is mouse.
          // Touch identifiers are 2 smaller than their pointerId, which is the
          // index in pointermap.
          if (key != POINTER_ID && !this.findTouch_(touchList, key - 2)) {
            d.push(value.out);
          }
        }
        for (var i$1 = 0; i$1 < d.length; ++i$1) {
          this.cancelOut_(inEvent, d[i$1]);
        }
      }
    };

    /**
     * @private
     * @param {TouchEvent} browserEvent The event.
     * @param {PointerEvent} inPointer The in pointer object.
     */
    TouchSource.prototype.overDown_ = function overDown_ (browserEvent, inPointer) {
      this.pointerMap[inPointer.pointerId] = {
        target: inPointer.target,
        out: inPointer,
        outTarget: inPointer.target
      };
      this.dispatcher.over(inPointer, browserEvent);
      this.dispatcher.enter(inPointer, browserEvent);
      this.dispatcher.down(inPointer, browserEvent);
    };

    /**
     * @private
     * @param {TouchEvent} browserEvent The event.
     * @param {PointerEvent} inPointer The in pointer.
     */
    TouchSource.prototype.moveOverOut_ = function moveOverOut_ (browserEvent, inPointer) {
      var event = inPointer;
      var pointer = this.pointerMap[event.pointerId];
      // a finger drifted off the screen, ignore it
      if (!pointer) {
        return;
      }
      var outEvent = pointer.out;
      var outTarget = pointer.outTarget;
      this.dispatcher.move(event, browserEvent);
      if (outEvent && outTarget !== event.target) {
        outEvent.relatedTarget = event.target;
        /** @type {Object} */ (event).relatedTarget = outTarget;
        // recover from retargeting by shadow
        outEvent.target = outTarget;
        if (event.target) {
          this.dispatcher.leaveOut(outEvent, browserEvent);
          this.dispatcher.enterOver(event, browserEvent);
        } else {
          // clean up case when finger leaves the screen
          /** @type {Object} */ (event).target = outTarget;
          /** @type {Object} */ (event).relatedTarget = null;
          this.cancelOut_(browserEvent, event);
        }
      }
      pointer.out = event;
      pointer.outTarget = event.target;
    };

    /**
     * @private
     * @param {TouchEvent} browserEvent An event.
     * @param {PointerEvent} inPointer The inPointer object.
     */
    TouchSource.prototype.upOut_ = function upOut_ (browserEvent, inPointer) {
      this.dispatcher.up(inPointer, browserEvent);
      this.dispatcher.out(inPointer, browserEvent);
      this.dispatcher.leave(inPointer, browserEvent);
      this.cleanUpPointer_(inPointer);
    };

    /**
     * @private
     * @param {TouchEvent} browserEvent The event.
     * @param {PointerEvent} inPointer The in pointer.
     */
    TouchSource.prototype.cancelOut_ = function cancelOut_ (browserEvent, inPointer) {
      this.dispatcher.cancel(inPointer, browserEvent);
      this.dispatcher.out(inPointer, browserEvent);
      this.dispatcher.leave(inPointer, browserEvent);
      this.cleanUpPointer_(inPointer);
    };

    /**
     * @private
     * @param {PointerEvent} inPointer The inPointer object.
     */
    TouchSource.prototype.cleanUpPointer_ = function cleanUpPointer_ (inPointer) {
      delete this.pointerMap[inPointer.pointerId];
      this.removePrimaryPointer_(inPointer);
    };

    /**
     * Prevent synth mouse events from creating pointer events.
     *
     * @private
     * @param {TouchEvent} inEvent The in event.
     */
    TouchSource.prototype.dedupSynthMouse_ = function dedupSynthMouse_ (inEvent) {
      var lts = this.mouseSource.lastTouches;
      var t = inEvent.changedTouches[0];
      // only the primary finger will synth mouse events
      if (this.isPrimaryTouch_(t)) {
        // remember x/y of last touch
        var lt = [t.clientX, t.clientY];
        lts.push(lt);

        setTimeout(function() {
          // remove touch after timeout
          remove(lts, lt);
        }, this.dedupTimeout_);
      }
    };

    return TouchSource;
  }(EventSource));

  /**
   * @module ol/pointer/PointerEventHandler
   */


  /**
   * Properties to copy when cloning an event, with default values.
   * @type {Array<Array>}
   */
  var CLONE_PROPS = [
    // MouseEvent
    ['bubbles', false],
    ['cancelable', false],
    ['view', null],
    ['detail', null],
    ['screenX', 0],
    ['screenY', 0],
    ['clientX', 0],
    ['clientY', 0],
    ['ctrlKey', false],
    ['altKey', false],
    ['shiftKey', false],
    ['metaKey', false],
    ['button', 0],
    ['relatedTarget', null],
    // DOM Level 3
    ['buttons', 0],
    // PointerEvent
    ['pointerId', 0],
    ['width', 0],
    ['height', 0],
    ['pressure', 0],
    ['tiltX', 0],
    ['tiltY', 0],
    ['pointerType', ''],
    ['hwTimestamp', 0],
    ['isPrimary', false],
    // event instance
    ['type', ''],
    ['target', null],
    ['currentTarget', null],
    ['which', 0]
  ];


  var PointerEventHandler = /*@__PURE__*/(function (EventTarget) {
    function PointerEventHandler(element) {
      EventTarget.call(this);

      /**
       * @const
       * @private
       * @type {Element|HTMLDocument}
       */
      this.element_ = element;

      /**
       * @const
       * @type {!Object<string, Event|Object>}
       */
      this.pointerMap = {};

      /**
       * @type {Object<string, function(Event)>}
       * @private
       */
      this.eventMap_ = {};

      /**
       * @type {Array<import("./EventSource.js").default>}
       * @private
       */
      this.eventSourceList_ = [];

      this.registerSources();
    }

    if ( EventTarget ) PointerEventHandler.__proto__ = EventTarget;
    PointerEventHandler.prototype = Object.create( EventTarget && EventTarget.prototype );
    PointerEventHandler.prototype.constructor = PointerEventHandler;

    /**
     * Set up the event sources (mouse, touch and native pointers)
     * that generate pointer events.
     */
    PointerEventHandler.prototype.registerSources = function registerSources () {
      if (POINTER) {
        this.registerSource('native', new NativeSource(this));
      } else if (MSPOINTER) {
        this.registerSource('ms', new MsSource(this));
      } else {
        var mouseSource = new MouseSource(this);
        this.registerSource('mouse', mouseSource);

        if (TOUCH) {
          this.registerSource('touch', new TouchSource(this, mouseSource));
        }
      }

      // register events on the viewport element
      this.register_();
    };

    /**
     * Add a new event source that will generate pointer events.
     *
     * @param {string} name A name for the event source
     * @param {import("./EventSource.js").default} source The source event.
     */
    PointerEventHandler.prototype.registerSource = function registerSource (name, source) {
      var s = source;
      var newEvents = s.getEvents();

      if (newEvents) {
        newEvents.forEach(function(e) {
          var handler = s.getHandlerForEvent(e);

          if (handler) {
            this.eventMap_[e] = handler.bind(s);
          }
        }.bind(this));
        this.eventSourceList_.push(s);
      }
    };

    /**
     * Set up the events for all registered event sources.
     * @private
     */
    PointerEventHandler.prototype.register_ = function register_ () {
      var l = this.eventSourceList_.length;
      for (var i = 0; i < l; i++) {
        var eventSource = this.eventSourceList_[i];
        this.addEvents_(eventSource.getEvents());
      }
    };

    /**
     * Remove all registered events.
     * @private
     */
    PointerEventHandler.prototype.unregister_ = function unregister_ () {
      var l = this.eventSourceList_.length;
      for (var i = 0; i < l; i++) {
        var eventSource = this.eventSourceList_[i];
        this.removeEvents_(eventSource.getEvents());
      }
    };

    /**
     * Calls the right handler for a new event.
     * @private
     * @param {Event} inEvent Browser event.
     */
    PointerEventHandler.prototype.eventHandler_ = function eventHandler_ (inEvent) {
      var type = inEvent.type;
      var handler = this.eventMap_[type];
      if (handler) {
        handler(inEvent);
      }
    };

    /**
     * Setup listeners for the given events.
     * @private
     * @param {Array<string>} events List of events.
     */
    PointerEventHandler.prototype.addEvents_ = function addEvents_ (events) {
      events.forEach(function(eventName) {
        listen(this.element_, eventName, this.eventHandler_, this);
      }.bind(this));
    };

    /**
     * Unregister listeners for the given events.
     * @private
     * @param {Array<string>} events List of events.
     */
    PointerEventHandler.prototype.removeEvents_ = function removeEvents_ (events) {
      events.forEach(function(e) {
        unlisten(this.element_, e, this.eventHandler_, this);
      }.bind(this));
    };

    /**
     * Returns a snapshot of inEvent, with writable properties.
     *
     * @param {Event} event Browser event.
     * @param {Event|Touch} inEvent An event that contains
     *    properties to copy.
     * @return {Object} An object containing shallow copies of
     *    `inEvent`'s properties.
     */
    PointerEventHandler.prototype.cloneEvent = function cloneEvent (event, inEvent) {
      var eventCopy = {};
      for (var i = 0, ii = CLONE_PROPS.length; i < ii; i++) {
        var p = CLONE_PROPS[i][0];
        eventCopy[p] = event[p] || inEvent[p] || CLONE_PROPS[i][1];
      }

      return eventCopy;
    };

    // EVENTS


    /**
     * Triggers a 'pointerdown' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.down = function down (data, event) {
      this.fireEvent(PointerEventType.POINTERDOWN, data, event);
    };

    /**
     * Triggers a 'pointermove' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.move = function move (data, event) {
      this.fireEvent(PointerEventType.POINTERMOVE, data, event);
    };

    /**
     * Triggers a 'pointerup' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.up = function up (data, event) {
      this.fireEvent(PointerEventType.POINTERUP, data, event);
    };

    /**
     * Triggers a 'pointerenter' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.enter = function enter (data, event) {
      data.bubbles = false;
      this.fireEvent(PointerEventType.POINTERENTER, data, event);
    };

    /**
     * Triggers a 'pointerleave' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.leave = function leave (data, event) {
      data.bubbles = false;
      this.fireEvent(PointerEventType.POINTERLEAVE, data, event);
    };

    /**
     * Triggers a 'pointerover' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.over = function over (data, event) {
      data.bubbles = true;
      this.fireEvent(PointerEventType.POINTEROVER, data, event);
    };

    /**
     * Triggers a 'pointerout' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.out = function out (data, event) {
      data.bubbles = true;
      this.fireEvent(PointerEventType.POINTEROUT, data, event);
    };

    /**
     * Triggers a 'pointercancel' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.cancel = function cancel (data, event) {
      this.fireEvent(PointerEventType.POINTERCANCEL, data, event);
    };

    /**
     * Triggers a combination of 'pointerout' and 'pointerleave' events.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.leaveOut = function leaveOut (data, event) {
      this.out(data, event);
      if (!this.contains_(data.target, data.relatedTarget)) {
        this.leave(data, event);
      }
    };

    /**
     * Triggers a combination of 'pointerover' and 'pointerevents' events.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.enterOver = function enterOver (data, event) {
      this.over(data, event);
      if (!this.contains_(data.target, data.relatedTarget)) {
        this.enter(data, event);
      }
    };

    /**
     * @private
     * @param {Element} container The container element.
     * @param {Element} contained The contained element.
     * @return {boolean} Returns true if the container element
     *   contains the other element.
     */
    PointerEventHandler.prototype.contains_ = function contains_ (container, contained) {
      if (!container || !contained) {
        return false;
      }
      return container.contains(contained);
    };

    // EVENT CREATION AND TRACKING
    /**
     * Creates a new Event of type `inType`, based on the information in
     * `data`.
     *
     * @param {string} inType A string representing the type of event to create.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     * @return {PointerEvent} A PointerEvent of type `inType`.
     */
    PointerEventHandler.prototype.makeEvent = function makeEvent (inType, data, event) {
      return new PointerEvent(inType, event, data);
    };

    /**
     * Make and dispatch an event in one call.
     * @param {string} inType A string representing the type of event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.fireEvent = function fireEvent (inType, data, event) {
      var e = this.makeEvent(inType, data, event);
      this.dispatchEvent(e);
    };

    /**
     * Creates a pointer event from a native pointer event
     * and dispatches this event.
     * @param {Event} event A platform event with a target.
     */
    PointerEventHandler.prototype.fireNativeEvent = function fireNativeEvent (event) {
      var e = this.makeEvent(event.type, event, event);
      this.dispatchEvent(e);
    };

    /**
     * Wrap a native mouse event into a pointer event.
     * This proxy method is required for the legacy IE support.
     * @param {string} eventType The pointer event type.
     * @param {Event} event The event.
     * @return {PointerEvent} The wrapped event.
     */
    PointerEventHandler.prototype.wrapMouseEvent = function wrapMouseEvent (eventType, event) {
      var pointerEvent = this.makeEvent(
        eventType, prepareEvent(event, this), event);
      return pointerEvent;
    };

    /**
     * @inheritDoc
     */
    PointerEventHandler.prototype.disposeInternal = function disposeInternal () {
      this.unregister_();
      EventTarget.prototype.disposeInternal.call(this);
    };

    return PointerEventHandler;
  }(Target));

  /**
   * @module ol/MapBrowserEventHandler
   */

  var MapBrowserEventHandler = /*@__PURE__*/(function (EventTarget) {
    function MapBrowserEventHandler(map, moveTolerance) {

      EventTarget.call(this);

      /**
       * This is the element that we will listen to the real events on.
       * @type {import("./PluggableMap.js").default}
       * @private
       */
      this.map_ = map;

      /**
       * @type {any}
       * @private
       */
      this.clickTimeoutId_;

      /**
       * @type {boolean}
       * @private
       */
      this.dragging_ = false;

      /**
       * @type {!Array<import("./events.js").EventsKey>}
       * @private
       */
      this.dragListenerKeys_ = [];

      /**
       * @type {number}
       * @private
       */
      this.moveTolerance_ = moveTolerance ?
        moveTolerance * DEVICE_PIXEL_RATIO : DEVICE_PIXEL_RATIO;

      /**
       * The most recent "down" type event (or null if none have occurred).
       * Set on pointerdown.
       * @type {import("./pointer/PointerEvent.js").default}
       * @private
       */
      this.down_ = null;

      var element = this.map_.getViewport();

      /**
       * @type {number}
       * @private
       */
      this.activePointers_ = 0;

      /**
       * @type {!Object<number, boolean>}
       * @private
       */
      this.trackedTouches_ = {};

      /**
       * Event handler which generates pointer events for
       * the viewport element.
       *
       * @type {PointerEventHandler}
       * @private
       */
      this.pointerEventHandler_ = new PointerEventHandler(element);

      /**
       * Event handler which generates pointer events for
       * the document (used when dragging).
       *
       * @type {PointerEventHandler}
       * @private
       */
      this.documentPointerEventHandler_ = null;

      /**
       * @type {?import("./events.js").EventsKey}
       * @private
       */
      this.pointerdownListenerKey_ = listen(this.pointerEventHandler_,
        PointerEventType.POINTERDOWN,
        this.handlePointerDown_, this);

      /**
       * @type {?import("./events.js").EventsKey}
       * @private
       */
      this.relayedListenerKey_ = listen(this.pointerEventHandler_,
        PointerEventType.POINTERMOVE,
        this.relayEvent_, this);

    }

    if ( EventTarget ) MapBrowserEventHandler.__proto__ = EventTarget;
    MapBrowserEventHandler.prototype = Object.create( EventTarget && EventTarget.prototype );
    MapBrowserEventHandler.prototype.constructor = MapBrowserEventHandler;

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.emulateClick_ = function emulateClick_ (pointerEvent) {
      var newEvent = new MapBrowserPointerEvent(
        MapBrowserEventType.CLICK, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);
      if (this.clickTimeoutId_ !== undefined) {
        // double-click
        clearTimeout(this.clickTimeoutId_);
        this.clickTimeoutId_ = undefined;
        newEvent = new MapBrowserPointerEvent(
          MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);
        this.dispatchEvent(newEvent);
      } else {
        // click
        this.clickTimeoutId_ = setTimeout(function() {
          this.clickTimeoutId_ = undefined;
          var newEvent = new MapBrowserPointerEvent(
            MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);
          this.dispatchEvent(newEvent);
        }.bind(this), 250);
      }
    };

    /**
     * Keeps track on how many pointers are currently active.
     *
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.updateActivePointers_ = function updateActivePointers_ (pointerEvent) {
      var event = pointerEvent;

      if (event.type == MapBrowserEventType.POINTERUP ||
          event.type == MapBrowserEventType.POINTERCANCEL) {
        delete this.trackedTouches_[event.pointerId];
      } else if (event.type == MapBrowserEventType.POINTERDOWN) {
        this.trackedTouches_[event.pointerId] = true;
      }
      this.activePointers_ = Object.keys(this.trackedTouches_).length;
    };

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.handlePointerUp_ = function handlePointerUp_ (pointerEvent) {
      this.updateActivePointers_(pointerEvent);
      var newEvent = new MapBrowserPointerEvent(
        MapBrowserEventType.POINTERUP, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);

      // We emulate click events on left mouse button click, touch contact, and pen
      // contact. isMouseActionButton returns true in these cases (evt.button is set
      // to 0).
      // See http://www.w3.org/TR/pointerevents/#button-states
      // We only fire click, singleclick, and doubleclick if nobody has called
      // event.stopPropagation() or event.preventDefault().
      if (!newEvent.propagationStopped && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {
        this.emulateClick_(this.down_);
      }

      if (this.activePointers_ === 0) {
        this.dragListenerKeys_.forEach(unlistenByKey);
        this.dragListenerKeys_.length = 0;
        this.dragging_ = false;
        this.down_ = null;
        this.documentPointerEventHandler_.dispose();
        this.documentPointerEventHandler_ = null;
      }
    };

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @return {boolean} If the left mouse button was pressed.
     * @private
     */
    MapBrowserEventHandler.prototype.isMouseActionButton_ = function isMouseActionButton_ (pointerEvent) {
      return pointerEvent.button === 0;
    };

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.handlePointerDown_ = function handlePointerDown_ (pointerEvent) {
      this.updateActivePointers_(pointerEvent);
      var newEvent = new MapBrowserPointerEvent(
        MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);

      this.down_ = pointerEvent;

      if (this.dragListenerKeys_.length === 0) {
        /* Set up a pointer event handler on the `document`,
         * which is required when the pointer is moved outside
         * the viewport when dragging.
         */
        this.documentPointerEventHandler_ =
            new PointerEventHandler(document);

        this.dragListenerKeys_.push(
          listen(this.documentPointerEventHandler_,
            MapBrowserEventType.POINTERMOVE,
            this.handlePointerMove_, this),
          listen(this.documentPointerEventHandler_,
            MapBrowserEventType.POINTERUP,
            this.handlePointerUp_, this),
          /* Note that the listener for `pointercancel is set up on
           * `pointerEventHandler_` and not `documentPointerEventHandler_` like
           * the `pointerup` and `pointermove` listeners.
           *
           * The reason for this is the following: `TouchSource.vacuumTouches_()`
           * issues `pointercancel` events, when there was no `touchend` for a
           * `touchstart`. Now, let's say a first `touchstart` is registered on
           * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
           * But `documentPointerEventHandler_` doesn't know about the first
           * `touchstart`. If there is no `touchend` for the `touchstart`, we can
           * only receive a `touchcancel` from `pointerEventHandler_`, because it is
           * only registered there.
           */
          listen(this.pointerEventHandler_,
            MapBrowserEventType.POINTERCANCEL,
            this.handlePointerUp_, this)
        );
      }
    };

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.handlePointerMove_ = function handlePointerMove_ (pointerEvent) {
      // Between pointerdown and pointerup, pointermove events are triggered.
      // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
      // moved a significant distance.
      if (this.isMoving_(pointerEvent)) {
        this.dragging_ = true;
        var newEvent = new MapBrowserPointerEvent(
          MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent,
          this.dragging_);
        this.dispatchEvent(newEvent);
      }

      // Some native android browser triggers mousemove events during small period
      // of time. See: https://code.google.com/p/android/issues/detail?id=5491 or
      // https://code.google.com/p/android/issues/detail?id=19827
      // ex: Galaxy Tab P3110 + Android 4.1.1
      pointerEvent.preventDefault();
    };

    /**
     * Wrap and relay a pointer event.  Note that this requires that the type
     * string for the MapBrowserPointerEvent matches the PointerEvent type.
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.relayEvent_ = function relayEvent_ (pointerEvent) {
      var dragging = !!(this.down_ && this.isMoving_(pointerEvent));
      this.dispatchEvent(new MapBrowserPointerEvent(
        pointerEvent.type, this.map_, pointerEvent, dragging));
    };

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @return {boolean} Is moving.
     * @private
     */
    MapBrowserEventHandler.prototype.isMoving_ = function isMoving_ (pointerEvent) {
      return this.dragging_ ||
          Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ ||
          Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;
    };

    /**
     * @inheritDoc
     */
    MapBrowserEventHandler.prototype.disposeInternal = function disposeInternal () {
      if (this.relayedListenerKey_) {
        unlistenByKey(this.relayedListenerKey_);
        this.relayedListenerKey_ = null;
      }
      if (this.pointerdownListenerKey_) {
        unlistenByKey(this.pointerdownListenerKey_);
        this.pointerdownListenerKey_ = null;
      }

      this.dragListenerKeys_.forEach(unlistenByKey);
      this.dragListenerKeys_.length = 0;

      if (this.documentPointerEventHandler_) {
        this.documentPointerEventHandler_.dispose();
        this.documentPointerEventHandler_ = null;
      }
      if (this.pointerEventHandler_) {
        this.pointerEventHandler_.dispose();
        this.pointerEventHandler_ = null;
      }
      EventTarget.prototype.disposeInternal.call(this);
    };

    return MapBrowserEventHandler;
  }(Target));

  /**
   * @module ol/MapEventType
   */

  /**
   * @enum {string}
   */
  var MapEventType = {

    /**
     * Triggered after a map frame is rendered.
     * @event module:ol/MapEvent~MapEvent#postrender
     * @api
     */
    POSTRENDER: 'postrender',

    /**
     * Triggered when the map starts moving.
     * @event module:ol/MapEvent~MapEvent#movestart
     * @api
     */
    MOVESTART: 'movestart',

    /**
     * Triggered after the map is moved.
     * @event module:ol/MapEvent~MapEvent#moveend
     * @api
     */
    MOVEEND: 'moveend'

  };

  /**
   * @module ol/MapProperty
   */

  /**
   * @enum {string}
   */
  var MapProperty = {
    LAYERGROUP: 'layergroup',
    SIZE: 'size',
    TARGET: 'target',
    VIEW: 'view'
  };

  /**
   * @module ol/structs/PriorityQueue
   */


  /**
   * @type {number}
   */
  var DROP = Infinity;


  /**
   * @classdesc
   * Priority queue.
   *
   * The implementation is inspired from the Closure Library's Heap class and
   * Python's heapq module.
   *
   * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html
   * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.
   *
   * @template T
   */
  var PriorityQueue = function PriorityQueue(priorityFunction, keyFunction) {

    /**
     * @type {function(T): number}
     * @private
     */
    this.priorityFunction_ = priorityFunction;

    /**
     * @type {function(T): string}
     * @private
     */
    this.keyFunction_ = keyFunction;

    /**
     * @type {Array<T>}
     * @private
     */
    this.elements_ = [];

    /**
     * @type {Array<number>}
     * @private
     */
    this.priorities_ = [];

    /**
     * @type {!Object<string, boolean>}
     * @private
     */
    this.queuedElements_ = {};

  };

  /**
   * FIXME empty description for jsdoc
   */
  PriorityQueue.prototype.clear = function clear$1 () {
    this.elements_.length = 0;
    this.priorities_.length = 0;
    clear(this.queuedElements_);
  };


  /**
   * Remove and return the highest-priority element. O(log N).
   * @return {T} Element.
   */
  PriorityQueue.prototype.dequeue = function dequeue () {
    var elements = this.elements_;
    var priorities = this.priorities_;
    var element = elements[0];
    if (elements.length == 1) {
      elements.length = 0;
      priorities.length = 0;
    } else {
      elements[0] = elements.pop();
      priorities[0] = priorities.pop();
      this.siftUp_(0);
    }
    var elementKey = this.keyFunction_(element);
    delete this.queuedElements_[elementKey];
    return element;
  };


  /**
   * Enqueue an element. O(log N).
   * @param {T} element Element.
   * @return {boolean} The element was added to the queue.
   */
  PriorityQueue.prototype.enqueue = function enqueue (element) {
    assert(!(this.keyFunction_(element) in this.queuedElements_),
      31); // Tried to enqueue an `element` that was already added to the queue
    var priority = this.priorityFunction_(element);
    if (priority != DROP) {
      this.elements_.push(element);
      this.priorities_.push(priority);
      this.queuedElements_[this.keyFunction_(element)] = true;
      this.siftDown_(0, this.elements_.length - 1);
      return true;
    }
    return false;
  };


  /**
   * @return {number} Count.
   */
  PriorityQueue.prototype.getCount = function getCount () {
    return this.elements_.length;
  };


  /**
   * Gets the index of the left child of the node at the given index.
   * @param {number} index The index of the node to get the left child for.
   * @return {number} The index of the left child.
   * @private
   */
  PriorityQueue.prototype.getLeftChildIndex_ = function getLeftChildIndex_ (index) {
    return index * 2 + 1;
  };


  /**
   * Gets the index of the right child of the node at the given index.
   * @param {number} index The index of the node to get the right child for.
   * @return {number} The index of the right child.
   * @private
   */
  PriorityQueue.prototype.getRightChildIndex_ = function getRightChildIndex_ (index) {
    return index * 2 + 2;
  };


  /**
   * Gets the index of the parent of the node at the given index.
   * @param {number} index The index of the node to get the parent for.
   * @return {number} The index of the parent.
   * @private
   */
  PriorityQueue.prototype.getParentIndex_ = function getParentIndex_ (index) {
    return (index - 1) >> 1;
  };


  /**
   * Make this a heap. O(N).
   * @private
   */
  PriorityQueue.prototype.heapify_ = function heapify_ () {
    var i;
    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
      this.siftUp_(i);
    }
  };


  /**
   * @return {boolean} Is empty.
   */
  PriorityQueue.prototype.isEmpty = function isEmpty () {
    return this.elements_.length === 0;
  };


  /**
   * @param {string} key Key.
   * @return {boolean} Is key queued.
   */
  PriorityQueue.prototype.isKeyQueued = function isKeyQueued (key) {
    return key in this.queuedElements_;
  };


  /**
   * @param {T} element Element.
   * @return {boolean} Is queued.
   */
  PriorityQueue.prototype.isQueued = function isQueued (element) {
    return this.isKeyQueued(this.keyFunction_(element));
  };


  /**
   * @param {number} index The index of the node to move down.
   * @private
   */
  PriorityQueue.prototype.siftUp_ = function siftUp_ (index) {
    var elements = this.elements_;
    var priorities = this.priorities_;
    var count = elements.length;
    var element = elements[index];
    var priority = priorities[index];
    var startIndex = index;

    while (index < (count >> 1)) {
      var lIndex = this.getLeftChildIndex_(index);
      var rIndex = this.getRightChildIndex_(index);

      var smallerChildIndex = rIndex < count &&
          priorities[rIndex] < priorities[lIndex] ?
        rIndex : lIndex;

      elements[index] = elements[smallerChildIndex];
      priorities[index] = priorities[smallerChildIndex];
      index = smallerChildIndex;
    }

    elements[index] = element;
    priorities[index] = priority;
    this.siftDown_(startIndex, index);
  };


  /**
   * @param {number} startIndex The index of the root.
   * @param {number} index The index of the node to move up.
   * @private
   */
  PriorityQueue.prototype.siftDown_ = function siftDown_ (startIndex, index) {
    var elements = this.elements_;
    var priorities = this.priorities_;
    var element = elements[index];
    var priority = priorities[index];

    while (index > startIndex) {
      var parentIndex = this.getParentIndex_(index);
      if (priorities[parentIndex] > priority) {
        elements[index] = elements[parentIndex];
        priorities[index] = priorities[parentIndex];
        index = parentIndex;
      } else {
        break;
      }
    }
    elements[index] = element;
    priorities[index] = priority;
  };


  /**
   * FIXME empty description for jsdoc
   */
  PriorityQueue.prototype.reprioritize = function reprioritize () {
    var priorityFunction = this.priorityFunction_;
    var elements = this.elements_;
    var priorities = this.priorities_;
    var index = 0;
    var n = elements.length;
    var element, i, priority;
    for (i = 0; i < n; ++i) {
      element = elements[i];
      priority = priorityFunction(element);
      if (priority == DROP) {
        delete this.queuedElements_[this.keyFunction_(element)];
      } else {
        priorities[index] = priority;
        elements[index++] = element;
      }
    }
    elements.length = index;
    priorities.length = index;
    this.heapify_();
  };

  /**
   * @module ol/TileQueue
   */


  /**
   * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
   */


  var TileQueue = /*@__PURE__*/(function (PriorityQueue$$1) {
    function TileQueue(tilePriorityFunction, tileChangeCallback) {

      PriorityQueue$$1.call(
        /**
         * @param {Array} element Element.
         * @return {number} Priority.
         */
        this, function(element) {
          return tilePriorityFunction.apply(null, element);
        },
        /**
         * @param {Array} element Element.
         * @return {string} Key.
         */
        function(element) {
          return (/** @type {import("./Tile.js").default} */ (element[0]).getKey());
        });

      /**
       * @private
       * @type {function(): ?}
       */
      this.tileChangeCallback_ = tileChangeCallback;

      /**
       * @private
       * @type {number}
       */
      this.tilesLoading_ = 0;

      /**
       * @private
       * @type {!Object<string,boolean>}
       */
      this.tilesLoadingKeys_ = {};

    }

    if ( PriorityQueue$$1 ) TileQueue.__proto__ = PriorityQueue$$1;
    TileQueue.prototype = Object.create( PriorityQueue$$1 && PriorityQueue$$1.prototype );
    TileQueue.prototype.constructor = TileQueue;

    /**
     * @inheritDoc
     */
    TileQueue.prototype.enqueue = function enqueue (element) {
      var added = PriorityQueue$$1.prototype.enqueue.call(this, element);
      if (added) {
        var tile = element[0];
        listen(tile, EventType.CHANGE, this.handleTileChange, this);
      }
      return added;
    };

    /**
     * @return {number} Number of tiles loading.
     */
    TileQueue.prototype.getTilesLoading = function getTilesLoading () {
      return this.tilesLoading_;
    };

    /**
     * @param {import("./events/Event.js").default} event Event.
     * @protected
     */
    TileQueue.prototype.handleTileChange = function handleTileChange (event) {
      var tile = /** @type {import("./Tile.js").default} */ (event.target);
      var state = tile.getState();
      if (state === TileState.LOADED || state === TileState.ERROR ||
          state === TileState.EMPTY || state === TileState.ABORT) {
        unlisten(tile, EventType.CHANGE, this.handleTileChange, this);
        var tileKey = tile.getKey();
        if (tileKey in this.tilesLoadingKeys_) {
          delete this.tilesLoadingKeys_[tileKey];
          --this.tilesLoading_;
        }
        this.tileChangeCallback_();
      }
    };

    /**
     * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
     * @param {number} maxNewLoads Maximum number of new tiles to load.
     */
    TileQueue.prototype.loadMoreTiles = function loadMoreTiles (maxTotalLoading, maxNewLoads) {
      var newLoads = 0;
      var abortedTiles = false;
      var state, tile, tileKey;
      while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads &&
             this.getCount() > 0) {
        tile = /** @type {import("./Tile.js").default} */ (this.dequeue()[0]);
        tileKey = tile.getKey();
        state = tile.getState();
        if (state === TileState.ABORT) {
          abortedTiles = true;
        } else if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {
          this.tilesLoadingKeys_[tileKey] = true;
          ++this.tilesLoading_;
          ++newLoads;
          tile.load();
        }
      }
      if (newLoads === 0 && abortedTiles) {
        // Do not stop the render loop when all wanted tiles were aborted due to
        // a small, saturated tile cache.
        this.tileChangeCallback_();
      }
    };

    return TileQueue;
  }(PriorityQueue));

  /**
   * @module ol/tilegrid/common
   */

  /**
   * Default maximum zoom for default tile grids.
   * @type {number}
   */
  var DEFAULT_MAX_ZOOM = 42;

  /**
   * Default tile size.
   * @type {number}
   */
  var DEFAULT_TILE_SIZE = 256;

  /**
   * @module ol/centerconstraint
   */


  /**
   * @typedef {function((import("./coordinate.js").Coordinate|undefined)): (import("./coordinate.js").Coordinate|undefined)} Type
   */


  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @return {Type} The constraint.
   */
  function createExtent(extent$$1) {
    return (
      /**
       * @param {import("./coordinate.js").Coordinate=} center Center.
       * @return {import("./coordinate.js").Coordinate|undefined} Center.
       */
      function(center) {
        if (center) {
          return [
            clamp(center[0], extent$$1[0], extent$$1[2]),
            clamp(center[1], extent$$1[1], extent$$1[3])
          ];
        } else {
          return undefined;
        }
      }
    );
  }


  /**
   * @param {import("./coordinate.js").Coordinate=} center Center.
   * @return {import("./coordinate.js").Coordinate|undefined} Center.
   */
  function none(center) {
    return center;
  }

  /**
   * @module ol/resolutionconstraint
   */


  /**
   * @typedef {function((number|undefined), number, number): (number|undefined)} Type
   */


  /**
   * @param {Array<number>} resolutions Resolutions.
   * @return {Type} Zoom function.
   */
  function createSnapToResolutions(resolutions) {
    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} delta Delta.
       * @param {number} direction Direction.
       * @return {number|undefined} Resolution.
       */
      function(resolution, delta, direction) {
        if (resolution !== undefined) {
          var z = linearFindNearest(resolutions, resolution, direction);
          z = clamp(z + delta, 0, resolutions.length - 1);
          var index = Math.floor(z);
          if (z != index && index < resolutions.length - 1) {
            var power = resolutions[index] / resolutions[index + 1];
            return resolutions[index] / Math.pow(power, z - index);
          } else {
            return resolutions[index];
          }
        } else {
          return undefined;
        }
      }
    );
  }


  /**
   * @param {number} power Power.
   * @param {number} maxResolution Maximum resolution.
   * @param {number=} opt_maxLevel Maximum level.
   * @return {Type} Zoom function.
   */
  function createSnapToPower(power, maxResolution, opt_maxLevel) {
    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} delta Delta.
       * @param {number} direction Direction.
       * @return {number|undefined} Resolution.
       */
      function(resolution, delta, direction) {
        if (resolution !== undefined) {
          var offset = -direction / 2 + 0.5;
          var oldLevel = Math.floor(
            Math.log(maxResolution / resolution) / Math.log(power) + offset);
          var newLevel = Math.max(oldLevel + delta, 0);
          if (opt_maxLevel !== undefined) {
            newLevel = Math.min(newLevel, opt_maxLevel);
          }
          return maxResolution / Math.pow(power, newLevel);
        } else {
          return undefined;
        }
      });
  }

  /**
   * @module ol/rotationconstraint
   */


  /**
   * @typedef {function((number|undefined), number): (number|undefined)} Type
   */


  /**
   * @param {number|undefined} rotation Rotation.
   * @param {number} delta Delta.
   * @return {number|undefined} Rotation.
   */
  function disable(rotation, delta) {
    if (rotation !== undefined) {
      return 0;
    } else {
      return undefined;
    }
  }


  /**
   * @param {number|undefined} rotation Rotation.
   * @param {number} delta Delta.
   * @return {number|undefined} Rotation.
   */
  function none$1(rotation, delta) {
    if (rotation !== undefined) {
      return rotation + delta;
    } else {
      return undefined;
    }
  }


  /**
   * @param {number} n N.
   * @return {Type} Rotation constraint.
   */
  function createSnapToN(n) {
    var theta = 2 * Math.PI / n;
    return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {number} delta Delta.
       * @return {number|undefined} Rotation.
       */
      function(rotation, delta) {
        if (rotation !== undefined) {
          rotation = Math.floor((rotation + delta) / theta + 0.5) * theta;
          return rotation;
        } else {
          return undefined;
        }
      });
  }


  /**
   * @param {number=} opt_tolerance Tolerance.
   * @return {Type} Rotation constraint.
   */
  function createSnapToZero(opt_tolerance) {
    var tolerance = opt_tolerance || toRadians(5);
    return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {number} delta Delta.
       * @return {number|undefined} Rotation.
       */
      function(rotation, delta) {
        if (rotation !== undefined) {
          if (Math.abs(rotation + delta) <= tolerance) {
            return 0;
          } else {
            return rotation + delta;
          }
        } else {
          return undefined;
        }
      });
  }

  /**
   * @module ol/ViewHint
   */

  /**
   * @enum {number}
   */
  var ViewHint = {
    ANIMATING: 0,
    INTERACTING: 1
  };

  /**
   * @module ol/ViewProperty
   */

  /**
   * @enum {string}
   */
  var ViewProperty = {
    CENTER: 'center',
    RESOLUTION: 'resolution',
    ROTATION: 'rotation'
  };

  /**
   * @module ol/View
   */


  /**
   * An animation configuration
   *
   * @typedef {Object} Animation
   * @property {import("./coordinate.js").Coordinate} [sourceCenter]
   * @property {import("./coordinate.js").Coordinate} [targetCenter]
   * @property {number} [sourceResolution]
   * @property {number} [targetResolution]
   * @property {number} [sourceRotation]
   * @property {number} [targetRotation]
   * @property {import("./coordinate.js").Coordinate} [anchor]
   * @property {number} start
   * @property {number} duration
   * @property {boolean} complete
   * @property {function(number):number} easing
   * @property {function(boolean)} callback
   */


  /**
   * @typedef {Object} Constraints
   * @property {import("./centerconstraint.js").Type} center
   * @property {import("./resolutionconstraint.js").Type} resolution
   * @property {import("./rotationconstraint.js").Type} rotation
   */


  /**
   * @typedef {Object} FitOptions
   * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
   * the extent into. Default is the current size of the first map in the DOM that
   * uses this view, or `[100, 100]` if no such map is found.
   * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
   * cleared inside the view. Values in the array are top, right, bottom and left
   * padding.
   * @property {boolean} [constrainResolution=true] Constrain the resolution.
   * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get
   * the nearest extent instead of the closest that actually fits the view.
   * @property {number} [minResolution=0] Minimum resolution that we zoom to.
   * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
   * `minResolution` is given, this property is ignored.
   * @property {number} [duration] The duration of the animation in milliseconds.
   * By default, there is no animation to the target extent.
   * @property {function(number):number} [easing] The easing function used during
   * the animation (defaults to {@link module:ol/easing~inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   * @property {function(boolean)} [callback] Function called when the view is in
   * its final position. The callback will be called with `true` if the animation
   * series completed on its own or `false` if it was cancelled.
   */


  /**
   * @typedef {Object} ViewOptions
   * @property {import("./coordinate.js").Coordinate} [center] The initial center for
   * the view. The coordinate system for the center is specified with the
   * `projection` option. Layer sources will not be fetched if this is not set,
   * but the center can be set later with {@link #setCenter}.
   * @property {boolean|number} [constrainRotation=true] Rotation constraint.
   * `false` means no constraint. `true` means no constraint, but snap to zero
   * near zero. A number constrains the rotation to that number of values. For
   * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
   * @property {boolean} [enableRotation=true] Enable rotation.
   * If `false`, a rotation constraint that always sets the rotation to zero is
   * used. The `constrainRotation` option has no effect if `enableRotation` is
   * `false`.
   * @property {import("./extent.js").Extent} [extent] The extent that constrains the
   * center, in other words, center cannot be set outside this extent.
   * @property {number} [maxResolution] The maximum resolution used to determine
   * the resolution constraint. It is used together with `minResolution` (or
   * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
   * that the projection's validity extent fits in a 256x256 px tile. If the
   * projection is Spherical Mercator (the default) then `maxResolution` defaults
   * to `40075016.68557849 / 256 = 156543.03392804097`.
   * @property {number} [minResolution] The minimum resolution used to determine
   * the resolution constraint.  It is used together with `maxResolution` (or
   * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
   * zoom levels (with a factor of 2). If the projection is Spherical Mercator
   * (the default) then `minResolution` defaults to
   * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
   * @property {number} [maxZoom=28] The maximum zoom level used to determine the
   * resolution constraint. It is used together with `minZoom` (or
   * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
   * provided, it is given precedence over `maxZoom`.
   * @property {number} [minZoom=0] The minimum zoom level used to determine the
   * resolution constraint. It is used together with `maxZoom` (or
   * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
   * provided, it is given precedence over `minZoom`.
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
   * projection. The default is Spherical Mercator.
   * @property {number} [resolution] The initial resolution for the view. The
   * units are `projection` units per pixel (e.g. meters per pixel). An
   * alternative to setting this is to set `zoom`. Layer sources will not be
   * fetched if neither this nor `zoom` are defined, but they can be set later
   * with {@link #setZoom} or {@link #setResolution}.
   * @property {Array<number>} [resolutions] Resolutions to determine the
   * resolution constraint. If set the `maxResolution`, `minResolution`,
   * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
   * @property {number} [rotation=0] The initial rotation for the view in radians
   * (positive rotation clockwise, 0 means North).
   * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
   * level used to calculate the initial resolution for the view. The initial
   * resolution is determined using the {@link #constrainResolution} method.
   * @property {number} [zoomFactor=2] The zoom factor used to determine the
   * resolution constraint.
   */


  /**
   * @typedef {Object} AnimationOptions
   * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
   * the animation.
   * @property {number} [zoom] The zoom level of the view at the end of the
   * animation. This takes precedence over `resolution`.
   * @property {number} [resolution] The resolution of the view at the end
   * of the animation.  If `zoom` is also provided, this option will be ignored.
   * @property {number} [rotation] The rotation of the view at the end of
   * the animation.
   * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remained fixed
   * during a rotation or resolution animation.
   * @property {number} [duration=1000] The duration of the animation in milliseconds.
   * @property {function(number):number} [easing] The easing function used
   * during the animation (defaults to {@link module:ol/easing~inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   */


  /**
   * @typedef {Object} State
   * @property {import("./coordinate.js").Coordinate} center
   * @property {import("./proj/Projection.js").default} projection
   * @property {number} resolution
   * @property {number} rotation
   * @property {number} zoom
   */


  /**
   * Default min zoom level for the map view.
   * @type {number}
   */
  var DEFAULT_MIN_ZOOM = 0;


  /**
   * @classdesc
   * A View object represents a simple 2D view of the map.
   *
   * This is the object to act upon to change the center, resolution,
   * and rotation of the map.
   *
   * ### The view states
   *
   * An View is determined by three states: `center`, `resolution`,
   * and `rotation`. Each state has a corresponding getter and setter, e.g.
   * `getCenter` and `setCenter` for the `center` state.
   *
   * An View has a `projection`. The projection determines the
   * coordinate system of the center, and its units determine the units of the
   * resolution (projection units per pixel). The default projection is
   * Spherical Mercator (EPSG:3857).
   *
   * ### The constraints
   *
   * `setCenter`, `setResolution` and `setRotation` can be used to change the
   * states of the view. Any value can be passed to the setters. And the value
   * that is passed to a setter will effectively be the value set in the view,
   * and returned by the corresponding getter.
   *
   * But a View object also has a *resolution constraint*, a
   * *rotation constraint* and a *center constraint*.
   *
   * As said above, no constraints are applied when the setters are used to set
   * new states for the view. Applying constraints is done explicitly through
   * the use of the `constrain*` functions (`constrainResolution` and
   * `constrainRotation` and `constrainCenter`).
   *
   * The main users of the constraints are the interactions and the
   * controls. For example, double-clicking on the map changes the view to
   * the "next" resolution. And releasing the fingers after pinch-zooming
   * snaps to the closest resolution (with an animation).
   *
   * The *resolution constraint* snaps to specific resolutions. It is
   * determined by the following options: `resolutions`, `maxResolution`,
   * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three
   * options are ignored. See documentation for each option for more
   * information.
   *
   * The *rotation constraint* snaps to specific angles. It is determined
   * by the following options: `enableRotation` and `constrainRotation`.
   * By default the rotation value is snapped to zero when approaching the
   * horizontal.
   *
   * The *center constraint* is determined by the `extent` option. By
   * default the center is not constrained at all.
   *
    * @api
   */
  var View$1 = /*@__PURE__*/(function (BaseObject$$1) {
    function View$$1(opt_options) {
      BaseObject$$1.call(this);

      var options = assign({}, opt_options);

      /**
       * @private
       * @type {Array<number>}
       */
      this.hints_ = [0, 0];

      /**
       * @private
       * @type {Array<Array<Animation>>}
       */
      this.animations_ = [];

      /**
       * @private
       * @type {number|undefined}
       */
      this.updateAnimationKey_;

      this.updateAnimations_ = this.updateAnimations_.bind(this);

      /**
       * @private
       * @const
       * @type {import("./proj/Projection.js").default}
       */
      this.projection_ = createProjection(options.projection, 'EPSG:3857');

      this.applyOptions_(options);
    }

    if ( BaseObject$$1 ) View$$1.__proto__ = BaseObject$$1;
    View$$1.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    View$$1.prototype.constructor = View$$1;

    /**
     * Set up the view with the given options.
     * @param {ViewOptions} options View options.
     */
    View$$1.prototype.applyOptions_ = function applyOptions_ (options) {

      /**
       * @type {Object<string, *>}
       */
      var properties = {};
      properties[ViewProperty.CENTER] = options.center !== undefined ?
        options.center : null;

      var resolutionConstraintInfo = createResolutionConstraint(options);

      /**
       * @private
       * @type {number}
       */
      this.maxResolution_ = resolutionConstraintInfo.maxResolution;

      /**
       * @private
       * @type {number}
       */
      this.minResolution_ = resolutionConstraintInfo.minResolution;

      /**
       * @private
       * @type {number}
       */
      this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;

      /**
       * @private
       * @type {Array<number>|undefined}
       */
      this.resolutions_ = options.resolutions;

      /**
       * @private
       * @type {number}
       */
      this.minZoom_ = resolutionConstraintInfo.minZoom;

      var centerConstraint = createCenterConstraint(options);
      var resolutionConstraint = resolutionConstraintInfo.constraint;
      var rotationConstraint = createRotationConstraint(options);

      /**
       * @private
       * @type {Constraints}
       */
      this.constraints_ = {
        center: centerConstraint,
        resolution: resolutionConstraint,
        rotation: rotationConstraint
      };

      if (options.resolution !== undefined) {
        properties[ViewProperty.RESOLUTION] = options.resolution;
      } else if (options.zoom !== undefined) {
        properties[ViewProperty.RESOLUTION] = this.constrainResolution(
          this.maxResolution_, options.zoom - this.minZoom_);

        if (this.resolutions_) { // in case map zoom is out of min/max zoom range
          properties[ViewProperty.RESOLUTION] = clamp(
            Number(this.getResolution() || properties[ViewProperty.RESOLUTION]),
            this.minResolution_, this.maxResolution_);
        }
      }
      properties[ViewProperty.ROTATION] = options.rotation !== undefined ? options.rotation : 0;
      this.setProperties(properties);

      /**
       * @private
       * @type {ViewOptions}
       */
      this.options_ = options;

    };

    /**
     * Get an updated version of the view options used to construct the view.  The
     * current resolution (or zoom), center, and rotation are applied to any stored
     * options.  The provided options can be used to apply new min/max zoom or
     * resolution limits.
     * @param {ViewOptions} newOptions New options to be applied.
     * @return {ViewOptions} New options updated with the current view state.
     */
    View$$1.prototype.getUpdatedOptions_ = function getUpdatedOptions_ (newOptions) {
      var options = assign({}, this.options_);

      // preserve resolution (or zoom)
      if (options.resolution !== undefined) {
        options.resolution = this.getResolution();
      } else {
        options.zoom = this.getZoom();
      }

      // preserve center
      options.center = this.getCenter();

      // preserve rotation
      options.rotation = this.getRotation();

      return assign({}, options, newOptions);
    };

    /**
     * Animate the view.  The view's center, zoom (or resolution), and rotation
     * can be animated for smooth transitions between view states.  For example,
     * to animate the view to a new zoom level:
     *
     *     view.animate({zoom: view.getZoom() + 1});
     *
     * By default, the animation lasts one second and uses in-and-out easing.  You
     * can customize this behavior by including `duration` (in milliseconds) and
     * `easing` options (see {@link module:ol/easing}).
     *
     * To chain together multiple animations, call the method with multiple
     * animation objects.  For example, to first zoom and then pan:
     *
     *     view.animate({zoom: 10}, {center: [0, 0]});
     *
     * If you provide a function as the last argument to the animate method, it
     * will get called at the end of an animation series.  The callback will be
     * called with `true` if the animation series completed on its own or `false`
     * if it was cancelled.
     *
     * Animations are cancelled by user interactions (e.g. dragging the map) or by
     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
     * (or another method that calls one of these).
     *
     * @param {...(AnimationOptions|function(boolean))} var_args Animation
     *     options.  Multiple animations can be run in series by passing multiple
     *     options objects.  To run multiple animations in parallel, call the method
     *     multiple times.  An optional callback can be provided as a final
     *     argument.  The callback will be called with a boolean indicating whether
     *     the animation completed without being cancelled.
     * @api
     */
    View$$1.prototype.animate = function animate (var_args) {
      var arguments$1 = arguments;

      var animationCount = arguments.length;
      var callback;
      if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {
        callback = arguments[animationCount - 1];
        --animationCount;
      }
      if (!this.isDef()) {
        // if view properties are not yet set, shortcut to the final state
        var state = arguments[animationCount - 1];
        if (state.center) {
          this.setCenter(state.center);
        }
        if (state.zoom !== undefined) {
          this.setZoom(state.zoom);
        }
        if (state.rotation !== undefined) {
          this.setRotation(state.rotation);
        }
        if (callback) {
          animationCallback(callback, true);
        }
        return;
      }
      var start = Date.now();
      var center = this.getCenter().slice();
      var resolution = this.getResolution();
      var rotation = this.getRotation();
      var series = [];
      for (var i = 0; i < animationCount; ++i) {
        var options = /** @type {AnimationOptions} */ (arguments$1[i]);

        var animation = /** @type {Animation} */ ({
          start: start,
          complete: false,
          anchor: options.anchor,
          duration: options.duration !== undefined ? options.duration : 1000,
          easing: options.easing || inAndOut
        });

        if (options.center) {
          animation.sourceCenter = center;
          animation.targetCenter = options.center;
          center = animation.targetCenter;
        }

        if (options.zoom !== undefined) {
          animation.sourceResolution = resolution;
          animation.targetResolution = this.constrainResolution(
            this.maxResolution_, options.zoom - this.minZoom_, 0);
          resolution = animation.targetResolution;
        } else if (options.resolution) {
          animation.sourceResolution = resolution;
          animation.targetResolution = options.resolution;
          resolution = animation.targetResolution;
        }

        if (options.rotation !== undefined) {
          animation.sourceRotation = rotation;
          var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
          animation.targetRotation = rotation + delta;
          rotation = animation.targetRotation;
        }

        animation.callback = callback;

        // check if animation is a no-op
        if (isNoopAnimation(animation)) {
          animation.complete = true;
          // we still push it onto the series for callback handling
        } else {
          start += animation.duration;
        }
        series.push(animation);
      }
      this.animations_.push(series);
      this.setHint(ViewHint.ANIMATING, 1);
      this.updateAnimations_();
    };

    /**
     * Determine if the view is being animated.
     * @return {boolean} The view is being animated.
     * @api
     */
    View$$1.prototype.getAnimating = function getAnimating () {
      return this.hints_[ViewHint.ANIMATING] > 0;
    };

    /**
     * Determine if the user is interacting with the view, such as panning or zooming.
     * @return {boolean} The view is being interacted with.
     * @api
     */
    View$$1.prototype.getInteracting = function getInteracting () {
      return this.hints_[ViewHint.INTERACTING] > 0;
    };

    /**
     * Cancel any ongoing animations.
     * @api
     */
    View$$1.prototype.cancelAnimations = function cancelAnimations () {
      this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);
      for (var i = 0, ii = this.animations_.length; i < ii; ++i) {
        var series = this.animations_[i];
        if (series[0].callback) {
          animationCallback(series[0].callback, false);
        }
      }
      this.animations_.length = 0;
    };

    /**
     * Update all animations.
     */
    View$$1.prototype.updateAnimations_ = function updateAnimations_ () {
      if (this.updateAnimationKey_ !== undefined) {
        cancelAnimationFrame(this.updateAnimationKey_);
        this.updateAnimationKey_ = undefined;
      }
      if (!this.getAnimating()) {
        return;
      }
      var now = Date.now();
      var more = false;
      for (var i = this.animations_.length - 1; i >= 0; --i) {
        var series = this.animations_[i];
        var seriesComplete = true;
        for (var j = 0, jj = series.length; j < jj; ++j) {
          var animation = series[j];
          if (animation.complete) {
            continue;
          }
          var elapsed = now - animation.start;
          var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
          if (fraction >= 1) {
            animation.complete = true;
            fraction = 1;
          } else {
            seriesComplete = false;
          }
          var progress = animation.easing(fraction);
          if (animation.sourceCenter) {
            var x0 = animation.sourceCenter[0];
            var y0 = animation.sourceCenter[1];
            var x1 = animation.targetCenter[0];
            var y1 = animation.targetCenter[1];
            var x = x0 + progress * (x1 - x0);
            var y = y0 + progress * (y1 - y0);
            this.set(ViewProperty.CENTER, [x, y]);
          }
          if (animation.sourceResolution && animation.targetResolution) {
            var resolution = progress === 1 ?
              animation.targetResolution :
              animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);
            if (animation.anchor) {
              this.set(ViewProperty.CENTER,
                this.calculateCenterZoom(resolution, animation.anchor));
            }
            this.set(ViewProperty.RESOLUTION, resolution);
          }
          if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {
            var rotation = progress === 1 ?
              modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :
              animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);
            if (animation.anchor) {
              this.set(ViewProperty.CENTER,
                this.calculateCenterRotate(rotation, animation.anchor));
            }
            this.set(ViewProperty.ROTATION, rotation);
          }
          more = true;
          if (!animation.complete) {
            break;
          }
        }
        if (seriesComplete) {
          this.animations_[i] = null;
          this.setHint(ViewHint.ANIMATING, -1);
          var callback = series[0].callback;
          if (callback) {
            animationCallback(callback, true);
          }
        }
      }
      // prune completed series
      this.animations_ = this.animations_.filter(Boolean);
      if (more && this.updateAnimationKey_ === undefined) {
        this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);
      }
    };

    /**
     * @param {number} rotation Target rotation.
     * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
     */
    View$$1.prototype.calculateCenterRotate = function calculateCenterRotate (rotation, anchor) {
      var center;
      var currentCenter = this.getCenter();
      if (currentCenter !== undefined) {
        center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
        rotate$2(center, rotation - this.getRotation());
        add$2(center, anchor);
      }
      return center;
    };

    /**
     * @param {number} resolution Target resolution.
     * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
     */
    View$$1.prototype.calculateCenterZoom = function calculateCenterZoom (resolution, anchor) {
      var center;
      var currentCenter = this.getCenter();
      var currentResolution = this.getResolution();
      if (currentCenter !== undefined && currentResolution !== undefined) {
        var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;
        var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;
        center = [x, y];
      }
      return center;
    };

    /**
     * @private
     * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
     */
    View$$1.prototype.getSizeFromViewport_ = function getSizeFromViewport_ () {
      var size$$1 = [100, 100];
      var selector = '.ol-viewport[data-view="' + getUid(this) + '"]';
      var element = document.querySelector(selector);
      if (element) {
        var metrics = getComputedStyle(element);
        size$$1[0] = parseInt(metrics.width, 10);
        size$$1[1] = parseInt(metrics.height, 10);
      }
      return size$$1;
    };

    /**
     * Get the constrained center of this view.
     * @param {import("./coordinate.js").Coordinate|undefined} center Center.
     * @return {import("./coordinate.js").Coordinate|undefined} Constrained center.
     * @api
     */
    View$$1.prototype.constrainCenter = function constrainCenter (center) {
      return this.constraints_.center(center);
    };

    /**
     * Get the constrained resolution of this view.
     * @param {number|undefined} resolution Resolution.
     * @param {number=} opt_delta Delta. Default is `0`.
     * @param {number=} opt_direction Direction. Default is `0`.
     * @return {number|undefined} Constrained resolution.
     * @api
     */
    View$$1.prototype.constrainResolution = function constrainResolution (resolution, opt_delta, opt_direction) {
      var delta = opt_delta || 0;
      var direction = opt_direction || 0;
      return this.constraints_.resolution(resolution, delta, direction);
    };

    /**
     * Get the constrained rotation of this view.
     * @param {number|undefined} rotation Rotation.
     * @param {number=} opt_delta Delta. Default is `0`.
     * @return {number|undefined} Constrained rotation.
     * @api
     */
    View$$1.prototype.constrainRotation = function constrainRotation (rotation, opt_delta) {
      var delta = opt_delta || 0;
      return this.constraints_.rotation(rotation, delta);
    };

    /**
     * Get the view center.
     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
     * @observable
     * @api
     */
    View$$1.prototype.getCenter = function getCenter$$1 () {
      return (
        /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(ViewProperty.CENTER))
      );
    };

    /**
     * @return {Constraints} Constraints.
     */
    View$$1.prototype.getConstraints = function getConstraints () {
      return this.constraints_;
    };

    /**
     * @param {Array<number>=} opt_hints Destination array.
     * @return {Array<number>} Hint.
     */
    View$$1.prototype.getHints = function getHints (opt_hints) {
      if (opt_hints !== undefined) {
        opt_hints[0] = this.hints_[0];
        opt_hints[1] = this.hints_[1];
        return opt_hints;
      } else {
        return this.hints_.slice();
      }
    };

    /**
     * Calculate the extent for the current view state and the passed size.
     * The size is the pixel dimensions of the box into which the calculated extent
     * should fit. In most cases you want to get the extent of the entire map,
     * that is `map.getSize()`.
     * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size of the
     * first map that uses this view will be used.
     * @return {import("./extent.js").Extent} Extent.
     * @api
     */
    View$$1.prototype.calculateExtent = function calculateExtent (opt_size) {
      var size$$1 = opt_size || this.getSizeFromViewport_();
      var center = /** @type {!import("./coordinate.js").Coordinate} */ (this.getCenter());
      assert(center, 1); // The view center is not defined
      var resolution = /** @type {!number} */ (this.getResolution());
      assert(resolution !== undefined, 2); // The view resolution is not defined
      var rotation = /** @type {!number} */ (this.getRotation());
      assert(rotation !== undefined, 3); // The view rotation is not defined

      return getForViewAndSize(center, resolution, rotation, size$$1);
    };

    /**
     * Get the maximum resolution of the view.
     * @return {number} The maximum resolution of the view.
     * @api
     */
    View$$1.prototype.getMaxResolution = function getMaxResolution () {
      return this.maxResolution_;
    };

    /**
     * Get the minimum resolution of the view.
     * @return {number} The minimum resolution of the view.
     * @api
     */
    View$$1.prototype.getMinResolution = function getMinResolution () {
      return this.minResolution_;
    };

    /**
     * Get the maximum zoom level for the view.
     * @return {number} The maximum zoom level.
     * @api
     */
    View$$1.prototype.getMaxZoom = function getMaxZoom () {
      return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));
    };

    /**
     * Set a new maximum zoom level for the view.
     * @param {number} zoom The maximum zoom level.
     * @api
     */
    View$$1.prototype.setMaxZoom = function setMaxZoom (zoom) {
      this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));
    };

    /**
     * Get the minimum zoom level for the view.
     * @return {number} The minimum zoom level.
     * @api
     */
    View$$1.prototype.getMinZoom = function getMinZoom () {
      return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));
    };

    /**
     * Set a new minimum zoom level for the view.
     * @param {number} zoom The minimum zoom level.
     * @api
     */
    View$$1.prototype.setMinZoom = function setMinZoom (zoom) {
      this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));
    };

    /**
     * Get the view projection.
     * @return {import("./proj/Projection.js").default} The projection of the view.
     * @api
     */
    View$$1.prototype.getProjection = function getProjection () {
      return this.projection_;
    };

    /**
     * Get the view resolution.
     * @return {number|undefined} The resolution of the view.
     * @observable
     * @api
     */
    View$$1.prototype.getResolution = function getResolution () {
      return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));
    };

    /**
     * Get the resolutions for the view. This returns the array of resolutions
     * passed to the constructor of the View, or undefined if none were given.
     * @return {Array<number>|undefined} The resolutions of the view.
     * @api
     */
    View$$1.prototype.getResolutions = function getResolutions () {
      return this.resolutions_;
    };

    /**
     * Get the resolution for a provided extent (in map units) and size (in pixels).
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {import("./size.js").Size=} opt_size Box pixel size.
     * @return {number} The resolution at which the provided extent will render at
     *     the given size.
     * @api
     */
    View$$1.prototype.getResolutionForExtent = function getResolutionForExtent (extent$$1, opt_size) {
      var size$$1 = opt_size || this.getSizeFromViewport_();
      var xResolution = getWidth(extent$$1) / size$$1[0];
      var yResolution = getHeight(extent$$1) / size$$1[1];
      return Math.max(xResolution, yResolution);
    };

    /**
     * Return a function that returns a value between 0 and 1 for a
     * resolution. Exponential scaling is assumed.
     * @param {number=} opt_power Power.
     * @return {function(number): number} Resolution for value function.
     */
    View$$1.prototype.getResolutionForValueFunction = function getResolutionForValueFunction (opt_power) {
      var power = opt_power || 2;
      var maxResolution = this.maxResolution_;
      var minResolution = this.minResolution_;
      var max = Math.log(maxResolution / minResolution) / Math.log(power);
      return (
        /**
         * @param {number} value Value.
         * @return {number} Resolution.
         */
        function(value) {
          var resolution = maxResolution / Math.pow(power, value * max);
          return resolution;
        });
    };

    /**
     * Get the view rotation.
     * @return {number} The rotation of the view in radians.
     * @observable
     * @api
     */
    View$$1.prototype.getRotation = function getRotation () {
      return /** @type {number} */ (this.get(ViewProperty.ROTATION));
    };

    /**
     * Return a function that returns a resolution for a value between
     * 0 and 1. Exponential scaling is assumed.
     * @param {number=} opt_power Power.
     * @return {function(number): number} Value for resolution function.
     */
    View$$1.prototype.getValueForResolutionFunction = function getValueForResolutionFunction (opt_power) {
      var power = opt_power || 2;
      var maxResolution = this.maxResolution_;
      var minResolution = this.minResolution_;
      var max = Math.log(maxResolution / minResolution) / Math.log(power);
      return (
        /**
         * @param {number} resolution Resolution.
         * @return {number} Value.
         */
        function(resolution) {
          var value = (Math.log(maxResolution / resolution) / Math.log(power)) / max;
          return value;
        });
    };

    /**
     * @param {number} pixelRatio Pixel ratio for center rounding.
     * @return {State} View state.
     */
    View$$1.prototype.getState = function getState (pixelRatio) {
      var center = /** @type {import("./coordinate.js").Coordinate} */ (this.getCenter());
      var projection = this.getProjection();
      var resolution = /** @type {number} */ (this.getResolution());
      var pixelResolution = resolution / pixelRatio;
      var rotation = this.getRotation();
      return (
        /** @type {State} */ ({
          center: [
            Math.round(center[0] / pixelResolution) * pixelResolution,
            Math.round(center[1] / pixelResolution) * pixelResolution
          ],
          projection: projection !== undefined ? projection : null,
          resolution: resolution,
          rotation: rotation,
          zoom: this.getZoom()
        })
      );
    };

    /**
     * Get the current zoom level.  If you configured your view with a resolutions
     * array (this is rare), this method may return non-integer zoom levels (so
     * the zoom level is not safe to use as an index into a resolutions array).
     * @return {number|undefined} Zoom.
     * @api
     */
    View$$1.prototype.getZoom = function getZoom () {
      var zoom;
      var resolution = this.getResolution();
      if (resolution !== undefined) {
        zoom = this.getZoomForResolution(resolution);
      }
      return zoom;
    };

    /**
     * Get the zoom level for a resolution.
     * @param {number} resolution The resolution.
     * @return {number|undefined} The zoom level for the provided resolution.
     * @api
     */
    View$$1.prototype.getZoomForResolution = function getZoomForResolution (resolution) {
      var offset = this.minZoom_ || 0;
      var max, zoomFactor;
      if (this.resolutions_) {
        var nearest = linearFindNearest(this.resolutions_, resolution, 1);
        offset = nearest;
        max = this.resolutions_[nearest];
        if (nearest == this.resolutions_.length - 1) {
          zoomFactor = 2;
        } else {
          zoomFactor = max / this.resolutions_[nearest + 1];
        }
      } else {
        max = this.maxResolution_;
        zoomFactor = this.zoomFactor_;
      }
      return offset + Math.log(max / resolution) / Math.log(zoomFactor);
    };

    /**
     * Get the resolution for a zoom level.
     * @param {number} zoom Zoom level.
     * @return {number} The view resolution for the provided zoom level.
     * @api
     */
    View$$1.prototype.getResolutionForZoom = function getResolutionForZoom (zoom) {
      return /** @type {number} */ (this.constrainResolution(
        this.maxResolution_, zoom - this.minZoom_, 0));
    };

    /**
     * Fit the given geometry or extent based on the given map size and border.
     * The size is pixel dimensions of the box to fit the extent into.
     * In most cases you will want to use the map size, that is `map.getSize()`.
     * Takes care of the map angle.
     * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
     *     extent to fit the view to.
     * @param {FitOptions=} opt_options Options.
     * @api
     */
    View$$1.prototype.fit = function fit (geometryOrExtent, opt_options) {
      var options = opt_options || {};
      var size$$1 = options.size;
      if (!size$$1) {
        size$$1 = this.getSizeFromViewport_();
      }
      /** @type {import("./geom/SimpleGeometry.js").default} */
      var geometry;
      assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ (geometryOrExtent).getSimplifiedGeometry === 'function',
        24); // Invalid extent or geometry provided as `geometry`
      if (Array.isArray(geometryOrExtent)) {
        assert(!isEmpty$2(geometryOrExtent),
          25); // Cannot fit empty extent provided as `geometry`
        geometry = fromExtent(geometryOrExtent);
      } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {
        geometryOrExtent = geometryOrExtent.getExtent();
        geometry = fromExtent(geometryOrExtent);
        geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));
      } else {
        geometry = geometryOrExtent;
      }

      var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];
      var constrainResolution = options.constrainResolution !== undefined ?
        options.constrainResolution : true;
      var nearest = options.nearest !== undefined ? options.nearest : false;
      var minResolution;
      if (options.minResolution !== undefined) {
        minResolution = options.minResolution;
      } else if (options.maxZoom !== undefined) {
        minResolution = this.constrainResolution(
          this.maxResolution_, options.maxZoom - this.minZoom_, 0);
      } else {
        minResolution = 0;
      }
      var coords = geometry.getFlatCoordinates();

      // calculate rotated extent
      var rotation = this.getRotation();
      var cosAngle = Math.cos(-rotation);
      var sinAngle = Math.sin(-rotation);
      var minRotX = +Infinity;
      var minRotY = +Infinity;
      var maxRotX = -Infinity;
      var maxRotY = -Infinity;
      var stride = geometry.getStride();
      for (var i = 0, ii = coords.length; i < ii; i += stride) {
        var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
        var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
        minRotX = Math.min(minRotX, rotX);
        minRotY = Math.min(minRotY, rotY);
        maxRotX = Math.max(maxRotX, rotX);
        maxRotY = Math.max(maxRotY, rotY);
      }

      // calculate resolution
      var resolution = this.getResolutionForExtent(
        [minRotX, minRotY, maxRotX, maxRotY],
        [size$$1[0] - padding[1] - padding[3], size$$1[1] - padding[0] - padding[2]]);
      resolution = isNaN(resolution) ? minResolution :
        Math.max(resolution, minResolution);
      if (constrainResolution) {
        var constrainedResolution = this.constrainResolution(resolution, 0, 0);
        if (!nearest && constrainedResolution < resolution) {
          constrainedResolution = this.constrainResolution(
            constrainedResolution, -1, 0);
        }
        resolution = constrainedResolution;
      }

      // calculate center
      sinAngle = -sinAngle; // go back to original rotation
      var centerRotX = (minRotX + maxRotX) / 2;
      var centerRotY = (minRotY + maxRotY) / 2;
      centerRotX += (padding[1] - padding[3]) / 2 * resolution;
      centerRotY += (padding[0] - padding[2]) / 2 * resolution;
      var centerX = centerRotX * cosAngle - centerRotY * sinAngle;
      var centerY = centerRotY * cosAngle + centerRotX * sinAngle;
      var center = [centerX, centerY];
      var callback = options.callback ? options.callback : VOID;

      if (options.duration !== undefined) {
        this.animate({
          resolution: resolution,
          center: center,
          duration: options.duration,
          easing: options.easing
        }, callback);
      } else {
        this.setResolution(resolution);
        this.setCenter(center);
        animationCallback(callback, true);
      }
    };

    /**
     * Center on coordinate and view position.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("./size.js").Size} size Box pixel size.
     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
     * @api
     */
    View$$1.prototype.centerOn = function centerOn (coordinate, size$$1, position) {
      // calculate rotated position
      var rotation = this.getRotation();
      var cosAngle = Math.cos(-rotation);
      var sinAngle = Math.sin(-rotation);
      var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
      var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
      var resolution = this.getResolution();
      rotX += (size$$1[0] / 2 - position[0]) * resolution;
      rotY += (position[1] - size$$1[1] / 2) * resolution;

      // go back to original angle
      sinAngle = -sinAngle; // go back to original rotation
      var centerX = rotX * cosAngle - rotY * sinAngle;
      var centerY = rotY * cosAngle + rotX * sinAngle;

      this.setCenter([centerX, centerY]);
    };

    /**
     * @return {boolean} Is defined.
     */
    View$$1.prototype.isDef = function isDef () {
      return !!this.getCenter() && this.getResolution() !== undefined;
    };

    /**
     * Rotate the view around a given coordinate.
     * @param {number} rotation New rotation value for the view.
     * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
     * @api
     */
    View$$1.prototype.rotate = function rotate$$1 (rotation, opt_anchor) {
      if (opt_anchor !== undefined) {
        var center = this.calculateCenterRotate(rotation, opt_anchor);
        this.setCenter(center);
      }
      this.setRotation(rotation);
    };

    /**
     * Set the center of the current view.
     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
     * @observable
     * @api
     */
    View$$1.prototype.setCenter = function setCenter (center) {
      this.set(ViewProperty.CENTER, center);
      if (this.getAnimating()) {
        this.cancelAnimations();
      }
    };

    /**
     * @param {ViewHint} hint Hint.
     * @param {number} delta Delta.
     * @return {number} New value.
     */
    View$$1.prototype.setHint = function setHint (hint, delta) {
      this.hints_[hint] += delta;
      this.changed();
      return this.hints_[hint];
    };

    /**
     * Set the resolution for this view.
     * @param {number|undefined} resolution The resolution of the view.
     * @observable
     * @api
     */
    View$$1.prototype.setResolution = function setResolution (resolution) {
      this.set(ViewProperty.RESOLUTION, resolution);
      if (this.getAnimating()) {
        this.cancelAnimations();
      }
    };

    /**
     * Set the rotation for this view.
     * @param {number} rotation The rotation of the view in radians.
     * @observable
     * @api
     */
    View$$1.prototype.setRotation = function setRotation (rotation) {
      this.set(ViewProperty.ROTATION, rotation);
      if (this.getAnimating()) {
        this.cancelAnimations();
      }
    };

    /**
     * Zoom to a specific zoom level.
     * @param {number} zoom Zoom level.
     * @api
     */
    View$$1.prototype.setZoom = function setZoom (zoom) {
      this.setResolution(this.getResolutionForZoom(zoom));
    };

    return View$$1;
  }(BaseObject));


  /**
   * @param {Function} callback Callback.
   * @param {*} returnValue Return value.
   */
  function animationCallback(callback, returnValue) {
    setTimeout(function() {
      callback(returnValue);
    }, 0);
  }


  /**
   * @param {ViewOptions} options View options.
   * @return {import("./centerconstraint.js").Type} The constraint.
   */
  function createCenterConstraint(options) {
    if (options.extent !== undefined) {
      return createExtent(options.extent);
    } else {
      return none;
    }
  }


  /**
   * @param {ViewOptions} options View options.
   * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
   *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
   */
  function createResolutionConstraint(options) {
    var resolutionConstraint;
    var maxResolution;
    var minResolution;

    // TODO: move these to be ol constants
    // see https://github.com/openlayers/openlayers/issues/2076
    var defaultMaxZoom = 28;
    var defaultZoomFactor = 2;

    var minZoom = options.minZoom !== undefined ?
      options.minZoom : DEFAULT_MIN_ZOOM;

    var maxZoom = options.maxZoom !== undefined ?
      options.maxZoom : defaultMaxZoom;

    var zoomFactor = options.zoomFactor !== undefined ?
      options.zoomFactor : defaultZoomFactor;

    if (options.resolutions !== undefined) {
      var resolutions = options.resolutions;
      maxResolution = resolutions[minZoom];
      minResolution = resolutions[maxZoom] !== undefined ?
        resolutions[maxZoom] : resolutions[resolutions.length - 1];
      resolutionConstraint = createSnapToResolutions(
        resolutions);
    } else {
      // calculate the default min and max resolution
      var projection = createProjection(options.projection, 'EPSG:3857');
      var extent$$1 = projection.getExtent();
      var size$$1 = !extent$$1 ?
        // use an extent that can fit the whole world if need be
        360 * METERS_PER_UNIT[Units$1.DEGREES] /
              projection.getMetersPerUnit() :
        Math.max(getWidth(extent$$1), getHeight(extent$$1));

      var defaultMaxResolution = size$$1 / DEFAULT_TILE_SIZE / Math.pow(
        defaultZoomFactor, DEFAULT_MIN_ZOOM);

      var defaultMinResolution = defaultMaxResolution / Math.pow(
        defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);

      // user provided maxResolution takes precedence
      maxResolution = options.maxResolution;
      if (maxResolution !== undefined) {
        minZoom = 0;
      } else {
        maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
      }

      // user provided minResolution takes precedence
      minResolution = options.minResolution;
      if (minResolution === undefined) {
        if (options.maxZoom !== undefined) {
          if (options.maxResolution !== undefined) {
            minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
          } else {
            minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
          }
        } else {
          minResolution = defaultMinResolution;
        }
      }

      // given discrete zoom levels, minResolution may be different than provided
      maxZoom = minZoom + Math.floor(
        Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
      minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);

      resolutionConstraint = createSnapToPower(
        zoomFactor, maxResolution, maxZoom - minZoom);
    }
    return {constraint: resolutionConstraint, maxResolution: maxResolution,
      minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor};
  }


  /**
   * @param {ViewOptions} options View options.
   * @return {import("./rotationconstraint.js").Type} Rotation constraint.
   */
  function createRotationConstraint(options) {
    var enableRotation = options.enableRotation !== undefined ?
      options.enableRotation : true;
    if (enableRotation) {
      var constrainRotation = options.constrainRotation;
      if (constrainRotation === undefined || constrainRotation === true) {
        return createSnapToZero();
      } else if (constrainRotation === false) {
        return none$1;
      } else if (typeof constrainRotation === 'number') {
        return createSnapToN(constrainRotation);
      } else {
        return none$1;
      }
    } else {
      return disable;
    }
  }


  /**
   * Determine if an animation involves no view change.
   * @param {Animation} animation The animation.
   * @return {boolean} The animation involves no view change.
   */
  function isNoopAnimation(animation) {
    if (animation.sourceCenter && animation.targetCenter) {
      if (!equals$2(animation.sourceCenter, animation.targetCenter)) {
        return false;
      }
    }
    if (animation.sourceResolution !== animation.targetResolution) {
      return false;
    }
    if (animation.sourceRotation !== animation.targetRotation) {
      return false;
    }
    return true;
  }

  /**
   * @module ol/layer/Property
   */

  /**
   * @enum {string}
   */
  var LayerProperty = {
    OPACITY: 'opacity',
    VISIBLE: 'visible',
    EXTENT: 'extent',
    Z_INDEX: 'zIndex',
    MAX_RESOLUTION: 'maxResolution',
    MIN_RESOLUTION: 'minResolution',
    SOURCE: 'source'
  };

  /**
   * @module ol/layer/Base
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in
   * the options is set as a {@link module:ol/Object} property on the layer object, so
   * is observable, and has get/set accessors.
   *
   * @api
   */
  var BaseLayer$1 = /*@__PURE__*/(function (BaseObject$$1) {
    function BaseLayer$$1(options) {

      BaseObject$$1.call(this);

      /**
       * @type {Object<string, *>}
       */
      var properties = assign({}, options);
      properties[LayerProperty.OPACITY] =
         options.opacity !== undefined ? options.opacity : 1;
      properties[LayerProperty.VISIBLE] =
         options.visible !== undefined ? options.visible : true;
      properties[LayerProperty.Z_INDEX] = options.zIndex;
      properties[LayerProperty.MAX_RESOLUTION] =
         options.maxResolution !== undefined ? options.maxResolution : Infinity;
      properties[LayerProperty.MIN_RESOLUTION] =
         options.minResolution !== undefined ? options.minResolution : 0;

      this.setProperties(properties);

      /**
       * @type {import("./Layer.js").State}
       * @private
       */
      this.state_ = null;

      /**
       * The layer type.
       * @type {import("../LayerType.js").default}
       * @protected;
       */
      this.type;

    }

    if ( BaseObject$$1 ) BaseLayer$$1.__proto__ = BaseObject$$1;
    BaseLayer$$1.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    BaseLayer$$1.prototype.constructor = BaseLayer$$1;

    /**
     * Get the layer type (used when creating a layer renderer).
     * @return {import("../LayerType.js").default} The layer type.
     */
    BaseLayer$$1.prototype.getType = function getType () {
      return this.type;
    };

    /**
     * @return {import("./Layer.js").State} Layer state.
     */
    BaseLayer$$1.prototype.getLayerState = function getLayerState () {
      /** @type {import("./Layer.js").State} */
      var state = this.state_ || /** @type {?} */ ({
        layer: this,
        managed: true
      });
      state.opacity = clamp(this.getOpacity(), 0, 1);
      state.sourceState = this.getSourceState();
      state.visible = this.getVisible();
      state.extent = this.getExtent();
      state.zIndex = this.getZIndex() || 0;
      state.maxResolution = this.getMaxResolution();
      state.minResolution = Math.max(this.getMinResolution(), 0);
      this.state_ = state;

      return state;
    };

    /**
     * @abstract
     * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be
     *     modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     */
    BaseLayer$$1.prototype.getLayersArray = function getLayersArray (opt_array) {
      return abstract();
    };

    /**
     * @abstract
     * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer
     *     states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     */
    BaseLayer$$1.prototype.getLayerStatesArray = function getLayerStatesArray (opt_states) {
      return abstract();
    };

    /**
     * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
     * will be visible regardless of extent.
     * @return {import("../extent.js").Extent|undefined} The layer extent.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.getExtent = function getExtent () {
      return (
        /** @type {import("../extent.js").Extent|undefined} */ (this.get(LayerProperty.EXTENT))
      );
    };

    /**
     * Return the maximum resolution of the layer.
     * @return {number} The maximum resolution of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.getMaxResolution = function getMaxResolution () {
      return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));
    };

    /**
     * Return the minimum resolution of the layer.
     * @return {number} The minimum resolution of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.getMinResolution = function getMinResolution () {
      return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));
    };

    /**
     * Return the opacity of the layer (between 0 and 1).
     * @return {number} The opacity of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.getOpacity = function getOpacity () {
      return /** @type {number} */ (this.get(LayerProperty.OPACITY));
    };

    /**
     * @abstract
     * @return {import("../source/State.js").default} Source state.
     */
    BaseLayer$$1.prototype.getSourceState = function getSourceState () {
      return abstract();
    };

    /**
     * Return the visibility of the layer (`true` or `false`).
     * @return {boolean} The visibility of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.getVisible = function getVisible () {
      return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));
    };

    /**
     * Return the Z-index of the layer, which is used to order layers before
     * rendering. The default Z-index is 0.
     * @return {number} The Z-index of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.getZIndex = function getZIndex () {
      return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));
    };

    /**
     * Set the extent at which the layer is visible.  If `undefined`, the layer
     * will be visible at all extents.
     * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.setExtent = function setExtent (extent$$1) {
      this.set(LayerProperty.EXTENT, extent$$1);
    };

    /**
     * Set the maximum resolution at which the layer is visible.
     * @param {number} maxResolution The maximum resolution of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.setMaxResolution = function setMaxResolution (maxResolution) {
      this.set(LayerProperty.MAX_RESOLUTION, maxResolution);
    };

    /**
     * Set the minimum resolution at which the layer is visible.
     * @param {number} minResolution The minimum resolution of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.setMinResolution = function setMinResolution (minResolution) {
      this.set(LayerProperty.MIN_RESOLUTION, minResolution);
    };

    /**
     * Set the opacity of the layer, allowed values range from 0 to 1.
     * @param {number} opacity The opacity of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.setOpacity = function setOpacity (opacity) {
      this.set(LayerProperty.OPACITY, opacity);
    };

    /**
     * Set the visibility of the layer (`true` or `false`).
     * @param {boolean} visible The visibility of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.setVisible = function setVisible (visible) {
      this.set(LayerProperty.VISIBLE, visible);
    };

    /**
     * Set Z-index of the layer, which is used to order layers before rendering.
     * The default Z-index is 0.
     * @param {number} zindex The z-index of the layer.
     * @observable
     * @api
     */
    BaseLayer$$1.prototype.setZIndex = function setZIndex (zindex) {
      this.set(LayerProperty.Z_INDEX, zindex);
    };

    return BaseLayer$$1;
  }(BaseObject));

  /**
   * @module ol/source/State
   */

  /**
   * @enum {string}
   * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
   */
  var SourceState = {
    UNDEFINED: 'undefined',
    LOADING: 'loading',
    READY: 'ready',
    ERROR: 'error'
  };

  /**
   * @module ol/layer/Group
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {Array<import("./Base.js").default>|import("../Collection.js").default<import("./Base.js").default>} [layers] Child layers.
   */


  /**
   * @enum {string}
   * @private
   */
  var Property$2 = {
    LAYERS: 'layers'
  };


  /**
   * @classdesc
   * A {@link module:ol/Collection~Collection} of layers that are handled together.
   *
   * A generic `change` event is triggered when the group/Collection changes.
   *
   * @api
   */
  var LayerGroup = /*@__PURE__*/(function (BaseLayer$$1) {
    function LayerGroup(opt_options) {

      var options = opt_options || {};
      var baseOptions = /** @type {Options} */ (assign({}, options));
      delete baseOptions.layers;

      var layers = options.layers;

      BaseLayer$$1.call(this, baseOptions);

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.layersListenerKeys_ = [];

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").EventsKey>>}
       */
      this.listenerKeys_ = {};

      listen(this,
        getChangeEventType(Property$2.LAYERS),
        this.handleLayersChanged_, this);

      if (layers) {
        if (Array.isArray(layers)) {
          layers = new Collection$1(layers.slice(), {unique: true});
        } else {
          assert(typeof /** @type {?} */ (layers).getArray === 'function',
            43); // Expected `layers` to be an array or a `Collection`
        }
      } else {
        layers = new Collection$1(undefined, {unique: true});
      }

      this.setLayers(layers);

    }

    if ( BaseLayer$$1 ) LayerGroup.__proto__ = BaseLayer$$1;
    LayerGroup.prototype = Object.create( BaseLayer$$1 && BaseLayer$$1.prototype );
    LayerGroup.prototype.constructor = LayerGroup;

    /**
     * @private
     */
    LayerGroup.prototype.handleLayerChange_ = function handleLayerChange_ () {
      this.changed();
    };

    /**
     * @private
     */
    LayerGroup.prototype.handleLayersChanged_ = function handleLayersChanged_ () {
      this.layersListenerKeys_.forEach(unlistenByKey);
      this.layersListenerKeys_.length = 0;

      var layers = this.getLayers();
      this.layersListenerKeys_.push(
        listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this),
        listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this)
      );

      for (var id in this.listenerKeys_) {
        this.listenerKeys_[id].forEach(unlistenByKey);
      }
      clear(this.listenerKeys_);

      var layersArray = layers.getArray();
      for (var i = 0, ii = layersArray.length; i < ii; i++) {
        var layer = layersArray[i];
        this.listenerKeys_[getUid(layer)] = [
          listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
          listen(layer, EventType.CHANGE, this.handleLayerChange_, this)
        ];
      }

      this.changed();
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
     * @private
     */
    LayerGroup.prototype.handleLayersAdd_ = function handleLayersAdd_ (collectionEvent) {
      var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
      this.listenerKeys_[getUid(layer)] = [
        listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
        listen(layer, EventType.CHANGE, this.handleLayerChange_, this)
      ];
      this.changed();
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
     * @private
     */
    LayerGroup.prototype.handleLayersRemove_ = function handleLayersRemove_ (collectionEvent) {
      var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
      var key = getUid(layer);
      this.listenerKeys_[key].forEach(unlistenByKey);
      delete this.listenerKeys_[key];
      this.changed();
    };

    /**
     * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @return {!import("../Collection.js").default<import("./Base.js").default>} Collection of
     *   {@link module:ol/layer/Base layers} that are part of this group.
     * @observable
     * @api
     */
    LayerGroup.prototype.getLayers = function getLayers () {
      return (
        /** @type {!import("../Collection.js").default<import("./Base.js").default>} */ (this.get(Property$2.LAYERS))
      );
    };

    /**
     * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @param {!import("../Collection.js").default<import("./Base.js").default>} layers Collection of
     *   {@link module:ol/layer/Base layers} that are part of this group.
     * @observable
     * @api
     */
    LayerGroup.prototype.setLayers = function setLayers (layers) {
      this.set(Property$2.LAYERS, layers);
    };

    /**
     * @inheritDoc
     */
    LayerGroup.prototype.getLayersArray = function getLayersArray (opt_array) {
      var array = opt_array !== undefined ? opt_array : [];
      this.getLayers().forEach(function(layer) {
        layer.getLayersArray(array);
      });
      return array;
    };

    /**
     * @inheritDoc
     */
    LayerGroup.prototype.getLayerStatesArray = function getLayerStatesArray (opt_states) {
      var states = opt_states !== undefined ? opt_states : [];

      var pos = states.length;

      this.getLayers().forEach(function(layer) {
        layer.getLayerStatesArray(states);
      });

      var ownLayerState = this.getLayerState();
      for (var i = pos, ii = states.length; i < ii; i++) {
        var layerState = states[i];
        layerState.opacity *= ownLayerState.opacity;
        layerState.visible = layerState.visible && ownLayerState.visible;
        layerState.maxResolution = Math.min(
          layerState.maxResolution, ownLayerState.maxResolution);
        layerState.minResolution = Math.max(
          layerState.minResolution, ownLayerState.minResolution);
        if (ownLayerState.extent !== undefined) {
          if (layerState.extent !== undefined) {
            layerState.extent = getIntersection(layerState.extent, ownLayerState.extent);
          } else {
            layerState.extent = ownLayerState.extent;
          }
        }
      }

      return states;
    };

    /**
     * @inheritDoc
     */
    LayerGroup.prototype.getSourceState = function getSourceState () {
      return SourceState.READY;
    };

    return LayerGroup;
  }(BaseLayer$1));

  /**
   * @module ol/size
   */


  /**
   * Determines if a size has a positive area.
   * @param {Size} size The size to test.
   * @return {boolean} The size has a positive area.
   */
  function hasArea(size$$1) {
    return size$$1[0] > 0 && size$$1[1] > 0;
  }


  /**
   * Returns a size scaled by a ratio. The result will be an array of integers.
   * @param {Size} size Size.
   * @param {number} ratio Ratio.
   * @param {Size=} opt_size Optional reusable size array.
   * @return {Size} The scaled size.
   */
  function scale$3(size$$1, ratio, opt_size) {
    if (opt_size === undefined) {
      opt_size = [0, 0];
    }
    opt_size[0] = (size$$1[0] * ratio + 0.5) | 0;
    opt_size[1] = (size$$1[1] * ratio + 0.5) | 0;
    return opt_size;
  }


  /**
   * Returns an `Size` array for the passed in number (meaning: square) or
   * `Size` array.
   * (meaning: non-square),
   * @param {number|Size} size Width and height.
   * @param {Size=} opt_size Optional reusable size array.
   * @return {Size} Size.
   * @api
   */
  function toSize(size$$1, opt_size) {
    if (Array.isArray(size$$1)) {
      return size$$1;
    } else {
      if (opt_size === undefined) {
        opt_size = [size$$1, size$$1];
      } else {
        opt_size[0] = opt_size[1] = /** @type {number} */ (size$$1);
      }
      return opt_size;
    }
  }

  /**
   * @module ol/PluggableMap
   */


  /**
   * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
   * be used in applications.
   * @typedef {Object} FrameState
   * @property {number} pixelRatio The pixel ratio of the frame.
   * @property {number} time The time when rendering of the frame was requested.
   * @property {import("./View.js").State} viewState The state of the current view.
   * @property {boolean} animate
   * @property {import("./transform.js").Transform} coordinateToPixelTransform
   * @property {null|import("./extent.js").Extent} extent
   * @property {import("./coordinate.js").Coordinate} focus
   * @property {number} index
   * @property {Object<string, import("./layer/Layer.js").State>} layerStates
   * @property {Array<import("./layer/Layer.js").State>} layerStatesArray
   * @property {import("./transform.js").Transform} pixelToCoordinateTransform
   * @property {Array<PostRenderFunction>} postRenderFunctions
   * @property {import("./size.js").Size} size
   * @property {!Object<string, boolean>} skippedFeatureUids
   * @property {TileQueue} tileQueue
   * @property {Object<string, Object<string, import("./TileRange.js").default>>} usedTiles
   * @property {Array<number>} viewHints
   * @property {!Object<string, Object<string, boolean>>} wantedTiles
   */


  /**
   * @typedef {function(PluggableMap, ?FrameState): boolean} PostRenderFunction
   */


  /**
   * @typedef {Object} AtPixelOptions
   * @property {undefined|function(import("./layer/Layer.js").default): boolean} layerFilter Layer filter
   * function. The filter function will receive one argument, the
   * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.
   * Only layers which are visible and for which this function returns `true`
   * will be tested for features. By default, all visible layers will be tested.
   * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels
   * inside the radius around the given position will be checked for features. This only
   * works for the canvas renderer and not for WebGL.
   */


  /**
   * @typedef {Object} MapOptionsInternal
   * @property {Collection<import("./control/Control.js").default>} [controls]
   * @property {Collection<import("./interaction/Interaction.js").default>} [interactions]
   * @property {HTMLElement|Document} keyboardEventTarget
   * @property {Collection<import("./Overlay.js").default>} overlays
   * @property {Object<string, *>} values
   */


  /**
   * Object literal with config options for the map.
   * @typedef {Object} MapOptions
   * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
   * Controls initially added to the map. If not specified,
   * {@link module:ol/control~defaults} is used.
   * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
   * physical pixels and device-independent pixels (dips) on the device.
   * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
   * Interactions that are initially added to the map. If not specified,
   * {@link module:ol/interaction~defaults} is used.
   * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
   * listen to keyboard events on. This determines when the `KeyboardPan` and
   * `KeyboardZoom` interactions trigger. For example, if this option is set to
   * `document` the keyboard interactions will always trigger. If this option is
   * not specified, the element the library listens to keyboard events on is the
   * map target (i.e. the user-provided div for the map). If this is not
   * `document`, the target element needs to be focused for key events to be
   * emitted, requiring that the target element has a `tabindex` attribute.
   * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
   * Layers. If this is not defined, a map with no layers will be rendered. Note
   * that layers are rendered in the order supplied, so if you want, for example,
   * a vector layer to appear on top of a tile layer, it must come after the tile
   * layer.
   * @property {number} [maxTilesLoading=16] Maximum number tiles to load
   * simultaneously.
   * @property {boolean} [loadTilesWhileAnimating=false] When set to `true`, tiles
   * will be loaded during animations. This may improve the user experience, but
   * can also make animations stutter on devices with slow memory.
   * @property {boolean} [loadTilesWhileInteracting=false] When set to `true`,
   * tiles will be loaded while interacting with the map. This may improve the
   * user experience, but can also make map panning and zooming choppy on devices
   * with slow memory.
   * @property {number} [moveTolerance=1] The minimum distance in pixels the
   * cursor must move to be detected as a map move event instead of a click.
   * Increasing this value can make it easier to click on the map.
   * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
   * Overlays initially added to the map. By default, no overlays are added.
   * @property {HTMLElement|string} [target] The container for the map, either the
   * element itself or the `id` of the element. If not specified at construction
   * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
   * rendered.
   * @property {View} [view] The map's view.  No layer sources will be
   * fetched unless this is specified at construction time or through
   * {@link module:ol/Map~Map#setView}.
   */


  /**
   * @fires import("./MapBrowserEvent.js").MapBrowserEvent
   * @fires import("./MapEvent.js").MapEvent
   * @fires module:ol/render/Event~RenderEvent#postcompose
   * @fires module:ol/render/Event~RenderEvent#precompose
   * @fires module:ol/render/Event~RenderEvent#rendercomplete
   * @api
   */
  var PluggableMap$1 = /*@__PURE__*/(function (BaseObject$$1) {
    function PluggableMap$$1(options) {

      BaseObject$$1.call(this);

      var optionsInternal = createOptionsInternal(options);

      /**
       * @type {number}
       * @private
       */
      this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;

      /**
       * @type {boolean}
       * @private
       */
      this.loadTilesWhileAnimating_ =
          options.loadTilesWhileAnimating !== undefined ?
            options.loadTilesWhileAnimating : false;

      /**
       * @type {boolean}
       * @private
       */
      this.loadTilesWhileInteracting_ =
          options.loadTilesWhileInteracting !== undefined ?
            options.loadTilesWhileInteracting : false;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = options.pixelRatio !== undefined ?
        options.pixelRatio : DEVICE_PIXEL_RATIO;

      /**
       * @private
       * @type {number|undefined}
       */
      this.animationDelayKey_;

      /**
       * @private
       */
      this.animationDelay_ = function() {
        this.animationDelayKey_ = undefined;
        this.renderFrame_.call(this, Date.now());
      }.bind(this);

      /**
       * @private
       * @type {import("./transform.js").Transform}
       */
      this.coordinateToPixelTransform_ = create();

      /**
       * @private
       * @type {import("./transform.js").Transform}
       */
      this.pixelToCoordinateTransform_ = create();

      /**
       * @private
       * @type {number}
       */
      this.frameIndex_ = 0;

      /**
       * @private
       * @type {?FrameState}
       */
      this.frameState_ = null;

      /**
       * The extent at the previous 'moveend' event.
       * @private
       * @type {import("./extent.js").Extent}
       */
      this.previousExtent_ = null;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.viewPropertyListenerKey_ = null;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.viewChangeListenerKey_ = null;

      /**
       * @private
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.layerGroupPropertyListenerKeys_ = null;

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.viewport_ = document.createElement('div');
      this.viewport_.className = 'ol-viewport' + (TOUCH ? ' ol-touch' : '');
      this.viewport_.style.position = 'relative';
      this.viewport_.style.overflow = 'hidden';
      this.viewport_.style.width = '100%';
      this.viewport_.style.height = '100%';
      // prevent page zoom on IE >= 10 browsers
      this.viewport_.style.msTouchAction = 'none';
      this.viewport_.style.touchAction = 'none';

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.overlayContainer_ = document.createElement('div');
      this.overlayContainer_.className = 'ol-overlaycontainer';
      this.viewport_.appendChild(this.overlayContainer_);

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.overlayContainerStopEvent_ = document.createElement('div');
      this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
      var overlayEvents = [
        EventType.CLICK,
        EventType.DBLCLICK,
        EventType.MOUSEDOWN,
        EventType.TOUCHSTART,
        EventType.MSPOINTERDOWN,
        MapBrowserEventType.POINTERDOWN,
        EventType.MOUSEWHEEL,
        EventType.WHEEL
      ];
      for (var i = 0, ii = overlayEvents.length; i < ii; ++i) {
        listen(this.overlayContainerStopEvent_, overlayEvents[i], stopPropagation);
      }
      this.viewport_.appendChild(this.overlayContainerStopEvent_);

      /**
       * @private
       * @type {MapBrowserEventHandler}
       */
      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, options.moveTolerance);
      for (var key in MapBrowserEventType) {
        listen(this.mapBrowserEventHandler_, MapBrowserEventType[key],
          this.handleMapBrowserEvent, this);
      }

      /**
       * @private
       * @type {HTMLElement|Document}
       */
      this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;

      /**
       * @private
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.keyHandlerKeys_ = null;

      listen(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);
      listen(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);
      listen(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);

      /**
       * @type {Collection<import("./control/Control.js").default>}
       * @protected
       */
      this.controls = optionsInternal.controls || new Collection$1();

      /**
       * @type {Collection<import("./interaction/Interaction.js").default>}
       * @protected
       */
      this.interactions = optionsInternal.interactions || new Collection$1();

      /**
       * @type {Collection<import("./Overlay.js").default>}
       * @private
       */
      this.overlays_ = optionsInternal.overlays;

      /**
       * A lookup of overlays by id.
       * @private
       * @type {Object<string, import("./Overlay.js").default>}
       */
      this.overlayIdIndex_ = {};

      /**
       * @type {import("./renderer/Map.js").default}
       * @private
       */
      this.renderer_ = this.createRenderer();

      /**
       * @type {function(Event)|undefined}
       * @private
       */
      this.handleResize_;

      /**
       * @private
       * @type {import("./coordinate.js").Coordinate}
       */
      this.focus_ = null;

      /**
       * @private
       * @type {!Array<PostRenderFunction>}
       */
      this.postRenderFunctions_ = [];

      /**
       * @private
       * @type {TileQueue}
       */
      this.tileQueue_ = new TileQueue(
        this.getTilePriority.bind(this),
        this.handleTileChange_.bind(this));

      /**
       * Uids of features to skip at rendering time.
       * @type {Object<string, boolean>}
       * @private
       */
      this.skippedFeatureUids_ = {};

      listen(
        this, getChangeEventType(MapProperty.LAYERGROUP),
        this.handleLayerGroupChanged_, this);
      listen(this, getChangeEventType(MapProperty.VIEW),
        this.handleViewChanged_, this);
      listen(this, getChangeEventType(MapProperty.SIZE),
        this.handleSizeChanged_, this);
      listen(this, getChangeEventType(MapProperty.TARGET),
        this.handleTargetChanged_, this);

      // setProperties will trigger the rendering of the map if the map
      // is "defined" already.
      this.setProperties(optionsInternal.values);

      this.controls.forEach(
        /**
         * @param {import("./control/Control.js").default} control Control.
         * @this {PluggableMap}
         */
        (function(control$$1) {
          control$$1.setMap(this);
        }).bind(this));

      listen(this.controls, CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(this);
        }, this);

      listen(this.controls, CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(null);
        }, this);

      this.interactions.forEach(
        /**
         * @param {import("./interaction/Interaction.js").default} interaction Interaction.
         * @this {PluggableMap}
         */
        (function(interaction$$1) {
          interaction$$1.setMap(this);
        }).bind(this));

      listen(this.interactions, CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(this);
        }, this);

      listen(this.interactions, CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(null);
        }, this);

      this.overlays_.forEach(this.addOverlayInternal_.bind(this));

      listen(this.overlays_, CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          this.addOverlayInternal_(/** @type {import("./Overlay.js").default} */ (event.element));
        }, this);

      listen(this.overlays_, CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          var overlay = /** @type {import("./Overlay.js").default} */ (event.element);
          var id = overlay.getId();
          if (id !== undefined) {
            delete this.overlayIdIndex_[id.toString()];
          }
          event.element.setMap(null);
        }, this);

    }

    if ( BaseObject$$1 ) PluggableMap$$1.__proto__ = BaseObject$$1;
    PluggableMap$$1.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    PluggableMap$$1.prototype.constructor = PluggableMap$$1;

    /**
     * @abstract
     * @return {import("./renderer/Map.js").default} The map renderer
     */
    PluggableMap$$1.prototype.createRenderer = function createRenderer () {
      throw new Error('Use a map type that has a createRenderer method');
    };

    /**
     * Add the given control to the map.
     * @param {import("./control/Control.js").default} control Control.
     * @api
     */
    PluggableMap$$1.prototype.addControl = function addControl (control$$1) {
      this.getControls().push(control$$1);
    };

    /**
     * Add the given interaction to the map.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
     * @api
     */
    PluggableMap$$1.prototype.addInteraction = function addInteraction (interaction$$1) {
      this.getInteractions().push(interaction$$1);
    };

    /**
     * Adds the given layer to the top of this map. If you want to add a layer
     * elsewhere in the stack, use `getLayers()` and the methods available on
     * {@link module:ol/Collection~Collection}.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @api
     */
    PluggableMap$$1.prototype.addLayer = function addLayer (layer) {
      var layers = this.getLayerGroup().getLayers();
      layers.push(layer);
    };

    /**
     * Add the given overlay to the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @api
     */
    PluggableMap$$1.prototype.addOverlay = function addOverlay (overlay) {
      this.getOverlays().push(overlay);
    };

    /**
     * This deals with map's overlay collection changes.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @private
     */
    PluggableMap$$1.prototype.addOverlayInternal_ = function addOverlayInternal_ (overlay) {
      var id = overlay.getId();
      if (id !== undefined) {
        this.overlayIdIndex_[id.toString()] = overlay;
      }
      overlay.setMap(this);
    };

    /**
     *
     * @inheritDoc
     */
    PluggableMap$$1.prototype.disposeInternal = function disposeInternal () {
      this.mapBrowserEventHandler_.dispose();
      unlisten(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);
      unlisten(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);
      unlisten(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);
      if (this.handleResize_ !== undefined) {
        removeEventListener(EventType.RESIZE, this.handleResize_, false);
        this.handleResize_ = undefined;
      }
      if (this.animationDelayKey_) {
        cancelAnimationFrame(this.animationDelayKey_);
        this.animationDelayKey_ = undefined;
      }
      this.setTarget(null);
      BaseObject$$1.prototype.disposeInternal.call(this);
    };

    /**
     * Detect features that intersect a pixel on the viewport, and execute a
     * callback with each intersecting feature. Layers included in the detection can
     * be configured through the `layerFilter` option in `opt_options`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {function(this: S, import("./Feature.js").FeatureLike,
     *     import("./layer/Layer.js").default): T} callback Feature callback. The callback will be
     *     called with two arguments. The first argument is one
     *     {@link module:ol/Feature feature} or
     *     {@link module:ol/render/Feature render feature} at the pixel, the second is
     *     the {@link module:ol/layer/Layer layer} of the feature and will be null for
     *     unmanaged layers. To stop detection, callback functions can return a
     *     truthy value.
     * @param {AtPixelOptions=} opt_options Optional options.
     * @return {T|undefined} Callback result, i.e. the return value of last
     * callback execution, or the first truthy callback return value.
     * @template S,T
     * @api
     */
    PluggableMap$$1.prototype.forEachFeatureAtPixel = function forEachFeatureAtPixel (pixel, callback, opt_options) {
      if (!this.frameState_) {
        return;
      }
      var coordinate = this.getCoordinateFromPixel(pixel);
      opt_options = opt_options !== undefined ? opt_options :
        /** @type {AtPixelOptions} */ ({});
      var hitTolerance = opt_options.hitTolerance !== undefined ?
        opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
      var layerFilter = opt_options.layerFilter !== undefined ?
        opt_options.layerFilter : TRUE;
      return this.renderer_.forEachFeatureAtCoordinate(
        coordinate, this.frameState_, hitTolerance, callback, null,
        layerFilter, null);
    };

    /**
     * Get all features that intersect a pixel on the viewport.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions=} opt_options Optional options.
     * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
     * `null` if none were found.
     * @api
     */
    PluggableMap$$1.prototype.getFeaturesAtPixel = function getFeaturesAtPixel (pixel, opt_options) {
      var features = null;
      this.forEachFeatureAtPixel(pixel, function(feature) {
        if (!features) {
          features = [];
        }
        features.push(feature);
      }, opt_options);
      return features;
    };

    /**
     * Detect layers that have a color value at a pixel on the viewport, and
     * execute a callback with each matching layer. Layers included in the
     * detection can be configured through `opt_layerFilter`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {function(this: S, import("./layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback
     *     Layer callback. This callback will receive two arguments: first is the
     *     {@link module:ol/layer/Layer layer}, second argument is an array representing
     *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types
     *     that do not currently support this argument. To stop detection, callback
     *     functions can return a truthy value.
     * @param {AtPixelOptions=} opt_options Configuration options.
     * @return {T|undefined} Callback result, i.e. the return value of last
     * callback execution, or the first truthy callback return value.
     * @template S,T
     * @api
     */
    PluggableMap$$1.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, callback, opt_options) {
      if (!this.frameState_) {
        return;
      }
      var options = opt_options || /** @type {AtPixelOptions} */ ({});
      var hitTolerance = options.hitTolerance !== undefined ?
        opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
      var layerFilter = options.layerFilter || TRUE;
      return this.renderer_.forEachLayerAtPixel(
        pixel, this.frameState_, hitTolerance, callback, null, layerFilter, null);
    };

    /**
     * Detect if features intersect a pixel on the viewport. Layers included in the
     * detection can be configured through `opt_layerFilter`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions=} opt_options Optional options.
     * @return {boolean} Is there a feature at the given pixel?
     * @template U
     * @api
     */
    PluggableMap$$1.prototype.hasFeatureAtPixel = function hasFeatureAtPixel (pixel, opt_options) {
      if (!this.frameState_) {
        return false;
      }
      var coordinate = this.getCoordinateFromPixel(pixel);
      opt_options = opt_options !== undefined ? opt_options :
        /** @type {AtPixelOptions} */ ({});
      var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;
      var hitTolerance = opt_options.hitTolerance !== undefined ?
        opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
      return this.renderer_.hasFeatureAtCoordinate(
        coordinate, this.frameState_, hitTolerance, layerFilter, null);
    };

    /**
     * Returns the coordinate in view projection for a browser event.
     * @param {Event} event Event.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     * @api
     */
    PluggableMap$$1.prototype.getEventCoordinate = function getEventCoordinate (event) {
      return this.getCoordinateFromPixel(this.getEventPixel(event));
    };

    /**
     * Returns the map pixel position for a browser event relative to the viewport.
     * @param {Event|TouchEvent} event Event.
     * @return {import("./pixel.js").Pixel} Pixel.
     * @api
     */
    PluggableMap$$1.prototype.getEventPixel = function getEventPixel (event) {
      var viewportPosition = this.viewport_.getBoundingClientRect();
      var eventPosition = 'changedTouches' in event ?
        /** @type {TouchEvent} */ (event).changedTouches[0] :
        /** @type {MouseEvent} */ (event);

      return [
        eventPosition.clientX - viewportPosition.left,
        eventPosition.clientY - viewportPosition.top
      ];
    };

    /**
     * Get the target in which this map is rendered.
     * Note that this returns what is entered as an option or in setTarget:
     * if that was an element, it returns an element; if a string, it returns that.
     * @return {HTMLElement|string|undefined} The Element or id of the Element that the
     *     map is rendered in.
     * @observable
     * @api
     */
    PluggableMap$$1.prototype.getTarget = function getTarget () {
      return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));
    };

    /**
     * Get the DOM element into which this map is rendered. In contrast to
     * `getTarget` this method always return an `Element`, or `null` if the
     * map has no target.
     * @return {HTMLElement} The element that the map is rendered in.
     * @api
     */
    PluggableMap$$1.prototype.getTargetElement = function getTargetElement () {
      var target = this.getTarget();
      if (target !== undefined) {
        return typeof target === 'string' ? document.getElementById(target) : target;
      } else {
        return null;
      }
    };

    /**
     * Get the coordinate for a given pixel.  This returns a coordinate in the
     * map view projection.
     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
     * @api
     */
    PluggableMap$$1.prototype.getCoordinateFromPixel = function getCoordinateFromPixel (pixel) {
      var frameState = this.frameState_;
      if (!frameState) {
        return null;
      } else {
        return apply(frameState.pixelToCoordinateTransform, pixel.slice());
      }
    };

    /**
     * Get the map controls. Modifying this collection changes the controls
     * associated with the map.
     * @return {Collection<import("./control/Control.js").default>} Controls.
     * @api
     */
    PluggableMap$$1.prototype.getControls = function getControls () {
      return this.controls;
    };

    /**
     * Get the map overlays. Modifying this collection changes the overlays
     * associated with the map.
     * @return {Collection<import("./Overlay.js").default>} Overlays.
     * @api
     */
    PluggableMap$$1.prototype.getOverlays = function getOverlays () {
      return this.overlays_;
    };

    /**
     * Get an overlay by its identifier (the value returned by overlay.getId()).
     * Note that the index treats string and numeric identifiers as the same. So
     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
     * @param {string|number} id Overlay identifier.
     * @return {import("./Overlay.js").default} Overlay.
     * @api
     */
    PluggableMap$$1.prototype.getOverlayById = function getOverlayById (id) {
      var overlay = this.overlayIdIndex_[id.toString()];
      return overlay !== undefined ? overlay : null;
    };

    /**
     * Get the map interactions. Modifying this collection changes the interactions
     * associated with the map.
     *
     * Interactions are used for e.g. pan, zoom and rotate.
     * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
     * @api
     */
    PluggableMap$$1.prototype.getInteractions = function getInteractions () {
      return this.interactions;
    };

    /**
     * Get the layergroup associated with this map.
     * @return {LayerGroup} A layer group containing the layers in this map.
     * @observable
     * @api
     */
    PluggableMap$$1.prototype.getLayerGroup = function getLayerGroup () {
      return (
        /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP))
      );
    };

    /**
     * Get the collection of layers associated with this map.
     * @return {!Collection<import("./layer/Base.js").default>} Layers.
     * @api
     */
    PluggableMap$$1.prototype.getLayers = function getLayers () {
      var layers = this.getLayerGroup().getLayers();
      return layers;
    };

    /**
     * Get the pixel for a coordinate.  This takes a coordinate in the map view
     * projection and returns the corresponding pixel.
     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
     * @api
     */
    PluggableMap$$1.prototype.getPixelFromCoordinate = function getPixelFromCoordinate (coordinate) {
      var frameState = this.frameState_;
      if (!frameState) {
        return null;
      } else {
        return apply(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
      }
    };

    /**
     * Get the map renderer.
     * @return {import("./renderer/Map.js").default} Renderer
     */
    PluggableMap$$1.prototype.getRenderer = function getRenderer () {
      return this.renderer_;
    };

    /**
     * Get the size of this map.
     * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
     * @observable
     * @api
     */
    PluggableMap$$1.prototype.getSize = function getSize$$1 () {
      return (
        /** @type {import("./size.js").Size|undefined} */ (this.get(MapProperty.SIZE))
      );
    };

    /**
     * Get the view associated with this map. A view manages properties such as
     * center and resolution.
     * @return {View} The view that controls this map.
     * @observable
     * @api
     */
    PluggableMap$$1.prototype.getView = function getView () {
      return (
        /** @type {View} */ (this.get(MapProperty.VIEW))
      );
    };

    /**
     * Get the element that serves as the map viewport.
     * @return {HTMLElement} Viewport.
     * @api
     */
    PluggableMap$$1.prototype.getViewport = function getViewport () {
      return this.viewport_;
    };

    /**
     * Get the element that serves as the container for overlays.  Elements added to
     * this container will let mousedown and touchstart events through to the map,
     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
     * events.
     * @return {!HTMLElement} The map's overlay container.
     */
    PluggableMap$$1.prototype.getOverlayContainer = function getOverlayContainer () {
      return this.overlayContainer_;
    };

    /**
     * Get the element that serves as a container for overlays that don't allow
     * event propagation. Elements added to this container won't let mousedown and
     * touchstart events through to the map, so clicks and gestures on an overlay
     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     * @return {!HTMLElement} The map's overlay container that stops events.
     */
    PluggableMap$$1.prototype.getOverlayContainerStopEvent = function getOverlayContainerStopEvent () {
      return this.overlayContainerStopEvent_;
    };

    /**
     * @param {import("./Tile.js").default} tile Tile.
     * @param {string} tileSourceKey Tile source key.
     * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
     * @param {number} tileResolution Tile resolution.
     * @return {number} Tile priority.
     */
    PluggableMap$$1.prototype.getTilePriority = function getTilePriority (tile, tileSourceKey, tileCenter, tileResolution) {
      // Filter out tiles at higher zoom levels than the current zoom level, or that
      // are outside the visible extent.
      var frameState = this.frameState_;
      if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
        return DROP;
      }
      if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
        return DROP;
      }
      // Prioritize the highest zoom level tiles closest to the focus.
      // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
      // Within a zoom level, tiles are prioritized by the distance in pixels
      // between the center of the tile and the focus.  The factor of 65536 means
      // that the prioritization should behave as desired for tiles up to
      // 65536 * Math.log(2) = 45426 pixels from the focus.
      var deltaX = tileCenter[0] - frameState.focus[0];
      var deltaY = tileCenter[1] - frameState.focus[1];
      return 65536 * Math.log(tileResolution) +
          Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
    };

    /**
     * @param {Event} browserEvent Browser event.
     * @param {string=} opt_type Type.
     */
    PluggableMap$$1.prototype.handleBrowserEvent = function handleBrowserEvent (browserEvent, opt_type) {
      var type = opt_type || browserEvent.type;
      var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);
      this.handleMapBrowserEvent(mapBrowserEvent);
    };

    /**
     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
     */
    PluggableMap$$1.prototype.handleMapBrowserEvent = function handleMapBrowserEvent (mapBrowserEvent) {
      if (!this.frameState_) {
        // With no view defined, we cannot translate pixels into geographical
        // coordinates so interactions cannot be used.
        return;
      }
      this.focus_ = mapBrowserEvent.coordinate;
      mapBrowserEvent.frameState = this.frameState_;
      var interactionsArray = this.getInteractions().getArray();
      if (this.dispatchEvent(mapBrowserEvent) !== false) {
        for (var i = interactionsArray.length - 1; i >= 0; i--) {
          var interaction$$1 = interactionsArray[i];
          if (!interaction$$1.getActive()) {
            continue;
          }
          var cont = interaction$$1.handleEvent(mapBrowserEvent);
          if (!cont) {
            break;
          }
        }
      }
    };

    /**
     * @protected
     */
    PluggableMap$$1.prototype.handlePostRender = function handlePostRender () {

      var frameState = this.frameState_;

      // Manage the tile queue
      // Image loads are expensive and a limited resource, so try to use them
      // efficiently:
      // * When the view is static we allow a large number of parallel tile loads
      //   to complete the frame as quickly as possible.
      // * When animating or interacting, image loads can cause janks, so we reduce
      //   the maximum number of loads per frame and limit the number of parallel
      //   tile loads to remain reactive to view changes and to reduce the chance of
      //   loading tiles that will quickly disappear from view.
      var tileQueue = this.tileQueue_;
      if (!tileQueue.isEmpty()) {
        var maxTotalLoading = this.maxTilesLoading_;
        var maxNewLoads = maxTotalLoading;
        if (frameState) {
          var hints = frameState.viewHints;
          if (hints[ViewHint.ANIMATING]) {
            maxTotalLoading = this.loadTilesWhileAnimating_ ? 8 : 0;
            maxNewLoads = 2;
          }
          if (hints[ViewHint.INTERACTING]) {
            maxTotalLoading = this.loadTilesWhileInteracting_ ? 8 : 0;
            maxNewLoads = 2;
          }
        }
        if (tileQueue.getTilesLoading() < maxTotalLoading) {
          tileQueue.reprioritize(); // FIXME only call if view has changed
          tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
        }
      }
      if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate &&
          !this.tileQueue_.getTilesLoading() && !getLoading(this.getLayers().getArray())) {
        this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);
      }

      var postRenderFunctions = this.postRenderFunctions_;
      for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
        postRenderFunctions[i](this, frameState);
      }
      postRenderFunctions.length = 0;
    };

    /**
     * @private
     */
    PluggableMap$$1.prototype.handleSizeChanged_ = function handleSizeChanged_ () {
      this.render();
    };

    /**
     * @private
     */
    PluggableMap$$1.prototype.handleTargetChanged_ = function handleTargetChanged_ () {
      // target may be undefined, null, a string or an Element.
      // If it's a string we convert it to an Element before proceeding.
      // If it's not now an Element we remove the viewport from the DOM.
      // If it's an Element we append the viewport element to it.

      var targetElement;
      if (this.getTarget()) {
        targetElement = this.getTargetElement();
      }

      if (this.keyHandlerKeys_) {
        for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {
          unlistenByKey(this.keyHandlerKeys_[i]);
        }
        this.keyHandlerKeys_ = null;
      }

      if (!targetElement) {
        this.renderer_.removeLayerRenderers();
        removeNode(this.viewport_);
        if (this.handleResize_ !== undefined) {
          removeEventListener(EventType.RESIZE, this.handleResize_, false);
          this.handleResize_ = undefined;
        }
      } else {
        targetElement.appendChild(this.viewport_);

        var keyboardEventTarget = !this.keyboardEventTarget_ ?
          targetElement : this.keyboardEventTarget_;
        this.keyHandlerKeys_ = [
          listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),
          listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)
        ];

        if (!this.handleResize_) {
          this.handleResize_ = this.updateSize.bind(this);
          addEventListener(EventType.RESIZE, this.handleResize_, false);
        }
      }

      this.updateSize();
      // updateSize calls setSize, so no need to call this.render
      // ourselves here.
    };

    /**
     * @private
     */
    PluggableMap$$1.prototype.handleTileChange_ = function handleTileChange_ () {
      this.render();
    };

    /**
     * @private
     */
    PluggableMap$$1.prototype.handleViewPropertyChanged_ = function handleViewPropertyChanged_ () {
      this.render();
    };

    /**
     * @private
     */
    PluggableMap$$1.prototype.handleViewChanged_ = function handleViewChanged_ () {
      if (this.viewPropertyListenerKey_) {
        unlistenByKey(this.viewPropertyListenerKey_);
        this.viewPropertyListenerKey_ = null;
      }
      if (this.viewChangeListenerKey_) {
        unlistenByKey(this.viewChangeListenerKey_);
        this.viewChangeListenerKey_ = null;
      }
      var view = this.getView();
      if (view) {
        this.viewport_.setAttribute('data-view', getUid(view));
        this.viewPropertyListenerKey_ = listen(
          view, ObjectEventType.PROPERTYCHANGE,
          this.handleViewPropertyChanged_, this);
        this.viewChangeListenerKey_ = listen(
          view, EventType.CHANGE,
          this.handleViewPropertyChanged_, this);
      }
      this.render();
    };

    /**
     * @private
     */
    PluggableMap$$1.prototype.handleLayerGroupChanged_ = function handleLayerGroupChanged_ () {
      if (this.layerGroupPropertyListenerKeys_) {
        this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);
        this.layerGroupPropertyListenerKeys_ = null;
      }
      var layerGroup = this.getLayerGroup();
      if (layerGroup) {
        this.layerGroupPropertyListenerKeys_ = [
          listen(
            layerGroup, ObjectEventType.PROPERTYCHANGE,
            this.render, this),
          listen(
            layerGroup, EventType.CHANGE,
            this.render, this)
        ];
      }
      this.render();
    };

    /**
     * @return {boolean} Is rendered.
     */
    PluggableMap$$1.prototype.isRendered = function isRendered () {
      return !!this.frameState_;
    };

    /**
     * Requests an immediate render in a synchronous manner.
     * @api
     */
    PluggableMap$$1.prototype.renderSync = function renderSync () {
      if (this.animationDelayKey_) {
        cancelAnimationFrame(this.animationDelayKey_);
      }
      this.animationDelay_();
    };

    /**
     * Request a map rendering (at the next animation frame).
     * @api
     */
    PluggableMap$$1.prototype.render = function render () {
      if (this.animationDelayKey_ === undefined) {
        this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
      }
    };

    /**
     * Remove the given control from the map.
     * @param {import("./control/Control.js").default} control Control.
     * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
     *     if the control was not found).
     * @api
     */
    PluggableMap$$1.prototype.removeControl = function removeControl (control$$1) {
      return this.getControls().remove(control$$1);
    };

    /**
     * Remove the given interaction from the map.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
     * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
     *     undefined if the interaction was not found).
     * @api
     */
    PluggableMap$$1.prototype.removeInteraction = function removeInteraction (interaction$$1) {
      return this.getInteractions().remove(interaction$$1);
    };

    /**
     * Removes the given layer from the map.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
     *     layer was not found).
     * @api
     */
    PluggableMap$$1.prototype.removeLayer = function removeLayer (layer) {
      var layers = this.getLayerGroup().getLayers();
      return layers.remove(layer);
    };

    /**
     * Remove the given overlay from the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
     *     if the overlay was not found).
     * @api
     */
    PluggableMap$$1.prototype.removeOverlay = function removeOverlay (overlay) {
      return this.getOverlays().remove(overlay);
    };

    /**
     * @param {number} time Time.
     * @private
     */
    PluggableMap$$1.prototype.renderFrame_ = function renderFrame_ (time) {
      var viewState;

      var size$$1 = this.getSize();
      var view = this.getView();
      var extent$$1 = createEmpty();
      var previousFrameState = this.frameState_;
      /** @type {?FrameState} */
      var frameState = null;
      if (size$$1 !== undefined && hasArea(size$$1) && view && view.isDef()) {
        var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
        var layerStatesArray = this.getLayerGroup().getLayerStatesArray();
        var layerStates = {};
        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
          layerStates[getUid(layerStatesArray[i].layer)] = layerStatesArray[i];
        }
        viewState = view.getState(this.pixelRatio_);
        frameState = /** @type {FrameState} */ ({
          animate: false,
          coordinateToPixelTransform: this.coordinateToPixelTransform_,
          extent: extent$$1,
          focus: this.focus_ ? this.focus_ : viewState.center,
          index: this.frameIndex_++,
          layerStates: layerStates,
          layerStatesArray: layerStatesArray,
          pixelRatio: this.pixelRatio_,
          pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
          postRenderFunctions: [],
          size: size$$1,
          skippedFeatureUids: this.skippedFeatureUids_,
          tileQueue: this.tileQueue_,
          time: time,
          usedTiles: {},
          viewState: viewState,
          viewHints: viewHints,
          wantedTiles: {}
        });
      }

      if (frameState) {
        frameState.extent = getForViewAndSize(viewState.center,
          viewState.resolution, viewState.rotation, frameState.size, extent$$1);
      }

      this.frameState_ = frameState;
      this.renderer_.renderFrame(frameState);

      if (frameState) {
        if (frameState.animate) {
          this.render();
        }
        Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);

        if (previousFrameState) {
          var moveStart = !this.previousExtent_ ||
                      (!isEmpty$2(this.previousExtent_) &&
                      !equals$1(frameState.extent, this.previousExtent_));
          if (moveStart) {
            this.dispatchEvent(
              new MapEvent(MapEventType.MOVESTART, this, previousFrameState));
            this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);
          }
        }

        var idle = this.previousExtent_ &&
            !frameState.viewHints[ViewHint.ANIMATING] &&
            !frameState.viewHints[ViewHint.INTERACTING] &&
            !equals$1(frameState.extent, this.previousExtent_);

        if (idle) {
          this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));
          clone$1(frameState.extent, this.previousExtent_);
        }
      }

      this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));

      setTimeout(this.handlePostRender.bind(this), 0);

    };

    /**
     * Sets the layergroup of this map.
     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
     * @observable
     * @api
     */
    PluggableMap$$1.prototype.setLayerGroup = function setLayerGroup (layerGroup) {
      this.set(MapProperty.LAYERGROUP, layerGroup);
    };

    /**
     * Set the size of this map.
     * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
     * @observable
     * @api
     */
    PluggableMap$$1.prototype.setSize = function setSize (size$$1) {
      this.set(MapProperty.SIZE, size$$1);
    };

    /**
     * Set the target element to render this map into.
     * @param {HTMLElement|string|undefined} target The Element or id of the Element
     *     that the map is rendered in.
     * @observable
     * @api
     */
    PluggableMap$$1.prototype.setTarget = function setTarget (target) {
      this.set(MapProperty.TARGET, target);
    };

    /**
     * Set the view for this map.
     * @param {View} view The view that controls this map.
     * @observable
     * @api
     */
    PluggableMap$$1.prototype.setView = function setView (view) {
      this.set(MapProperty.VIEW, view);
    };

    /**
     * @param {import("./Feature.js").default} feature Feature.
     */
    PluggableMap$$1.prototype.skipFeature = function skipFeature (feature) {
      this.skippedFeatureUids_[getUid(feature)] = true;
      this.render();
    };

    /**
     * Force a recalculation of the map viewport size.  This should be called when
     * third-party code changes the size of the map viewport.
     * @api
     */
    PluggableMap$$1.prototype.updateSize = function updateSize () {
      var targetElement = this.getTargetElement();

      if (!targetElement) {
        this.setSize(undefined);
      } else {
        var computedStyle = getComputedStyle(targetElement);
        this.setSize([
          targetElement.offsetWidth -
              parseFloat(computedStyle['borderLeftWidth']) -
              parseFloat(computedStyle['paddingLeft']) -
              parseFloat(computedStyle['paddingRight']) -
              parseFloat(computedStyle['borderRightWidth']),
          targetElement.offsetHeight -
              parseFloat(computedStyle['borderTopWidth']) -
              parseFloat(computedStyle['paddingTop']) -
              parseFloat(computedStyle['paddingBottom']) -
              parseFloat(computedStyle['borderBottomWidth'])
        ]);
      }
    };

    /**
     * @param {import("./Feature.js").default} feature Feature.
     */
    PluggableMap$$1.prototype.unskipFeature = function unskipFeature (feature) {
      delete this.skippedFeatureUids_[getUid(feature)];
      this.render();
    };

    return PluggableMap$$1;
  }(BaseObject));


  /**
   * @param {MapOptions} options Map options.
   * @return {MapOptionsInternal} Internal map options.
   */
  function createOptionsInternal(options) {

    /**
     * @type {HTMLElement|Document}
     */
    var keyboardEventTarget = null;
    if (options.keyboardEventTarget !== undefined) {
      keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ?
        document.getElementById(options.keyboardEventTarget) :
        options.keyboardEventTarget;
    }

    /**
     * @type {Object<string, *>}
     */
    var values = {};

    var layerGroup = options.layers && typeof /** @type {?} */ (options.layers).getLayers === 'function' ?
      /** @type {LayerGroup} */ (options.layers) : new LayerGroup({layers: /** @type {Collection} */ (options.layers)});
    values[MapProperty.LAYERGROUP] = layerGroup;

    values[MapProperty.TARGET] = options.target;

    values[MapProperty.VIEW] = options.view !== undefined ?
      options.view : new View$1();

    var controls;
    if (options.controls !== undefined) {
      if (Array.isArray(options.controls)) {
        controls = new Collection$1(options.controls.slice());
      } else {
        assert(typeof /** @type {?} */ (options.controls).getArray === 'function',
          47); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
        controls = /** @type {Collection} */ (options.controls);
      }
    }

    var interactions;
    if (options.interactions !== undefined) {
      if (Array.isArray(options.interactions)) {
        interactions = new Collection$1(options.interactions.slice());
      } else {
        assert(typeof /** @type {?} */ (options.interactions).getArray === 'function',
          48); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
        interactions = /** @type {Collection} */ (options.interactions);
      }
    }

    var overlays;
    if (options.overlays !== undefined) {
      if (Array.isArray(options.overlays)) {
        overlays = new Collection$1(options.overlays.slice());
      } else {
        assert(typeof /** @type {?} */ (options.overlays).getArray === 'function',
          49); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
        overlays = options.overlays;
      }
    } else {
      overlays = new Collection$1();
    }

    return {
      controls: controls,
      interactions: interactions,
      keyboardEventTarget: keyboardEventTarget,
      overlays: overlays,
      values: values
    };

  }

  /**
   * @param  {Array<import("./layer/Base.js").default>} layers Layers.
   * @return {boolean} Layers have sources that are still loading.
   */
  function getLoading(layers) {
    for (var i = 0, ii = layers.length; i < ii; ++i) {
      var layer = layers[i];
      if (typeof /** @type {?} */ (layer).getLayers === 'function') {
        return getLoading(/** @type {LayerGroup} */ (layer).getLayers().getArray());
      } else {
        var source = /** @type {import("./layer/Layer.js").default} */ (
          layer).getSource();
        if (source && source.loading) {
          return true;
        }
      }
    }
    return false;
  }

  /**
   * @module ol/control/Control
   */


  /**
   * @typedef {Object} Options
   * @property {HTMLElement} [element] The element is the control's
   * container element. This only needs to be specified if you're developing
   * a custom control.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want
   * the control to be rendered outside of the map's viewport.
   */


  /**
   * @classdesc
   * A control is a visible widget with a DOM element in a fixed position on the
   * screen. They can involve user input (buttons), or be informational only;
   * the position is determined using CSS. By default these are placed in the
   * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
   * any outside DOM element.
   *
   * This is the base class for controls. You can use it for simple custom
   * controls by creating the element with listeners, creating an instance:
   * ```js
   * var myControl = new Control({element: myElement});
   * ```
   * and then adding this to the map.
   *
   * The main advantage of having this as a control rather than a simple separate
   * DOM element is that preventing propagation is handled for you. Controls
   * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
   *
   * You can also extend this base for your own control class. See
   * examples/custom-controls for an example of how to do this.
   *
   * @api
   */
  var Control = /*@__PURE__*/(function (BaseObject$$1) {
    function Control(options) {

      BaseObject$$1.call(this);

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.element = options.element ? options.element : null;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.target_ = null;

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = null;

      /**
       * @protected
       * @type {!Array<import("../events.js").EventsKey>}
       */
      this.listenerKeys = [];

      /**
       * @type {function(import("../MapEvent.js").default)}
       */
      this.render = options.render ? options.render : VOID;

      if (options.target) {
        this.setTarget(options.target);
      }

    }

    if ( BaseObject$$1 ) Control.__proto__ = BaseObject$$1;
    Control.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Control.prototype.constructor = Control;

    /**
     * @inheritDoc
     */
    Control.prototype.disposeInternal = function disposeInternal () {
      removeNode(this.element);
      BaseObject$$1.prototype.disposeInternal.call(this);
    };

    /**
     * Get the map associated with this control.
     * @return {import("../PluggableMap.js").default} Map.
     * @api
     */
    Control.prototype.getMap = function getMap () {
      return this.map_;
    };

    /**
     * Remove the control from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     * @api
     */
    Control.prototype.setMap = function setMap (map) {
      if (this.map_) {
        removeNode(this.element);
      }
      for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
        unlistenByKey(this.listenerKeys[i]);
      }
      this.listenerKeys.length = 0;
      this.map_ = map;
      if (this.map_) {
        var target = this.target_ ?
          this.target_ : map.getOverlayContainerStopEvent();
        target.appendChild(this.element);
        if (this.render !== VOID) {
          this.listenerKeys.push(listen(map,
            MapEventType.POSTRENDER, this.render, this));
        }
        map.render();
      }
    };

    /**
     * This function is used to set a target element for the control. It has no
     * effect if it is called after the control has been added to the map (i.e.
     * after `setMap` is called on the control). If no `target` is set in the
     * options passed to the control constructor and if `setTarget` is not called
     * then the control is added to the map's overlay container.
     * @param {HTMLElement|string} target Target.
     * @api
     */
    Control.prototype.setTarget = function setTarget (target) {
      this.target_ = typeof target === 'string' ?
        document.getElementById(target) :
        target;
    };

    return Control;
  }(BaseObject));

  /**
   * @module ol/css
   */


  /**
   * The CSS class for hidden feature.
   *
   * @const
   * @type {string}
   */
  var CLASS_HIDDEN = 'ol-hidden';


  /**
   * The CSS class that we'll give the DOM elements to have them selectable.
   *
   * @const
   * @type {string}
   */
  var CLASS_SELECTABLE = 'ol-selectable';


  /**
   * The CSS class that we'll give the DOM elements to have them unselectable.
   *
   * @const
   * @type {string}
   */
  var CLASS_UNSELECTABLE = 'ol-unselectable';


  /**
   * The CSS class for unsupported feature.
   *
   * @const
   * @type {string}
   */
  var CLASS_UNSUPPORTED = 'ol-unsupported';


  /**
   * The CSS class for controls.
   *
   * @const
   * @type {string}
   */
  var CLASS_CONTROL = 'ol-control';


  /**
   * The CSS class that we'll give the DOM elements that are collapsed, i.e.
   * to those elements which usually can be expanded.
   *
   * @const
   * @type {string}
   */
  var CLASS_COLLAPSED = 'ol-collapsed';


  /**
   * Get the list of font families from a font spec.  Note that this doesn't work
   * for font families that have commas in them.
   * @param {string} The CSS font property.
   * @return {Object<string>} The font families (or null if the input spec is invalid).
   */
  var getFontFamilies = (function() {
    var style;
    var cache = {};
    return function(font) {
      if (!style) {
        style = document.createElement('div').style;
      }
      if (!(font in cache)) {
        style.font = font;
        var family = style.fontFamily;
        style.font = '';
        if (!family) {
          return null;
        }
        cache[font] = family.split(/,\s?/);
      }
      return cache[font];
    };
  })();

  /**
   * @module ol/layer/Layer
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {import("../source/Source.js").default} [source] Source for this layer.  If not provided to the constructor,
   * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after
   * construction.
   * @property {import("../PluggableMap.js").default} [map] Map.
   */


  /**
   * @typedef {Object} State
   * @property {import("./Base.js").default} layer
   * @property {number} opacity
   * @property {SourceState} sourceState
   * @property {boolean} visible
   * @property {boolean} managed
   * @property {import("../extent.js").Extent} [extent]
   * @property {number} zIndex
   * @property {number} maxResolution
   * @property {number} minResolution
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * A visual representation of raster or vector map data.
   * Layers group together those properties that pertain to how the data is to be
   * displayed, irrespective of the source of that data.
   *
   * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components
   * like {@link module:ol/interaction/Select~Select} use unmanaged layers
   * internally. These unmanaged layers are associated with the map using
   * {@link module:ol/layer/Layer~Layer#setMap} instead.
   *
   * A generic `change` event is fired when the state of the source changes.
   *
   * @fires import("../render/Event.js").RenderEvent
   */
  var Layer = /*@__PURE__*/(function (BaseLayer$$1) {
    function Layer(options) {

      var baseOptions = assign({}, options);
      delete baseOptions.source;

      BaseLayer$$1.call(this, baseOptions);

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.mapPrecomposeKey_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.mapRenderKey_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.sourceChangeKey_ = null;

      if (options.map) {
        this.setMap(options.map);
      }

      listen(this,
        getChangeEventType(LayerProperty.SOURCE),
        this.handleSourcePropertyChange_, this);

      var source = options.source ? options.source : null;
      this.setSource(source);
    }

    if ( BaseLayer$$1 ) Layer.__proto__ = BaseLayer$$1;
    Layer.prototype = Object.create( BaseLayer$$1 && BaseLayer$$1.prototype );
    Layer.prototype.constructor = Layer;

    /**
     * @inheritDoc
     */
    Layer.prototype.getLayersArray = function getLayersArray (opt_array) {
      var array = opt_array ? opt_array : [];
      array.push(this);
      return array;
    };

    /**
     * @inheritDoc
     */
    Layer.prototype.getLayerStatesArray = function getLayerStatesArray (opt_states) {
      var states = opt_states ? opt_states : [];
      states.push(this.getLayerState());
      return states;
    };

    /**
     * Get the layer source.
     * @return {import("../source/Source.js").default} The layer source (or `null` if not yet set).
     * @observable
     * @api
     */
    Layer.prototype.getSource = function getSource () {
      var source = this.get(LayerProperty.SOURCE);
      return (
        /** @type {import("../source/Source.js").default} */ (source) || null
      );
    };

    /**
      * @inheritDoc
      */
    Layer.prototype.getSourceState = function getSourceState () {
      var source = this.getSource();
      return !source ? SourceState.UNDEFINED : source.getState();
    };

    /**
     * @private
     */
    Layer.prototype.handleSourceChange_ = function handleSourceChange_ () {
      this.changed();
    };

    /**
     * @private
     */
    Layer.prototype.handleSourcePropertyChange_ = function handleSourcePropertyChange_ () {
      if (this.sourceChangeKey_) {
        unlistenByKey(this.sourceChangeKey_);
        this.sourceChangeKey_ = null;
      }
      var source = this.getSource();
      if (source) {
        this.sourceChangeKey_ = listen(source,
          EventType.CHANGE, this.handleSourceChange_, this);
      }
      this.changed();
    };

    /**
     * Sets the layer to be rendered on top of other layers on a map. The map will
     * not manage this layer in its layers collection, and the callback in
     * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This
     * is useful for temporary layers. To remove an unmanaged layer from the map,
     * use `#setMap(null)`.
     *
     * To add the layer to a map and have it managed by the map, use
     * {@link module:ol/Map#addLayer} instead.
     * @param {import("../PluggableMap.js").default} map Map.
     * @api
     */
    Layer.prototype.setMap = function setMap (map) {
      if (this.mapPrecomposeKey_) {
        unlistenByKey(this.mapPrecomposeKey_);
        this.mapPrecomposeKey_ = null;
      }
      if (!map) {
        this.changed();
      }
      if (this.mapRenderKey_) {
        unlistenByKey(this.mapRenderKey_);
        this.mapRenderKey_ = null;
      }
      if (map) {
        this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function(evt) {
          var renderEvent = /** @type {import("../render/Event.js").default} */ (evt);
          var layerState = this.getLayerState();
          layerState.managed = false;
          if (this.getZIndex() === undefined) {
            layerState.zIndex = Infinity;
          }
          renderEvent.frameState.layerStatesArray.push(layerState);
          renderEvent.frameState.layerStates[getUid(this)] = layerState;
        }, this);
        this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);
        this.changed();
      }
    };

    /**
     * Set the layer source.
     * @param {import("../source/Source.js").default} source The layer source.
     * @observable
     * @api
     */
    Layer.prototype.setSource = function setSource (source) {
      this.set(LayerProperty.SOURCE, source);
    };

    return Layer;
  }(BaseLayer$1));


  /**
   * Return `true` if the layer is visible, and if the passed resolution is
   * between the layer's minResolution and maxResolution. The comparison is
   * inclusive for `minResolution` and exclusive for `maxResolution`.
   * @param {State} layerState Layer state.
   * @param {number} resolution Resolution.
   * @return {boolean} The layer is visible at the given resolution.
   */
  function visibleAtResolution(layerState, resolution) {
    return layerState.visible && resolution >= layerState.minResolution &&
        resolution < layerState.maxResolution;
  }

  /**
   * @module ol/control/Attribution
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-attribution'] CSS class name.
   * @property {HTMLElement|string} [target] Specify a target if you
   * want the control to be rendered outside of the map's
   * viewport.
   * @property {boolean} [collapsible] Specify if attributions can
   * be collapsed. If not specified, sources control this behavior with their
   * `attributionsCollapsible` setting.
   * @property {boolean} [collapsed=true] Specify if attributions should
   * be collapsed at startup.
   * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
   * @property {string} [label='i'] Text label to use for the
   * collapsed attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|HTMLElement} [collapseLabel='»'] Text label to use
   * for the expanded attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   */


  /**
   * @classdesc
   * Control to show all the attributions associated with the layer sources
   * in the map. This control is one of the default controls included in maps.
   * By default it will show in the bottom right portion of the map, but this can
   * be changed by using a css selector for `.ol-attribution`.
   *
   * @api
   */
  var Attribution = /*@__PURE__*/(function (Control$$1) {
    function Attribution(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        render: options.render || render,
        target: options.target
      });

      /**
       * @private
       * @type {HTMLElement}
       */
      this.ulElement_ = document.createElement('ul');

      /**
       * @private
       * @type {boolean}
       */
      this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;

      /**
       * @private
       * @type {boolean}
       */
      this.overrideCollapsible_ = options.collapsible !== undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.collapsible_ = options.collapsible !== undefined ?
        options.collapsible : true;

      if (!this.collapsible_) {
        this.collapsed_ = false;
      }

      var className = options.className !== undefined ? options.className : 'ol-attribution';

      var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';

      var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00BB';

      if (typeof collapseLabel === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.collapseLabel_ = document.createElement('span');
        this.collapseLabel_.textContent = collapseLabel;
      } else {
        this.collapseLabel_ = collapseLabel;
      }

      var label = options.label !== undefined ? options.label : 'i';

      if (typeof label === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.label_ = document.createElement('span');
        this.label_.textContent = label;
      } else {
        this.label_ = label;
      }


      var activeLabel = (this.collapsible_ && !this.collapsed_) ?
        this.collapseLabel_ : this.label_;
      var button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(activeLabel);

      listen(button, EventType.CLICK, this.handleClick_, this);

      var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +
          (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
          (this.collapsible_ ? '' : ' ol-uncollapsible');
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(this.ulElement_);
      element.appendChild(button);

      /**
       * A list of currently rendered resolutions.
       * @type {Array<string>}
       * @private
       */
      this.renderedAttributions_ = [];

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;

    }

    if ( Control$$1 ) Attribution.__proto__ = Control$$1;
    Attribution.prototype = Object.create( Control$$1 && Control$$1.prototype );
    Attribution.prototype.constructor = Attribution;

    /**
     * Collect a list of visible attributions and set the collapsible state.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @return {Array<string>} Attributions.
     * @private
     */
    Attribution.prototype.collectSourceAttributions_ = function collectSourceAttributions_ (frameState) {
      /**
       * Used to determine if an attribution already exists.
       * @type {!Object<string, boolean>}
       */
      var lookup = {};

      /**
       * A list of visible attributions.
       * @type {Array<string>}
       */
      var visibleAttributions = [];

      var layerStatesArray = frameState.layerStatesArray;
      var resolution = frameState.viewState.resolution;
      for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        var layerState = layerStatesArray[i];
        if (!visibleAtResolution(layerState, resolution)) {
          continue;
        }

        var source = /** @type {import("../layer/Layer.js").default} */ (layerState.layer).getSource();
        if (!source) {
          continue;
        }

        var attributionGetter = source.getAttributions();
        if (!attributionGetter) {
          continue;
        }

        var attributions = attributionGetter(frameState);
        if (!attributions) {
          continue;
        }

        if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {
          this.setCollapsible(false);
        }

        if (Array.isArray(attributions)) {
          for (var j = 0, jj = attributions.length; j < jj; ++j) {
            if (!(attributions[j] in lookup)) {
              visibleAttributions.push(attributions[j]);
              lookup[attributions[j]] = true;
            }
          }
        } else {
          if (!(attributions in lookup)) {
            visibleAttributions.push(attributions);
            lookup[attributions] = true;
          }
        }
      }
      return visibleAttributions;
    };

    /**
     * @private
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    Attribution.prototype.updateElement_ = function updateElement_ (frameState) {
      if (!frameState) {
        if (this.renderedVisible_) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      var attributions = this.collectSourceAttributions_(frameState);

      var visible = attributions.length > 0;
      if (this.renderedVisible_ != visible) {
        this.element.style.display = visible ? '' : 'none';
        this.renderedVisible_ = visible;
      }

      if (equals(attributions, this.renderedAttributions_)) {
        return;
      }

      removeChildren(this.ulElement_);

      // append the attributions
      for (var i = 0, ii = attributions.length; i < ii; ++i) {
        var element = document.createElement('li');
        element.innerHTML = attributions[i];
        this.ulElement_.appendChild(element);
      }

      this.renderedAttributions_ = attributions;
    };

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    Attribution.prototype.handleClick_ = function handleClick_ (event) {
      event.preventDefault();
      this.handleToggle_();
    };

    /**
     * @private
     */
    Attribution.prototype.handleToggle_ = function handleToggle_ () {
      this.element.classList.toggle(CLASS_COLLAPSED);
      if (this.collapsed_) {
        replaceNode(this.collapseLabel_, this.label_);
      } else {
        replaceNode(this.label_, this.collapseLabel_);
      }
      this.collapsed_ = !this.collapsed_;
    };

    /**
     * Return `true` if the attribution is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */
    Attribution.prototype.getCollapsible = function getCollapsible () {
      return this.collapsible_;
    };

    /**
     * Set whether the attribution should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */
    Attribution.prototype.setCollapsible = function setCollapsible (collapsible) {
      if (this.collapsible_ === collapsible) {
        return;
      }
      this.collapsible_ = collapsible;
      this.element.classList.toggle('ol-uncollapsible');
      if (!collapsible && this.collapsed_) {
        this.handleToggle_();
      }
    };

    /**
     * Collapse or expand the attribution according to the passed parameter. Will
     * not do anything if the attribution isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */
    Attribution.prototype.setCollapsed = function setCollapsed (collapsed) {
      if (!this.collapsible_ || this.collapsed_ === collapsed) {
        return;
      }
      this.handleToggle_();
    };

    /**
     * Return `true` when the attribution is currently collapsed or `false`
     * otherwise.
     * @return {boolean} True if the widget is collapsed.
     * @api
     */
    Attribution.prototype.getCollapsed = function getCollapsed () {
      return this.collapsed_;
    };

    return Attribution;
  }(Control));


  /**
   * Update the attribution element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {Attribution}
   * @api
   */
  function render(mapEvent) {
    this.updateElement_(mapEvent.frameState);
  }

  /**
   * @module ol/control/Rotate
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-rotate'] CSS class name.
   * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control should
   * be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {function()} [resetNorth] Function called when the control is clicked.
   * This will override the default `resetNorth`.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */


  /**
   * @classdesc
   * A button control to reset rotation to 0.
   * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
   * selector is added to the button when the rotation is 0.
   *
   * @api
   */
  var Rotate = /*@__PURE__*/(function (Control$$1) {
    function Rotate(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        render: options.render || render$1,
        target: options.target
      });

      var className = options.className !== undefined ? options.className : 'ol-rotate';

      var label = options.label !== undefined ? options.label : '\u21E7';

      /**
       * @type {HTMLElement}
       * @private
       */
      this.label_ = null;

      if (typeof label === 'string') {
        this.label_ = document.createElement('span');
        this.label_.className = 'ol-compass';
        this.label_.textContent = label;
      } else {
        this.label_ = label;
        this.label_.classList.add('ol-compass');
      }

      var tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';

      var button = document.createElement('button');
      button.className = className + '-reset';
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(this.label_);

      listen(button, EventType.CLICK, this.handleClick_, this);

      var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(button);

      this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

      /**
       * @type {boolean}
       * @private
       */
      this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = undefined;

      if (this.autoHide_) {
        this.element.classList.add(CLASS_HIDDEN);
      }

    }

    if ( Control$$1 ) Rotate.__proto__ = Control$$1;
    Rotate.prototype = Object.create( Control$$1 && Control$$1.prototype );
    Rotate.prototype.constructor = Rotate;

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    Rotate.prototype.handleClick_ = function handleClick_ (event) {
      event.preventDefault();
      if (this.callResetNorth_ !== undefined) {
        this.callResetNorth_();
      } else {
        this.resetNorth_();
      }
    };

    /**
     * @private
     */
    Rotate.prototype.resetNorth_ = function resetNorth_ () {
      var map = this.getMap();
      var view = map.getView();
      if (!view) {
        // the map does not have a view, so we can't act
        // upon it
        return;
      }
      if (view.getRotation() !== undefined) {
        if (this.duration_ > 0) {
          view.animate({
            rotation: 0,
            duration: this.duration_,
            easing: easeOut
          });
        } else {
          view.setRotation(0);
        }
      }
    };

    return Rotate;
  }(Control));


  /**
   * Update the rotate control element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {Rotate}
   * @api
   */
  function render$1(mapEvent) {
    var frameState = mapEvent.frameState;
    if (!frameState) {
      return;
    }
    var rotation = frameState.viewState.rotation;
    if (rotation != this.rotation_) {
      var transform = 'rotate(' + rotation + 'rad)';
      if (this.autoHide_) {
        var contains = this.element.classList.contains(CLASS_HIDDEN);
        if (!contains && rotation === 0) {
          this.element.classList.add(CLASS_HIDDEN);
        } else if (contains && rotation !== 0) {
          this.element.classList.remove(CLASS_HIDDEN);
        }
      }
      this.label_.style.msTransform = transform;
      this.label_.style.webkitTransform = transform;
      this.label_.style.transform = transform;
    }
    this.rotation_ = rotation;
  }

  /**
   * @module ol/control/Zoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {string} [className='ol-zoom'] CSS class name.
   * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
   * button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|HTMLElement} [zoomOutLabel='-'] Text label to use for the zoom-out button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
   * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
   * @property {number} [delta=1] The zoom delta applied on each click.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */


  /**
   * @classdesc
   * A control with 2 buttons, one for zoom in and one for zoom out.
   * This control is one of the default controls of a map. To style this control
   * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
   *
   * @api
   */
  var Zoom = /*@__PURE__*/(function (Control$$1) {
    function Zoom(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        target: options.target
      });

      var className = options.className !== undefined ? options.className : 'ol-zoom';

      var delta = options.delta !== undefined ? options.delta : 1;

      var zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
      var zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2212';

      var zoomInTipLabel = options.zoomInTipLabel !== undefined ?
        options.zoomInTipLabel : 'Zoom in';
      var zoomOutTipLabel = options.zoomOutTipLabel !== undefined ?
        options.zoomOutTipLabel : 'Zoom out';

      var inElement = document.createElement('button');
      inElement.className = className + '-in';
      inElement.setAttribute('type', 'button');
      inElement.title = zoomInTipLabel;
      inElement.appendChild(
        typeof zoomInLabel === 'string' ? document.createTextNode(zoomInLabel) : zoomInLabel
      );

      listen(inElement, EventType.CLICK, this.handleClick_.bind(this, delta));

      var outElement = document.createElement('button');
      outElement.className = className + '-out';
      outElement.setAttribute('type', 'button');
      outElement.title = zoomOutTipLabel;
      outElement.appendChild(
        typeof zoomOutLabel === 'string' ? document.createTextNode(zoomOutLabel) : zoomOutLabel
      );

      listen(outElement, EventType.CLICK, this.handleClick_.bind(this, -delta));

      var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(inElement);
      element.appendChild(outElement);

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    if ( Control$$1 ) Zoom.__proto__ = Control$$1;
    Zoom.prototype = Object.create( Control$$1 && Control$$1.prototype );
    Zoom.prototype.constructor = Zoom;

    /**
     * @param {number} delta Zoom delta.
     * @param {MouseEvent} event The event to handle
     * @private
     */
    Zoom.prototype.handleClick_ = function handleClick_ (delta, event) {
      event.preventDefault();
      this.zoomByDelta_(delta);
    };

    /**
     * @param {number} delta Zoom delta.
     * @private
     */
    Zoom.prototype.zoomByDelta_ = function zoomByDelta_ (delta) {
      var map = this.getMap();
      var view = map.getView();
      if (!view) {
        // the map does not have a view, so we can't act
        // upon it
        return;
      }
      var currentResolution = view.getResolution();
      if (currentResolution) {
        var newResolution = view.constrainResolution(currentResolution, delta);
        if (this.duration_ > 0) {
          if (view.getAnimating()) {
            view.cancelAnimations();
          }
          view.animate({
            resolution: newResolution,
            duration: this.duration_,
            easing: easeOut
          });
        } else {
          view.setResolution(newResolution);
        }
      }
    };

    return Zoom;
  }(Control));

  /**
   * @module ol/control/util
   */


  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [attribution=true] Include
   * {@link module:ol/control/Attribution~Attribution}.
   * @property {import("./Attribution.js").Options} [attributionOptions]
   * Options for {@link module:ol/control/Attribution~Attribution}.
   * @property {boolean} [rotate=true] Include
   * {@link module:ol/control/Rotate~Rotate}.
   * @property {import("./Rotate.js").Options} [rotateOptions] Options
   * for {@link module:ol/control/Rotate~Rotate}.
   * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
   * @property {import("./Zoom.js").Options} [zoomOptions] Options for
   * {@link module:ol/control/Zoom~Zoom}.
   * @api
   */


  /**
   * Set of controls included in maps by default. Unless configured otherwise,
   * this returns a collection containing an instance of each of the following
   * controls:
   * * {@link module:ol/control/Zoom~Zoom}
   * * {@link module:ol/control/Rotate~Rotate}
   * * {@link module:ol/control/Attribution~Attribution}
   *
   * @param {DefaultsOptions=} opt_options
   * Defaults options.
   * @return {Collection<import("./Control.js").default>}
   * Controls.
   * @function module:ol/control.defaults
   * @api
   */
  function defaults(opt_options) {

    var options = opt_options ? opt_options : {};

    var controls = new Collection$1();

    var zoomControl = options.zoom !== undefined ? options.zoom : true;
    if (zoomControl) {
      controls.push(new Zoom(options.zoomOptions));
    }

    var rotateControl = options.rotate !== undefined ? options.rotate : true;
    if (rotateControl) {
      controls.push(new Rotate(options.rotateOptions));
    }

    var attributionControl = options.attribution !== undefined ?
      options.attribution : true;
    if (attributionControl) {
      controls.push(new Attribution(options.attributionOptions));
    }

    return controls;
  }

  /**
   * @module ol/interaction/Property
   */

  /**
   * @enum {string}
   */
  var InteractionProperty = {
    ACTIVE: 'active'
  };

  /**
   * @module ol/interaction/Interaction
   */


  /**
   * Object literal with config options for interactions.
   * @typedef {Object} InteractionOptions
   * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. If the function returns a falsy value, propagation of
   * the event to other interactions in the map's interactions chain will be
   * prevented (this includes functions with no explicit return).
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * User actions that change the state of the map. Some are similar to controls,
   * but are not associated with a DOM element.
   * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
   * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
   * by a keyboard event not a button element event.
   * Although interactions do not have a DOM element, some of them do render
   * vectors and so are visible on the screen.
   * @api
   */
  var Interaction$1 = /*@__PURE__*/(function (BaseObject$$1) {
    function Interaction$$1(options) {
      BaseObject$$1.call(this);

      if (options.handleEvent) {
        this.handleEvent = options.handleEvent;
      }

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = null;

      this.setActive(true);
    }

    if ( BaseObject$$1 ) Interaction$$1.__proto__ = BaseObject$$1;
    Interaction$$1.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Interaction$$1.prototype.constructor = Interaction$$1;

    /**
     * Return whether the interaction is currently active.
     * @return {boolean} `true` if the interaction is active, `false` otherwise.
     * @observable
     * @api
     */
    Interaction$$1.prototype.getActive = function getActive () {
      return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));
    };

    /**
     * Get the map associated with this interaction.
     * @return {import("../PluggableMap.js").default} Map.
     * @api
     */
    Interaction$$1.prototype.getMap = function getMap () {
      return this.map_;
    };

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event}.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     */
    Interaction$$1.prototype.handleEvent = function handleEvent (mapBrowserEvent) {
      return true;
    };

    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     */
    Interaction$$1.prototype.setActive = function setActive (active) {
      this.set(InteractionProperty.ACTIVE, active);
    };

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     */
    Interaction$$1.prototype.setMap = function setMap (map) {
      this.map_ = map;
    };

    return Interaction$$1;
  }(BaseObject));


  /**
   * @param {import("../View.js").default} view View.
   * @param {import("../coordinate.js").Coordinate} delta Delta.
   * @param {number=} opt_duration Duration.
   */
  function pan(view, delta, opt_duration) {
    var currentCenter = view.getCenter();
    if (currentCenter) {
      var center = view.constrainCenter(
        [currentCenter[0] + delta[0], currentCenter[1] + delta[1]]);
      if (opt_duration) {
        view.animate({
          duration: opt_duration,
          easing: linear,
          center: center
        });
      } else {
        view.setCenter(center);
      }
    }
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {number|undefined} rotation Rotation.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   */
  function rotate$3(view, rotation, opt_anchor, opt_duration) {
    rotation = view.constrainRotation(rotation, 0);
    rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration);
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {number|undefined} rotation Rotation.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   */
  function rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration) {
    if (rotation !== undefined) {
      var currentRotation = view.getRotation();
      var currentCenter = view.getCenter();
      if (currentRotation !== undefined && currentCenter && opt_duration > 0) {
        view.animate({
          rotation: rotation,
          anchor: opt_anchor,
          duration: opt_duration,
          easing: easeOut
        });
      } else {
        view.rotate(rotation, opt_anchor);
      }
    }
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {number|undefined} resolution Resolution to go to.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   * @param {number=} opt_direction Zooming direction; > 0 indicates
   *     zooming out, in which case the constraints system will select
   *     the largest nearest resolution; < 0 indicates zooming in, in
   *     which case the constraints system will select the smallest
   *     nearest resolution; == 0 indicates that the zooming direction
   *     is unknown/not relevant, in which case the constraints system
   *     will select the nearest resolution. If not defined 0 is
   *     assumed.
   */
  function zoom(view, resolution, opt_anchor, opt_duration, opt_direction) {
    resolution = view.constrainResolution(resolution, 0, opt_direction);
    zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {number} delta Delta from previous zoom level.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   */
  function zoomByDelta(view, delta, opt_anchor, opt_duration) {
    var currentResolution = view.getResolution();
    var resolution = view.constrainResolution(currentResolution, delta, 0);

    if (resolution !== undefined) {
      var resolutions = view.getResolutions();
      resolution = clamp(
        resolution,
        view.getMinResolution() || resolutions[resolutions.length - 1],
        view.getMaxResolution() || resolutions[0]);
    }

    // If we have a constraint on center, we need to change the anchor so that the
    // new center is within the extent. We first calculate the new center, apply
    // the constraint to it, and then calculate back the anchor
    if (opt_anchor && resolution !== undefined && resolution !== currentResolution) {
      var currentCenter = view.getCenter();
      var center = view.calculateCenterZoom(resolution, opt_anchor);
      center = view.constrainCenter(center);

      opt_anchor = [
        (resolution * currentCenter[0] - currentResolution * center[0]) /
            (resolution - currentResolution),
        (resolution * currentCenter[1] - currentResolution * center[1]) /
            (resolution - currentResolution)
      ];
    }

    zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {number|undefined} resolution Resolution to go to.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   */
  function zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration) {
    if (resolution) {
      var currentResolution = view.getResolution();
      var currentCenter = view.getCenter();
      if (currentResolution !== undefined && currentCenter &&
          resolution !== currentResolution && opt_duration) {
        view.animate({
          resolution: resolution,
          anchor: opt_anchor,
          duration: opt_duration,
          easing: easeOut
        });
      } else {
        if (opt_anchor) {
          var center = view.calculateCenterZoom(resolution, opt_anchor);
          view.setCenter(center);
        }
        view.setResolution(resolution);
      }
    }
  }

  /**
   * @module ol/interaction/DoubleClickZoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [delta=1] The zoom delta applied on each double click.
   */


  /**
   * @classdesc
   * Allows the user to zoom by double-clicking on the map.
   * @api
   */
  var DoubleClickZoom = /*@__PURE__*/(function (Interaction$$1) {
    function DoubleClickZoom(opt_options) {
      Interaction$$1.call(this, {
        handleEvent: handleEvent
      });

      var options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {number}
       */
      this.delta_ = options.delta ? options.delta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    if ( Interaction$$1 ) DoubleClickZoom.__proto__ = Interaction$$1;
    DoubleClickZoom.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    DoubleClickZoom.prototype.constructor = DoubleClickZoom;

    return DoubleClickZoom;
  }(Interaction$1));


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a
   * doubleclick) and eventually zooms the map.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {DoubleClickZoom}
   */
  function handleEvent(mapBrowserEvent) {
    var stopEvent = false;
    if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {
      var browserEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
      var map = mapBrowserEvent.map;
      var anchor = mapBrowserEvent.coordinate;
      var delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
      var view = map.getView();
      zoomByDelta(view, delta, anchor, this.duration_);
      mapBrowserEvent.preventDefault();
      stopEvent = true;
    }
    return !stopEvent;
  }

  /**
   * @module ol/events/condition
   */


  /**
   * A function that takes an {@link module:ol/MapBrowserEvent} and returns a
   * `{boolean}`. If the condition is met, true should be returned.
   *
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default): boolean} Condition
   */


  /**
   * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when
   * additionally the shift-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt key is pressed.
   * @api
   */
  var altKeyOnly = function(mapBrowserEvent) {
    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        !originalEvent.shiftKey);
  };


  /**
   * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
   * (e.g. when additionally the platform-modifier-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt and shift keys are pressed.
   * @api
   */
  var altShiftKeysOnly = function(mapBrowserEvent) {
    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        originalEvent.shiftKey);
  };


  /**
   * Return `true` if the map has the focus. This condition requires a map target
   * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
   *
   * @param {import("../MapBrowserEvent.js").default} event Map browser event.
   * @return {boolean} The map has the focus.
   * @api
   */
  var focus = function(event) {
    return event.target.getTargetElement() === document.activeElement;
  };


  /**
   * Return always true.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True.
   * @api
   */
  var always = TRUE;


  /**
   * Return `true` if the event has an "action"-producing mouse button.
   *
   * By definition, this includes left-click on windows/linux, and left-click
   * without the ctrl key on Macs.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} The result.
   */
  var mouseActionButton = function(mapBrowserEvent) {
    var originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
    return originalEvent.button == 0 &&
        !(WEBKIT && MAC && originalEvent.ctrlKey);
  };


  /**
   * Return always false.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} False.
   * @api
   */
  var never = FALSE;


  /**
   * Return `true` if the browser event is a `pointermove` event, `false`
   * otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the browser event is a `pointermove` event.
   * @api
   */
  var pointerMove$1 = function(mapBrowserEvent) {
    return mapBrowserEvent.type == 'pointermove';
  };


  /**
   * Return `true` if the event is a map `singleclick` event, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event is a map `singleclick` event.
   * @api
   */
  var singleClick = function(mapBrowserEvent) {
    return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;
  };


  /**
   * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
   * pressed.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if there no modifier keys are pressed.
   * @api
   */
  var noModifierKeys = function(mapBrowserEvent) {
    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      !originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        !originalEvent.shiftKey);
  };


  /**
   * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
   * additionally the alt-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the shift key is pressed.
   * @api
   */
  var shiftKeyOnly = function(mapBrowserEvent) {
    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      !originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        originalEvent.shiftKey);
  };


  /**
   * Return `true` if the target element is not editable, i.e. not a `<input>`-,
   * `<select>`- or `<textarea>`-element, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if the target element is not editable.
   * @api
   */
  var targetNotEditable = function(mapBrowserEvent) {
    var target = mapBrowserEvent.originalEvent.target;
    var tagName = /** @type {Element} */ (target).tagName;
    return (
      tagName !== 'INPUT' &&
        tagName !== 'SELECT' &&
        tagName !== 'TEXTAREA');
  };


  /**
   * Return `true` if the event originates from a mouse device.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a mouse device.
   * @api
   */
  var mouseOnly = function(mapBrowserEvent) {
    var pointerEvent = /** @type {import("../MapBrowserPointerEvent").default} */ (mapBrowserEvent).pointerEvent;
    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvent.pointerType == 'mouse';
  };


  /**
   * Return `true` if the event originates from a primary pointer in
   * contact with the surface or if the left mouse button is pressed.
   * See http://www.w3.org/TR/pointerevents/#button-states.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a primary pointer.
   * @api
   */
  var primaryAction = function(mapBrowserEvent) {
    var pointerEvent = /** @type {import("../MapBrowserPointerEvent").default} */ (mapBrowserEvent).pointerEvent;
    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    return pointerEvent.isPrimary && pointerEvent.button === 0;
  };

  /**
   * @module ol/interaction/Pointer
   */


  /**
   * @typedef {Object} Options
   * @property {function(import("../MapBrowserPointerEvent.js").default):boolean} [handleDownEvent]
   * Function handling "down" events. If the function returns `true` then a drag
   * sequence is started.
   * @property {function(import("../MapBrowserPointerEvent.js").default)} [handleDragEvent]
   * Function handling "drag" events. This function is called on "move" events
   * during a drag sequence.
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. The function may return `false` to prevent the
   * propagation of the event to other interactions in the map's interactions
   * chain.
   * @property {function(import("../MapBrowserPointerEvent.js").default)} [handleMoveEvent]
   * Function handling "move" events. This function is called on "move" events,
   * also during a drag sequence (so during a drag sequence both the
   * `handleDragEvent` function and this function are called).
   * @property {function(import("../MapBrowserPointerEvent.js").default):boolean} [handleUpEvent]
   *  Function handling "up" events. If the function returns `false` then the
   * current drag sequence is stopped.
   * @property {function(boolean):boolean} [stopDown]
   * Should the down event be propagated to other interactions, or should be
   * stopped?
   */


  /**
   * @classdesc
   * Base class that calls user-defined functions on `down`, `move` and `up`
   * events. This class also manages "drag sequences".
   *
   * When the `handleDownEvent` user function returns `true` a drag sequence is
   * started. During a drag sequence the `handleDragEvent` user function is
   * called on `move` events. The drag sequence ends when the `handleUpEvent`
   * user function is called and returns `false`.
   * @api
   */
  var PointerInteraction = /*@__PURE__*/(function (Interaction$$1) {
    function PointerInteraction(opt_options) {

      var options = opt_options ? opt_options : {};

      Interaction$$1.call(/** @type {import("./Interaction.js").InteractionOptions} */ this, (options));

      if (options.handleDownEvent) {
        this.handleDownEvent = options.handleDownEvent;
      }

      if (options.handleDragEvent) {
        this.handleDragEvent = options.handleDragEvent;
      }

      if (options.handleMoveEvent) {
        this.handleMoveEvent = options.handleMoveEvent;
      }

      if (options.handleUpEvent) {
        this.handleUpEvent = options.handleUpEvent;
      }

      if (options.stopDown) {
        this.stopDown = options.stopDown;
      }

      /**
       * @type {boolean}
       * @protected
       */
      this.handlingDownUpSequence = false;

      /**
       * @type {!Object<string, import("../pointer/PointerEvent.js").default>}
       * @private
       */
      this.trackedPointers_ = {};

      /**
       * @type {Array<import("../pointer/PointerEvent.js").default>}
       * @protected
       */
      this.targetPointers = [];

    }

    if ( Interaction$$1 ) PointerInteraction.__proto__ = Interaction$$1;
    PointerInteraction.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    PointerInteraction.prototype.constructor = PointerInteraction;

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */
    PointerInteraction.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      return false;
    };

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @protected
     */
    PointerInteraction.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {};

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into
     * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
     * detected.
     * @override
     * @api
     */
    PointerInteraction.prototype.handleEvent = function handleEvent (mapBrowserEvent) {
      if (!(/** @type {import("../MapBrowserPointerEvent.js").default} */ (mapBrowserEvent).pointerEvent)) {
        return true;
      }

      var stopEvent = false;
      this.updateTrackedPointers_(mapBrowserEvent);
      if (this.handlingDownUpSequence) {
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {
          this.handleDragEvent(mapBrowserEvent);
        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
          var handledUp = this.handleUpEvent(mapBrowserEvent);
          this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;
        }
      } else {
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
          var handled = this.handleDownEvent(mapBrowserEvent);
          if (handled) {
            mapBrowserEvent.preventDefault();
          }
          this.handlingDownUpSequence = handled;
          stopEvent = this.stopDown(handled);
        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {
          this.handleMoveEvent(mapBrowserEvent);
        }
      }
      return !stopEvent;
    };

    /**
     * Handle pointer move events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @protected
     */
    PointerInteraction.prototype.handleMoveEvent = function handleMoveEvent (mapBrowserEvent) {};

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */
    PointerInteraction.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      return false;
    };

    /**
     * This function is used to determine if "down" events should be propagated
     * to other interactions or should be stopped.
     * @param {boolean} handled Was the event handled by the interaction?
     * @return {boolean} Should the `down` event be stopped?
     */
    PointerInteraction.prototype.stopDown = function stopDown (handled) {
      return handled;
    };

    /**
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @private
     */
    PointerInteraction.prototype.updateTrackedPointers_ = function updateTrackedPointers_ (mapBrowserEvent) {
      if (isPointerDraggingEvent(mapBrowserEvent)) {
        var event = mapBrowserEvent.pointerEvent;

        var id = event.pointerId.toString();
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
          delete this.trackedPointers_[id];
        } else if (mapBrowserEvent.type ==
            MapBrowserEventType.POINTERDOWN) {
          this.trackedPointers_[id] = event;
        } else if (id in this.trackedPointers_) {
          // update only when there was a pointerdown event for this pointer
          this.trackedPointers_[id] = event;
        }
        this.targetPointers = getValues(this.trackedPointers_);
      }
    };

    return PointerInteraction;
  }(Interaction$1));


  /**
   * @param {Array<import("../pointer/PointerEvent.js").default>} pointerEvents List of events.
   * @return {import("../pixel.js").Pixel} Centroid pixel.
   */
  function centroid(pointerEvents) {
    var length = pointerEvents.length;
    var clientX = 0;
    var clientY = 0;
    for (var i = 0; i < length; i++) {
      clientX += pointerEvents[i].clientX;
      clientY += pointerEvents[i].clientY;
    }
    return [clientX / length, clientY / length];
  }


  /**
   * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} Whether the event is a pointerdown, pointerdrag
   *     or pointerup event.
   */
  function isPointerDraggingEvent(mapBrowserEvent) {
    var type = mapBrowserEvent.type;
    return type === MapBrowserEventType.POINTERDOWN ||
      type === MapBrowserEventType.POINTERDRAG ||
      type === MapBrowserEventType.POINTERUP;
  }

  /**
   * @module ol/interaction/DragPan
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~noModifierKeys}.
   * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
   */


  /**
   * @classdesc
   * Allows the user to pan the map by dragging the map.
   * @api
   */
  var DragPan = /*@__PURE__*/(function (PointerInteraction$$1) {
    function DragPan(opt_options) {

      PointerInteraction$$1.call(this, {
        stopDown: FALSE
      });

      var options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {import("../Kinetic.js").default|undefined}
       */
      this.kinetic_ = options.kinetic;

      /**
       * @type {import("../pixel.js").Pixel}
       */
      this.lastCentroid = null;

      /**
       * @type {number}
       */
      this.lastPointersCount_;

      /**
       * @type {boolean}
       */
      this.panning_ = false;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : noModifierKeys;

      /**
       * @private
       * @type {boolean}
       */
      this.noKinetic_ = false;

    }

    if ( PointerInteraction$$1 ) DragPan.__proto__ = PointerInteraction$$1;
    DragPan.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    DragPan.prototype.constructor = DragPan;

    /**
     * @inheritDoc
     */
    DragPan.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      if (!this.panning_) {
        this.panning_ = true;
        this.getMap().getView().setHint(ViewHint.INTERACTING, 1);
      }
      var targetPointers = this.targetPointers;
      var centroid$$1 = centroid(targetPointers);
      if (targetPointers.length == this.lastPointersCount_) {
        if (this.kinetic_) {
          this.kinetic_.update(centroid$$1[0], centroid$$1[1]);
        }
        if (this.lastCentroid) {
          var deltaX = this.lastCentroid[0] - centroid$$1[0];
          var deltaY = centroid$$1[1] - this.lastCentroid[1];
          var map = mapBrowserEvent.map;
          var view = map.getView();
          var center = [deltaX, deltaY];
          scale$2(center, view.getResolution());
          rotate$2(center, view.getRotation());
          add$2(center, view.getCenter());
          center = view.constrainCenter(center);
          view.setCenter(center);
        }
      } else if (this.kinetic_) {
        // reset so we don't overestimate the kinetic energy after
        // after one finger down, tiny drag, second finger down
        this.kinetic_.begin();
      }
      this.lastCentroid = centroid$$1;
      this.lastPointersCount_ = targetPointers.length;
    };

    /**
     * @inheritDoc
     */
    DragPan.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      var map = mapBrowserEvent.map;
      var view = map.getView();
      if (this.targetPointers.length === 0) {
        if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
          var distance = this.kinetic_.getDistance();
          var angle = this.kinetic_.getAngle();
          var center = /** @type {!import("../coordinate.js").Coordinate} */ (view.getCenter());
          var centerpx = map.getPixelFromCoordinate(center);
          var dest = map.getCoordinateFromPixel([
            centerpx[0] - distance * Math.cos(angle),
            centerpx[1] - distance * Math.sin(angle)
          ]);
          view.animate({
            center: view.constrainCenter(dest),
            duration: 500,
            easing: easeOut
          });
        }
        if (this.panning_) {
          this.panning_ = false;
          view.setHint(ViewHint.INTERACTING, -1);
        }
        return false;
      } else {
        if (this.kinetic_) {
          // reset so we don't overestimate the kinetic energy after
          // after one finger up, tiny drag, second finger up
          this.kinetic_.begin();
        }
        this.lastCentroid = null;
        return true;
      }
    };

    /**
     * @inheritDoc
     */
    DragPan.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
        var map = mapBrowserEvent.map;
        var view = map.getView();
        this.lastCentroid = null;
        // stop any current animation
        if (view.getAnimating()) {
          view.setCenter(mapBrowserEvent.frameState.viewState.center);
        }
        if (this.kinetic_) {
          this.kinetic_.begin();
        }
        // No kinetic as soon as more than one pointer on the screen is
        // detected. This is to prevent nasty pans after pinch.
        this.noKinetic_ = this.targetPointers.length > 1;
        return true;
      } else {
        return false;
      }
    };

    return DragPan;
  }(PointerInteraction));

  /**
   * @module ol/interaction/DragRotate
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an
   * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~altShiftKeysOnly}.
   * @property {number} [duration=250] Animation duration in milliseconds.
   */


  /**
   * @classdesc
   * Allows the user to rotate the map by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when the alt and shift keys are held down.
   *
   * This interaction is only supported for mouse devices.
   * @api
   */
  var DragRotate = /*@__PURE__*/(function (PointerInteraction$$1) {
    function DragRotate(opt_options) {

      var options = opt_options ? opt_options : {};

      PointerInteraction$$1.call(this, {
        stopDown: FALSE
      });

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : altShiftKeysOnly;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    if ( PointerInteraction$$1 ) DragRotate.__proto__ = PointerInteraction$$1;
    DragRotate.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    DragRotate.prototype.constructor = DragRotate;

    /**
     * @inheritDoc
     */
    DragRotate.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      var map = mapBrowserEvent.map;
      var view = map.getView();
      if (view.getConstraints().rotation === disable) {
        return;
      }
      var size$$1 = map.getSize();
      var offset = mapBrowserEvent.pixel;
      var theta =
          Math.atan2(size$$1[1] / 2 - offset[1], offset[0] - size$$1[0] / 2);
      if (this.lastAngle_ !== undefined) {
        var delta = theta - this.lastAngle_;
        var rotation = view.getRotation();
        rotateWithoutConstraints(view, rotation - delta);
      }
      this.lastAngle_ = theta;
    };


    /**
     * @inheritDoc
     */
    DragRotate.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      var map = mapBrowserEvent.map;
      var view = map.getView();
      view.setHint(ViewHint.INTERACTING, -1);
      var rotation = view.getRotation();
      rotate$3(view, rotation, undefined, this.duration_);
      return false;
    };


    /**
     * @inheritDoc
     */
    DragRotate.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {
        var map = mapBrowserEvent.map;
        map.getView().setHint(ViewHint.INTERACTING, 1);
        this.lastAngle_ = undefined;
        return true;
      } else {
        return false;
      }
    };

    return DragRotate;
  }(PointerInteraction));

  /**
   * @module ol/render/Box
   */

  var RenderBox = /*@__PURE__*/(function (Disposable$$1) {
    function RenderBox(className) {
      Disposable$$1.call(this);

      /**
       * @type {import("../geom/Polygon.js").default}
       * @private
       */
      this.geometry_ = null;

      /**
       * @type {HTMLDivElement}
       * @private
       */
      this.element_ = /** @type {HTMLDivElement} */ (document.createElement('div'));
      this.element_.style.position = 'absolute';
      this.element_.className = 'ol-box ' + className;

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.startPixel_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.endPixel_ = null;

    }

    if ( Disposable$$1 ) RenderBox.__proto__ = Disposable$$1;
    RenderBox.prototype = Object.create( Disposable$$1 && Disposable$$1.prototype );
    RenderBox.prototype.constructor = RenderBox;

    /**
     * @inheritDoc
     */
    RenderBox.prototype.disposeInternal = function disposeInternal () {
      this.setMap(null);
    };

    /**
     * @private
     */
    RenderBox.prototype.render_ = function render_ () {
      var startPixel = this.startPixel_;
      var endPixel = this.endPixel_;
      var px = 'px';
      var style = this.element_.style;
      style.left = Math.min(startPixel[0], endPixel[0]) + px;
      style.top = Math.min(startPixel[1], endPixel[1]) + px;
      style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
      style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
    };

    /**
     * @param {import("../PluggableMap.js").default} map Map.
     */
    RenderBox.prototype.setMap = function setMap (map) {
      if (this.map_) {
        this.map_.getOverlayContainer().removeChild(this.element_);
        var style = this.element_.style;
        style.left = style.top = style.width = style.height = 'inherit';
      }
      this.map_ = map;
      if (this.map_) {
        this.map_.getOverlayContainer().appendChild(this.element_);
      }
    };

    /**
     * @param {import("../pixel.js").Pixel} startPixel Start pixel.
     * @param {import("../pixel.js").Pixel} endPixel End pixel.
     */
    RenderBox.prototype.setPixels = function setPixels (startPixel, endPixel) {
      this.startPixel_ = startPixel;
      this.endPixel_ = endPixel;
      this.createOrUpdateGeometry();
      this.render_();
    };

    /**
     * Creates or updates the cached geometry.
     */
    RenderBox.prototype.createOrUpdateGeometry = function createOrUpdateGeometry () {
      var startPixel = this.startPixel_;
      var endPixel = this.endPixel_;
      var pixels = [
        startPixel,
        [startPixel[0], endPixel[1]],
        endPixel,
        [endPixel[0], startPixel[1]]
      ];
      var coordinates = pixels.map(this.map_.getCoordinateFromPixel, this.map_);
      // close the polygon
      coordinates[4] = coordinates[0].slice();
      if (!this.geometry_) {
        this.geometry_ = new Polygon$1([coordinates]);
      } else {
        this.geometry_.setCoordinates([coordinates]);
      }
    };

    /**
     * @return {import("../geom/Polygon.js").default} Geometry.
     */
    RenderBox.prototype.getGeometry = function getGeometry () {
      return this.geometry_;
    };

    return RenderBox;
  }(Disposable));

  /**
   * @module ol/interaction/DragBox
   */


  /**
   * A function that takes a {@link module:ol/MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
   * true should be returned.
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link ol/events/condition~always}.
   * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
   * `boxEndCondition` function.
   * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
   * Default is `true` if the area of the box is bigger than the `minArea` option.
   * @property {function(this:DragBox, import("../MapBrowserEvent.js").default)} onBoxEnd Code to execute just
   * before `boxend` is fired.
   */


  /**
   * @enum {string}
   */
  var DragBoxEventType = {
    /**
     * Triggered upon drag box start.
     * @event DragBoxEvent#boxstart
     * @api
     */
    BOXSTART: 'boxstart',

    /**
     * Triggered on drag when box is active.
     * @event DragBoxEvent#boxdrag
     * @api
     */
    BOXDRAG: 'boxdrag',

    /**
     * Triggered upon drag box end.
     * @event DragBoxEvent#boxend
     * @api
     */
    BOXEND: 'boxend'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
   * this type.
   */
  var DragBoxEvent = /*@__PURE__*/(function (Event$$1) {
    function DragBoxEvent(type, coordinate, mapBrowserEvent) {
      Event$$1.call(this, type);

      /**
       * The coordinate of the drag event.
       * @const
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = coordinate;

      /**
       * @const
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;

    }

    if ( Event$$1 ) DragBoxEvent.__proto__ = Event$$1;
    DragBoxEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    DragBoxEvent.prototype.constructor = DragBoxEvent;

    return DragBoxEvent;
  }(Event));


  /**
   * @classdesc
   * Allows the user to draw a vector box by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when the shift or other key is held down. This is used, for example,
   * for zooming to a specific area of the map
   * (see {@link module:ol/interaction/DragZoom~DragZoom} and
   * {@link module:ol/interaction/DragRotateAndZoom}).
   *
   * This interaction is only supported for mouse devices.
   *
   * @fires DragBoxEvent
   * @api
   */
  var DragBox = /*@__PURE__*/(function (PointerInteraction$$1) {
    function DragBox(opt_options) {

      PointerInteraction$$1.call(this);

      var options = opt_options ? opt_options : {};

      /**
      * @type {import("../render/Box.js").default}
      * @private
      */
      this.box_ = new RenderBox(options.className || 'ol-dragbox');

      /**
      * @type {number}
      * @private
      */
      this.minArea_ = options.minArea !== undefined ? options.minArea : 64;

      /**
       * Function to execute just before `onboxend` is fired
       * @type {function(this:DragBox, import("../MapBrowserEvent.js").default)}
       * @private
       */
      this.onBoxEnd_ = options.onBoxEnd ? options.onBoxEnd : VOID;

      /**
      * @type {import("../pixel.js").Pixel}
      * @private
      */
      this.startPixel_ = null;

      /**
      * @private
      * @type {import("../events/condition.js").Condition}
      */
      this.condition_ = options.condition ? options.condition : always;

      /**
      * @private
      * @type {EndCondition}
      */
      this.boxEndCondition_ = options.boxEndCondition ?
        options.boxEndCondition : this.defaultBoxEndCondition;
    }

    if ( PointerInteraction$$1 ) DragBox.__proto__ = PointerInteraction$$1;
    DragBox.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    DragBox.prototype.constructor = DragBox;

    /**
     * The default condition for determining whether the boxend event
     * should fire.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
     *     leading to the box end.
     * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
     * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
     * @return {boolean} Whether or not the boxend condition should be fired.
     */
    DragBox.prototype.defaultBoxEndCondition = function defaultBoxEndCondition (mapBrowserEvent, startPixel, endPixel) {
      var width = endPixel[0] - startPixel[0];
      var height = endPixel[1] - startPixel[1];
      return width * width + height * height >= this.minArea_;
    };

    /**
    * Returns geometry of last drawn box.
    * @return {import("../geom/Polygon.js").default} Geometry.
    * @api
    */
    DragBox.prototype.getGeometry = function getGeometry () {
      return this.box_.getGeometry();
    };

    /**
     * @inheritDoc
     */
    DragBox.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);

      this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG,
        mapBrowserEvent.coordinate, mapBrowserEvent));
    };

    /**
     * @inheritDoc
     */
    DragBox.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      this.box_.setMap(null);

      if (this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel)) {
        this.onBoxEnd_(mapBrowserEvent);
        this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXEND,
          mapBrowserEvent.coordinate, mapBrowserEvent));
      }
      return false;
    };

    /**
     * @inheritDoc
     */
    DragBox.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (mouseActionButton(mapBrowserEvent) &&
          this.condition_(mapBrowserEvent)) {
        this.startPixel_ = mapBrowserEvent.pixel;
        this.box_.setMap(mapBrowserEvent.map);
        this.box_.setPixels(this.startPixel_, this.startPixel_);
        this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART,
          mapBrowserEvent.coordinate, mapBrowserEvent));
        return true;
      } else {
        return false;
      }
    };

    return DragBox;
  }(PointerInteraction));

  /**
   * @module ol/interaction/DragZoom
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragzoom'] CSS class name for styling the
   * box.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~shiftKeyOnly}.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {boolean} [out=false] Use interaction for zooming out.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when a key, shift by default, is held down.
   *
   * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
   * your custom one configured with `className`.
   * @api
   */
  var DragZoom = /*@__PURE__*/(function (DragBox$$1) {
    function DragZoom(opt_options) {
      var options = opt_options ? opt_options : {};

      var condition$$1 = options.condition ? options.condition : shiftKeyOnly;

      DragBox$$1.call(this, {
        condition: condition$$1,
        className: options.className || 'ol-dragzoom',
        onBoxEnd: onBoxEnd
      });

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 200;

      /**
       * @private
       * @type {boolean}
       */
      this.out_ = options.out !== undefined ? options.out : false;
    }

    if ( DragBox$$1 ) DragZoom.__proto__ = DragBox$$1;
    DragZoom.prototype = Object.create( DragBox$$1 && DragBox$$1.prototype );
    DragZoom.prototype.constructor = DragZoom;

    return DragZoom;
  }(DragBox));


  /**
   * @this {DragZoom}
   */
  function onBoxEnd() {
    var map = this.getMap();
    var view = /** @type {!import("../View.js").default} */ (map.getView());
    var size$$1 = /** @type {!import("../size.js").Size} */ (map.getSize());
    var extent$$1 = this.getGeometry().getExtent();

    if (this.out_) {
      var mapExtent = view.calculateExtent(size$$1);
      var boxPixelExtent = createOrUpdateFromCoordinates([
        map.getPixelFromCoordinate(getBottomLeft(extent$$1)),
        map.getPixelFromCoordinate(getTopRight(extent$$1))]);
      var factor = view.getResolutionForExtent(boxPixelExtent, size$$1);

      scaleFromCenter(mapExtent, 1 / factor);
      extent$$1 = mapExtent;
    }

    var resolution = view.constrainResolution(
      view.getResolutionForExtent(extent$$1, size$$1));

    var center = getCenter(extent$$1);
    center = view.constrainCenter(center);

    view.animate({
      resolution: resolution,
      center: center,
      duration: this.duration_,
      easing: easeOut
    });
  }

  /**
   * @module ol/events/KeyCode
   */

  /**
   * @enum {number}
   * @const
   */
  var KeyCode = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40
  };

  /**
   * @module ol/interaction/KeyboardPan
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~noModifierKeys} and
   * {@link module:ol/events/condition~targetNotEditable}.
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
   * press.
   */


  /**
   * @classdesc
   * Allows the user to pan the map using keyboard arrows.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
   * @api
   */
  var KeyboardPan = /*@__PURE__*/(function (Interaction$$1) {
    function KeyboardPan(opt_options) {

      Interaction$$1.call(this, {
        handleEvent: handleEvent$1
      });

      var options = opt_options || {};

      /**
       * @private
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
       * @return {boolean} Combined condition result.
       */
      this.defaultCondition_ = function(mapBrowserEvent) {
        return noModifierKeys(mapBrowserEvent) &&
          targetNotEditable(mapBrowserEvent);
      };

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition !== undefined ?
        options.condition : this.defaultCondition_;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 100;

      /**
       * @private
       * @type {number}
       */
      this.pixelDelta_ = options.pixelDelta !== undefined ?
        options.pixelDelta : 128;

    }

    if ( Interaction$$1 ) KeyboardPan.__proto__ = Interaction$$1;
    KeyboardPan.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    KeyboardPan.prototype.constructor = KeyboardPan;

    return KeyboardPan;
  }(Interaction$1));


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides the direction to pan to (if an arrow key was
   * pressed).
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {KeyboardPan}
   */
  function handleEvent$1(mapBrowserEvent) {
    var stopEvent = false;
    if (mapBrowserEvent.type == EventType.KEYDOWN) {
      var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
      var keyCode = keyEvent.keyCode;
      if (this.condition_(mapBrowserEvent) &&
          (keyCode == KeyCode.DOWN ||
          keyCode == KeyCode.LEFT ||
          keyCode == KeyCode.RIGHT ||
          keyCode == KeyCode.UP)) {
        var map = mapBrowserEvent.map;
        var view = map.getView();
        var mapUnitsDelta = view.getResolution() * this.pixelDelta_;
        var deltaX = 0, deltaY = 0;
        if (keyCode == KeyCode.DOWN) {
          deltaY = -mapUnitsDelta;
        } else if (keyCode == KeyCode.LEFT) {
          deltaX = -mapUnitsDelta;
        } else if (keyCode == KeyCode.RIGHT) {
          deltaX = mapUnitsDelta;
        } else {
          deltaY = mapUnitsDelta;
        }
        var delta = [deltaX, deltaY];
        rotate$2(delta, view.getRotation());
        pan(view, delta, this.duration_);
        mapBrowserEvent.preventDefault();
        stopEvent = true;
      }
    }
    return !stopEvent;
  }

  /**
   * @module ol/interaction/KeyboardZoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~targetNotEditable}.
   * @property {number} [delta=1] The zoom level delta on each key press.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map using keyboard + and -.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
   * @api
   */
  var KeyboardZoom = /*@__PURE__*/(function (Interaction$$1) {
    function KeyboardZoom(opt_options) {

      Interaction$$1.call(this, {
        handleEvent: handleEvent$2
      });

      var options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : targetNotEditable;

      /**
       * @private
       * @type {number}
       */
      this.delta_ = options.delta ? options.delta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 100;

    }

    if ( Interaction$$1 ) KeyboardZoom.__proto__ = Interaction$$1;
    KeyboardZoom.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    KeyboardZoom.prototype.constructor = KeyboardZoom;

    return KeyboardZoom;
  }(Interaction$1));


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
   * key pressed was '+' or '-').
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {KeyboardZoom}
   */
  function handleEvent$2(mapBrowserEvent) {
    var stopEvent = false;
    if (mapBrowserEvent.type == EventType.KEYDOWN ||
        mapBrowserEvent.type == EventType.KEYPRESS) {
      var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
      var charCode = keyEvent.charCode;
      if (this.condition_(mapBrowserEvent) &&
          (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {
        var map = mapBrowserEvent.map;
        var delta = (charCode == '+'.charCodeAt(0)) ? this.delta_ : -this.delta_;
        var view = map.getView();
        zoomByDelta(view, delta, undefined, this.duration_);
        mapBrowserEvent.preventDefault();
        stopEvent = true;
      }
    }
    return !stopEvent;
  }

  /**
   * @module ol/interaction/MouseWheelZoom
   */


  /**
   * Maximum mouse wheel delta.
   * @type {number}
   */
  var MAX_DELTA = 1;


  /**
   * @enum {string}
   */
  var Mode = {
    TRACKPAD: 'trackpad',
    WHEEL: 'wheel'
  };


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~always}.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
   * @property {boolean} [constrainResolution=false] When using a trackpad or
   * magic mouse, zoom to the closest integer zoom level after the scroll gesture
   * ends.
   * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
   * location as the anchor. When set to `false`, zooming in and out will zoom to
   * the center of the screen instead of zooming on the mouse's location.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map by scrolling the mouse wheel.
   * @api
   */
  var MouseWheelZoom = /*@__PURE__*/(function (Interaction$$1) {
    function MouseWheelZoom(opt_options) {

      var options = opt_options ? opt_options : {};

      Interaction$$1.call(/** @type {import("./Interaction.js").InteractionOptions} */ this, (options));

      /**
       * @private
       * @type {number}
       */
      this.delta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

      /**
       * @private
       * @type {number}
       */
      this.timeout_ = options.timeout !== undefined ? options.timeout : 80;

      /**
       * @private
       * @type {boolean}
       */
      this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;

      /**
       * @private
       * @type {boolean}
       */
      this.constrainResolution_ = options.constrainResolution || false;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : always;

      /**
       * @private
       * @type {?import("../coordinate.js").Coordinate}
       */
      this.lastAnchor_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.startTime_ = undefined;

      /**
       * @private
       * @type {?}
       */
      this.timeoutId_;

      /**
       * @private
       * @type {Mode|undefined}
       */
      this.mode_ = undefined;

      /**
       * Trackpad events separated by this delay will be considered separate
       * interactions.
       * @type {number}
       */
      this.trackpadEventGap_ = 400;

      /**
       * @type {?}
       */
      this.trackpadTimeoutId_;

      /**
       * The number of delta values per zoom level
       * @private
       * @type {number}
       */
      this.trackpadDeltaPerZoom_ = 300;

      /**
       * The zoom factor by which scroll zooming is allowed to exceed the limits.
       * @private
       * @type {number}
       */
      this.trackpadZoomBuffer_ = 1.5;

    }

    if ( Interaction$$1 ) MouseWheelZoom.__proto__ = Interaction$$1;
    MouseWheelZoom.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    MouseWheelZoom.prototype.constructor = MouseWheelZoom;

    /**
     * @private
     */
    MouseWheelZoom.prototype.decrementInteractingHint_ = function decrementInteractingHint_ () {
      this.trackpadTimeoutId_ = undefined;
      var view = this.getMap().getView();
      view.setHint(ViewHint.INTERACTING, -1);
    };

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
     * zooms the map.
     * @override
     */
    MouseWheelZoom.prototype.handleEvent = function handleEvent (mapBrowserEvent) {
      if (!this.condition_(mapBrowserEvent)) {
        return true;
      }
      var type = mapBrowserEvent.type;
      if (type !== EventType.WHEEL && type !== EventType.MOUSEWHEEL) {
        return true;
      }

      mapBrowserEvent.preventDefault();

      var map = mapBrowserEvent.map;
      var wheelEvent = /** @type {WheelEvent} */ (mapBrowserEvent.originalEvent);

      if (this.useAnchor_) {
        this.lastAnchor_ = mapBrowserEvent.coordinate;
      }

      // Delta normalisation inspired by
      // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
      var delta;
      if (mapBrowserEvent.type == EventType.WHEEL) {
        delta = wheelEvent.deltaY;
        if (FIREFOX &&
            wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
          delta /= DEVICE_PIXEL_RATIO;
        }
        if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
          delta *= 40;
        }
      } else if (mapBrowserEvent.type == EventType.MOUSEWHEEL) {
        delta = -wheelEvent.wheelDeltaY;
        if (SAFARI) {
          delta /= 3;
        }
      }

      if (delta === 0) {
        return false;
      }

      var now = Date.now();

      if (this.startTime_ === undefined) {
        this.startTime_ = now;
      }

      if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
        this.mode_ = Math.abs(delta) < 4 ?
          Mode.TRACKPAD :
          Mode.WHEEL;
      }

      if (this.mode_ === Mode.TRACKPAD) {
        var view = map.getView();
        if (this.trackpadTimeoutId_) {
          clearTimeout(this.trackpadTimeoutId_);
        } else {
          view.setHint(ViewHint.INTERACTING, 1);
        }
        this.trackpadTimeoutId_ = setTimeout(this.decrementInteractingHint_.bind(this), this.trackpadEventGap_);
        var resolution = view.getResolution() * Math.pow(2, delta / this.trackpadDeltaPerZoom_);
        var minResolution = view.getMinResolution();
        var maxResolution = view.getMaxResolution();
        var rebound = 0;
        if (resolution < minResolution) {
          resolution = Math.max(resolution, minResolution / this.trackpadZoomBuffer_);
          rebound = 1;
        } else if (resolution > maxResolution) {
          resolution = Math.min(resolution, maxResolution * this.trackpadZoomBuffer_);
          rebound = -1;
        }
        if (this.lastAnchor_) {
          var center = view.calculateCenterZoom(resolution, this.lastAnchor_);
          view.setCenter(view.constrainCenter(center));
        }
        view.setResolution(resolution);

        if (rebound === 0 && this.constrainResolution_) {
          view.animate({
            resolution: view.constrainResolution(resolution, delta > 0 ? -1 : 1),
            easing: easeOut,
            anchor: this.lastAnchor_,
            duration: this.duration_
          });
        }

        if (rebound > 0) {
          view.animate({
            resolution: minResolution,
            easing: easeOut,
            anchor: this.lastAnchor_,
            duration: 500
          });
        } else if (rebound < 0) {
          view.animate({
            resolution: maxResolution,
            easing: easeOut,
            anchor: this.lastAnchor_,
            duration: 500
          });
        }
        this.startTime_ = now;
        return false;
      }

      this.delta_ += delta;

      var timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);

      clearTimeout(this.timeoutId_);
      this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);

      return false;
    };

    /**
     * @private
     * @param {import("../PluggableMap.js").default} map Map.
     */
    MouseWheelZoom.prototype.handleWheelZoom_ = function handleWheelZoom_ (map) {
      var view = map.getView();
      if (view.getAnimating()) {
        view.cancelAnimations();
      }
      var maxDelta = MAX_DELTA;
      var delta = clamp(this.delta_, -maxDelta, maxDelta);
      zoomByDelta(view, -delta, this.lastAnchor_, this.duration_);
      this.mode_ = undefined;
      this.delta_ = 0;
      this.lastAnchor_ = null;
      this.startTime_ = undefined;
      this.timeoutId_ = undefined;
    };

    /**
     * Enable or disable using the mouse's location as an anchor when zooming
     * @param {boolean} useAnchor true to zoom to the mouse's location, false
     * to zoom to the center of the map
     * @api
     */
    MouseWheelZoom.prototype.setMouseAnchor = function setMouseAnchor (useAnchor) {
      this.useAnchor_ = useAnchor;
      if (!useAnchor) {
        this.lastAnchor_ = null;
      }
    };

    return MouseWheelZoom;
  }(Interaction$1));

  /**
   * @module ol/interaction/PinchRotate
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] The duration of the animation in
   * milliseconds.
   * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
   */


  /**
   * @classdesc
   * Allows the user to rotate the map by twisting with two fingers
   * on a touch screen.
   * @api
   */
  var PinchRotate = /*@__PURE__*/(function (PointerInteraction$$1) {
    function PinchRotate(opt_options) {

      var options = opt_options ? opt_options : {};

      var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      PointerInteraction$$1.call(this, pointerOptions);

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.rotating_ = false;

      /**
       * @private
       * @type {number}
       */
      this.rotationDelta_ = 0.0;

      /**
       * @private
       * @type {number}
       */
      this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    if ( PointerInteraction$$1 ) PinchRotate.__proto__ = PointerInteraction$$1;
    PinchRotate.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    PinchRotate.prototype.constructor = PinchRotate;

    /**
     * @inheritDoc
     */
    PinchRotate.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      var rotationDelta = 0.0;

      var touch0 = this.targetPointers[0];
      var touch1 = this.targetPointers[1];

      // angle between touches
      var angle = Math.atan2(
        touch1.clientY - touch0.clientY,
        touch1.clientX - touch0.clientX);

      if (this.lastAngle_ !== undefined) {
        var delta = angle - this.lastAngle_;
        this.rotationDelta_ += delta;
        if (!this.rotating_ &&
            Math.abs(this.rotationDelta_) > this.threshold_) {
          this.rotating_ = true;
        }
        rotationDelta = delta;
      }
      this.lastAngle_ = angle;

      var map = mapBrowserEvent.map;
      var view = map.getView();
      if (view.getConstraints().rotation === disable) {
        return;
      }

      // rotate anchor point.
      // FIXME: should be the intersection point between the lines:
      //     touch0,touch1 and previousTouch0,previousTouch1
      var viewportPosition = map.getViewport().getBoundingClientRect();
      var centroid$$1 = centroid(this.targetPointers);
      centroid$$1[0] -= viewportPosition.left;
      centroid$$1[1] -= viewportPosition.top;
      this.anchor_ = map.getCoordinateFromPixel(centroid$$1);

      // rotate
      if (this.rotating_) {
        var rotation = view.getRotation();
        map.render();
        rotateWithoutConstraints(view, rotation + rotationDelta, this.anchor_);
      }
    };

    /**
     * @inheritDoc
     */
    PinchRotate.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      if (this.targetPointers.length < 2) {
        var map = mapBrowserEvent.map;
        var view = map.getView();
        view.setHint(ViewHint.INTERACTING, -1);
        if (this.rotating_) {
          var rotation = view.getRotation();
          rotate$3(view, rotation, this.anchor_, this.duration_);
        }
        return false;
      } else {
        return true;
      }
    };

    /**
     * @inheritDoc
     */
    PinchRotate.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (this.targetPointers.length >= 2) {
        var map = mapBrowserEvent.map;
        this.anchor_ = null;
        this.lastAngle_ = undefined;
        this.rotating_ = false;
        this.rotationDelta_ = 0.0;
        if (!this.handlingDownUpSequence) {
          map.getView().setHint(ViewHint.INTERACTING, 1);
        }
        return true;
      } else {
        return false;
      }
    };

    return PinchRotate;
  }(PointerInteraction));

  /**
   * @module ol/interaction/PinchZoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=400] Animation duration in milliseconds.
   * @property {boolean} [constrainResolution=false] Zoom to the closest integer
   * zoom level after the pinch gesture ends.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map by pinching with two fingers
   * on a touch screen.
   * @api
   */
  var PinchZoom = /*@__PURE__*/(function (PointerInteraction$$1) {
    function PinchZoom(opt_options) {

      var options = opt_options ? opt_options : {};

      var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      PointerInteraction$$1.call(this, pointerOptions);

      /**
       * @private
       * @type {boolean}
       */
      this.constrainResolution_ = options.constrainResolution || false;

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 400;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastDistance_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.lastScaleDelta_ = 1;

    }

    if ( PointerInteraction$$1 ) PinchZoom.__proto__ = PointerInteraction$$1;
    PinchZoom.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    PinchZoom.prototype.constructor = PinchZoom;

    /**
     * @inheritDoc
     */
    PinchZoom.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      var scaleDelta = 1.0;

      var touch0 = this.targetPointers[0];
      var touch1 = this.targetPointers[1];
      var dx = touch0.clientX - touch1.clientX;
      var dy = touch0.clientY - touch1.clientY;

      // distance between touches
      var distance = Math.sqrt(dx * dx + dy * dy);

      if (this.lastDistance_ !== undefined) {
        scaleDelta = this.lastDistance_ / distance;
      }
      this.lastDistance_ = distance;


      var map = mapBrowserEvent.map;
      var view = map.getView();
      var resolution = view.getResolution();
      var maxResolution = view.getMaxResolution();
      var minResolution = view.getMinResolution();
      var newResolution = resolution * scaleDelta;
      if (newResolution > maxResolution) {
        scaleDelta = maxResolution / resolution;
        newResolution = maxResolution;
      } else if (newResolution < minResolution) {
        scaleDelta = minResolution / resolution;
        newResolution = minResolution;
      }

      if (scaleDelta != 1.0) {
        this.lastScaleDelta_ = scaleDelta;
      }

      // scale anchor point.
      var viewportPosition = map.getViewport().getBoundingClientRect();
      var centroid$$1 = centroid(this.targetPointers);
      centroid$$1[0] -= viewportPosition.left;
      centroid$$1[1] -= viewportPosition.top;
      this.anchor_ = map.getCoordinateFromPixel(centroid$$1);

      // scale, bypass the resolution constraint
      map.render();
      zoomWithoutConstraints(view, newResolution, this.anchor_);
    };

    /**
     * @inheritDoc
     */
    PinchZoom.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      if (this.targetPointers.length < 2) {
        var map = mapBrowserEvent.map;
        var view = map.getView();
        view.setHint(ViewHint.INTERACTING, -1);
        var resolution = view.getResolution();
        if (this.constrainResolution_ ||
            resolution < view.getMinResolution() ||
            resolution > view.getMaxResolution()) {
          // Zoom to final resolution, with an animation, and provide a
          // direction not to zoom out/in if user was pinching in/out.
          // Direction is > 0 if pinching out, and < 0 if pinching in.
          var direction = this.lastScaleDelta_ - 1;
          zoom(view, resolution, this.anchor_, this.duration_, direction);
        }
        return false;
      } else {
        return true;
      }
    };

    /**
     * @inheritDoc
     */
    PinchZoom.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (this.targetPointers.length >= 2) {
        var map = mapBrowserEvent.map;
        this.anchor_ = null;
        this.lastDistance_ = undefined;
        this.lastScaleDelta_ = 1;
        if (!this.handlingDownUpSequence) {
          map.getView().setHint(ViewHint.INTERACTING, 1);
        }
        return true;
      } else {
        return false;
      }
    };

    return PinchZoom;
  }(PointerInteraction));

  /**
   * @module ol/interaction/DragAndDrop
   */


  /**
   * @typedef {Object} Options
   * @property {Array<typeof import("../format/Feature.js").default>} [formatConstructors] Format constructors.
   * @property {import("../source/Vector.js").default} [source] Optional vector source where features will be added.  If a source is provided
   * all existing features will be removed and new features will be added when
   * they are dropped on the target.  If you want to add features to a vector
   * source without removing the existing features (append only), instead of
   * providing the source option listen for the "addfeatures" event.
   * @property {import("../proj.js").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.
   * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.
   */


  /**
   * @enum {string}
   */
  var DragAndDropEventType = {
    /**
     * Triggered when features are added
     * @event DragAndDropEvent#addfeatures
     * @api
     */
    ADD_FEATURES: 'addfeatures'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances
   * of this type.
   */
  var DragAndDropEvent = /*@__PURE__*/(function (Event$$1) {
    function DragAndDropEvent(type, file, opt_features, opt_projection) {

      Event$$1.call(this, type);

      /**
       * The features parsed from dropped data.
       * @type {Array<import("../Feature.js").FeatureLike>|undefined}
       * @api
       */
      this.features = opt_features;

      /**
       * The dropped file.
       * @type {File}
       * @api
       */
      this.file = file;

      /**
       * The feature projection.
       * @type {import("../proj/Projection.js").default|undefined}
       * @api
       */
      this.projection = opt_projection;

    }

    if ( Event$$1 ) DragAndDropEvent.__proto__ = Event$$1;
    DragAndDropEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    DragAndDropEvent.prototype.constructor = DragAndDropEvent;

    return DragAndDropEvent;
  }(Event));


  /**
   * @classdesc
   * Handles input of vector data by drag and drop.
   * @api
   *
   * @fires DragAndDropEvent
   */
  var DragAndDrop = /*@__PURE__*/(function (Interaction$$1) {
    function DragAndDrop(opt_options) {

      var options = opt_options ? opt_options : {};

      Interaction$$1.call(this, {
        handleEvent: TRUE
      });

      /**
       * @private
       * @type {Array<typeof import("../format/Feature.js").default>}
       */
      this.formatConstructors_ = options.formatConstructors ?
        options.formatConstructors : [];

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.projection_ = options.projection ?
        get$3(options.projection) : null;

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.dropListenKeys_ = null;

      /**
       * @private
       * @type {import("../source/Vector.js").default}
       */
      this.source_ = options.source || null;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.target = options.target ? options.target : null;

    }

    if ( Interaction$$1 ) DragAndDrop.__proto__ = Interaction$$1;
    DragAndDrop.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    DragAndDrop.prototype.constructor = DragAndDrop;

    /**
     * @param {File} file File.
     * @param {Event} event Load event.
     * @private
     */
    DragAndDrop.prototype.handleResult_ = function handleResult_ (file, event) {
      var result = event.target.result;
      var map = this.getMap();
      var projection = this.projection_;
      if (!projection) {
        var view = map.getView();
        projection = view.getProjection();
      }

      var formatConstructors = this.formatConstructors_;
      var features = [];
      for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {
        var format = new formatConstructors[i]();
        features = this.tryReadFeatures_(format, result, {
          featureProjection: projection
        });
        if (features && features.length > 0) {
          break;
        }
      }
      if (this.source_) {
        this.source_.clear();
        this.source_.addFeatures(features);
      }
      this.dispatchEvent(
        new DragAndDropEvent(
          DragAndDropEventType.ADD_FEATURES, file,
          features, projection));
    };

    /**
     * @private
     */
    DragAndDrop.prototype.registerListeners_ = function registerListeners_ () {
      var map = this.getMap();
      if (map) {
        var dropArea = this.target ? this.target : map.getViewport();
        this.dropListenKeys_ = [
          listen(dropArea, EventType.DROP, handleDrop, this),
          listen(dropArea, EventType.DRAGENTER, handleStop, this),
          listen(dropArea, EventType.DRAGOVER, handleStop, this),
          listen(dropArea, EventType.DROP, handleStop, this)
        ];
      }
    };

    /**
     * @inheritDoc
     */
    DragAndDrop.prototype.setActive = function setActive (active) {
      Interaction$$1.prototype.setActive.call(this, active);
      if (active) {
        this.registerListeners_();
      } else {
        this.unregisterListeners_();
      }
    };

    /**
     * @inheritDoc
     */
    DragAndDrop.prototype.setMap = function setMap (map) {
      this.unregisterListeners_();
      Interaction$$1.prototype.setMap.call(this, map);
      if (this.getActive()) {
        this.registerListeners_();
      }
    };

    /**
     * @param {import("../format/Feature.js").default} format Format.
     * @param {string} text Text.
     * @param {import("../format/Feature.js").ReadOptions} options Read options.
     * @private
     * @return {Array<import("../Feature.js").FeatureLike>} Features.
     */
    DragAndDrop.prototype.tryReadFeatures_ = function tryReadFeatures_ (format, text, options) {
      try {
        return format.readFeatures(text, options);
      } catch (e) {
        return null;
      }
    };

    /**
     * @private
     */
    DragAndDrop.prototype.unregisterListeners_ = function unregisterListeners_ () {
      if (this.dropListenKeys_) {
        this.dropListenKeys_.forEach(unlistenByKey);
        this.dropListenKeys_ = null;
      }
    };

    return DragAndDrop;
  }(Interaction$1));


  /**
   * @param {DragEvent} event Event.
   * @this {DragAndDrop}
   */
  function handleDrop(event) {
    var files = event.dataTransfer.files;
    for (var i = 0, ii = files.length; i < ii; ++i) {
      var file = files.item(i);
      var reader = new FileReader();
      reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));
      reader.readAsText(file);
    }
  }


  /**
   * @param {DragEvent} event Event.
   */
  function handleStop(event) {
    event.stopPropagation();
    event.preventDefault();
    event.dataTransfer.dropEffect = 'copy';
  }

  /**
   * @module ol/interaction/DragRotateAndZoom
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~shiftKeyOnly}.
   * @property {number} [duration=400] Animation duration in milliseconds.
   */


  /**
   * @classdesc
   * Allows the user to zoom and rotate the map by clicking and dragging
   * on the map.  By default, this interaction is limited to when the shift
   * key is held down.
   *
   * This interaction is only supported for mouse devices.
   *
   * And this interaction is not included in the default interactions.
   * @api
   */
  var DragRotateAndZoom = /*@__PURE__*/(function (PointerInteraction$$1) {
    function DragRotateAndZoom(opt_options) {

      var options = opt_options ? opt_options : {};

      PointerInteraction$$1.call(/** @type {import("./Pointer.js").Options} */ this, (options));

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : shiftKeyOnly;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastMagnitude_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.lastScaleDelta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 400;

    }

    if ( PointerInteraction$$1 ) DragRotateAndZoom.__proto__ = PointerInteraction$$1;
    DragRotateAndZoom.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    DragRotateAndZoom.prototype.constructor = DragRotateAndZoom;

    /**
     * @inheritDoc
     */
    DragRotateAndZoom.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      var map = mapBrowserEvent.map;
      var size$$1 = map.getSize();
      var offset = mapBrowserEvent.pixel;
      var deltaX = offset[0] - size$$1[0] / 2;
      var deltaY = size$$1[1] / 2 - offset[1];
      var theta = Math.atan2(deltaY, deltaX);
      var magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      var view = map.getView();
      if (view.getConstraints().rotation !== disable && this.lastAngle_ !== undefined) {
        var angleDelta = theta - this.lastAngle_;
        rotateWithoutConstraints(view, view.getRotation() - angleDelta);
      }
      this.lastAngle_ = theta;
      if (this.lastMagnitude_ !== undefined) {
        var resolution = this.lastMagnitude_ * (view.getResolution() / magnitude);
        zoomWithoutConstraints(view, resolution);
      }
      if (this.lastMagnitude_ !== undefined) {
        this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;
      }
      this.lastMagnitude_ = magnitude;
    };

    /**
     * @inheritDoc
     */
    DragRotateAndZoom.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      var map = mapBrowserEvent.map;
      var view = map.getView();
      view.setHint(ViewHint.INTERACTING, -1);
      var direction = this.lastScaleDelta_ - 1;
      rotate$3(view, view.getRotation());
      zoom(view, view.getResolution(), undefined, this.duration_, direction);
      this.lastScaleDelta_ = 0;
      return false;
    };

    /**
     * @inheritDoc
     */
    DragRotateAndZoom.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (this.condition_(mapBrowserEvent)) {
        mapBrowserEvent.map.getView().setHint(ViewHint.INTERACTING, 1);
        this.lastAngle_ = undefined;
        this.lastMagnitude_ = undefined;
        return true;
      } else {
        return false;
      }
    };

    return DragRotateAndZoom;
  }(PointerInteraction));

  /**
   * @module ol/geom/Circle
   */

  /**
   * @classdesc
   * Circle geometry.
   *
   * @api
   */
  var Circle$2 = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function Circle$$1(center, opt_radius, opt_layout) {
      SimpleGeometry$$1.call(this);
      if (opt_layout !== undefined && opt_radius === undefined) {
        this.setFlatCoordinates(opt_layout, center);
      } else {
        var radius = opt_radius ? opt_radius : 0;
        this.setCenterAndRadius(center, radius, opt_layout);
      }
    }

    if ( SimpleGeometry$$1 ) Circle$$1.__proto__ = SimpleGeometry$$1;
    Circle$$1.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    Circle$$1.prototype.constructor = Circle$$1;

    /**
     * Make a complete copy of the geometry.
     * @return {!Circle} Clone.
     * @override
     * @api
     */
    Circle$$1.prototype.clone = function clone () {
      return new Circle$$1(this.flatCoordinates.slice(), undefined, this.layout);
    };

    /**
     * @inheritDoc
     */
    Circle$$1.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      var flatCoordinates = this.flatCoordinates;
      var dx = x - flatCoordinates[0];
      var dy = y - flatCoordinates[1];
      var squaredDistance = dx * dx + dy * dy;
      if (squaredDistance < minSquaredDistance) {
        if (squaredDistance === 0) {
          for (var i = 0; i < this.stride; ++i) {
            closestPoint[i] = flatCoordinates[i];
          }
        } else {
          var delta = this.getRadius() / Math.sqrt(squaredDistance);
          closestPoint[0] = flatCoordinates[0] + delta * dx;
          closestPoint[1] = flatCoordinates[1] + delta * dy;
          for (var i$1 = 2; i$1 < this.stride; ++i$1) {
            closestPoint[i$1] = flatCoordinates[i$1];
          }
        }
        closestPoint.length = this.stride;
        return squaredDistance;
      } else {
        return minSquaredDistance;
      }
    };

    /**
     * @inheritDoc
     */
    Circle$$1.prototype.containsXY = function containsXY$$1 (x, y) {
      var flatCoordinates = this.flatCoordinates;
      var dx = x - flatCoordinates[0];
      var dy = y - flatCoordinates[1];
      return dx * dx + dy * dy <= this.getRadiusSquared_();
    };

    /**
     * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @return {import("../coordinate.js").Coordinate} Center.
     * @api
     */
    Circle$$1.prototype.getCenter = function getCenter$$1 () {
      return this.flatCoordinates.slice(0, this.stride);
    };

    /**
     * @inheritDoc
     */
    Circle$$1.prototype.computeExtent = function computeExtent (extent$$1) {
      var flatCoordinates = this.flatCoordinates;
      var radius = flatCoordinates[this.stride] - flatCoordinates[0];
      return createOrUpdate(
        flatCoordinates[0] - radius, flatCoordinates[1] - radius,
        flatCoordinates[0] + radius, flatCoordinates[1] + radius,
        extent$$1);
    };

    /**
     * Return the radius of the circle.
     * @return {number} Radius.
     * @api
     */
    Circle$$1.prototype.getRadius = function getRadius () {
      return Math.sqrt(this.getRadiusSquared_());
    };

    /**
     * @private
     * @return {number} Radius squared.
     */
    Circle$$1.prototype.getRadiusSquared_ = function getRadiusSquared_ () {
      var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];
      var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];
      return dx * dx + dy * dy;
    };

    /**
     * @inheritDoc
     * @api
     */
    Circle$$1.prototype.getType = function getType () {
      return GeometryType.CIRCLE;
    };

    /**
     * @inheritDoc
     * @api
     */
    Circle$$1.prototype.intersectsExtent = function intersectsExtent (extent$$1) {
      var circleExtent = this.getExtent();
      if (intersects(extent$$1, circleExtent)) {
        var center = this.getCenter();

        if (extent$$1[0] <= center[0] && extent$$1[2] >= center[0]) {
          return true;
        }
        if (extent$$1[1] <= center[1] && extent$$1[3] >= center[1]) {
          return true;
        }

        return forEachCorner(extent$$1, this.intersectsCoordinate, this);
      }
      return false;

    };

    /**
     * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} center Center.
     * @api
     */
    Circle$$1.prototype.setCenter = function setCenter (center) {
      var stride = this.stride;
      var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];
      var flatCoordinates = center.slice();
      flatCoordinates[stride] = flatCoordinates[0] + radius;
      for (var i = 1; i < stride; ++i) {
        flatCoordinates[stride + i] = center[i];
      }
      this.setFlatCoordinates(this.layout, flatCoordinates);
      this.changed();
    };

    /**
     * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as
     * number) of the circle.
     * @param {!import("../coordinate.js").Coordinate} center Center.
     * @param {number} radius Radius.
     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
     * @api
     */
    Circle$$1.prototype.setCenterAndRadius = function setCenterAndRadius (center, radius, opt_layout) {
      this.setLayout(opt_layout, center, 0);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      /** @type {Array<number>} */
      var flatCoordinates = this.flatCoordinates;
      var offset = deflateCoordinate(
        flatCoordinates, 0, center, this.stride);
      flatCoordinates[offset++] = flatCoordinates[0] + radius;
      for (var i = 1, ii = this.stride; i < ii; ++i) {
        flatCoordinates[offset++] = flatCoordinates[i];
      }
      flatCoordinates.length = offset;
      this.changed();
    };

    /**
     * @inheritDoc
     */
    Circle$$1.prototype.getCoordinates = function getCoordinates () {
      return null;
    };

    /**
     * @inheritDoc
     */
    Circle$$1.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {};

    /**
     * Set the radius of the circle. The radius is in the units of the projection.
     * @param {number} radius Radius.
     * @api
     */
    Circle$$1.prototype.setRadius = function setRadius (radius) {
      this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;
      this.changed();
    };

    return Circle$$1;
  }(SimpleGeometry));


  /**
   * Transform each coordinate of the circle from one coordinate reference system
   * to another. The geometry is modified in place.
   * If you do not want the geometry modified in place, first clone() it and
   * then use this function on the clone.
   *
   * Internally a circle is currently represented by two points: the center of
   * the circle `[cx, cy]`, and the point to the right of the circle
   * `[cx + r, cy]`. This `transform` function just transforms these two points.
   * So the resulting geometry is also a circle, and that circle does not
   * correspond to the shape that would be obtained by transforming every point
   * of the original circle.
   *
   * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @return {Circle} This geometry.  Note that original geometry is
   *     modified in place.
   * @function
   * @api
   */
  Circle$2.prototype.transform;

  /**
   * @module ol/geom/MultiLineString
   */

  /**
   * @classdesc
   * Multi-linestring geometry.
   *
   * @api
   */
  var MultiLineString$1 = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function MultiLineString$$1(coordinates, opt_layout, opt_ends) {

      SimpleGeometry$$1.call(this);

      /**
       * @type {Array<number>}
       * @private
       */
      this.ends_ = [];

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (Array.isArray(coordinates[0])) {
        this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
      } else if (opt_layout !== undefined && opt_ends) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
        this.ends_ = opt_ends;
      } else {
        var layout = this.getLayout();
        var lineStrings = /** @type {Array<LineString>} */ (coordinates);
        var flatCoordinates = [];
        var ends = [];
        for (var i = 0, ii = lineStrings.length; i < ii; ++i) {
          var lineString = lineStrings[i];
          if (i === 0) {
            layout = lineString.getLayout();
          }
          extend(flatCoordinates, lineString.getFlatCoordinates());
          ends.push(flatCoordinates.length);
        }
        this.setFlatCoordinates(layout, flatCoordinates);
        this.ends_ = ends;
      }

    }

    if ( SimpleGeometry$$1 ) MultiLineString$$1.__proto__ = SimpleGeometry$$1;
    MultiLineString$$1.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    MultiLineString$$1.prototype.constructor = MultiLineString$$1;

    /**
     * Append the passed linestring to the multilinestring.
     * @param {LineString} lineString LineString.
     * @api
     */
    MultiLineString$$1.prototype.appendLineString = function appendLineString (lineString) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = lineString.getFlatCoordinates().slice();
      } else {
        extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());
      }
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    };

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiLineString} Clone.
     * @override
     * @api
     */
    MultiLineString$$1.prototype.clone = function clone () {
      return new MultiLineString$$1(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
    };

    /**
     * @inheritDoc
     */
    MultiLineString$$1.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(
          this.flatCoordinates, 0, this.ends_, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestArrayPoint(
        this.flatCoordinates, 0, this.ends_, this.stride,
        this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
    };

    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * `opt_interpolate` controls interpolation between consecutive LineStrings
     * within the MultiLineString. If `opt_interpolate` is `true` the coordinates
     * will be linearly interpolated between the last coordinate of one LineString
     * and the first coordinate of the next LineString.  If `opt_interpolate` is
     * `false` then the function will return `null` for Ms falling between
     * LineStrings.
     *
     * @param {number} m M.
     * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
     * @param {boolean=} opt_interpolate Interpolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate} Coordinate.
     * @api
     */
    MultiLineString$$1.prototype.getCoordinateAtM = function getCoordinateAtM (m, opt_extrapolate, opt_interpolate) {
      if ((this.layout != GeometryLayout.XYM &&
           this.layout != GeometryLayout.XYZM) ||
          this.flatCoordinates.length === 0) {
        return null;
      }
      var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
      var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;
      return lineStringsCoordinateAtM(this.flatCoordinates, 0,
        this.ends_, this.stride, m, extrapolate, interpolate);
    };

    /**
     * Return the coordinates of the multilinestring.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @override
     * @api
     */
    MultiLineString$$1.prototype.getCoordinates = function getCoordinates () {
      return inflateCoordinatesArray(
        this.flatCoordinates, 0, this.ends_, this.stride);
    };

    /**
     * @return {Array<number>} Ends.
     */
    MultiLineString$$1.prototype.getEnds = function getEnds () {
      return this.ends_;
    };

    /**
     * Return the linestring at the specified index.
     * @param {number} index Index.
     * @return {LineString} LineString.
     * @api
     */
    MultiLineString$$1.prototype.getLineString = function getLineString (index) {
      if (index < 0 || this.ends_.length <= index) {
        return null;
      }
      return new LineString$1(this.flatCoordinates.slice(
        index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
    };

    /**
     * Return the linestrings of this multilinestring.
     * @return {Array<LineString>} LineStrings.
     * @api
     */
    MultiLineString$$1.prototype.getLineStrings = function getLineStrings () {
      var flatCoordinates = this.flatCoordinates;
      var ends = this.ends_;
      var layout = this.layout;
      /** @type {Array<LineString>} */
      var lineStrings = [];
      var offset = 0;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        var end = ends[i];
        var lineString = new LineString$1(flatCoordinates.slice(offset, end), layout);
        lineStrings.push(lineString);
        offset = end;
      }
      return lineStrings;
    };

    /**
     * @return {Array<number>} Flat midpoints.
     */
    MultiLineString$$1.prototype.getFlatMidpoints = function getFlatMidpoints () {
      var midpoints = [];
      var flatCoordinates = this.flatCoordinates;
      var offset = 0;
      var ends = this.ends_;
      var stride = this.stride;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        var end = ends[i];
        var midpoint = interpolatePoint(
          flatCoordinates, offset, end, stride, 0.5);
        extend(midpoints, midpoint);
        offset = end;
      }
      return midpoints;
    };

    /**
     * @inheritDoc
     */
    MultiLineString$$1.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      var simplifiedFlatCoordinates = [];
      var simplifiedEnds = [];
      simplifiedFlatCoordinates.length = douglasPeuckerArray(
        this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,
        simplifiedFlatCoordinates, 0, simplifiedEnds);
      return new MultiLineString$$1(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiLineString$$1.prototype.getType = function getType () {
      return GeometryType.MULTI_LINE_STRING;
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiLineString$$1.prototype.intersectsExtent = function intersectsExtent (extent$$1) {
      return intersectsLineStringArray(
        this.flatCoordinates, 0, this.ends_, this.stride, extent$$1);
    };

    /**
     * Set the coordinates of the multilinestring.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    MultiLineString$$1.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 2);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      var ends = deflateCoordinatesArray(
        this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
      this.changed();
    };

    return MultiLineString$$1;
  }(SimpleGeometry));

  /**
   * @module ol/geom/MultiPoint
   */

  /**
   * @classdesc
   * Multi-point geometry.
   *
   * @api
   */
  var MultiPoint$1 = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function MultiPoint$$1(coordinates, opt_layout) {
      SimpleGeometry$$1.call(this);
      if (opt_layout && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
      } else {
        this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
      }
    }

    if ( SimpleGeometry$$1 ) MultiPoint$$1.__proto__ = SimpleGeometry$$1;
    MultiPoint$$1.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    MultiPoint$$1.prototype.constructor = MultiPoint$$1;

    /**
     * Append the passed point to this multipoint.
     * @param {Point} point Point.
     * @api
     */
    MultiPoint$$1.prototype.appendPoint = function appendPoint (point) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = point.getFlatCoordinates().slice();
      } else {
        extend(this.flatCoordinates, point.getFlatCoordinates());
      }
      this.changed();
    };

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPoint} Clone.
     * @override
     * @api
     */
    MultiPoint$$1.prototype.clone = function clone () {
      var multiPoint = new MultiPoint$$1(this.flatCoordinates.slice(), this.layout);
      return multiPoint;
    };

    /**
     * @inheritDoc
     */
    MultiPoint$$1.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      var flatCoordinates = this.flatCoordinates;
      var stride = this.stride;
      for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        var squaredDistance$$1 = squaredDistance(
          x, y, flatCoordinates[i], flatCoordinates[i + 1]);
        if (squaredDistance$$1 < minSquaredDistance) {
          minSquaredDistance = squaredDistance$$1;
          for (var j = 0; j < stride; ++j) {
            closestPoint[j] = flatCoordinates[i + j];
          }
          closestPoint.length = stride;
        }
      }
      return minSquaredDistance;
    };

    /**
     * Return the coordinates of the multipoint.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @override
     * @api
     */
    MultiPoint$$1.prototype.getCoordinates = function getCoordinates () {
      return inflateCoordinates(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };

    /**
     * Return the point at the specified index.
     * @param {number} index Index.
     * @return {Point} Point.
     * @api
     */
    MultiPoint$$1.prototype.getPoint = function getPoint (index) {
      var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;
      if (index < 0 || n <= index) {
        return null;
      }
      return new Point$1(this.flatCoordinates.slice(
        index * this.stride, (index + 1) * this.stride), this.layout);
    };

    /**
     * Return the points of this multipoint.
     * @return {Array<Point>} Points.
     * @api
     */
    MultiPoint$$1.prototype.getPoints = function getPoints () {
      var flatCoordinates = this.flatCoordinates;
      var layout = this.layout;
      var stride = this.stride;
      /** @type {Array<Point>} */
      var points = [];
      for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        var point = new Point$1(flatCoordinates.slice(i, i + stride), layout);
        points.push(point);
      }
      return points;
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiPoint$$1.prototype.getType = function getType () {
      return GeometryType.MULTI_POINT;
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiPoint$$1.prototype.intersectsExtent = function intersectsExtent (extent$$1) {
      var flatCoordinates = this.flatCoordinates;
      var stride = this.stride;
      for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        var x = flatCoordinates[i];
        var y = flatCoordinates[i + 1];
        if (containsXY(extent$$1, x, y)) {
          return true;
        }
      }
      return false;
    };

    /**
     * Set the coordinates of the multipoint.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
     * @override
     * @api
     */
    MultiPoint$$1.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    };

    return MultiPoint$$1;
  }(SimpleGeometry));

  /**
   * @module ol/geom/flat/center
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {Array<number>} Flat centers.
   */
  function linearRingss$1(flatCoordinates, offset, endss, stride) {
    var flatCenters = [];
    var extent$$1 = createEmpty();
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      extent$$1 = createOrUpdateFromFlatCoordinates(flatCoordinates, offset, ends[0], stride);
      flatCenters.push((extent$$1[0] + extent$$1[2]) / 2, (extent$$1[1] + extent$$1[3]) / 2);
      offset = ends[ends.length - 1];
    }
    return flatCenters;
  }

  /**
   * @module ol/geom/MultiPolygon
   */

  /**
   * @classdesc
   * Multi-polygon geometry.
   *
   * @api
   */
  var MultiPolygon$1 = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function MultiPolygon$$1(coordinates, opt_layout, opt_endss) {

      SimpleGeometry$$1.call(this);

      /**
       * @type {Array<Array<number>>}
       * @private
       */
      this.endss_ = [];

      /**
       * @private
       * @type {number}
       */
      this.flatInteriorPointsRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatInteriorPoints_ = null;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.orientedRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.orientedFlatCoordinates_ = null;

      if (!opt_endss && !Array.isArray(coordinates[0])) {
        var layout = this.getLayout();
        var polygons = /** @type {Array<Polygon>} */ (coordinates);
        var flatCoordinates = [];
        var endss = [];
        for (var i = 0, ii = polygons.length; i < ii; ++i) {
          var polygon = polygons[i];
          if (i === 0) {
            layout = polygon.getLayout();
          }
          var offset = flatCoordinates.length;
          var ends = polygon.getEnds();
          for (var j = 0, jj = ends.length; j < jj; ++j) {
            ends[j] += offset;
          }
          extend(flatCoordinates, polygon.getFlatCoordinates());
          endss.push(ends);
        }
        opt_layout = layout;
        coordinates = flatCoordinates;
        opt_endss = endss;
      }
      if (opt_layout !== undefined && opt_endss) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
        this.endss_ = opt_endss;
      } else {
        this.setCoordinates(/** @type {Array<Array<Array<import("../coordinate.js").Coordinate>>>} */ (coordinates),
          opt_layout);
      }

    }

    if ( SimpleGeometry$$1 ) MultiPolygon$$1.__proto__ = SimpleGeometry$$1;
    MultiPolygon$$1.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    MultiPolygon$$1.prototype.constructor = MultiPolygon$$1;

    /**
     * Append the passed polygon to this multipolygon.
     * @param {Polygon} polygon Polygon.
     * @api
     */
    MultiPolygon$$1.prototype.appendPolygon = function appendPolygon (polygon) {
      /** @type {Array<number>} */
      var ends;
      if (!this.flatCoordinates) {
        this.flatCoordinates = polygon.getFlatCoordinates().slice();
        ends = polygon.getEnds().slice();
        this.endss_.push();
      } else {
        var offset = this.flatCoordinates.length;
        extend(this.flatCoordinates, polygon.getFlatCoordinates());
        ends = polygon.getEnds().slice();
        for (var i = 0, ii = ends.length; i < ii; ++i) {
          ends[i] += offset;
        }
      }
      this.endss_.push(ends);
      this.changed();
    };

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPolygon} Clone.
     * @override
     * @api
     */
    MultiPolygon$$1.prototype.clone = function clone () {
      var len = this.endss_.length;
      var newEndss = new Array(len);
      for (var i = 0; i < len; ++i) {
        newEndss[i] = this.endss_[i].slice();
      }

      return new MultiPolygon$$1(
        this.flatCoordinates.slice(), this.layout, newEndss);
    };

    /**
     * @inheritDoc
     */
    MultiPolygon$$1.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(
          this.flatCoordinates, 0, this.endss_, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestMultiArrayPoint(
        this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,
        this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    };

    /**
     * @inheritDoc
     */
    MultiPolygon$$1.prototype.containsXY = function containsXY$$1 (x, y) {
      return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);
    };

    /**
     * Return the area of the multipolygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    MultiPolygon$$1.prototype.getArea = function getArea$$1 () {
      return linearRingss(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);
    };

    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for multi-polygons.
     *
     * @param {boolean=} opt_right Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<Array<import("../coordinate.js").Coordinate>>>} Coordinates.
     * @override
     * @api
     */
    MultiPolygon$$1.prototype.getCoordinates = function getCoordinates (opt_right) {
      var flatCoordinates;
      if (opt_right !== undefined) {
        flatCoordinates = this.getOrientedFlatCoordinates().slice();
        orientLinearRingsArray(
          flatCoordinates, 0, this.endss_, this.stride, opt_right);
      } else {
        flatCoordinates = this.flatCoordinates;
      }

      return inflateMultiCoordinatesArray(
        flatCoordinates, 0, this.endss_, this.stride);
    };

    /**
     * @return {Array<Array<number>>} Endss.
     */
    MultiPolygon$$1.prototype.getEndss = function getEndss () {
      return this.endss_;
    };

    /**
     * @return {Array<number>} Flat interior points.
     */
    MultiPolygon$$1.prototype.getFlatInteriorPoints = function getFlatInteriorPoints () {
      if (this.flatInteriorPointsRevision_ != this.getRevision()) {
        var flatCenters = linearRingss$1(
          this.flatCoordinates, 0, this.endss_, this.stride);
        this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(
          this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,
          flatCenters);
        this.flatInteriorPointsRevision_ = this.getRevision();
      }
      return this.flatInteriorPoints_;
    };

    /**
     * Return the interior points as {@link module:ol/geom/MultiPoint multipoint}.
     * @return {MultiPoint} Interior points as XYM coordinates, where M is
     * the length of the horizontal intersection that the point belongs to.
     * @api
     */
    MultiPolygon$$1.prototype.getInteriorPoints = function getInteriorPoints () {
      return new MultiPoint$1(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);
    };

    /**
     * @return {Array<number>} Oriented flat coordinates.
     */
    MultiPolygon$$1.prototype.getOrientedFlatCoordinates = function getOrientedFlatCoordinates () {
      if (this.orientedRevision_ != this.getRevision()) {
        var flatCoordinates = this.flatCoordinates;
        if (linearRingsAreOriented(
          flatCoordinates, 0, this.endss_, this.stride)) {
          this.orientedFlatCoordinates_ = flatCoordinates;
        } else {
          this.orientedFlatCoordinates_ = flatCoordinates.slice();
          this.orientedFlatCoordinates_.length =
              orientLinearRingsArray(
                this.orientedFlatCoordinates_, 0, this.endss_, this.stride);
        }
        this.orientedRevision_ = this.getRevision();
      }
      return this.orientedFlatCoordinates_;
    };

    /**
     * @inheritDoc
     */
    MultiPolygon$$1.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      var simplifiedFlatCoordinates = [];
      var simplifiedEndss = [];
      simplifiedFlatCoordinates.length = quantizeMultiArray(
        this.flatCoordinates, 0, this.endss_, this.stride,
        Math.sqrt(squaredTolerance),
        simplifiedFlatCoordinates, 0, simplifiedEndss);
      return new MultiPolygon$$1(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);
    };

    /**
     * Return the polygon at the specified index.
     * @param {number} index Index.
     * @return {Polygon} Polygon.
     * @api
     */
    MultiPolygon$$1.prototype.getPolygon = function getPolygon (index) {
      if (index < 0 || this.endss_.length <= index) {
        return null;
      }
      var offset;
      if (index === 0) {
        offset = 0;
      } else {
        var prevEnds = this.endss_[index - 1];
        offset = prevEnds[prevEnds.length - 1];
      }
      var ends = this.endss_[index].slice();
      var end = ends[ends.length - 1];
      if (offset !== 0) {
        for (var i = 0, ii = ends.length; i < ii; ++i) {
          ends[i] -= offset;
        }
      }
      return new Polygon$1(this.flatCoordinates.slice(offset, end), this.layout, ends);
    };

    /**
     * Return the polygons of this multipolygon.
     * @return {Array<Polygon>} Polygons.
     * @api
     */
    MultiPolygon$$1.prototype.getPolygons = function getPolygons () {
      var layout = this.layout;
      var flatCoordinates = this.flatCoordinates;
      var endss = this.endss_;
      var polygons = [];
      var offset = 0;
      for (var i = 0, ii = endss.length; i < ii; ++i) {
        var ends = endss[i].slice();
        var end = ends[ends.length - 1];
        if (offset !== 0) {
          for (var j = 0, jj = ends.length; j < jj; ++j) {
            ends[j] -= offset;
          }
        }
        var polygon = new Polygon$1(flatCoordinates.slice(offset, end), layout, ends);
        polygons.push(polygon);
        offset = end;
      }
      return polygons;
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiPolygon$$1.prototype.getType = function getType () {
      return GeometryType.MULTI_POLYGON;
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiPolygon$$1.prototype.intersectsExtent = function intersectsExtent (extent$$1) {
      return intersectsLinearRingMultiArray(
        this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent$$1);
    };

    /**
     * Set the coordinates of the multipolygon.
     * @param {!Array<Array<Array<import("../coordinate.js").Coordinate>>>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    MultiPolygon$$1.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 3);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      var endss = deflateMultiCoordinatesArray(
        this.flatCoordinates, 0, coordinates, this.stride, this.endss_);
      if (endss.length === 0) {
        this.flatCoordinates.length = 0;
      } else {
        var lastEnds = endss[endss.length - 1];
        this.flatCoordinates.length = lastEnds.length === 0 ?
          0 : lastEnds[lastEnds.length - 1];
      }
      this.changed();
    };

    return MultiPolygon$$1;
  }(SimpleGeometry));

  /**
   * @module ol/LayerType
   */

  /**
   * A layer type used when creating layer renderers.
   * @enum {string}
   */
  var LayerType = {
    IMAGE: 'IMAGE',
    TILE: 'TILE',
    VECTOR_TILE: 'VECTOR_TILE',
    VECTOR: 'VECTOR'
  };

  /**
   * @module ol/layer/VectorRenderType
   */

  /**
   * @enum {string}
   * Render mode for vector layers:
   *  * `'image'`: Vector layers are rendered as images. Great performance, but
   *    point symbols and texts are always rotated with the view and pixels are
   *    scaled during zoom animations.
   *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering
   *    even during animations, but slower performance.
   * @api
   */
  var VectorRenderType = {
    IMAGE: 'image',
    VECTOR: 'vector'
  };

  /**
   * @module ol/colorlike
   */


  /**
   * A type accepted by CanvasRenderingContext2D.fillStyle
   * or CanvasRenderingContext2D.strokeStyle.
   * Represents a color, pattern, or gradient. The origin for patterns and
   * gradients as fill style is an increment of 512 css pixels from map coordinate
   * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
   * must be a factor of two (2, 4, 8, ..., 512).
   *
   * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
   * @api
   */


  /**
   * @param {import("./color.js").Color|ColorLike} color Color.
   * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.
   * @api
   */
  function asColorLike(color) {
    if (Array.isArray(color)) {
      return toString(color);
    } else {
      return color;
    }
  }

  /**
   * @module ol/structs/LRUCache
   */


  /**
   * @typedef {Object} Entry
   * @property {string} key_
   * @property {Object} newer
   * @property {Object} older
   * @property {*} value_
   */


  /**
   * @classdesc
   * Implements a Least-Recently-Used cache where the keys do not conflict with
   * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
   * items from the cache is the responsibility of the user.
   *
   * @fires import("../events/Event.js").Event
   * @template T
   */
  var LRUCache = /*@__PURE__*/(function (EventTarget) {
    function LRUCache(opt_highWaterMark) {

      EventTarget.call(this);

      /**
       * @type {number}
       */
      this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;

      /**
       * @private
       * @type {number}
       */
      this.count_ = 0;

      /**
       * @private
       * @type {!Object<string, Entry>}
       */
      this.entries_ = {};

      /**
       * @private
       * @type {?Entry}
       */
      this.oldest_ = null;

      /**
       * @private
       * @type {?Entry}
       */
      this.newest_ = null;

    }

    if ( EventTarget ) LRUCache.__proto__ = EventTarget;
    LRUCache.prototype = Object.create( EventTarget && EventTarget.prototype );
    LRUCache.prototype.constructor = LRUCache;


    /**
     * @return {boolean} Can expire cache.
     */
    LRUCache.prototype.canExpireCache = function canExpireCache () {
      return this.getCount() > this.highWaterMark;
    };


    /**
     * FIXME empty description for jsdoc
     */
    LRUCache.prototype.clear = function clear () {
      this.count_ = 0;
      this.entries_ = {};
      this.oldest_ = null;
      this.newest_ = null;
      this.dispatchEvent(EventType.CLEAR);
    };


    /**
     * @param {string} key Key.
     * @return {boolean} Contains key.
     */
    LRUCache.prototype.containsKey = function containsKey (key) {
      return this.entries_.hasOwnProperty(key);
    };


    /**
     * @param {function(this: S, T, string, LRUCache): ?} f The function
     *     to call for every entry from the oldest to the newer. This function takes
     *     3 arguments (the entry value, the entry key and the LRUCache object).
     *     The return value is ignored.
     * @param {S=} opt_this The object to use as `this` in `f`.
     * @template S
     */
    LRUCache.prototype.forEach = function forEach (f, opt_this) {
      var entry = this.oldest_;
      while (entry) {
        f.call(opt_this, entry.value_, entry.key_, this);
        entry = entry.newer;
      }
    };


    /**
     * @param {string} key Key.
     * @return {T} Value.
     */
    LRUCache.prototype.get = function get (key) {
      var entry = this.entries_[key];
      assert(entry !== undefined,
        15); // Tried to get a value for a key that does not exist in the cache
      if (entry === this.newest_) {
        return entry.value_;
      } else if (entry === this.oldest_) {
        this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);
        this.oldest_.older = null;
      } else {
        entry.newer.older = entry.older;
        entry.older.newer = entry.newer;
      }
      entry.newer = null;
      entry.older = this.newest_;
      this.newest_.newer = entry;
      this.newest_ = entry;
      return entry.value_;
    };


    /**
     * Remove an entry from the cache.
     * @param {string} key The entry key.
     * @return {T} The removed entry.
     */
    LRUCache.prototype.remove = function remove (key) {
      var entry = this.entries_[key];
      assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
      if (entry === this.newest_) {
        this.newest_ = /** @type {Entry} */ (entry.older);
        if (this.newest_) {
          this.newest_.newer = null;
        }
      } else if (entry === this.oldest_) {
        this.oldest_ = /** @type {Entry} */ (entry.newer);
        if (this.oldest_) {
          this.oldest_.older = null;
        }
      } else {
        entry.newer.older = entry.older;
        entry.older.newer = entry.newer;
      }
      delete this.entries_[key];
      --this.count_;
      return entry.value_;
    };


    /**
     * @return {number} Count.
     */
    LRUCache.prototype.getCount = function getCount () {
      return this.count_;
    };


    /**
     * @return {Array<string>} Keys.
     */
    LRUCache.prototype.getKeys = function getKeys () {
      var keys = new Array(this.count_);
      var i = 0;
      var entry;
      for (entry = this.newest_; entry; entry = entry.older) {
        keys[i++] = entry.key_;
      }
      return keys;
    };


    /**
     * @return {Array<T>} Values.
     */
    LRUCache.prototype.getValues = function getValues () {
      var values = new Array(this.count_);
      var i = 0;
      var entry;
      for (entry = this.newest_; entry; entry = entry.older) {
        values[i++] = entry.value_;
      }
      return values;
    };


    /**
     * @return {T} Last value.
     */
    LRUCache.prototype.peekLast = function peekLast () {
      return this.oldest_.value_;
    };


    /**
     * @return {string} Last key.
     */
    LRUCache.prototype.peekLastKey = function peekLastKey () {
      return this.oldest_.key_;
    };


    /**
     * Get the key of the newest item in the cache.  Throws if the cache is empty.
     * @return {string} The newest key.
     */
    LRUCache.prototype.peekFirstKey = function peekFirstKey () {
      return this.newest_.key_;
    };


    /**
     * @return {T} value Value.
     */
    LRUCache.prototype.pop = function pop () {
      var entry = this.oldest_;
      delete this.entries_[entry.key_];
      if (entry.newer) {
        entry.newer.older = null;
      }
      this.oldest_ = /** @type {Entry} */ (entry.newer);
      if (!this.oldest_) {
        this.newest_ = null;
      }
      --this.count_;
      return entry.value_;
    };


    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */
    LRUCache.prototype.replace = function replace (key, value) {
      this.get(key); // update `newest_`
      this.entries_[key].value_ = value;
    };


    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */
    LRUCache.prototype.set = function set (key, value) {
      assert(!(key in this.entries_),
        16); // Tried to set a value for a key that is used already
      var entry = /** @type {Entry} */ ({
        key_: key,
        newer: null,
        older: this.newest_,
        value_: value
      });
      if (!this.newest_) {
        this.oldest_ = entry;
      } else {
        this.newest_.newer = entry;
      }
      this.newest_ = entry;
      this.entries_[key] = entry;
      ++this.count_;
    };


    /**
     * Set a maximum number of entries for the cache.
     * @param {number} size Cache size.
     * @api
     */
    LRUCache.prototype.setSize = function setSize (size$$1) {
      this.highWaterMark = size$$1;
    };


    /**
     * Prune the cache.
     */
    LRUCache.prototype.prune = function prune () {
      while (this.canExpireCache()) {
        this.pop();
      }
    };

    return LRUCache;
  }(Target));

  /**
   * @module ol/render/canvas
   */


  /**
   * @typedef {Object} FillState
   * @property {import("../colorlike.js").ColorLike} fillStyle
   */


  /**
   * @typedef {Object} FillStrokeState
   * @property {import("../colorlike.js").ColorLike} [currentFillStyle]
   * @property {import("../colorlike.js").ColorLike} [currentStrokeStyle]
   * @property {string} [currentLineCap]
   * @property {Array<number>} currentLineDash
   * @property {number} [currentLineDashOffset]
   * @property {string} [currentLineJoin]
   * @property {number} [currentLineWidth]
   * @property {number} [currentMiterLimit]
   * @property {number} [lastStroke]
   * @property {import("../colorlike.js").ColorLike} [fillStyle]
   * @property {import("../colorlike.js").ColorLike} [strokeStyle]
   * @property {string} [lineCap]
   * @property {Array<number>} lineDash
   * @property {number} [lineDashOffset]
   * @property {string} [lineJoin]
   * @property {number} [lineWidth]
   * @property {number} [miterLimit]
   */


  /**
   * @typedef {Object} StrokeState
   * @property {string} lineCap
   * @property {Array<number>} lineDash
   * @property {number} lineDashOffset
   * @property {string} lineJoin
   * @property {number} lineWidth
   * @property {number} miterLimit
   * @property {import("../colorlike.js").ColorLike} strokeStyle
   */


  /**
   * @typedef {Object} TextState
   * @property {string} font
   * @property {string} [textAlign]
   * @property {string} textBaseline
   * @property {string} [placement]
   * @property {number} [maxAngle]
   * @property {boolean} [overflow]
   * @property {import("../style/Fill.js").default} [backgroundFill]
   * @property {import("../style/Stroke.js").default} [backgroundStroke]
   * @property {number} [scale]
   * @property {Array<number>} [padding]
   */


  /**
   * Container for decluttered replay instructions that need to be rendered or
   * omitted together, i.e. when styles render both an image and text, or for the
   * characters that form text along lines. The basic elements of this array are
   * `[minX, minY, maxX, maxY, count]`, where the first four entries are the
   * rendered extent of the group in pixel space. `count` is the number of styles
   * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.
   * In addition to these four elements, declutter instruction arrays (i.e. the
   * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.
   * @typedef {Array<*>} DeclutterGroup
   */


  /**
   * @const
   * @type {string}
   */
  var defaultFont = '10px sans-serif';


  /**
   * @const
   * @type {import("../color.js").Color}
   */
  var defaultFillStyle = [0, 0, 0, 1];


  /**
   * @const
   * @type {string}
   */
  var defaultLineCap = 'round';


  /**
   * @const
   * @type {Array<number>}
   */
  var defaultLineDash = [];


  /**
   * @const
   * @type {number}
   */
  var defaultLineDashOffset = 0;


  /**
   * @const
   * @type {string}
   */
  var defaultLineJoin = 'round';


  /**
   * @const
   * @type {number}
   */
  var defaultMiterLimit = 10;


  /**
   * @const
   * @type {import("../color.js").Color}
   */
  var defaultStrokeStyle = [0, 0, 0, 1];


  /**
   * @const
   * @type {string}
   */
  var defaultTextAlign = 'center';


  /**
   * @const
   * @type {string}
   */
  var defaultTextBaseline = 'middle';


  /**
   * @const
   * @type {Array<number>}
   */
  var defaultPadding = [0, 0, 0, 0];


  /**
   * @const
   * @type {number}
   */
  var defaultLineWidth = 1;


  /**
   * The label cache for text rendering. To change the default cache size of 2048
   * entries, use {@link module:ol/structs/LRUCache#setSize}.
   * @type {LRUCache<HTMLCanvasElement>}
   * @api
   */
  var labelCache = new LRUCache();


  /**
   * @type {!Object<string, number>}
   */
  var checkedFonts = {};


  /**
   * @type {CanvasRenderingContext2D}
   */
  var measureContext = null;


  /**
   * @type {!Object<string, number>}
   */
  var textHeights = {};


  /**
   * Clears the label cache when a font becomes available.
   * @param {string} fontSpec CSS font spec.
   */
  var checkFont = (function() {
    var retries = 60;
    var checked = checkedFonts;
    var size$$1 = '32px ';
    var referenceFonts = ['monospace', 'serif'];
    var len = referenceFonts.length;
    var text = 'wmytzilWMYTZIL@#/&?$%10\uF013';
    var interval, referenceWidth;

    function isAvailable(font) {
      var context = getMeasureContext();
      // Check weight ranges according to
      // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights
      for (var weight = 100; weight <= 700; weight += 300) {
        var fontWeight = weight + ' ';
        var available = true;
        for (var i = 0; i < len; ++i) {
          var referenceFont = referenceFonts[i];
          context.font = fontWeight + size$$1 + referenceFont;
          referenceWidth = context.measureText(text).width;
          if (font != referenceFont) {
            context.font = fontWeight + size$$1 + font + ',' + referenceFont;
            var width = context.measureText(text).width;
            // If width and referenceWidth are the same, then the fallback was used
            // instead of the font we wanted, so the font is not available.
            available = available && width != referenceWidth;
          }
        }
        if (available) {
          // Consider font available when it is available in one weight range.
          //FIXME With this we miss rare corner cases, so we should consider
          //FIXME checking availability for each requested weight range.
          return true;
        }
      }
      return false;
    }

    function check() {
      var done = true;
      for (var font in checked) {
        if (checked[font] < retries) {
          if (isAvailable(font)) {
            checked[font] = retries;
            clear(textHeights);
            // Make sure that loaded fonts are picked up by Safari
            measureContext = null;
            labelCache.clear();
          } else {
            ++checked[font];
            done = false;
          }
        }
      }
      if (done) {
        clearInterval(interval);
        interval = undefined;
      }
    }

    return function(fontSpec) {
      var fontFamilies = getFontFamilies(fontSpec);
      if (!fontFamilies) {
        return;
      }
      for (var i = 0, ii = fontFamilies.length; i < ii; ++i) {
        var fontFamily = fontFamilies[i];
        if (!(fontFamily in checked)) {
          checked[fontFamily] = retries;
          if (!isAvailable(fontFamily)) {
            checked[fontFamily] = 0;
            if (interval === undefined) {
              interval = setInterval(check, 32);
            }
          }
        }
      }
    };
  })();


  /**
   * @return {CanvasRenderingContext2D} Measure context.
   */
  function getMeasureContext() {
    if (!measureContext) {
      measureContext = createCanvasContext2D(1, 1);
    }
    return measureContext;
  }


  /**
   * @param {string} font Font to use for measuring.
   * @return {import("../size.js").Size} Measurement.
   */
  var measureTextHeight = (function() {
    var span;
    var heights = textHeights;
    return function(font) {
      var height = heights[font];
      if (height == undefined) {
        if (!span) {
          span = document.createElement('span');
          span.textContent = 'M';
          span.style.margin = span.style.padding = '0 !important';
          span.style.position = 'absolute !important';
          span.style.left = '-99999px !important';
        }
        span.style.font = font;
        document.body.appendChild(span);
        height = heights[font] = span.offsetHeight;
        document.body.removeChild(span);
      }
      return height;
    };
  })();


  /**
   * @param {string} font Font.
   * @param {string} text Text.
   * @return {number} Width.
   */
  function measureTextWidth(font, text) {
    var measureContext = getMeasureContext();
    if (font != measureContext.font) {
      measureContext.font = font;
    }
    return measureContext.measureText(text).width;
  }


  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} rotation Rotation.
   * @param {number} offsetX X offset.
   * @param {number} offsetY Y offset.
   */
  function rotateAtOffset(context, rotation, offsetX, offsetY) {
    if (rotation !== 0) {
      context.translate(offsetX, offsetY);
      context.rotate(rotation);
      context.translate(-offsetX, -offsetY);
    }
  }


  var resetTransform = create();


  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../transform.js").Transform|null} transform Transform.
   * @param {number} opacity Opacity.
   * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} w Width.
   * @param {number} h Height.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} scale Scale.
   */
  function drawImage(context,
    transform, opacity, image, originX, originY, w, h, x, y, scale) {
    var alpha;
    if (opacity != 1) {
      alpha = context.globalAlpha;
      context.globalAlpha = alpha * opacity;
    }
    if (transform) {
      context.setTransform.apply(context, transform);
    }

    context.drawImage(image, originX, originY, w, h, x, y, w * scale, h * scale);

    if (alpha) {
      context.globalAlpha = alpha;
    }
    if (transform) {
      context.setTransform.apply(context, resetTransform);
    }
  }

  /**
   * @module ol/style/Image
   */


  /**
   * @typedef {Object} Options
   * @property {number} opacity
   * @property {boolean} rotateWithView
   * @property {number} rotation
   * @property {number} scale
   */


  /**
   * @classdesc
   * A base class used for creating subclasses and not instantiated in
   * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
   * {@link module:ol/style/RegularShape~RegularShape}.
   * @abstract
   * @api
   */
  var ImageStyle$1 = function ImageStyle$$1(options) {

    /**
     * @private
     * @type {number}
     */
    this.opacity_ = options.opacity;

    /**
     * @private
     * @type {boolean}
     */
    this.rotateWithView_ = options.rotateWithView;

    /**
     * @private
     * @type {number}
     */
    this.rotation_ = options.rotation;

    /**
     * @private
     * @type {number}
     */
    this.scale_ = options.scale;

  };

  /**
   * Clones the style.
   * @return {ImageStyle} The cloned style.
   * @api
   */
  ImageStyle$1.prototype.clone = function clone () {
    return new ImageStyle$1({
      opacity: this.getOpacity(),
      scale: this.getScale(),
      rotation: this.getRotation(),
      rotateWithView: this.getRotateWithView()
    });
  };

  /**
   * Get the symbolizer opacity.
   * @return {number} Opacity.
   * @api
   */
  ImageStyle$1.prototype.getOpacity = function getOpacity () {
    return this.opacity_;
  };

  /**
   * Determine whether the symbolizer rotates with the map.
   * @return {boolean} Rotate with map.
   * @api
   */
  ImageStyle$1.prototype.getRotateWithView = function getRotateWithView () {
    return this.rotateWithView_;
  };

  /**
   * Get the symoblizer rotation.
   * @return {number} Rotation.
   * @api
   */
  ImageStyle$1.prototype.getRotation = function getRotation () {
    return this.rotation_;
  };

  /**
   * Get the symbolizer scale.
   * @return {number} Scale.
   * @api
   */
  ImageStyle$1.prototype.getScale = function getScale () {
    return this.scale_;
  };

  /**
   * This method is deprecated and always returns false.
   * @return {boolean} false.
   * @deprecated
   * @api
   */
  ImageStyle$1.prototype.getSnapToPixel = function getSnapToPixel () {
    return false;
  };

  /**
   * Get the anchor point in pixels. The anchor determines the center point for the
   * symbolizer.
   * @abstract
   * @return {Array<number>} Anchor.
   */
  ImageStyle$1.prototype.getAnchor = function getAnchor () {
    return abstract();
  };

  /**
   * Get the image element for the symbolizer.
   * @abstract
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
   */
  ImageStyle$1.prototype.getImage = function getImage (pixelRatio) {
    return abstract();
  };

  /**
   * @abstract
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
   */
  ImageStyle$1.prototype.getHitDetectionImage = function getHitDetectionImage (pixelRatio) {
    return abstract();
  };

  /**
   * @abstract
   * @return {import("../ImageState.js").default} Image state.
   */
  ImageStyle$1.prototype.getImageState = function getImageState () {
    return abstract();
  };

  /**
   * @abstract
   * @return {import("../size.js").Size} Image size.
   */
  ImageStyle$1.prototype.getImageSize = function getImageSize () {
    return abstract();
  };

  /**
   * @abstract
   * @return {import("../size.js").Size} Size of the hit-detection image.
   */
  ImageStyle$1.prototype.getHitDetectionImageSize = function getHitDetectionImageSize () {
    return abstract();
  };

  /**
   * Get the origin of the symbolizer.
   * @abstract
   * @return {Array<number>} Origin.
   */
  ImageStyle$1.prototype.getOrigin = function getOrigin () {
    return abstract();
  };

  /**
   * Get the size of the symbolizer (in pixels).
   * @abstract
   * @return {import("../size.js").Size} Size.
   */
  ImageStyle$1.prototype.getSize = function getSize () {
    return abstract();
  };

  /**
   * Set the opacity.
   *
   * @param {number} opacity Opacity.
   * @api
   */
  ImageStyle$1.prototype.setOpacity = function setOpacity (opacity) {
    this.opacity_ = opacity;
  };

  /**
   * Set whether to rotate the style with the view.
   *
   * @param {boolean} rotateWithView Rotate with map.
   * @api
   */
  ImageStyle$1.prototype.setRotateWithView = function setRotateWithView (rotateWithView) {
    this.rotateWithView_ = rotateWithView;
  };

  /**
   * Set the rotation.
   *
   * @param {number} rotation Rotation.
   * @api
   */
  ImageStyle$1.prototype.setRotation = function setRotation (rotation) {
    this.rotation_ = rotation;
  };
  /**
   * Set the scale.
   *
   * @param {number} scale Scale.
   * @api
   */
  ImageStyle$1.prototype.setScale = function setScale (scale) {
    this.scale_ = scale;
  };

  /**
   * This method is deprecated and does nothing.
   * @param {boolean} snapToPixel Snap to pixel?
   * @deprecated
   * @api
   */
  ImageStyle$1.prototype.setSnapToPixel = function setSnapToPixel (snapToPixel) {};

  /**
   * @abstract
   * @param {function(this: T, import("../events/Event.js").default)} listener Listener function.
   * @param {T} thisArg Value to use as `this` when executing `listener`.
   * @return {import("../events.js").EventsKey|undefined} Listener key.
   * @template T
   */
  ImageStyle$1.prototype.listenImageChange = function listenImageChange (listener, thisArg) {
    return abstract();
  };

  /**
   * Load not yet loaded URI.
   * @abstract
   */
  ImageStyle$1.prototype.load = function load () {
    abstract();
  };

  /**
   * @abstract
   * @param {function(this: T, import("../events/Event.js").default)} listener Listener function.
   * @param {T} thisArg Value to use as `this` when executing `listener`.
   * @template T
   */
  ImageStyle$1.prototype.unlistenImageChange = function unlistenImageChange (listener, thisArg) {
    abstract();
  };

  /**
   * @module ol/style/RegularShape
   */


  /**
   * Specify radius for regular polygons, or radius1 and radius2 for stars.
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
   * is the number of sides.
   * @property {number} [radius] Radius of a regular polygon.
   * @property {number} [radius1] Outer radius of a star.
   * @property {number} [radius2] Inner radius of a star.
   * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
   * @property {import("./AtlasManager.js").default} [atlasManager] The atlas manager to use for this symbol. When
   * using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given, the
   * symbol is added to an atlas. By default no atlas manager is used.
   */


  /**
   * @typedef {Object} RenderOptions
   * @property {import("../colorlike.js").ColorLike} [strokeStyle]
   * @property {number} strokeWidth
   * @property {number} size
   * @property {string} lineCap
   * @property {Array<number>} lineDash
   * @property {number} lineDashOffset
   * @property {string} lineJoin
   * @property {number} miterLimit
   */


  /**
   * @classdesc
   * Set regular shape style for vector features. The resulting shape will be
   * a regular polygon when `radius` is provided, or a star when `radius1` and
   * `radius2` are provided.
   * @api
   */
  var RegularShape$1 = /*@__PURE__*/(function (ImageStyle$$1) {
    function RegularShape$$1(options) {
      /**
       * @type {boolean}
       */
      var rotateWithView = options.rotateWithView !== undefined ?
        options.rotateWithView : false;

      ImageStyle$$1.call(this, {
        opacity: 1,
        rotateWithView: rotateWithView,
        rotation: options.rotation !== undefined ? options.rotation : 0,
        scale: 1
      });

      /**
       * @private
       * @type {Array<string|number>}
       */
      this.checksums_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.hitDetectionCanvas_ = null;

      /**
       * @private
       * @type {import("./Fill.js").default}
       */
      this.fill_ = options.fill !== undefined ? options.fill : null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.origin_ = [0, 0];

      /**
       * @private
       * @type {number}
       */
      this.points_ = options.points;

      /**
       * @protected
       * @type {number}
       */
      this.radius_ = /** @type {number} */ (options.radius !== undefined ?
        options.radius : options.radius1);

      /**
       * @private
       * @type {number|undefined}
       */
      this.radius2_ = options.radius2;

      /**
       * @private
       * @type {number}
       */
      this.angle_ = options.angle !== undefined ? options.angle : 0;

      /**
       * @private
       * @type {import("./Stroke.js").default}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.size_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.imageSize_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.hitDetectionImageSize_ = null;

      /**
       * @protected
       * @type {import("./AtlasManager.js").default|undefined}
       */
      this.atlasManager_ = options.atlasManager;

      this.render_(this.atlasManager_);

    }

    if ( ImageStyle$$1 ) RegularShape$$1.__proto__ = ImageStyle$$1;
    RegularShape$$1.prototype = Object.create( ImageStyle$$1 && ImageStyle$$1.prototype );
    RegularShape$$1.prototype.constructor = RegularShape$$1;

    /**
     * Clones the style. If an atlasmanager was provided to the original style it will be used in the cloned style, too.
     * @return {RegularShape} The cloned style.
     * @api
     */
    RegularShape$$1.prototype.clone = function clone () {
      var style = new RegularShape$$1({
        fill: this.getFill() ? this.getFill().clone() : undefined,
        points: this.getPoints(),
        radius: this.getRadius(),
        radius2: this.getRadius2(),
        angle: this.getAngle(),
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        atlasManager: this.atlasManager_
      });
      style.setOpacity(this.getOpacity());
      style.setScale(this.getScale());
      return style;
    };

    /**
     * @inheritDoc
     * @api
     */
    RegularShape$$1.prototype.getAnchor = function getAnchor () {
      return this.anchor_;
    };

    /**
     * Get the angle used in generating the shape.
     * @return {number} Shape's rotation in radians.
     * @api
     */
    RegularShape$$1.prototype.getAngle = function getAngle () {
      return this.angle_;
    };

    /**
     * Get the fill style for the shape.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */
    RegularShape$$1.prototype.getFill = function getFill () {
      return this.fill_;
    };

    /**
     * @inheritDoc
     */
    RegularShape$$1.prototype.getHitDetectionImage = function getHitDetectionImage (pixelRatio) {
      return this.hitDetectionCanvas_;
    };

    /**
     * @inheritDoc
     * @api
     */
    RegularShape$$1.prototype.getImage = function getImage (pixelRatio) {
      return this.canvas_;
    };

    /**
     * @inheritDoc
     */
    RegularShape$$1.prototype.getImageSize = function getImageSize () {
      return this.imageSize_;
    };

    /**
     * @inheritDoc
     */
    RegularShape$$1.prototype.getHitDetectionImageSize = function getHitDetectionImageSize () {
      return this.hitDetectionImageSize_;
    };

    /**
     * @inheritDoc
     */
    RegularShape$$1.prototype.getImageState = function getImageState () {
      return ImageState.LOADED;
    };

    /**
     * @inheritDoc
     * @api
     */
    RegularShape$$1.prototype.getOrigin = function getOrigin () {
      return this.origin_;
    };

    /**
     * Get the number of points for generating the shape.
     * @return {number} Number of points for stars and regular polygons.
     * @api
     */
    RegularShape$$1.prototype.getPoints = function getPoints () {
      return this.points_;
    };

    /**
     * Get the (primary) radius for the shape.
     * @return {number} Radius.
     * @api
     */
    RegularShape$$1.prototype.getRadius = function getRadius () {
      return this.radius_;
    };

    /**
     * Get the secondary radius for the shape.
     * @return {number|undefined} Radius2.
     * @api
     */
    RegularShape$$1.prototype.getRadius2 = function getRadius2 () {
      return this.radius2_;
    };

    /**
     * @inheritDoc
     * @api
     */
    RegularShape$$1.prototype.getSize = function getSize () {
      return this.size_;
    };

    /**
     * Get the stroke style for the shape.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */
    RegularShape$$1.prototype.getStroke = function getStroke () {
      return this.stroke_;
    };

    /**
     * @inheritDoc
     */
    RegularShape$$1.prototype.listenImageChange = function listenImageChange (listener, thisArg) {
      return undefined;
    };

    /**
     * @inheritDoc
     */
    RegularShape$$1.prototype.load = function load () {};

    /**
     * @inheritDoc
     */
    RegularShape$$1.prototype.unlistenImageChange = function unlistenImageChange (listener, thisArg) {};

    /**
     * @protected
     * @param {import("./AtlasManager.js").default|undefined} atlasManager An atlas manager.
     */
    RegularShape$$1.prototype.render_ = function render_ (atlasManager) {
      var imageSize;
      var lineCap = '';
      var lineJoin = '';
      var miterLimit = 0;
      var lineDash = null;
      var lineDashOffset = 0;
      var strokeStyle;
      var strokeWidth = 0;

      if (this.stroke_) {
        strokeStyle = this.stroke_.getColor();
        if (strokeStyle === null) {
          strokeStyle = defaultStrokeStyle;
        }
        strokeStyle = asColorLike(strokeStyle);
        strokeWidth = this.stroke_.getWidth();
        if (strokeWidth === undefined) {
          strokeWidth = defaultLineWidth;
        }
        lineDash = this.stroke_.getLineDash();
        lineDashOffset = this.stroke_.getLineDashOffset();
        if (!CANVAS_LINE_DASH) {
          lineDash = null;
          lineDashOffset = 0;
        }
        lineJoin = this.stroke_.getLineJoin();
        if (lineJoin === undefined) {
          lineJoin = defaultLineJoin;
        }
        lineCap = this.stroke_.getLineCap();
        if (lineCap === undefined) {
          lineCap = defaultLineCap;
        }
        miterLimit = this.stroke_.getMiterLimit();
        if (miterLimit === undefined) {
          miterLimit = defaultMiterLimit;
        }
      }

      var size$$1 = 2 * (this.radius_ + strokeWidth) + 1;

      /** @type {RenderOptions} */
      var renderOptions = {
        strokeStyle: strokeStyle,
        strokeWidth: strokeWidth,
        size: size$$1,
        lineCap: lineCap,
        lineDash: lineDash,
        lineDashOffset: lineDashOffset,
        lineJoin: lineJoin,
        miterLimit: miterLimit
      };

      if (atlasManager === undefined) {
        // no atlas manager is used, create a new canvas
        var context = createCanvasContext2D(size$$1, size$$1);
        this.canvas_ = context.canvas;

        // canvas.width and height are rounded to the closest integer
        size$$1 = this.canvas_.width;
        imageSize = size$$1;

        this.draw_(renderOptions, context, 0, 0);

        this.createHitDetectionCanvas_(renderOptions);
      } else {
        // an atlas manager is used, add the symbol to an atlas
        size$$1 = Math.round(size$$1);

        var hasCustomHitDetectionImage = !this.fill_;
        var renderHitDetectionCallback;
        if (hasCustomHitDetectionImage) {
          // render the hit-detection image into a separate atlas image
          renderHitDetectionCallback =
              this.drawHitDetectionCanvas_.bind(this, renderOptions);
        }

        var id = this.getChecksum();
        var info = atlasManager.add(
          id, size$$1, size$$1, this.draw_.bind(this, renderOptions),
          renderHitDetectionCallback);

        this.canvas_ = info.image;
        this.origin_ = [info.offsetX, info.offsetY];
        imageSize = info.image.width;

        if (hasCustomHitDetectionImage) {
          this.hitDetectionCanvas_ = info.hitImage;
          this.hitDetectionImageSize_ =
              [info.hitImage.width, info.hitImage.height];
        } else {
          this.hitDetectionCanvas_ = this.canvas_;
          this.hitDetectionImageSize_ = [imageSize, imageSize];
        }
      }

      this.anchor_ = [size$$1 / 2, size$$1 / 2];
      this.size_ = [size$$1, size$$1];
      this.imageSize_ = [imageSize, imageSize];
    };

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The rendering context.
     * @param {number} x The origin for the symbol (x).
     * @param {number} y The origin for the symbol (y).
     */
    RegularShape$$1.prototype.draw_ = function draw_ (renderOptions, context, x, y) {
      var i, angle0, radiusC;
      // reset transform
      context.setTransform(1, 0, 0, 1, 0, 0);

      // then move to (x, y)
      context.translate(x, y);

      context.beginPath();

      var points = this.points_;
      if (points === Infinity) {
        context.arc(
          renderOptions.size / 2, renderOptions.size / 2,
          this.radius_, 0, 2 * Math.PI, true);
      } else {
        var radius2 = (this.radius2_ !== undefined) ? this.radius2_
          : this.radius_;
        if (radius2 !== this.radius_) {
          points = 2 * points;
        }
        for (i = 0; i <= points; i++) {
          angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
          radiusC = i % 2 === 0 ? this.radius_ : radius2;
          context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),
            renderOptions.size / 2 + radiusC * Math.sin(angle0));
        }
      }


      if (this.fill_) {
        var color = this.fill_.getColor();
        if (color === null) {
          color = defaultFillStyle;
        }
        context.fillStyle = asColorLike(color);
        context.fill();
      }
      if (this.stroke_) {
        context.strokeStyle = renderOptions.strokeStyle;
        context.lineWidth = renderOptions.strokeWidth;
        if (renderOptions.lineDash) {
          context.setLineDash(renderOptions.lineDash);
          context.lineDashOffset = renderOptions.lineDashOffset;
        }
        context.lineCap = /** @type {CanvasLineCap} */ (renderOptions.lineCap);
        context.lineJoin = /** @type {CanvasLineJoin} */ (renderOptions.lineJoin);
        context.miterLimit = renderOptions.miterLimit;
        context.stroke();
      }
      context.closePath();
    };

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     */
    RegularShape$$1.prototype.createHitDetectionCanvas_ = function createHitDetectionCanvas_ (renderOptions) {
      this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];
      if (this.fill_) {
        this.hitDetectionCanvas_ = this.canvas_;
        return;
      }

      // if no fill style is set, create an extra hit-detection image with a
      // default fill style
      var context = createCanvasContext2D(renderOptions.size, renderOptions.size);
      this.hitDetectionCanvas_ = context.canvas;

      this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);
    };

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The context.
     * @param {number} x The origin for the symbol (x).
     * @param {number} y The origin for the symbol (y).
     */
    RegularShape$$1.prototype.drawHitDetectionCanvas_ = function drawHitDetectionCanvas_ (renderOptions, context, x, y) {
      // reset transform
      context.setTransform(1, 0, 0, 1, 0, 0);

      // then move to (x, y)
      context.translate(x, y);

      context.beginPath();

      var points = this.points_;
      if (points === Infinity) {
        context.arc(
          renderOptions.size / 2, renderOptions.size / 2,
          this.radius_, 0, 2 * Math.PI, true);
      } else {
        var radius2 = (this.radius2_ !== undefined) ? this.radius2_
          : this.radius_;
        if (radius2 !== this.radius_) {
          points = 2 * points;
        }
        var i, radiusC, angle0;
        for (i = 0; i <= points; i++) {
          angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
          radiusC = i % 2 === 0 ? this.radius_ : radius2;
          context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),
            renderOptions.size / 2 + radiusC * Math.sin(angle0));
        }
      }

      context.fillStyle = asString(defaultFillStyle);
      context.fill();
      if (this.stroke_) {
        context.strokeStyle = renderOptions.strokeStyle;
        context.lineWidth = renderOptions.strokeWidth;
        if (renderOptions.lineDash) {
          context.setLineDash(renderOptions.lineDash);
          context.lineDashOffset = renderOptions.lineDashOffset;
        }
        context.stroke();
      }
      context.closePath();
    };

    /**
     * @return {string} The checksum.
     */
    RegularShape$$1.prototype.getChecksum = function getChecksum () {
      var strokeChecksum = this.stroke_ ?
        this.stroke_.getChecksum() : '-';
      var fillChecksum = this.fill_ ?
        this.fill_.getChecksum() : '-';

      var recalculate = !this.checksums_ ||
          (strokeChecksum != this.checksums_[1] ||
          fillChecksum != this.checksums_[2] ||
          this.radius_ != this.checksums_[3] ||
          this.radius2_ != this.checksums_[4] ||
          this.angle_ != this.checksums_[5] ||
          this.points_ != this.checksums_[6]);

      if (recalculate) {
        var checksum = 'r' + strokeChecksum + fillChecksum +
            (this.radius_ !== undefined ? this.radius_.toString() : '-') +
            (this.radius2_ !== undefined ? this.radius2_.toString() : '-') +
            (this.angle_ !== undefined ? this.angle_.toString() : '-') +
            (this.points_ !== undefined ? this.points_.toString() : '-');
        this.checksums_ = [checksum, strokeChecksum, fillChecksum,
          this.radius_, this.radius2_, this.angle_, this.points_];
      }

      return /** @type {string} */ (this.checksums_[0]);
    };

    return RegularShape$$1;
  }(ImageStyle$1));

  /**
   * @module ol/style/Circle
   */


  /**
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} radius Circle radius.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./AtlasManager.js").default} [atlasManager] The atlas manager to use for this circle.
   * When using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given,
   * the circle is added to an atlas. By default no atlas manager is used.
   */


  /**
   * @classdesc
   * Set circle style for vector features.
   * @api
   */
  var CircleStyle = /*@__PURE__*/(function (RegularShape$$1) {
    function CircleStyle(opt_options) {

      var options = opt_options || /** @type {Options} */ ({});

      RegularShape$$1.call(this, {
        points: Infinity,
        fill: options.fill,
        radius: options.radius,
        stroke: options.stroke,
        atlasManager: options.atlasManager
      });

    }

    if ( RegularShape$$1 ) CircleStyle.__proto__ = RegularShape$$1;
    CircleStyle.prototype = Object.create( RegularShape$$1 && RegularShape$$1.prototype );
    CircleStyle.prototype.constructor = CircleStyle;

    /**
    * Clones the style.  If an atlasmanager was provided to the original style it will be used in the cloned style, too.
    * @return {CircleStyle} The cloned style.
    * @override
    * @api
    */
    CircleStyle.prototype.clone = function clone () {
      var style = new CircleStyle({
        fill: this.getFill() ? this.getFill().clone() : undefined,
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        radius: this.getRadius(),
        atlasManager: this.atlasManager_
      });
      style.setOpacity(this.getOpacity());
      style.setScale(this.getScale());
      return style;
    };

    /**
    * Set the circle radius.
    *
    * @param {number} radius Circle radius.
    * @api
    */
    CircleStyle.prototype.setRadius = function setRadius (radius) {
      this.radius_ = radius;
      this.render_(this.atlasManager_);
    };

    return CircleStyle;
  }(RegularShape$1));

  /**
   * @module ol/style/Style
   */


  /**
   * A function that takes an {@link module:ol/Feature} and a `{number}`
   * representing the view's resolution. The function should return a
   * {@link module:ol/style/Style} or an array of them. This way e.g. a
   * vector layer can be styled.
   *
   * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>)} StyleFunction
   */

  /**
   * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
   * @typedef {Style|Array<Style>|StyleFunction} StyleLike
   */

  /**
   * A function that takes an {@link module:ol/Feature} as argument and returns an
   * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.
   *
   * @typedef {function(import("../Feature.js").FeatureLike):
   *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
   */


  /**
   * Custom renderer function. Takes two arguments:
   *
   * 1. The pixel coordinates of the geometry in GeoJSON notation.
   * 2. The {@link module:ol/render~State} of the layer renderer.
   *
   * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>),import("../render.js").State)}
   * RenderFunction
   */


  /**
   * @typedef {Object} Options
   * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
   * or function returning a geometry to render for this style.
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {import("./Image.js").default} [image] Image style.
   * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
   * ignored, and the provided function will be called with each render frame for each geometry.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./Text.js").default} [text] Text style.
   * @property {number} [zIndex] Z index.
   */

  /**
   * @classdesc
   * Container for vector feature rendering styles. Any changes made to the style
   * or its children through `set*()` methods will not take effect until the
   * feature or layer that uses the style is re-rendered.
   * @api
   */
  var Style$1 = function Style$$1(opt_options) {

    var options = opt_options || {};

    /**
     * @private
     * @type {string|import("../geom/Geometry.js").default|GeometryFunction}
     */
    this.geometry_ = null;

    /**
     * @private
     * @type {!GeometryFunction}
     */
    this.geometryFunction_ = defaultGeometryFunction;

    if (options.geometry !== undefined) {
      this.setGeometry(options.geometry);
    }

    /**
     * @private
     * @type {import("./Fill.js").default}
     */
    this.fill_ = options.fill !== undefined ? options.fill : null;

    /**
       * @private
       * @type {import("./Image.js").default}
       */
    this.image_ = options.image !== undefined ? options.image : null;

    /**
     * @private
     * @type {RenderFunction|null}
     */
    this.renderer_ = options.renderer !== undefined ? options.renderer : null;

    /**
     * @private
     * @type {import("./Stroke.js").default}
     */
    this.stroke_ = options.stroke !== undefined ? options.stroke : null;

    /**
     * @private
     * @type {import("./Text.js").default}
     */
    this.text_ = options.text !== undefined ? options.text : null;

    /**
     * @private
     * @type {number|undefined}
     */
    this.zIndex_ = options.zIndex;

  };

  /**
   * Clones the style.
   * @return {Style} The cloned style.
   * @api
   */
  Style$1.prototype.clone = function clone () {
    var geometry = this.getGeometry();
    if (geometry && typeof geometry === 'object') {
      geometry = /** @type {import("../geom/Geometry.js").default} */ (geometry).clone();
    }
    return new Style$1({
      geometry: geometry,
      fill: this.getFill() ? this.getFill().clone() : undefined,
      image: this.getImage() ? this.getImage().clone() : undefined,
      stroke: this.getStroke() ? this.getStroke().clone() : undefined,
      text: this.getText() ? this.getText().clone() : undefined,
      zIndex: this.getZIndex()
    });
  };

  /**
   * Get the custom renderer function that was configured with
   * {@link #setRenderer} or the `renderer` constructor option.
   * @return {RenderFunction|null} Custom renderer function.
   * @api
   */
  Style$1.prototype.getRenderer = function getRenderer () {
    return this.renderer_;
  };

  /**
   * Sets a custom renderer function for this style. When set, `fill`, `stroke`
   * and `image` options of the style will be ignored.
   * @param {RenderFunction|null} renderer Custom renderer function.
   * @api
   */
  Style$1.prototype.setRenderer = function setRenderer (renderer) {
    this.renderer_ = renderer;
  };

  /**
   * Get the geometry to be rendered.
   * @return {string|import("../geom/Geometry.js").default|GeometryFunction}
   * Feature property or geometry or function that returns the geometry that will
   * be rendered with this style.
   * @api
   */
  Style$1.prototype.getGeometry = function getGeometry () {
    return this.geometry_;
  };

  /**
   * Get the function used to generate a geometry for rendering.
   * @return {!GeometryFunction} Function that is called with a feature
   * and returns the geometry to render instead of the feature's geometry.
   * @api
   */
  Style$1.prototype.getGeometryFunction = function getGeometryFunction () {
    return this.geometryFunction_;
  };

  /**
   * Get the fill style.
   * @return {import("./Fill.js").default} Fill style.
   * @api
   */
  Style$1.prototype.getFill = function getFill () {
    return this.fill_;
  };

  /**
   * Set the fill style.
   * @param {import("./Fill.js").default} fill Fill style.
   * @api
   */
  Style$1.prototype.setFill = function setFill (fill) {
    this.fill_ = fill;
  };

  /**
   * Get the image style.
   * @return {import("./Image.js").default} Image style.
   * @api
   */
  Style$1.prototype.getImage = function getImage () {
    return this.image_;
  };

  /**
   * Set the image style.
   * @param {import("./Image.js").default} image Image style.
   * @api
   */
  Style$1.prototype.setImage = function setImage (image) {
    this.image_ = image;
  };

  /**
   * Get the stroke style.
   * @return {import("./Stroke.js").default} Stroke style.
   * @api
   */
  Style$1.prototype.getStroke = function getStroke () {
    return this.stroke_;
  };

  /**
   * Set the stroke style.
   * @param {import("./Stroke.js").default} stroke Stroke style.
   * @api
   */
  Style$1.prototype.setStroke = function setStroke (stroke) {
    this.stroke_ = stroke;
  };

  /**
   * Get the text style.
   * @return {import("./Text.js").default} Text style.
   * @api
   */
  Style$1.prototype.getText = function getText () {
    return this.text_;
  };

  /**
   * Set the text style.
   * @param {import("./Text.js").default} text Text style.
   * @api
   */
  Style$1.prototype.setText = function setText (text) {
    this.text_ = text;
  };

  /**
   * Get the z-index for the style.
   * @return {number|undefined} ZIndex.
   * @api
   */
  Style$1.prototype.getZIndex = function getZIndex () {
    return this.zIndex_;
  };

  /**
   * Set a geometry that is rendered instead of the feature's geometry.
   *
   * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
   *   Feature property or geometry or function returning a geometry to render
   *   for this style.
   * @api
   */
  Style$1.prototype.setGeometry = function setGeometry (geometry) {
    if (typeof geometry === 'function') {
      this.geometryFunction_ = geometry;
    } else if (typeof geometry === 'string') {
      this.geometryFunction_ = function(feature) {
        return (
          /** @type {import("../geom/Geometry.js").default} */ (feature.get(geometry))
        );
      };
    } else if (!geometry) {
      this.geometryFunction_ = defaultGeometryFunction;
    } else if (geometry !== undefined) {
      this.geometryFunction_ = function() {
        return (
          /** @type {import("../geom/Geometry.js").default} */ (geometry)
        );
      };
    }
    this.geometry_ = geometry;
  };

  /**
   * Set the z-index.
   *
   * @param {number|undefined} zIndex ZIndex.
   * @api
   */
  Style$1.prototype.setZIndex = function setZIndex (zIndex) {
    this.zIndex_ = zIndex;
  };


  /**
   * Convert the provided object into a style function.  Functions passed through
   * unchanged.  Arrays of Style or single style objects wrapped in a
   * new style function.
   * @param {StyleFunction|Array<Style>|Style} obj
   *     A style function, a single style, or an array of styles.
   * @return {StyleFunction} A style function.
   */
  function toFunction(obj) {
    var styleFunction;

    if (typeof obj === 'function') {
      styleFunction = obj;
    } else {
      /**
       * @type {Array<Style>}
       */
      var styles;
      if (Array.isArray(obj)) {
        styles = obj;
      } else {
        assert(typeof /** @type {?} */ (obj).getZIndex === 'function',
          41); // Expected an `Style` or an array of `Style`
        var style = /** @type {Style} */ (obj);
        styles = [style];
      }
      styleFunction = function() {
        return styles;
      };
    }
    return styleFunction;
  }


  /**
   * @type {Array<Style>}
   */
  var defaultStyles = null;


  /**
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} resolution Resolution.
   * @return {Array<Style>} Style.
   */
  function createDefaultStyle(feature, resolution) {
    // We don't use an immediately-invoked function
    // and a closure so we don't get an error at script evaluation time in
    // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
    // canvas.getContext('2d') at construction time, which will cause an.error
    // in such browsers.)
    if (!defaultStyles) {
      var fill = new Fill$1({
        color: 'rgba(255,255,255,0.4)'
      });
      var stroke = new Stroke$1({
        color: '#3399CC',
        width: 1.25
      });
      defaultStyles = [
        new Style$1({
          image: new CircleStyle({
            fill: fill,
            stroke: stroke,
            radius: 5
          }),
          fill: fill,
          stroke: stroke
        })
      ];
    }
    return defaultStyles;
  }


  /**
   * Default styles for editing features.
   * @return {Object<import("../geom/GeometryType.js").default, Array<Style>>} Styles
   */
  function createEditingStyle() {
    /** @type {Object<import("../geom/GeometryType.js").default, Array<Style>>} */
    var styles = {};
    var white = [255, 255, 255, 1];
    var blue = [0, 153, 255, 1];
    var width = 3;
    styles[GeometryType.POLYGON] = [
      new Style$1({
        fill: new Fill$1({
          color: [255, 255, 255, 0.5]
        })
      })
    ];
    styles[GeometryType.MULTI_POLYGON] =
        styles[GeometryType.POLYGON];

    styles[GeometryType.LINE_STRING] = [
      new Style$1({
        stroke: new Stroke$1({
          color: white,
          width: width + 2
        })
      }),
      new Style$1({
        stroke: new Stroke$1({
          color: blue,
          width: width
        })
      })
    ];
    styles[GeometryType.MULTI_LINE_STRING] =
        styles[GeometryType.LINE_STRING];

    styles[GeometryType.CIRCLE] =
        styles[GeometryType.POLYGON].concat(
          styles[GeometryType.LINE_STRING]
        );


    styles[GeometryType.POINT] = [
      new Style$1({
        image: new CircleStyle({
          radius: width * 2,
          fill: new Fill$1({
            color: blue
          }),
          stroke: new Stroke$1({
            color: white,
            width: width / 2
          })
        }),
        zIndex: Infinity
      })
    ];
    styles[GeometryType.MULTI_POINT] =
        styles[GeometryType.POINT];

    styles[GeometryType.GEOMETRY_COLLECTION] =
        styles[GeometryType.POLYGON].concat(
          styles[GeometryType.LINE_STRING],
          styles[GeometryType.POINT]
        );

    return styles;
  }


  /**
   * Function that is called with a feature and returns its default geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
   * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
   */
  function defaultGeometryFunction(feature) {
    return feature.getGeometry();
  }

  /**
   * @module ol/layer/Vector
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
   * renderer when getting features from the vector source for the rendering or hit-detection.
   * Recommended value: the size of the largest symbol, line width or label.
   * @property {import("./VectorRenderType.js").default|string} [renderMode='vector'] Render mode for vector layers:
   *  * `'image'`: Vector layers are rendered as images. Great performance, but point symbols and
   *    texts are always rotated with the view and pixels are scaled during zoom animations.
   *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering even during
   *    animations, but slower performance.
   * @property {import("../source/Vector.js").default} [source] Source.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
   * image and text styles, and the priority is defined by the z-index of the style. Lower z-index
   * means higher priority.
   * @property {import("../style/Style.js").StyleLike} [style] Layer style. See
   * {@link module:ol/style} for default style which will be used if this is not defined.
   * @property {boolean} [updateWhileAnimating=false] When set to `true` and `renderMode`
   * is `vector`, feature batches will be recreated during animations. This means that no
   * vectors will be shown clipped, but the setting will have a performance impact for large
   * amounts of vector data. When set to `false`, batches will be recreated when no animation
   * is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true` and `renderMode`
   * is `vector`, feature batches will be recreated during interactions. See also
   * `updateWhileAnimating`.
   */


  /**
   * @enum {string}
   * @private
   */
  var Property$3 = {
    RENDER_ORDER: 'renderOrder'
  };


  /**
   * @classdesc
   * Vector data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @api
   */
  var VectorLayer$1 = /*@__PURE__*/(function (Layer$$1) {
    function VectorLayer$$1(opt_options) {
      var options = opt_options ?
        opt_options : /** @type {Options} */ ({});

      var baseOptions = assign({}, options);

      delete baseOptions.style;
      delete baseOptions.renderBuffer;
      delete baseOptions.updateWhileAnimating;
      delete baseOptions.updateWhileInteracting;
      Layer$$1.call(this, baseOptions);

      /**
      * @private
      * @type {boolean}
      */
      this.declutter_ = options.declutter !== undefined ? options.declutter : false;

      /**
      * @type {number}
      * @private
      */
      this.renderBuffer_ = options.renderBuffer !== undefined ?
        options.renderBuffer : 100;

      /**
      * User provided style.
      * @type {import("../style/Style.js").StyleLike}
      * @private
      */
      this.style_ = null;

      /**
      * Style function for use within the library.
      * @type {import("../style/Style.js").StyleFunction|undefined}
      * @private
      */
      this.styleFunction_ = undefined;

      this.setStyle(options.style);

      /**
      * @type {boolean}
      * @private
      */
      this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ?
        options.updateWhileAnimating : false;

      /**
      * @type {boolean}
      * @private
      */
      this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ?
        options.updateWhileInteracting : false;

      /**
      * @private
      * @type {import("./VectorTileRenderType.js").default|string}
      */
      this.renderMode_ = options.renderMode || VectorRenderType.VECTOR;

      /**
      * The layer type.
      * @protected
      * @type {import("../LayerType.js").default}
      */
      this.type = LayerType.VECTOR;

    }

    if ( Layer$$1 ) VectorLayer$$1.__proto__ = Layer$$1;
    VectorLayer$$1.prototype = Object.create( Layer$$1 && Layer$$1.prototype );
    VectorLayer$$1.prototype.constructor = VectorLayer$$1;

    /**
    * @return {boolean} Declutter.
    */
    VectorLayer$$1.prototype.getDeclutter = function getDeclutter () {
      return this.declutter_;
    };

    /**
    * @param {boolean} declutter Declutter.
    */
    VectorLayer$$1.prototype.setDeclutter = function setDeclutter (declutter) {
      this.declutter_ = declutter;
    };

    /**
    * @return {number|undefined} Render buffer.
    */
    VectorLayer$$1.prototype.getRenderBuffer = function getRenderBuffer () {
      return this.renderBuffer_;
    };

    /**
    * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
    *     order.
    */
    VectorLayer$$1.prototype.getRenderOrder = function getRenderOrder () {
      return (
      /** @type {import("../render.js").OrderFunction|null|undefined} */ (this.get(Property$3.RENDER_ORDER))
      );
    };

    /**
    * Get the style for features.  This returns whatever was passed to the `style`
    * option at construction or to the `setStyle` method.
    * @return {import("../style/Style.js").StyleLike}
    *     Layer style.
    * @api
    */
    VectorLayer$$1.prototype.getStyle = function getStyle () {
      return this.style_;
    };

    /**
    * Get the style function.
    * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
    * @api
    */
    VectorLayer$$1.prototype.getStyleFunction = function getStyleFunction () {
      return this.styleFunction_;
    };

    /**
    * @return {boolean} Whether the rendered layer should be updated while
    *     animating.
    */
    VectorLayer$$1.prototype.getUpdateWhileAnimating = function getUpdateWhileAnimating () {
      return this.updateWhileAnimating_;
    };

    /**
    * @return {boolean} Whether the rendered layer should be updated while
    *     interacting.
    */
    VectorLayer$$1.prototype.getUpdateWhileInteracting = function getUpdateWhileInteracting () {
      return this.updateWhileInteracting_;
    };

    /**
    * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
    *     Render order.
    */
    VectorLayer$$1.prototype.setRenderOrder = function setRenderOrder (renderOrder) {
      this.set(Property$3.RENDER_ORDER, renderOrder);
    };

    /**
    * Set the style for features.  This can be a single style object, an array
    * of styles, or a function that takes a feature and resolution and returns
    * an array of styles. If it is `undefined` the default style is used. If
    * it is `null` the layer has no style (a `null` style), so only features
    * that have their own styles will be rendered in the layer. See
    * {@link module:ol/style} for information on the default style.
    * @param {import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction|null|undefined} style Layer style.
    * @api
    */
    VectorLayer$$1.prototype.setStyle = function setStyle (style) {
      this.style_ = style !== undefined ? style : createDefaultStyle;
      this.styleFunction_ = style === null ?
        undefined : toFunction(this.style_);
      this.changed();
    };

    /**
    * @return {import("./VectorRenderType.js").default|string} The render mode.
    */
    VectorLayer$$1.prototype.getRenderMode = function getRenderMode () {
      return this.renderMode_;
    };

    return VectorLayer$$1;
  }(Layer));


  /**
   * Return the associated {@link module:ol/source/Vector vectorsource} of the layer.
   * @function
   * @return {import("../source/Vector.js").default} Source.
   * @api
   */
  VectorLayer$1.prototype.getSource;

  /**
   * @module ol/format/FormatType
   */

  /**
   * @enum {string}
   */
  var FormatType = {
    ARRAY_BUFFER: 'arraybuffer',
    JSON: 'json',
    TEXT: 'text',
    XML: 'xml'
  };

  /**
   * @module ol/featureloader
   */

  /**
   * {@link module:ol/source/Vector} sources use a function of this type to
   * load features.
   *
   * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,
   * a `{number}` representing the resolution (map units per pixel) and an
   * {@link module:ol/proj/Projection} for the projection  as
   * arguments. `this` within the function is bound to the
   * {@link module:ol/source/Vector} it's called from.
   *
   * The function is responsible for loading the features and adding them to the
   * source.
   * @typedef {function(this:(import("./source/Vector").default|import("./VectorTile.js").default), import("./extent.js").Extent, number,
   *                    import("./proj/Projection.js").default)} FeatureLoader
   * @api
   */


  /**
   * {@link module:ol/source/Vector} sources use a function of this type to
   * get the url to load features from.
   *
   * This function takes an {@link module:ol/extent~Extent} representing the area
   * to be loaded, a `{number}` representing the resolution (map units per pixel)
   * and an {@link module:ol/proj/Projection} for the projection  as
   * arguments and returns a `{string}` representing the URL.
   * @typedef {function(import("./extent.js").Extent, number, import("./proj/Projection.js").default): string} FeatureUrlFunction
   * @api
   */


  /**
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default} format Feature format.
   * @param {function(this:import("./VectorTile.js").default, Array<import("./Feature.js").default>, import("./proj/Projection.js").default, import("./extent.js").Extent)|function(this:import("./source/Vector").default, Array<import("./Feature.js").default>)} success
   *     Function called with the loaded features and optionally with the data
   *     projection. Called with the vector tile or source as `this`.
   * @param {function(this:import("./VectorTile.js").default)|function(this:import("./source/Vector").default)} failure
   *     Function called when loading failed. Called with the vector tile or
   *     source as `this`.
   * @return {FeatureLoader} The feature loader.
   */
  function loadFeaturesXhr(url, format, success, failure) {
    return (
      /**
       * @param {import("./extent.js").Extent} extent Extent.
       * @param {number} resolution Resolution.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @this {import("./source/Vector").default|import("./VectorTile.js").default}
       */
      function(extent$$1, resolution, projection) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET',
          typeof url === 'function' ? url(extent$$1, resolution, projection) : url,
          true);
        if (format.getType() == FormatType.ARRAY_BUFFER) {
          xhr.responseType = 'arraybuffer';
        }
        /**
         * @param {Event} event Event.
         * @private
         */
        xhr.onload = function(event) {
          // status will be 0 for file:// urls
          if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {
            var type = format.getType();
            /** @type {Document|Node|Object|string|undefined} */
            var source;
            if (type == FormatType.JSON || type == FormatType.TEXT) {
              source = xhr.responseText;
            } else if (type == FormatType.XML) {
              source = xhr.responseXML;
              if (!source) {
                source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');
              }
            } else if (type == FormatType.ARRAY_BUFFER) {
              source = /** @type {ArrayBuffer} */ (xhr.response);
            }
            if (source) {
              success.call(this, format.readFeatures(source,
                {featureProjection: projection}),
              format.readProjection(source), format.getLastExtent());
            } else {
              failure.call(this);
            }
          } else {
            failure.call(this);
          }
        }.bind(this);
        /**
         * @private
         */
        xhr.onerror = function() {
          failure.call(this);
        }.bind(this);
        xhr.send();
      }
    );
  }


  /**
   * Create an XHR feature loader for a `url` and `format`. The feature loader
   * loads features (with XHR), parses the features, and adds them to the
   * vector source.
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default} format Feature format.
   * @return {FeatureLoader} The feature loader.
   * @api
   */
  function xhr(url, format) {
    return loadFeaturesXhr(url, format,
      /**
       * @param {Array<import("./Feature.js").default>} features The loaded features.
       * @param {import("./proj/Projection.js").default} dataProjection Data
       * projection.
       * @this {import("./source/Vector").default|import("./VectorTile.js").default}
       */
      function(features, dataProjection) {
        var sourceOrTile = /** @type {?} */ (this);
        if (typeof sourceOrTile.addFeatures === 'function') {
          /** @type {import("./source/Vector").default} */ (sourceOrTile).addFeatures(features);
        }
      }, /* FIXME handle error */ VOID);
  }

  /**
   * @module ol/loadingstrategy
   */


  /**
   * Strategy function for loading all features with a single request.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @return {Array<import("./extent.js").Extent>} Extents.
   * @api
   */
  function all(extent$$1, resolution) {
    return [[-Infinity, -Infinity, Infinity, Infinity]];
  }

  /**
   * @module ol/source/Source
   */


  /**
   * A function that returns a string or an array of strings representing source
   * attributions.
   *
   * @typedef {function(import("../PluggableMap.js").FrameState): (string|Array<string>)} Attribution
   */


  /**
   * A type that can be used to provide attribution information for data sources.
   *
   * It represents either
   * * a simple string (e.g. `'© Acme Inc.'`)
   * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)
   * * a function that returns a string or array of strings (`{@link module:ol/source/Source~Attribution}`)
   *
   * @typedef {string|Array<string>|Attribution} AttributionLike
   */


  /**
   * @typedef {Object} Options
   * @property {AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {import("../proj.js").ProjectionLike} projection
   * @property {SourceState} [state='ready']
   * @property {boolean} [wrapX=false]
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for {@link module:ol/layer/Layer~Layer} sources.
   *
   * A generic `change` event is triggered when the state of the source changes.
   * @abstract
   * @api
   */
  var Source = /*@__PURE__*/(function (BaseObject$$1) {
    function Source(options) {

      BaseObject$$1.call(this);

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.projection_ = get$3(options.projection);

      /**
       * @private
       * @type {?Attribution}
       */
      this.attributions_ = adaptAttributions(options.attributions);

      /**
       * @private
       * @type {boolean}
       */
      this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ?
        options.attributionsCollapsible : true;

      /**
       * This source is currently loading data. Sources that defer loading to the
       * map's tile queue never set this to `true`.
       * @type {boolean}
       */
      this.loading = false;

      /**
       * @private
       * @type {SourceState}
       */
      this.state_ = options.state !== undefined ?
        options.state : SourceState.READY;

      /**
       * @private
       * @type {boolean}
       */
      this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;

    }

    if ( BaseObject$$1 ) Source.__proto__ = BaseObject$$1;
    Source.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Source.prototype.constructor = Source;

    /**
     * Get the attribution function for the source.
     * @return {?Attribution} Attribution function.
     */
    Source.prototype.getAttributions = function getAttributions () {
      return this.attributions_;
    };

    /**
     * @return {boolean} Aattributions are collapsible.
     */
    Source.prototype.getAttributionsCollapsible = function getAttributionsCollapsible () {
      return this.attributionsCollapsible_;
    };

    /**
     * Get the projection of the source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */
    Source.prototype.getProjection = function getProjection () {
      return this.projection_;
    };

    /**
     * @abstract
     * @return {Array<number>|undefined} Resolutions.
     */
    Source.prototype.getResolutions = function getResolutions () {
      return abstract();
    };

    /**
     * Get the state of the source, see {@link module:ol/source/State~State} for possible states.
     * @return {SourceState} State.
     * @api
     */
    Source.prototype.getState = function getState () {
      return this.state_;
    };

    /**
     * @return {boolean|undefined} Wrap X.
     */
    Source.prototype.getWrapX = function getWrapX () {
      return this.wrapX_;
    };

    /**
     * Refreshes the source and finally dispatches a 'change' event.
     * @api
     */
    Source.prototype.refresh = function refresh () {
      this.changed();
    };

    /**
     * Set the attributions of the source.
     * @param {AttributionLike|undefined} attributions Attributions.
     *     Can be passed as `string`, `Array<string>`, `{@link module:ol/source/Source~Attribution}`,
     *     or `undefined`.
     * @api
     */
    Source.prototype.setAttributions = function setAttributions (attributions) {
      this.attributions_ = adaptAttributions(attributions);
      this.changed();
    };

    /**
     * Set the state of the source.
     * @param {SourceState} state State.
     * @protected
     */
    Source.prototype.setState = function setState (state) {
      this.state_ = state;
      this.changed();
    };

    return Source;
  }(BaseObject));


  /**
   * Turns the attributions option into an attributions function.
   * @param {AttributionLike|undefined} attributionLike The attribution option.
   * @return {?Attribution} An attribution function (or null).
   */
  function adaptAttributions(attributionLike) {
    if (!attributionLike) {
      return null;
    }
    if (Array.isArray(attributionLike)) {
      return function(frameState) {
        return attributionLike;
      };
    }

    if (typeof attributionLike === 'function') {
      return attributionLike;
    }

    return function(frameState) {
      return [attributionLike];
    };
  }

  /**
   * @module ol/source/VectorEventType
   */

  /**
   * @enum {string}
   */
  var VectorEventType = {
    /**
     * Triggered when a feature is added to the source.
     * @event ol/source/Vector.VectorSourceEvent#addfeature
     * @api
     */
    ADDFEATURE: 'addfeature',

    /**
     * Triggered when a feature is updated.
     * @event ol/source/Vector.VectorSourceEvent#changefeature
     * @api
     */
    CHANGEFEATURE: 'changefeature',

    /**
     * Triggered when the clear method is called on the source.
     * @event ol/source/Vector.VectorSourceEvent#clear
     * @api
     */
    CLEAR: 'clear',

    /**
     * Triggered when a feature is removed from the source.
     * See {@link module:ol/source/Vector#clear source.clear()} for exceptions.
     * @event ol/source/Vector.VectorSourceEvent#removefeature
     * @api
     */
    REMOVEFEATURE: 'removefeature'
  };

  var quickselect = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
  	module.exports = factory();
  }(commonjsGlobal, (function () {
  function quickselect(arr, k, left, right, compare) {
      quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);
  }

  function quickselectStep(arr, k, left, right, compare) {

      while (right > left) {
          if (right - left > 600) {
              var n = right - left + 1;
              var m = k - left + 1;
              var z = Math.log(n);
              var s = 0.5 * Math.exp(2 * z / 3);
              var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
              var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
              var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
              quickselectStep(arr, k, newLeft, newRight, compare);
          }

          var t = arr[k];
          var i = left;
          var j = right;

          swap(arr, left, k);
          if (compare(arr[right], t) > 0) swap(arr, left, right);

          while (i < j) {
              swap(arr, i, j);
              i++;
              j--;
              while (compare(arr[i], t) < 0) i++;
              while (compare(arr[j], t) > 0) j--;
          }

          if (compare(arr[left], t) === 0) swap(arr, left, j);
          else {
              j++;
              swap(arr, j, right);
          }

          if (j <= k) left = j + 1;
          if (k <= j) right = j - 1;
      }
  }

  function swap(arr, i, j) {
      var tmp = arr[i];
      arr[i] = arr[j];
      arr[j] = tmp;
  }

  function defaultCompare(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
  }

  return quickselect;

  })));
  });

  var rbush_1 = rbush;
  var default_1 = rbush;



  function rbush(maxEntries, format) {
      if (!(this instanceof rbush)) return new rbush(maxEntries, format);

      // max entries in a node is 9 by default; min node fill is 40% for best performance
      this._maxEntries = Math.max(4, maxEntries || 9);
      this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));

      if (format) {
          this._initFormat(format);
      }

      this.clear();
  }

  rbush.prototype = {

      all: function () {
          return this._all(this.data, []);
      },

      search: function (bbox) {

          var node = this.data,
              result = [],
              toBBox = this.toBBox;

          if (!intersects$1(bbox, node)) return result;

          var nodesToSearch = [],
              i, len, child, childBBox;

          while (node) {
              for (i = 0, len = node.children.length; i < len; i++) {

                  child = node.children[i];
                  childBBox = node.leaf ? toBBox(child) : child;

                  if (intersects$1(bbox, childBBox)) {
                      if (node.leaf) result.push(child);
                      else if (contains(bbox, childBBox)) this._all(child, result);
                      else nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return result;
      },

      collides: function (bbox) {

          var node = this.data,
              toBBox = this.toBBox;

          if (!intersects$1(bbox, node)) return false;

          var nodesToSearch = [],
              i, len, child, childBBox;

          while (node) {
              for (i = 0, len = node.children.length; i < len; i++) {

                  child = node.children[i];
                  childBBox = node.leaf ? toBBox(child) : child;

                  if (intersects$1(bbox, childBBox)) {
                      if (node.leaf || contains(bbox, childBBox)) return true;
                      nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return false;
      },

      load: function (data) {
          if (!(data && data.length)) return this;

          if (data.length < this._minEntries) {
              for (var i = 0, len = data.length; i < len; i++) {
                  this.insert(data[i]);
              }
              return this;
          }

          // recursively build the tree with the given data from scratch using OMT algorithm
          var node = this._build(data.slice(), 0, data.length - 1, 0);

          if (!this.data.children.length) {
              // save as is if tree is empty
              this.data = node;

          } else if (this.data.height === node.height) {
              // split root if trees have the same height
              this._splitRoot(this.data, node);

          } else {
              if (this.data.height < node.height) {
                  // swap trees if inserted one is bigger
                  var tmpNode = this.data;
                  this.data = node;
                  node = tmpNode;
              }

              // insert the small tree into the large tree at appropriate level
              this._insert(node, this.data.height - node.height - 1, true);
          }

          return this;
      },

      insert: function (item) {
          if (item) this._insert(item, this.data.height - 1);
          return this;
      },

      clear: function () {
          this.data = createNode([]);
          return this;
      },

      remove: function (item, equalsFn) {
          if (!item) return this;

          var node = this.data,
              bbox = this.toBBox(item),
              path = [],
              indexes = [],
              i, parent, index, goingUp;

          // depth-first iterative tree traversal
          while (node || path.length) {

              if (!node) { // go up
                  node = path.pop();
                  parent = path[path.length - 1];
                  i = indexes.pop();
                  goingUp = true;
              }

              if (node.leaf) { // check current node
                  index = findItem(item, node.children, equalsFn);

                  if (index !== -1) {
                      // item found, remove the item and condense tree upwards
                      node.children.splice(index, 1);
                      path.push(node);
                      this._condense(path);
                      return this;
                  }
              }

              if (!goingUp && !node.leaf && contains(node, bbox)) { // go down
                  path.push(node);
                  indexes.push(i);
                  i = 0;
                  parent = node;
                  node = node.children[0];

              } else if (parent) { // go right
                  i++;
                  node = parent.children[i];
                  goingUp = false;

              } else node = null; // nothing found
          }

          return this;
      },

      toBBox: function (item) { return item; },

      compareMinX: compareNodeMinX,
      compareMinY: compareNodeMinY,

      toJSON: function () { return this.data; },

      fromJSON: function (data) {
          this.data = data;
          return this;
      },

      _all: function (node, result) {
          var nodesToSearch = [];
          while (node) {
              if (node.leaf) result.push.apply(result, node.children);
              else nodesToSearch.push.apply(nodesToSearch, node.children);

              node = nodesToSearch.pop();
          }
          return result;
      },

      _build: function (items, left, right, height) {

          var N = right - left + 1,
              M = this._maxEntries,
              node;

          if (N <= M) {
              // reached leaf level; return leaf
              node = createNode(items.slice(left, right + 1));
              calcBBox(node, this.toBBox);
              return node;
          }

          if (!height) {
              // target height of the bulk-loaded tree
              height = Math.ceil(Math.log(N) / Math.log(M));

              // target number of root entries to maximize storage utilization
              M = Math.ceil(N / Math.pow(M, height - 1));
          }

          node = createNode([]);
          node.leaf = false;
          node.height = height;

          // split the items into M mostly square tiles

          var N2 = Math.ceil(N / M),
              N1 = N2 * Math.ceil(Math.sqrt(M)),
              i, j, right2, right3;

          multiSelect(items, left, right, N1, this.compareMinX);

          for (i = left; i <= right; i += N1) {

              right2 = Math.min(i + N1 - 1, right);

              multiSelect(items, i, right2, N2, this.compareMinY);

              for (j = i; j <= right2; j += N2) {

                  right3 = Math.min(j + N2 - 1, right2);

                  // pack each entry recursively
                  node.children.push(this._build(items, j, right3, height - 1));
              }
          }

          calcBBox(node, this.toBBox);

          return node;
      },

      _chooseSubtree: function (bbox, node, level, path) {

          var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;

          while (true) {
              path.push(node);

              if (node.leaf || path.length - 1 === level) break;

              minArea = minEnlargement = Infinity;

              for (i = 0, len = node.children.length; i < len; i++) {
                  child = node.children[i];
                  area = bboxArea(child);
                  enlargement = enlargedArea(bbox, child) - area;

                  // choose entry with the least area enlargement
                  if (enlargement < minEnlargement) {
                      minEnlargement = enlargement;
                      minArea = area < minArea ? area : minArea;
                      targetNode = child;

                  } else if (enlargement === minEnlargement) {
                      // otherwise choose one with the smallest area
                      if (area < minArea) {
                          minArea = area;
                          targetNode = child;
                      }
                  }
              }

              node = targetNode || node.children[0];
          }

          return node;
      },

      _insert: function (item, level, isNode) {

          var toBBox = this.toBBox,
              bbox = isNode ? item : toBBox(item),
              insertPath = [];

          // find the best node for accommodating the item, saving all nodes along the path too
          var node = this._chooseSubtree(bbox, this.data, level, insertPath);

          // put the item into the node
          node.children.push(item);
          extend$2(node, bbox);

          // split on node overflow; propagate upwards if necessary
          while (level >= 0) {
              if (insertPath[level].children.length > this._maxEntries) {
                  this._split(insertPath, level);
                  level--;
              } else break;
          }

          // adjust bboxes along the insertion path
          this._adjustParentBBoxes(bbox, insertPath, level);
      },

      // split overflowed node into two
      _split: function (insertPath, level) {

          var node = insertPath[level],
              M = node.children.length,
              m = this._minEntries;

          this._chooseSplitAxis(node, m, M);

          var splitIndex = this._chooseSplitIndex(node, m, M);

          var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
          newNode.height = node.height;
          newNode.leaf = node.leaf;

          calcBBox(node, this.toBBox);
          calcBBox(newNode, this.toBBox);

          if (level) insertPath[level - 1].children.push(newNode);
          else this._splitRoot(node, newNode);
      },

      _splitRoot: function (node, newNode) {
          // split root node
          this.data = createNode([node, newNode]);
          this.data.height = node.height + 1;
          this.data.leaf = false;
          calcBBox(this.data, this.toBBox);
      },

      _chooseSplitIndex: function (node, m, M) {

          var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;

          minOverlap = minArea = Infinity;

          for (i = m; i <= M - m; i++) {
              bbox1 = distBBox(node, 0, i, this.toBBox);
              bbox2 = distBBox(node, i, M, this.toBBox);

              overlap = intersectionArea(bbox1, bbox2);
              area = bboxArea(bbox1) + bboxArea(bbox2);

              // choose distribution with minimum overlap
              if (overlap < minOverlap) {
                  minOverlap = overlap;
                  index = i;

                  minArea = area < minArea ? area : minArea;

              } else if (overlap === minOverlap) {
                  // otherwise choose distribution with minimum area
                  if (area < minArea) {
                      minArea = area;
                      index = i;
                  }
              }
          }

          return index;
      },

      // sorts node children by the best axis for split
      _chooseSplitAxis: function (node, m, M) {

          var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
              compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
              xMargin = this._allDistMargin(node, m, M, compareMinX),
              yMargin = this._allDistMargin(node, m, M, compareMinY);

          // if total distributions margin value is minimal for x, sort by minX,
          // otherwise it's already sorted by minY
          if (xMargin < yMargin) node.children.sort(compareMinX);
      },

      // total margin of all possible split distributions where each node is at least m full
      _allDistMargin: function (node, m, M, compare) {

          node.children.sort(compare);

          var toBBox = this.toBBox,
              leftBBox = distBBox(node, 0, m, toBBox),
              rightBBox = distBBox(node, M - m, M, toBBox),
              margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
              i, child;

          for (i = m; i < M - m; i++) {
              child = node.children[i];
              extend$2(leftBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin(leftBBox);
          }

          for (i = M - m - 1; i >= m; i--) {
              child = node.children[i];
              extend$2(rightBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin(rightBBox);
          }

          return margin;
      },

      _adjustParentBBoxes: function (bbox, path, level) {
          // adjust bboxes along the given tree path
          for (var i = level; i >= 0; i--) {
              extend$2(path[i], bbox);
          }
      },

      _condense: function (path) {
          // go through the path, removing empty nodes and updating bboxes
          for (var i = path.length - 1, siblings; i >= 0; i--) {
              if (path[i].children.length === 0) {
                  if (i > 0) {
                      siblings = path[i - 1].children;
                      siblings.splice(siblings.indexOf(path[i]), 1);

                  } else this.clear();

              } else calcBBox(path[i], this.toBBox);
          }
      },

      _initFormat: function (format) {
          // data format (minX, minY, maxX, maxY accessors)

          // uses eval-type function compilation instead of just accepting a toBBox function
          // because the algorithms are very sensitive to sorting functions performance,
          // so they should be dead simple and without inner calls

          var compareArr = ['return a', ' - b', ';'];

          this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
          this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));

          this.toBBox = new Function('a',
              'return {minX: a' + format[0] +
              ', minY: a' + format[1] +
              ', maxX: a' + format[2] +
              ', maxY: a' + format[3] + '};');
      }
  };

  function findItem(item, items, equalsFn) {
      if (!equalsFn) return items.indexOf(item);

      for (var i = 0; i < items.length; i++) {
          if (equalsFn(item, items[i])) return i;
      }
      return -1;
  }

  // calculate node's bbox from bboxes of its children
  function calcBBox(node, toBBox) {
      distBBox(node, 0, node.children.length, toBBox, node);
  }

  // min bounding rectangle of node children from k to p-1
  function distBBox(node, k, p, toBBox, destNode) {
      if (!destNode) destNode = createNode(null);
      destNode.minX = Infinity;
      destNode.minY = Infinity;
      destNode.maxX = -Infinity;
      destNode.maxY = -Infinity;

      for (var i = k, child; i < p; i++) {
          child = node.children[i];
          extend$2(destNode, node.leaf ? toBBox(child) : child);
      }

      return destNode;
  }

  function extend$2(a, b) {
      a.minX = Math.min(a.minX, b.minX);
      a.minY = Math.min(a.minY, b.minY);
      a.maxX = Math.max(a.maxX, b.maxX);
      a.maxY = Math.max(a.maxY, b.maxY);
      return a;
  }

  function compareNodeMinX(a, b) { return a.minX - b.minX; }
  function compareNodeMinY(a, b) { return a.minY - b.minY; }

  function bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }
  function bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }

  function enlargedArea(a, b) {
      return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
             (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
  }

  function intersectionArea(a, b) {
      var minX = Math.max(a.minX, b.minX),
          minY = Math.max(a.minY, b.minY),
          maxX = Math.min(a.maxX, b.maxX),
          maxY = Math.min(a.maxY, b.maxY);

      return Math.max(0, maxX - minX) *
             Math.max(0, maxY - minY);
  }

  function contains(a, b) {
      return a.minX <= b.minX &&
             a.minY <= b.minY &&
             b.maxX <= a.maxX &&
             b.maxY <= a.maxY;
  }

  function intersects$1(a, b) {
      return b.minX <= a.maxX &&
             b.minY <= a.maxY &&
             b.maxX >= a.minX &&
             b.maxY >= a.minY;
  }

  function createNode(children) {
      return {
          children: children,
          height: 1,
          leaf: true,
          minX: Infinity,
          minY: Infinity,
          maxX: -Infinity,
          maxY: -Infinity
      };
  }

  // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
  // combines selection algorithm with binary divide & conquer approach

  function multiSelect(arr, left, right, n, compare) {
      var stack = [left, right],
          mid;

      while (stack.length) {
          right = stack.pop();
          left = stack.pop();

          if (right - left <= n) continue;

          mid = left + Math.ceil((right - left) / n / 2) * n;
          quickselect(arr, mid, left, right, compare);

          stack.push(left, mid, mid, right);
      }
  }
  rbush_1.default = default_1;

  /**
   * @module ol/structs/RBush
   */

  /**
   * @typedef {Object} Entry
   * @property {number} minX
   * @property {number} minY
   * @property {number} maxX
   * @property {number} maxY
   * @property {Object} [value]
   */

  /**
   * @classdesc
   * Wrapper around the RBush by Vladimir Agafonkin.
   * See https://github.com/mourner/rbush.
   *
   * @template T
   */
  var RBush = function RBush(opt_maxEntries) {

    /**
     * @private
     */
    this.rbush_ = rbush_1(opt_maxEntries, undefined);

    /**
     * A mapping between the objects added to this rbush wrapper
     * and the objects that are actually added to the internal rbush.
     * @private
     * @type {Object<string, Entry>}
     */
    this.items_ = {};

  };

  /**
   * Insert a value into the RBush.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {T} value Value.
   */
  RBush.prototype.insert = function insert (extent$$1, value) {
    /** @type {Entry} */
    var item = {
      minX: extent$$1[0],
      minY: extent$$1[1],
      maxX: extent$$1[2],
      maxY: extent$$1[3],
      value: value
    };

    this.rbush_.insert(item);
    this.items_[getUid(value)] = item;
  };


  /**
   * Bulk-insert values into the RBush.
   * @param {Array<import("../extent.js").Extent>} extents Extents.
   * @param {Array<T>} values Values.
   */
  RBush.prototype.load = function load (extents, values) {
    var items = new Array(values.length);
    for (var i = 0, l = values.length; i < l; i++) {
      var extent$$1 = extents[i];
      var value = values[i];

      /** @type {Entry} */
      var item = {
        minX: extent$$1[0],
        minY: extent$$1[1],
        maxX: extent$$1[2],
        maxY: extent$$1[3],
        value: value
      };
      items[i] = item;
      this.items_[getUid(value)] = item;
    }
    this.rbush_.load(items);
  };


  /**
   * Remove a value from the RBush.
   * @param {T} value Value.
   * @return {boolean} Removed.
   */
  RBush.prototype.remove = function remove (value) {
    var uid = getUid(value);

    // get the object in which the value was wrapped when adding to the
    // internal rbush. then use that object to do the removal.
    var item = this.items_[uid];
    delete this.items_[uid];
    return this.rbush_.remove(item) !== null;
  };


  /**
   * Update the extent of a value in the RBush.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {T} value Value.
   */
  RBush.prototype.update = function update (extent$$1, value) {
    var item = this.items_[getUid(value)];
    var bbox = [item.minX, item.minY, item.maxX, item.maxY];
    if (!equals$1(bbox, extent$$1)) {
      this.remove(value);
      this.insert(extent$$1, value);
    }
  };


  /**
   * Return all values in the RBush.
   * @return {Array<T>} All.
   */
  RBush.prototype.getAll = function getAll () {
    var items = this.rbush_.all();
    return items.map(function(item) {
      return item.value;
    });
  };


  /**
   * Return all values in the given extent.
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {Array<T>} All in extent.
   */
  RBush.prototype.getInExtent = function getInExtent (extent$$1) {
    /** @type {Entry} */
    var bbox = {
      minX: extent$$1[0],
      minY: extent$$1[1],
      maxX: extent$$1[2],
      maxY: extent$$1[3]
    };
    var items = this.rbush_.search(bbox);
    return items.map(function(item) {
      return item.value;
    });
  };


  /**
   * Calls a callback function with each value in the tree.
   * If the callback returns a truthy value, this value is returned without
   * checking the rest of the tree.
   * @param {function(this: S, T): *} callback Callback.
   * @param {S=} opt_this The object to use as `this` in `callback`.
   * @return {*} Callback return value.
   * @template S
   */
  RBush.prototype.forEach = function forEach (callback, opt_this) {
    return this.forEach_(this.getAll(), callback, opt_this);
  };


  /**
   * Calls a callback function with each value in the provided extent.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {function(this: S, T): *} callback Callback.
   * @param {S=} opt_this The object to use as `this` in `callback`.
   * @return {*} Callback return value.
   * @template S
   */
  RBush.prototype.forEachInExtent = function forEachInExtent (extent$$1, callback, opt_this) {
    return this.forEach_(this.getInExtent(extent$$1), callback, opt_this);
  };


  /**
   * @param {Array<T>} values Values.
   * @param {function(this: S, T): *} callback Callback.
   * @param {S=} opt_this The object to use as `this` in `callback`.
   * @private
   * @return {*} Callback return value.
   * @template S
   */
  RBush.prototype.forEach_ = function forEach_ (values, callback, opt_this) {
    var result;
    for (var i = 0, l = values.length; i < l; i++) {
      result = callback.call(opt_this, values[i]);
      if (result) {
        return result;
      }
    }
    return result;
  };


  /**
   * @return {boolean} Is empty.
   */
  RBush.prototype.isEmpty = function isEmpty$1$$1 () {
    return isEmpty$1(this.items_);
  };


  /**
   * Remove all values from the RBush.
   */
  RBush.prototype.clear = function clear$$1 () {
    this.rbush_.clear();
    this.items_ = {};
  };


  /**
   * @param {import("../extent.js").Extent=} opt_extent Extent.
   * @return {import("../extent.js").Extent} Extent.
   */
  RBush.prototype.getExtent = function getExtent (opt_extent) {
    var data = this.rbush_.toJSON();
    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);
  };


  /**
   * @param {RBush} rbush R-Tree.
   */
  RBush.prototype.concat = function concat (rbush) {
    this.rbush_.load(rbush.rbush_.all());
    for (var i in rbush.items_) {
      this.items_[i] = rbush.items_[i];
    }
  };

  /**
   * @module ol/source/Vector
   */

  /**
   * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
   * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
   * is one of the standard {@link module:ol/loadingstrategy} strategies.
   *
   * @typedef {function(import("../extent.js").Extent, number): Array<import("../extent.js").Extent>} LoadingStrategy
   * @api
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Vector} instances are instances of this
   * type.
   */
  var VectorSourceEvent = /*@__PURE__*/(function (Event$$1) {
    function VectorSourceEvent(type, opt_feature) {

      Event$$1.call(this, type);

      /**
       * The feature being added or removed.
       * @type {import("../Feature.js").default|undefined}
       * @api
       */
      this.feature = opt_feature;

    }

    if ( Event$$1 ) VectorSourceEvent.__proto__ = Event$$1;
    VectorSourceEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    VectorSourceEvent.prototype.constructor = VectorSourceEvent;

    return VectorSourceEvent;
  }(Event));


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {Array<import("../Feature.js").default>|Collection<import("../Feature.js").default>} [features]
   * Features. If provided as {@link module:ol/Collection}, the features in the source
   * and the collection will stay in sync.
   * @property {import("../format/Feature.js").default} [format] The feature format used by the XHR
   * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
   * @property {import("../featureloader.js").FeatureLoader} [loader]
   * The loader function used to load features, from a remote source for example.
   * If this is not set and `url` is set, the source will create and use an XHR
   * feature loader.
   *
   * Example:
   *
   * ```js
   * import {Vector} from 'ol/source';
   * import {GeoJSON} from 'ol/format';
   * import {bbox} from 'ol/loadingstrategy';
   *
   * var vectorSource = new Vector({
   *   format: new GeoJSON(),
   *   loader: function(extent, resolution, projection) {
   *      var proj = projection.getCode();
   *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
   *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
   *          'outputFormat=application/json&srsname=' + proj + '&' +
   *          'bbox=' + extent.join(',') + ',' + proj;
   *      var xhr = new XMLHttpRequest();
   *      xhr.open('GET', url);
   *      var onError = function() {
   *        vectorSource.removeLoadedExtent(extent);
   *      }
   *      xhr.onerror = onError;
   *      xhr.onload = function() {
   *        if (xhr.status == 200) {
   *          vectorSource.addFeatures(
   *              vectorSource.getFormat().readFeatures(xhr.responseText));
   *        } else {
   *          onError();
   *        }
   *      }
   *      xhr.send();
   *    },
   *    strategy: bbox
   *  });
   * ```
   * @property {boolean} [overlaps=true] This source may have overlapping geometries.
   * Setting this to `false` (e.g. for sources with polygons that represent administrative
   * boundaries or TopoJSON sources) allows the renderer to optimise fill and
   * stroke operations.
   * @property {LoadingStrategy} [strategy] The loading strategy to use.
   * By default an {@link module:ol/loadingstrategy~all}
   * strategy is used, a one-off strategy which loads all features at once.
   * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
   * Setting this option instructs the source to load features using an XHR loader
   * (see {@link module:ol/featureloader~xhr}). Use a `string` and an
   * {@link module:ol/loadingstrategy~all} for a one-off download of all features from
   * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
   * other loading strategies.
   * Requires `format` to be set as well.
   * When default XHR feature loader is provided, the features will
   * be transformed from the data projection to the view projection
   * during parsing. If your remote data source does not advertise its projection
   * properly, this transformation will be incorrect. For some formats, the
   * default projection (usually EPSG:4326) can be overridden by setting the
   * dataProjection constructor option on the format.
   * Note that if a source contains non-feature data, such as a GeoJSON geometry
   * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
   * @property {boolean} [useSpatialIndex=true]
   * By default, an RTree is used as spatial index. When features are removed and
   * added frequently, and the total number of features is low, setting this to
   * `false` may improve performance.
   *
   * Note that
   * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
   * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
   * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
   * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
   * through all features.
   *
   * When set to `false`, the features will be maintained in an
   * {@link module:ol/Collection}, which can be retrieved through
   * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
   * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
   * -180° and 180° meridians to work properly, this should be set to `false`. The
   * resulting geometry coordinates will then exceed the world bounds.
   */


  /**
   * @classdesc
   * Provides a source of features for vector layers. Vector features provided
   * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
   * vector data that is optimized for rendering.
   *
   * @fires ol/source/Vector.VectorSourceEvent
   * @api
   */
  var VectorSource$1 = /*@__PURE__*/(function (Source$$1) {
    function VectorSource$$1(opt_options) {

      var options = opt_options || {};

      Source$$1.call(this, {
        attributions: options.attributions,
        projection: undefined,
        state: SourceState.READY,
        wrapX: options.wrapX !== undefined ? options.wrapX : true
      });

      /**
       * @private
       * @type {import("../featureloader.js").FeatureLoader}
       */
      this.loader_ = VOID;

      /**
       * @private
       * @type {import("../format/Feature.js").default|undefined}
       */
      this.format_ = options.format;

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;

      /**
       * @private
       * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
       */
      this.url_ = options.url;

      if (options.loader !== undefined) {
        this.loader_ = options.loader;
      } else if (this.url_ !== undefined) {
        assert(this.format_, 7); // `format` must be set when `url` is set
        // create a XHR feature loader for "url" and "format"
        this.loader_ = xhr(this.url_, /** @type {import("../format/Feature.js").default} */ (this.format_));
      }

      /**
       * @private
       * @type {LoadingStrategy}
       */
      this.strategy_ = options.strategy !== undefined ? options.strategy : all;

      var useSpatialIndex =
          options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;

      /**
       * @private
       * @type {RBush<import("../Feature.js").default>}
       */
      this.featuresRtree_ = useSpatialIndex ? new RBush() : null;

      /**
       * @private
       * @type {RBush<{extent: import("../extent.js").Extent}>}
       */
      this.loadedExtentsRtree_ = new RBush();

      /**
       * @private
       * @type {!Object<string, import("../Feature.js").default>}
       */
      this.nullGeometryFeatures_ = {};

      /**
       * A lookup of features by id (the return from feature.getId()).
       * @private
       * @type {!Object<string, import("../Feature.js").default>}
       */
      this.idIndex_ = {};

      /**
       * A lookup of features without id (keyed by getUid(feature)).
       * @private
       * @type {!Object<string, import("../Feature.js").default>}
       */
      this.undefIdIndex_ = {};

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").EventsKey>>}
       */
      this.featureChangeKeys_ = {};

      /**
       * @private
       * @type {Collection<import("../Feature.js").default>}
       */
      this.featuresCollection_ = null;

      var collection, features;
      if (Array.isArray(options.features)) {
        features = options.features;
      } else if (options.features) {
        collection = options.features;
        features = collection.getArray();
      }
      if (!useSpatialIndex && collection === undefined) {
        collection = new Collection$1(features);
      }
      if (features !== undefined) {
        this.addFeaturesInternal(features);
      }
      if (collection !== undefined) {
        this.bindFeaturesCollection_(collection);
      }

    }

    if ( Source$$1 ) VectorSource$$1.__proto__ = Source$$1;
    VectorSource$$1.prototype = Object.create( Source$$1 && Source$$1.prototype );
    VectorSource$$1.prototype.constructor = VectorSource$$1;

    /**
     * Add a single feature to the source.  If you want to add a batch of features
     * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
     * instead. A feature will not be added to the source if feature with
     * the same id is already there. The reason for this behavior is to avoid
     * feature duplication when using bbox or tile loading strategies.
     * @param {import("../Feature.js").default} feature Feature to add.
     * @api
     */
    VectorSource$$1.prototype.addFeature = function addFeature (feature) {
      this.addFeatureInternal(feature);
      this.changed();
    };


    /**
     * Add a feature without firing a `change` event.
     * @param {import("../Feature.js").default} feature Feature.
     * @protected
     */
    VectorSource$$1.prototype.addFeatureInternal = function addFeatureInternal (feature) {
      var featureKey = getUid(feature);

      if (!this.addToIndex_(featureKey, feature)) {
        return;
      }

      this.setupChangeEvents_(featureKey, feature);

      var geometry = feature.getGeometry();
      if (geometry) {
        var extent$$1 = geometry.getExtent();
        if (this.featuresRtree_) {
          this.featuresRtree_.insert(extent$$1, feature);
        }
      } else {
        this.nullGeometryFeatures_[featureKey] = feature;
      }

      this.dispatchEvent(
        new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));
    };


    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {import("../Feature.js").default} feature The feature.
     * @private
     */
    VectorSource$$1.prototype.setupChangeEvents_ = function setupChangeEvents_ (featureKey, feature) {
      this.featureChangeKeys_[featureKey] = [
        listen(feature, EventType.CHANGE,
          this.handleFeatureChange_, this),
        listen(feature, ObjectEventType.PROPERTYCHANGE,
          this.handleFeatureChange_, this)
      ];
    };


    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {import("../Feature.js").default} feature The feature.
     * @return {boolean} The feature is "valid", in the sense that it is also a
     *     candidate for insertion into the Rtree.
     * @private
     */
    VectorSource$$1.prototype.addToIndex_ = function addToIndex_ (featureKey, feature) {
      var valid = true;
      var id = feature.getId();
      if (id !== undefined) {
        if (!(id.toString() in this.idIndex_)) {
          this.idIndex_[id.toString()] = feature;
        } else {
          valid = false;
        }
      } else {
        assert(!(featureKey in this.undefIdIndex_),
          30); // The passed `feature` was already added to the source
        this.undefIdIndex_[featureKey] = feature;
      }
      return valid;
    };


    /**
     * Add a batch of features to the source.
     * @param {Array<import("../Feature.js").default>} features Features to add.
     * @api
     */
    VectorSource$$1.prototype.addFeatures = function addFeatures (features) {
      this.addFeaturesInternal(features);
      this.changed();
    };


    /**
     * Add features without firing a `change` event.
     * @param {Array<import("../Feature.js").default>} features Features.
     * @protected
     */
    VectorSource$$1.prototype.addFeaturesInternal = function addFeaturesInternal (features) {
      var extents = [];
      var newFeatures = [];
      var geometryFeatures = [];

      for (var i = 0, length = features.length; i < length; i++) {
        var feature = features[i];
        var featureKey = getUid(feature);
        if (this.addToIndex_(featureKey, feature)) {
          newFeatures.push(feature);
        }
      }

      for (var i$1 = 0, length$1 = newFeatures.length; i$1 < length$1; i$1++) {
        var feature$1 = newFeatures[i$1];
        var featureKey$1 = getUid(feature$1);
        this.setupChangeEvents_(featureKey$1, feature$1);

        var geometry = feature$1.getGeometry();
        if (geometry) {
          var extent$$1 = geometry.getExtent();
          extents.push(extent$$1);
          geometryFeatures.push(feature$1);
        } else {
          this.nullGeometryFeatures_[featureKey$1] = feature$1;
        }
      }
      if (this.featuresRtree_) {
        this.featuresRtree_.load(extents, geometryFeatures);
      }

      for (var i$2 = 0, length$2 = newFeatures.length; i$2 < length$2; i$2++) {
        this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i$2]));
      }
    };


    /**
     * @param {!Collection<import("../Feature.js").default>} collection Collection.
     * @private
     */
    VectorSource$$1.prototype.bindFeaturesCollection_ = function bindFeaturesCollection_ (collection) {
      var modifyingCollection = false;
      listen(this, VectorEventType.ADDFEATURE,
        /**
         * @param {VectorSourceEvent} evt The vector source event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            collection.push(evt.feature);
            modifyingCollection = false;
          }
        });
      listen(this, VectorEventType.REMOVEFEATURE,
        /**
         * @param {VectorSourceEvent} evt The vector source event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            collection.remove(evt.feature);
            modifyingCollection = false;
          }
        });
      listen(collection, CollectionEventType.ADD,
        /**
         * @param {import("../Collection.js").CollectionEvent} evt The collection event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            this.addFeature(/** @type {import("../Feature.js").default} */ (evt.element));
            modifyingCollection = false;
          }
        }, this);
      listen(collection, CollectionEventType.REMOVE,
        /**
         * @param {import("../Collection.js").CollectionEvent} evt The collection event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            this.removeFeature(/** @type {import("../Feature.js").default} */ (evt.element));
            modifyingCollection = false;
          }
        }, this);
      this.featuresCollection_ = collection;
    };


    /**
     * Remove all features from the source.
     * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.
     * @api
     */
    VectorSource$$1.prototype.clear = function clear$$1 (opt_fast) {
      if (opt_fast) {
        for (var featureId in this.featureChangeKeys_) {
          var keys = this.featureChangeKeys_[featureId];
          keys.forEach(unlistenByKey);
        }
        if (!this.featuresCollection_) {
          this.featureChangeKeys_ = {};
          this.idIndex_ = {};
          this.undefIdIndex_ = {};
        }
      } else {
        if (this.featuresRtree_) {
          this.featuresRtree_.forEach(this.removeFeatureInternal, this);
          for (var id in this.nullGeometryFeatures_) {
            this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
          }
        }
      }
      if (this.featuresCollection_) {
        this.featuresCollection_.clear();
      }

      if (this.featuresRtree_) {
        this.featuresRtree_.clear();
      }
      this.loadedExtentsRtree_.clear();
      this.nullGeometryFeatures_ = {};

      var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);
      this.dispatchEvent(clearEvent);
      this.changed();
    };


    /**
     * Iterate through all features on the source, calling the provided callback
     * with each one.  If the callback returns any "truthy" value, iteration will
     * stop and the function will return the same value.
     * Note: this function only iterate through the feature that have a defined geometry.
     *
     * @param {function(import("../Feature.js").default): T} callback Called with each feature
     *     on the source.  Return a truthy value to stop iteration.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    VectorSource$$1.prototype.forEachFeature = function forEachFeature (callback) {
      if (this.featuresRtree_) {
        return this.featuresRtree_.forEach(callback);
      } else if (this.featuresCollection_) {
        this.featuresCollection_.forEach(callback);
      }
    };


    /**
     * Iterate through all features whose geometries contain the provided
     * coordinate, calling the callback with each feature.  If the callback returns
     * a "truthy" value, iteration will stop and the function will return the same
     * value.
     *
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(import("../Feature.js").default): T} callback Called with each feature
     *     whose goemetry contains the provided coordinate.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     */
    VectorSource$$1.prototype.forEachFeatureAtCoordinateDirect = function forEachFeatureAtCoordinateDirect (coordinate, callback) {
      var extent$$1 = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
      return this.forEachFeatureInExtent(extent$$1, function(feature) {
        var geometry = feature.getGeometry();
        if (geometry.intersectsCoordinate(coordinate)) {
          return callback(feature);
        } else {
          return undefined;
        }
      });
    };


    /**
     * Iterate through all features whose bounding box intersects the provided
     * extent (note that the feature's geometry may not intersect the extent),
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you are interested in features whose geometry intersects an extent, call
     * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
     *
     * When `useSpatialIndex` is set to false, this method will loop through all
     * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(import("../Feature.js").default): T} callback Called with each feature
     *     whose bounding box intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    VectorSource$$1.prototype.forEachFeatureInExtent = function forEachFeatureInExtent (extent$$1, callback) {
      if (this.featuresRtree_) {
        return this.featuresRtree_.forEachInExtent(extent$$1, callback);
      } else if (this.featuresCollection_) {
        this.featuresCollection_.forEach(callback);
      }
    };


    /**
     * Iterate through all features whose geometry intersects the provided extent,
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you only want to test for bounding box intersection, call the
     * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(import("../Feature.js").default): T} callback Called with each feature
     *     whose geometry intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    VectorSource$$1.prototype.forEachFeatureIntersectingExtent = function forEachFeatureIntersectingExtent (extent$$1, callback) {
      return this.forEachFeatureInExtent(extent$$1,
        /**
         * @param {import("../Feature.js").default} feature Feature.
         * @return {T|undefined} The return value from the last call to the callback.
         */
        function(feature) {
          var geometry = feature.getGeometry();
          if (geometry.intersectsExtent(extent$$1)) {
            var result = callback(feature);
            if (result) {
              return result;
            }
          }
        });
    };


    /**
     * Get the features collection associated with this source. Will be `null`
     * unless the source was configured with `useSpatialIndex` set to `false`, or
     * with an {@link module:ol/Collection} as `features`.
     * @return {Collection<import("../Feature.js").default>} The collection of features.
     * @api
     */
    VectorSource$$1.prototype.getFeaturesCollection = function getFeaturesCollection () {
      return this.featuresCollection_;
    };


    /**
     * Get all features on the source in random order.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    VectorSource$$1.prototype.getFeatures = function getFeatures () {
      var features;
      if (this.featuresCollection_) {
        features = this.featuresCollection_.getArray();
      } else if (this.featuresRtree_) {
        features = this.featuresRtree_.getAll();
        if (!isEmpty$1(this.nullGeometryFeatures_)) {
          extend(features, getValues(this.nullGeometryFeatures_));
        }
      }
      return (
        /** @type {Array<import("../Feature.js").default>} */ (features)
      );
    };


    /**
     * Get all features whose geometry intersects the provided coordinate.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    VectorSource$$1.prototype.getFeaturesAtCoordinate = function getFeaturesAtCoordinate (coordinate) {
      var features = [];
      this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {
        features.push(feature);
      });
      return features;
    };


    /**
     * Get all features in the provided extent.  Note that this returns an array of
     * all features intersecting the given extent in random order (so it may include
     * features whose geometries do not intersect the extent).
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    VectorSource$$1.prototype.getFeaturesInExtent = function getFeaturesInExtent (extent$$1) {
      return this.featuresRtree_.getInExtent(extent$$1);
    };


    /**
     * Get the closest feature to the provided coordinate.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(import("../Feature.js").default):boolean=} opt_filter Feature filter function.
     *     The filter function will receive one argument, the {@link module:ol/Feature feature}
     *     and it should return a boolean value. By default, no filtering is made.
     * @return {import("../Feature.js").default} Closest feature.
     * @api
     */
    VectorSource$$1.prototype.getClosestFeatureToCoordinate = function getClosestFeatureToCoordinate (coordinate, opt_filter) {
      // Find the closest feature using branch and bound.  We start searching an
      // infinite extent, and find the distance from the first feature found.  This
      // becomes the closest feature.  We then compute a smaller extent which any
      // closer feature must intersect.  We continue searching with this smaller
      // extent, trying to find a closer feature.  Every time we find a closer
      // feature, we update the extent being searched so that any even closer
      // feature must intersect it.  We continue until we run out of features.
      var x = coordinate[0];
      var y = coordinate[1];
      var closestFeature = null;
      var closestPoint = [NaN, NaN];
      var minSquaredDistance = Infinity;
      var extent$$1 = [-Infinity, -Infinity, Infinity, Infinity];
      var filter = opt_filter ? opt_filter : TRUE;
      this.featuresRtree_.forEachInExtent(extent$$1,
        /**
         * @param {import("../Feature.js").default} feature Feature.
         */
        function(feature) {
          if (filter(feature)) {
            var geometry = feature.getGeometry();
            var previousMinSquaredDistance = minSquaredDistance;
            minSquaredDistance = geometry.closestPointXY(
              x, y, closestPoint, minSquaredDistance);
            if (minSquaredDistance < previousMinSquaredDistance) {
              closestFeature = feature;
              // This is sneaky.  Reduce the extent that it is currently being
              // searched while the R-Tree traversal using this same extent object
              // is still in progress.  This is safe because the new extent is
              // strictly contained by the old extent.
              var minDistance = Math.sqrt(minSquaredDistance);
              extent$$1[0] = x - minDistance;
              extent$$1[1] = y - minDistance;
              extent$$1[2] = x + minDistance;
              extent$$1[3] = y + minDistance;
            }
          }
        });
      return closestFeature;
    };


    /**
     * Get the extent of the features currently in the source.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../extent.js").Extent=} opt_extent Destination extent. If provided, no new extent
     *     will be created. Instead, that extent's coordinates will be overwritten.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    VectorSource$$1.prototype.getExtent = function getExtent (opt_extent) {
      return this.featuresRtree_.getExtent(opt_extent);
    };


    /**
     * Get a feature by its identifier (the value returned by feature.getId()).
     * Note that the index treats string and numeric identifiers as the same.  So
     * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
     *
     * @param {string|number} id Feature identifier.
     * @return {import("../Feature.js").default} The feature (or `null` if not found).
     * @api
     */
    VectorSource$$1.prototype.getFeatureById = function getFeatureById (id) {
      var feature = this.idIndex_[id.toString()];
      return feature !== undefined ? feature : null;
    };


    /**
     * Get the format associated with this source.
     *
     * @return {import("../format/Feature.js").default|undefined} The feature format.
     * @api
     */
    VectorSource$$1.prototype.getFormat = function getFormat () {
      return this.format_;
    };


    /**
     * @return {boolean} The source can have overlapping geometries.
     */
    VectorSource$$1.prototype.getOverlaps = function getOverlaps () {
      return this.overlaps_;
    };


    /**
     * Get the url associated with this source.
     *
     * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
     * @api
     */
    VectorSource$$1.prototype.getUrl = function getUrl () {
      return this.url_;
    };


    /**
     * @param {Event} event Event.
     * @private
     */
    VectorSource$$1.prototype.handleFeatureChange_ = function handleFeatureChange_ (event) {
      var feature = /** @type {import("../Feature.js").default} */ (event.target);
      var featureKey = getUid(feature);
      var geometry = feature.getGeometry();
      if (!geometry) {
        if (!(featureKey in this.nullGeometryFeatures_)) {
          if (this.featuresRtree_) {
            this.featuresRtree_.remove(feature);
          }
          this.nullGeometryFeatures_[featureKey] = feature;
        }
      } else {
        var extent$$1 = geometry.getExtent();
        if (featureKey in this.nullGeometryFeatures_) {
          delete this.nullGeometryFeatures_[featureKey];
          if (this.featuresRtree_) {
            this.featuresRtree_.insert(extent$$1, feature);
          }
        } else {
          if (this.featuresRtree_) {
            this.featuresRtree_.update(extent$$1, feature);
          }
        }
      }
      var id = feature.getId();
      if (id !== undefined) {
        var sid = id.toString();
        if (featureKey in this.undefIdIndex_) {
          delete this.undefIdIndex_[featureKey];
          this.idIndex_[sid] = feature;
        } else {
          if (this.idIndex_[sid] !== feature) {
            this.removeFromIdIndex_(feature);
            this.idIndex_[sid] = feature;
          }
        }
      } else {
        if (!(featureKey in this.undefIdIndex_)) {
          this.removeFromIdIndex_(feature);
          this.undefIdIndex_[featureKey] = feature;
        }
      }
      this.changed();
      this.dispatchEvent(new VectorSourceEvent(
        VectorEventType.CHANGEFEATURE, feature));
    };

    /**
     * Returns true if the feature is contained within the source.
     * @param {import("../Feature.js").default} feature Feature.
     * @return {boolean} Has feature.
     * @api
     */
    VectorSource$$1.prototype.hasFeature = function hasFeature (feature) {
      var id = feature.getId();
      if (id !== undefined) {
        return id in this.idIndex_;
      } else {
        return getUid(feature) in this.undefIdIndex_;
      }
    };

    /**
     * @return {boolean} Is empty.
     */
    VectorSource$$1.prototype.isEmpty = function isEmpty$1$$1 () {
      return this.featuresRtree_.isEmpty() && isEmpty$1(this.nullGeometryFeatures_);
    };


    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    VectorSource$$1.prototype.loadFeatures = function loadFeatures (extent$$1, resolution, projection) {
      var this$1 = this;

      var loadedExtentsRtree = this.loadedExtentsRtree_;
      var extentsToLoad = this.strategy_(extent$$1, resolution);
      this.loading = false;
      var loop = function ( i, ii ) {
        var extentToLoad = extentsToLoad[i];
        var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,
          /**
           * @param {{extent: import("../extent.js").Extent}} object Object.
           * @return {boolean} Contains.
           */
          function(object) {
            return containsExtent(object.extent, extentToLoad);
          });
        if (!alreadyLoaded) {
          this$1.loader_.call(this$1, extentToLoad, resolution, projection);
          loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});
          this$1.loading = this$1.loader_ !== VOID;
        }
      };

      for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) loop( i, ii );
    };


    /**
     * Remove an extent from the list of loaded extents.
     * @param {import("../extent.js").Extent} extent Extent.
     * @api
     */
    VectorSource$$1.prototype.removeLoadedExtent = function removeLoadedExtent (extent$$1) {
      var loadedExtentsRtree = this.loadedExtentsRtree_;
      var obj;
      loadedExtentsRtree.forEachInExtent(extent$$1, function(object) {
        if (equals$1(object.extent, extent$$1)) {
          obj = object;
          return true;
        }
      });
      if (obj) {
        loadedExtentsRtree.remove(obj);
      }
    };


    /**
     * Remove a single feature from the source.  If you want to remove all features
     * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
     * instead.
     * @param {import("../Feature.js").default} feature Feature to remove.
     * @api
     */
    VectorSource$$1.prototype.removeFeature = function removeFeature (feature) {
      var featureKey = getUid(feature);
      if (featureKey in this.nullGeometryFeatures_) {
        delete this.nullGeometryFeatures_[featureKey];
      } else {
        if (this.featuresRtree_) {
          this.featuresRtree_.remove(feature);
        }
      }
      this.removeFeatureInternal(feature);
      this.changed();
    };


    /**
     * Remove feature without firing a `change` event.
     * @param {import("../Feature.js").default} feature Feature.
     * @protected
     */
    VectorSource$$1.prototype.removeFeatureInternal = function removeFeatureInternal (feature) {
      var featureKey = getUid(feature);
      this.featureChangeKeys_[featureKey].forEach(unlistenByKey);
      delete this.featureChangeKeys_[featureKey];
      var id = feature.getId();
      if (id !== undefined) {
        delete this.idIndex_[id.toString()];
      } else {
        delete this.undefIdIndex_[featureKey];
      }
      this.dispatchEvent(new VectorSourceEvent(
        VectorEventType.REMOVEFEATURE, feature));
    };


    /**
     * Remove a feature from the id index.  Called internally when the feature id
     * may have changed.
     * @param {import("../Feature.js").default} feature The feature.
     * @return {boolean} Removed the feature from the index.
     * @private
     */
    VectorSource$$1.prototype.removeFromIdIndex_ = function removeFromIdIndex_ (feature) {
      var removed = false;
      for (var id in this.idIndex_) {
        if (this.idIndex_[id] === feature) {
          delete this.idIndex_[id];
          removed = true;
          break;
        }
      }
      return removed;
    };


    /**
     * Set the new loader of the source. The next loadFeatures call will use the
     * new loader.
     * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
     * @api
     */
    VectorSource$$1.prototype.setLoader = function setLoader (loader) {
      this.loader_ = loader;
    };

    return VectorSource$$1;
  }(Source));

  /**
   * @module ol/interaction/Draw
   */


  /**
   * @typedef {Object} Options
   * @property {GeometryType} type Geometry type of
   * the geometries being drawn with this instance.
   * @property {number} [clickTolerance=6] The maximum distance in pixels between
   * "down" and "up" for a "up" event to be considered a "click" event and
   * actually add a point/vertex to the geometry being drawn.  The default of `6`
   * was chosen for the draw interaction to behave correctly on mouse as well as
   * on touch devices.
   * @property {import("../Collection.js").default<Feature>} [features]
   * Destination collection for the drawn features.
   * @property {VectorSource} [source] Destination source for
   * the drawn features.
   * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown
   * before the current vertex can be dragged to its exact position.
   * @property {number} [snapTolerance=12] Pixel distance for snapping to the
   * drawing finish.
   * @property {boolean} [stopClick=false] Stop click, singleclick, and
   * doubleclick events from firing during drawing.
   * @property {number} [maxPoints] The number of points that can be drawn before
   * a polygon ring or line string is finished. By default there is no
   * restriction.
   * @property {number} [minPoints] The number of points that must be drawn
   * before a polygon ring or line string can be finished. Default is `3` for
   * polygon rings and `2` for line strings.
   * @property {import("../events/condition.js").Condition} [finishCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether the drawing can be finished.
   * @property {import("../style/Style.js").StyleLike} [style]
   * Style for sketch features.
   * @property {GeometryFunction} [geometryFunction]
   * Function that is called when a geometry's coordinates are updated.
   * @property {string} [geometryName] Geometry name to use for features created
   * by the draw interaction.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,
   * adds a vertex or deactivates freehand drawing.
   * @property {boolean} [freehand=false] Operate in freehand mode for lines,
   * polygons, and circles.  This makes the interaction always operate in freehand
   * mode and takes precedence over any `freehandCondition` option.
   * @property {import("../events/condition.js").Condition} [freehandCondition]
   * Condition that activates freehand drawing for lines and polygons. This
   * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
   * returns a boolean to indicate whether that event should be handled. The
   * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the
   * Shift key activates freehand drawing.
   * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
   * overlay.
   */


  /**
   * Coordinate type when drawing points.
   * @typedef {import("../coordinate.js").Coordinate} PointCoordType
   */


  /**
   * Coordinate type when drawing lines.
   * @typedef {Array<import("../coordinate.js").Coordinate>} LineCoordType
   */


  /**
   * Coordinate type when drawing polygons.
   * @typedef {Array<Array<import("../coordinate.js").Coordinate>>} PolyCoordType
   */


  /**
   * Types used for drawing coordinates.
   * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType
   */


  /**
   * Function that takes an array of coordinates and an optional existing geometry as
   * arguments, and returns a geometry. The optional existing geometry is the
   * geometry that is returned when the function is called without a second
   * argument.
   * @typedef {function(!SketchCoordType, import("../geom/SimpleGeometry.js").default=):
   *     import("../geom/SimpleGeometry.js").default} GeometryFunction
   */


  /**
   * Draw mode.  This collapses multi-part geometry types with their single-part
   * cousins.
   * @enum {string}
   */
  var Mode$1 = {
    POINT: 'Point',
    LINE_STRING: 'LineString',
    POLYGON: 'Polygon',
    CIRCLE: 'Circle'
  };


  /**
   * @enum {string}
   */
  var DrawEventType = {
    /**
     * Triggered upon feature draw start
     * @event DrawEvent#drawstart
     * @api
     */
    DRAWSTART: 'drawstart',
    /**
     * Triggered upon feature draw end
     * @event DrawEvent#drawend
     * @api
     */
    DRAWEND: 'drawend'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are
   * instances of this type.
   */
  var DrawEvent = /*@__PURE__*/(function (Event$$1) {
    function DrawEvent(type, feature) {

      Event$$1.call(this, type);

      /**
       * The feature being drawn.
       * @type {Feature}
       * @api
       */
      this.feature = feature;

    }

    if ( Event$$1 ) DrawEvent.__proto__ = Event$$1;
    DrawEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    DrawEvent.prototype.constructor = DrawEvent;

    return DrawEvent;
  }(Event));


  /**
   * @classdesc
   * Interaction for drawing feature geometries.
   *
   * @fires DrawEvent
   * @api
   */
  var Draw = /*@__PURE__*/(function (PointerInteraction$$1) {
    function Draw(options) {

      var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      PointerInteraction$$1.call(this, pointerOptions);

      /**
       * @type {boolean}
       * @private
       */
      this.shouldHandle_ = false;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.downPx_ = null;

      /**
       * @type {?}
       * @private
       */
      this.downTimeout_;

      /**
       * @type {number|undefined}
       * @private
       */
      this.lastDragTime_;

      /**
       * @type {boolean}
       * @private
       */
      this.freehand_ = false;

      /**
       * Target source for drawn features.
       * @type {VectorSource}
       * @private
       */
      this.source_ = options.source ? options.source : null;

      /**
       * Target collection for drawn features.
       * @type {import("../Collection.js").default<Feature>}
       * @private
       */
      this.features_ = options.features ? options.features : null;

      /**
       * Pixel distance for snapping.
       * @type {number}
       * @private
       */
      this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;

      /**
       * Geometry type.
       * @type {GeometryType}
       * @private
       */
      this.type_ = /** @type {GeometryType} */ (options.type);

      /**
       * Drawing mode (derived from geometry type.
       * @type {Mode}
       * @private
       */
      this.mode_ = getMode(this.type_);

      /**
       * Stop click, singleclick, and doubleclick events from firing during drawing.
       * Default is `false`.
       * @type {boolean}
       * @private
       */
      this.stopClick_ = !!options.stopClick;

      /**
       * The number of points that must be drawn before a polygon ring or line
       * string can be finished.  The default is 3 for polygon rings and 2 for
       * line strings.
       * @type {number}
       * @private
       */
      this.minPoints_ = options.minPoints ?
        options.minPoints :
        (this.mode_ === Mode$1.POLYGON ? 3 : 2);

      /**
       * The number of points that can be drawn before a polygon ring or line string
       * is finished. The default is no restriction.
       * @type {number}
       * @private
       */
      this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;

      /**
       * A function to decide if a potential finish coordinate is permissible
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;

      var geometryFunction = options.geometryFunction;
      if (!geometryFunction) {
        if (this.type_ === GeometryType.CIRCLE) {
          /**
           * @param {!LineCoordType} coordinates The coordinates.
           * @param {import("../geom/SimpleGeometry.js").default=} opt_geometry Optional geometry.
           * @return {import("../geom/SimpleGeometry.js").default} A geometry.
           */
          geometryFunction = function(coordinates, opt_geometry) {
            var circle = opt_geometry ? /** @type {Circle} */ (opt_geometry) :
              new Circle$2([NaN, NaN]);
            var squaredLength = squaredDistance$1(
              coordinates[0], coordinates[1]);
            circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));
            return circle;
          };
        } else {
          var Constructor;
          var mode = this.mode_;
          if (mode === Mode$1.POINT) {
            Constructor = Point$1;
          } else if (mode === Mode$1.LINE_STRING) {
            Constructor = LineString$1;
          } else if (mode === Mode$1.POLYGON) {
            Constructor = Polygon$1;
          }
          /**
           * @param {!LineCoordType} coordinates The coordinates.
           * @param {import("../geom/SimpleGeometry.js").default=} opt_geometry Optional geometry.
           * @return {import("../geom/SimpleGeometry.js").default} A geometry.
           */
          geometryFunction = function(coordinates, opt_geometry) {
            var geometry = opt_geometry;
            if (geometry) {
              if (mode === Mode$1.POLYGON) {
                if (coordinates[0].length) {
                  // Add a closing coordinate to match the first
                  geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);
                } else {
                  geometry.setCoordinates([]);
                }
              } else {
                geometry.setCoordinates(coordinates);
              }
            } else {
              geometry = new Constructor(coordinates);
            }
            return geometry;
          };
        }
      }

      /**
       * @type {GeometryFunction}
       * @private
       */
      this.geometryFunction_ = geometryFunction;

      /**
       * @type {number}
       * @private
       */
      this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;

      /**
       * Finish coordinate for the feature (first point for polygons, last point for
       * linestrings).
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.finishCoordinate_ = null;

      /**
       * Sketch feature.
       * @type {Feature}
       * @private
       */
      this.sketchFeature_ = null;

      /**
       * Sketch point.
       * @type {Feature}
       * @private
       */
      this.sketchPoint_ = null;

      /**
       * Sketch coordinates. Used when drawing a line or polygon.
       * @type {SketchCoordType}
       * @private
       */
      this.sketchCoords_ = null;

      /**
       * Sketch line. Used when drawing polygon.
       * @type {Feature}
       * @private
       */
      this.sketchLine_ = null;

      /**
       * Sketch line coordinates. Used when drawing a polygon or circle.
       * @type {LineCoordType}
       * @private
       */
      this.sketchLineCoords_ = null;

      /**
       * Squared tolerance for handling up events.  If the squared distance
       * between a down and up event is greater than this tolerance, up events
       * will not be handled.
       * @type {number}
       * @private
       */
      this.squaredClickTolerance_ = options.clickTolerance ?
        options.clickTolerance * options.clickTolerance : 36;

      /**
       * Draw overlay where our sketch features are drawn.
       * @type {VectorLayer}
       * @private
       */
      this.overlay_ = new VectorLayer$1({
        source: new VectorSource$1({
          useSpatialIndex: false,
          wrapX: options.wrapX ? options.wrapX : false
        }),
        style: options.style ? options.style :
          getDefaultStyleFunction(),
        updateWhileInteracting: true
      });

      /**
       * Name of the geometry attribute for newly created features.
       * @type {string|undefined}
       * @private
       */
      this.geometryName_ = options.geometryName;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : noModifierKeys;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.freehandCondition_;
      if (options.freehand) {
        this.freehandCondition_ = always;
      } else {
        this.freehandCondition_ = options.freehandCondition ?
          options.freehandCondition : shiftKeyOnly;
      }

      listen(this,
        getChangeEventType(InteractionProperty.ACTIVE),
        this.updateState_, this);

    }

    if ( PointerInteraction$$1 ) Draw.__proto__ = PointerInteraction$$1;
    Draw.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    Draw.prototype.constructor = Draw;

    /**
     * @inheritDoc
     */
    Draw.prototype.setMap = function setMap (map) {
      PointerInteraction$$1.prototype.setMap.call(this, map);
      this.updateState_();
    };

    /**
     * Get the overlay layer that this interaction renders sketch features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    Draw.prototype.getOverlay = function getOverlay () {
      return this.overlay_;
    };

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.
     * @override
     * @api
     */
    Draw.prototype.handleEvent = function handleEvent (event) {
      if (event.originalEvent.type === EventType.CONTEXTMENU) {
        // Avoid context menu for long taps when drawing on mobile
        event.preventDefault();
      }
      this.freehand_ = this.mode_ !== Mode$1.POINT && this.freehandCondition_(event);
      var move = event.type === MapBrowserEventType.POINTERMOVE;
      var pass = true;
      if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {
        var now = Date.now();
        if (now - this.lastDragTime_ >= this.dragVertexDelay_) {
          this.downPx_ = event.pixel;
          this.shouldHandle_ = !this.freehand_;
          move = true;
        } else {
          this.lastDragTime_ = undefined;
        }
        if (this.shouldHandle_ && this.downTimeout_ !== undefined) {
          clearTimeout(this.downTimeout_);
          this.downTimeout_ = undefined;
        }
      }
      if (this.freehand_ &&
          event.type === MapBrowserEventType.POINTERDRAG &&
          this.sketchFeature_ !== null) {
        this.addToDrawing_(event);
        pass = false;
      } else if (this.freehand_ &&
          event.type === MapBrowserEventType.POINTERDOWN) {
        pass = false;
      } else if (move) {
        pass = event.type === MapBrowserEventType.POINTERMOVE;
        if (pass && this.freehand_) {
          pass = this.handlePointerMove_(event);
        } else if (/** @type {MapBrowserPointerEvent} */ (event).pointerEvent.pointerType == POINTER_TYPE ||
            (event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined)) {
          this.handlePointerMove_(event);
        }
      } else if (event.type === MapBrowserEventType.DBLCLICK) {
        pass = false;
      }

      return PointerInteraction$$1.prototype.handleEvent.call(this, event) && pass;
    };

    /**
     * @inheritDoc
     */
    Draw.prototype.handleDownEvent = function handleDownEvent (event) {
      this.shouldHandle_ = !this.freehand_;

      if (this.freehand_) {
        this.downPx_ = event.pixel;
        if (!this.finishCoordinate_) {
          this.startDrawing_(event);
        }
        return true;
      } else if (this.condition_(event)) {
        this.lastDragTime_ = Date.now();
        this.downTimeout_ = setTimeout(function() {
          this.handlePointerMove_(new MapBrowserPointerEvent(
            MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, false, event.frameState));
        }.bind(this), this.dragVertexDelay_);
        this.downPx_ = event.pixel;
        return true;
      } else {
        return false;
      }
    };


    /**
     * @inheritDoc
     */
    Draw.prototype.handleUpEvent = function handleUpEvent (event) {
      var pass = true;

      if (this.downTimeout_) {
        clearTimeout(this.downTimeout_);
        this.downTimeout_ = undefined;
      }

      this.handlePointerMove_(event);

      var circleMode = this.mode_ === Mode$1.CIRCLE;

      if (this.shouldHandle_) {
        if (!this.finishCoordinate_) {
          this.startDrawing_(event);
          if (this.mode_ === Mode$1.POINT) {
            this.finishDrawing();
          }
        } else if (this.freehand_ || circleMode) {
          this.finishDrawing();
        } else if (this.atFinish_(event)) {
          if (this.finishCondition_(event)) {
            this.finishDrawing();
          }
        } else {
          this.addToDrawing_(event);
        }
        pass = false;
      } else if (this.freehand_) {
        this.finishCoordinate_ = null;
        this.abortDrawing_();
      }
      if (!pass && this.stopClick_) {
        event.stopPropagation();
      }
      return pass;
    };

    /**
     * Handle move events.
     * @param {import("../MapBrowserEvent.js").default} event A move event.
     * @return {boolean} Pass the event to other interactions.
     * @private
     */
    Draw.prototype.handlePointerMove_ = function handlePointerMove_ (event) {
      if (this.downPx_ &&
          ((!this.freehand_ && this.shouldHandle_) ||
          (this.freehand_ && !this.shouldHandle_))) {
        var downPx = this.downPx_;
        var clickPx = event.pixel;
        var dx = downPx[0] - clickPx[0];
        var dy = downPx[1] - clickPx[1];
        var squaredDistance$$1 = dx * dx + dy * dy;
        this.shouldHandle_ = this.freehand_ ?
          squaredDistance$$1 > this.squaredClickTolerance_ :
          squaredDistance$$1 <= this.squaredClickTolerance_;
        if (!this.shouldHandle_) {
          return true;
        }
      }

      if (this.finishCoordinate_) {
        this.modifyDrawing_(event);
      } else {
        this.createOrUpdateSketchPoint_(event);
      }
      return true;
    };

    /**
     * Determine if an event is within the snapping tolerance of the start coord.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} The event is within the snapping tolerance of the start.
     * @private
     */
    Draw.prototype.atFinish_ = function atFinish_ (event) {
      var at = false;
      if (this.sketchFeature_) {
        var potentiallyDone = false;
        var potentiallyFinishCoordinates = [this.finishCoordinate_];
        if (this.mode_ === Mode$1.LINE_STRING) {
          potentiallyDone = this.sketchCoords_.length > this.minPoints_;
        } else if (this.mode_ === Mode$1.POLYGON) {
          var sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);
          potentiallyDone = sketchCoords[0].length > this.minPoints_;
          potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];
        }
        if (potentiallyDone) {
          var map = event.map;
          for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {
            var finishCoordinate = potentiallyFinishCoordinates[i];
            var finishPixel = map.getPixelFromCoordinate(finishCoordinate);
            var pixel = event.pixel;
            var dx = pixel[0] - finishPixel[0];
            var dy = pixel[1] - finishPixel[1];
            var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;
            at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;
            if (at) {
              this.finishCoordinate_ = finishCoordinate;
              break;
            }
          }
        }
      }
      return at;
    };

    /**
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    Draw.prototype.createOrUpdateSketchPoint_ = function createOrUpdateSketchPoint_ (event) {
      var coordinates = event.coordinate.slice();
      if (!this.sketchPoint_) {
        this.sketchPoint_ = new Feature$1(new Point$1(coordinates));
        this.updateSketchFeatures_();
      } else {
        var sketchPointGeom = /** @type {Point} */ (this.sketchPoint_.getGeometry());
        sketchPointGeom.setCoordinates(coordinates);
      }
    };

    /**
     * Start the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    Draw.prototype.startDrawing_ = function startDrawing_ (event) {
      var start = event.coordinate;
      this.finishCoordinate_ = start;
      if (this.mode_ === Mode$1.POINT) {
        this.sketchCoords_ = start.slice();
      } else if (this.mode_ === Mode$1.POLYGON) {
        this.sketchCoords_ = [[start.slice(), start.slice()]];
        this.sketchLineCoords_ = this.sketchCoords_[0];
      } else {
        this.sketchCoords_ = [start.slice(), start.slice()];
      }
      if (this.sketchLineCoords_) {
        this.sketchLine_ = new Feature$1(
          new LineString$1(this.sketchLineCoords_));
      }
      var geometry = this.geometryFunction_(this.sketchCoords_);
      this.sketchFeature_ = new Feature$1();
      if (this.geometryName_) {
        this.sketchFeature_.setGeometryName(this.geometryName_);
      }
      this.sketchFeature_.setGeometry(geometry);
      this.updateSketchFeatures_();
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
    };

    /**
     * Modify the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    Draw.prototype.modifyDrawing_ = function modifyDrawing_ (event) {
      var coordinate = event.coordinate;
      var geometry = /** @type {import("../geom/SimpleGeometry.js").default} */ (this.sketchFeature_.getGeometry());
      var coordinates, last;
      if (this.mode_ === Mode$1.POINT) {
        last = this.sketchCoords_;
      } else if (this.mode_ === Mode$1.POLYGON) {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        last = coordinates[coordinates.length - 1];
        if (this.atFinish_(event)) {
          // snap to finish
          coordinate = this.finishCoordinate_.slice();
        }
      } else {
        coordinates = this.sketchCoords_;
        last = coordinates[coordinates.length - 1];
      }
      last[0] = coordinate[0];
      last[1] = coordinate[1];
      this.geometryFunction_(/** @type {!LineCoordType} */ (this.sketchCoords_), geometry);
      if (this.sketchPoint_) {
        var sketchPointGeom = /** @type {Point} */ (this.sketchPoint_.getGeometry());
        sketchPointGeom.setCoordinates(coordinate);
      }
      /** @type {LineString} */
      var sketchLineGeom;
      if (geometry.getType() == GeometryType.POLYGON &&
          this.mode_ !== Mode$1.POLYGON) {
        if (!this.sketchLine_) {
          this.sketchLine_ = new Feature$1();
        }
        var ring = /** @type {Polygon} */ (geometry).getLinearRing(0);
        sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());
        if (!sketchLineGeom) {
          sketchLineGeom = new LineString$1(ring.getFlatCoordinates(), ring.getLayout());
          this.sketchLine_.setGeometry(sketchLineGeom);
        } else {
          sketchLineGeom.setFlatCoordinates(
            ring.getLayout(), ring.getFlatCoordinates());
          sketchLineGeom.changed();
        }
      } else if (this.sketchLineCoords_) {
        sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());
        sketchLineGeom.setCoordinates(this.sketchLineCoords_);
      }
      this.updateSketchFeatures_();
    };

    /**
     * Add a new coordinate to the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    Draw.prototype.addToDrawing_ = function addToDrawing_ (event) {
      var coordinate = event.coordinate;
      var geometry = /** @type {import("../geom/SimpleGeometry.js").default} */ (this.sketchFeature_.getGeometry());
      var done;
      var coordinates;
      if (this.mode_ === Mode$1.LINE_STRING) {
        this.finishCoordinate_ = coordinate.slice();
        coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
        if (coordinates.length >= this.maxPoints_) {
          if (this.freehand_) {
            coordinates.pop();
          } else {
            done = true;
          }
        }
        coordinates.push(coordinate.slice());
        this.geometryFunction_(coordinates, geometry);
      } else if (this.mode_ === Mode$1.POLYGON) {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        if (coordinates.length >= this.maxPoints_) {
          if (this.freehand_) {
            coordinates.pop();
          } else {
            done = true;
          }
        }
        coordinates.push(coordinate.slice());
        if (done) {
          this.finishCoordinate_ = coordinates[0];
        }
        this.geometryFunction_(this.sketchCoords_, geometry);
      }
      this.updateSketchFeatures_();
      if (done) {
        this.finishDrawing();
      }
    };

    /**
     * Remove last point of the feature currently being drawn.
     * @api
     */
    Draw.prototype.removeLastPoint = function removeLastPoint () {
      if (!this.sketchFeature_) {
        return;
      }
      var geometry = /** @type {import("../geom/SimpleGeometry.js").default} */ (this.sketchFeature_.getGeometry());
      var coordinates;
      /** @type {LineString} */
      var sketchLineGeom;
      if (this.mode_ === Mode$1.LINE_STRING) {
        coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
        coordinates.splice(-2, 1);
        this.geometryFunction_(coordinates, geometry);
        if (coordinates.length >= 2) {
          this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();
        }
      } else if (this.mode_ === Mode$1.POLYGON) {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        coordinates.splice(-2, 1);
        sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());
        sketchLineGeom.setCoordinates(coordinates);
        this.geometryFunction_(this.sketchCoords_, geometry);
      }

      if (coordinates.length === 0) {
        this.finishCoordinate_ = null;
      }

      this.updateSketchFeatures_();
    };

    /**
     * Stop drawing and add the sketch feature to the target layer.
     * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is
     * dispatched before inserting the feature.
     * @api
     */
    Draw.prototype.finishDrawing = function finishDrawing () {
      var sketchFeature = this.abortDrawing_();
      if (!sketchFeature) {
        return;
      }
      var coordinates = this.sketchCoords_;
      var geometry = /** @type {import("../geom/SimpleGeometry.js").default} */ (sketchFeature.getGeometry());
      if (this.mode_ === Mode$1.LINE_STRING) {
        // remove the redundant last point
        coordinates.pop();
        this.geometryFunction_(coordinates, geometry);
      } else if (this.mode_ === Mode$1.POLYGON) {
        // remove the redundant last point in ring
        /** @type {PolyCoordType} */ (coordinates)[0].pop();
        this.geometryFunction_(coordinates, geometry);
        coordinates = geometry.getCoordinates();
      }

      // cast multi-part geometries
      if (this.type_ === GeometryType.MULTI_POINT) {
        sketchFeature.setGeometry(new MultiPoint$1([/** @type {PointCoordType} */(coordinates)]));
      } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {
        sketchFeature.setGeometry(new MultiLineString$1([/** @type {LineCoordType} */(coordinates)]));
      } else if (this.type_ === GeometryType.MULTI_POLYGON) {
        sketchFeature.setGeometry(new MultiPolygon$1([/** @type {PolyCoordType} */(coordinates)]));
      }

      // First dispatch event to allow full set up of feature
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));

      // Then insert feature
      if (this.features_) {
        this.features_.push(sketchFeature);
      }
      if (this.source_) {
        this.source_.addFeature(sketchFeature);
      }
    };

    /**
     * Stop drawing without adding the sketch feature to the target layer.
     * @return {Feature} The sketch feature (or null if none).
     * @private
     */
    Draw.prototype.abortDrawing_ = function abortDrawing_ () {
      this.finishCoordinate_ = null;
      var sketchFeature = this.sketchFeature_;
      if (sketchFeature) {
        this.sketchFeature_ = null;
        this.sketchPoint_ = null;
        this.sketchLine_ = null;
        /** @type {VectorSource} */ (this.overlay_.getSource()).clear(true);
      }
      return sketchFeature;
    };

    /**
     * Extend an existing geometry by adding additional points. This only works
     * on features with `LineString` geometries, where the interaction will
     * extend lines by adding points to the end of the coordinates array.
     * @param {!Feature} feature Feature to be extended.
     * @api
     */
    Draw.prototype.extend = function extend (feature) {
      var geometry = feature.getGeometry();
      var lineString = /** @type {LineString} */ (geometry);
      this.sketchFeature_ = feature;
      this.sketchCoords_ = lineString.getCoordinates();
      var last = this.sketchCoords_[this.sketchCoords_.length - 1];
      this.finishCoordinate_ = last.slice();
      this.sketchCoords_.push(last.slice());
      this.updateSketchFeatures_();
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
    };

    /**
     * Redraw the sketch features.
     * @private
     */
    Draw.prototype.updateSketchFeatures_ = function updateSketchFeatures_ () {
      var sketchFeatures = [];
      if (this.sketchFeature_) {
        sketchFeatures.push(this.sketchFeature_);
      }
      if (this.sketchLine_) {
        sketchFeatures.push(this.sketchLine_);
      }
      if (this.sketchPoint_) {
        sketchFeatures.push(this.sketchPoint_);
      }
      var overlaySource = /** @type {VectorSource} */ (this.overlay_.getSource());
      overlaySource.clear(true);
      overlaySource.addFeatures(sketchFeatures);
    };

    /**
     * @private
     */
    Draw.prototype.updateState_ = function updateState_ () {
      var map = this.getMap();
      var active = this.getActive();
      if (!map || !active) {
        this.abortDrawing_();
      }
      this.overlay_.setMap(active ? map : null);
    };

    return Draw;
  }(PointerInteraction));


  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction() {
    var styles = createEditingStyle();
    return function(feature, resolution) {
      return styles[feature.getGeometry().getType()];
    };
  }


  /**
   * Get the drawing mode.  The mode for mult-part geometries is the same as for
   * their single-part cousins.
   * @param {GeometryType} type Geometry type.
   * @return {Mode} Drawing mode.
   */
  function getMode(type) {
    var mode;
    if (type === GeometryType.POINT ||
        type === GeometryType.MULTI_POINT) {
      mode = Mode$1.POINT;
    } else if (type === GeometryType.LINE_STRING ||
        type === GeometryType.MULTI_LINE_STRING) {
      mode = Mode$1.LINE_STRING;
    } else if (type === GeometryType.POLYGON ||
        type === GeometryType.MULTI_POLYGON) {
      mode = Mode$1.POLYGON;
    } else if (type === GeometryType.CIRCLE) {
      mode = Mode$1.CIRCLE;
    }
    return (
      /** @type {!Mode} */ (mode)
    );
  }

  /**
   * @module ol/interaction/Extent
   */


  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Initial extent. Defaults to no
   * initial extent.
   * @property {import("../style/Style.js").StyleLike} [boxStyle]
   * Style for the drawn extent box. Defaults to
   * {@link module:ol/style/Style~createEditing()['Polygon']}
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
   * pointer close enough to a segment or vertex for editing.
   * @property {import("../style/Style.js").StyleLike} [pointerStyle]
   * Style for the cursor used to draw the extent. Defaults to
   * {@link module:ol/style/Style~createEditing()['Point']}
   * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps
   * in the X direction? Only affects visuals, not functionality.
   */


  /**
   * @enum {string}
   */
  var ExtentEventType = {
    /**
     * Triggered after the extent is changed
     * @event ExtentEventType#extentchanged
     * @api
     */
    EXTENTCHANGED: 'extentchanged'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Extent~ExtentInteraction} instances are
   * instances of this type.
   */
  var ExtentInteractionEvent = /*@__PURE__*/(function (Event$$1) {
    function ExtentInteractionEvent(extent$$1) {
      Event$$1.call(this, ExtentEventType.EXTENTCHANGED);

      /**
       * The current extent.
       * @type {import("../extent.js").Extent}
       * @api
       */
      this.extent = extent$$1;
    }

    if ( Event$$1 ) ExtentInteractionEvent.__proto__ = Event$$1;
    ExtentInteractionEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    ExtentInteractionEvent.prototype.constructor = ExtentInteractionEvent;

    return ExtentInteractionEvent;
  }(Event));


  /**
   * @classdesc
   * Allows the user to draw a vector box by clicking and dragging on the map.
   * Once drawn, the vector box can be modified by dragging its vertices or edges.
   * This interaction is only supported for mouse devices.
   *
   * @fires Event
   * @api
   */
  var ExtentInteraction = /*@__PURE__*/(function (PointerInteraction$$1) {
    function ExtentInteraction(opt_options) {

      var options = opt_options || {};

      PointerInteraction$$1.call(/** @type {import("./Pointer.js").Options} */ this, (options));

      /**
       * Extent of the drawn box
       * @type {import("../extent.js").Extent}
       * @private
       */
      this.extent_ = null;

      /**
       * Handler for pointer move events
       * @type {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null}
       * @private
       */
      this.pointerHandler_ = null;

      /**
       * Pixel threshold to snap to extent
       * @type {number}
       * @private
       */
      this.pixelTolerance_ = options.pixelTolerance !== undefined ?
        options.pixelTolerance : 10;

      /**
       * Is the pointer snapped to an extent vertex
       * @type {boolean}
       * @private
       */
      this.snappedToVertex_ = false;

      /**
       * Feature for displaying the visible extent
       * @type {Feature}
       * @private
       */
      this.extentFeature_ = null;

      /**
       * Feature for displaying the visible pointer
       * @type {Feature}
       * @private
       */
      this.vertexFeature_ = null;

      if (!opt_options) {
        opt_options = {};
      }

      /**
       * Layer for the extentFeature
       * @type {VectorLayer}
       * @private
       */
      this.extentOverlay_ = new VectorLayer$1({
        source: new VectorSource$1({
          useSpatialIndex: false,
          wrapX: !!opt_options.wrapX
        }),
        style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      /**
       * Layer for the vertexFeature
       * @type {VectorLayer}
       * @private
       */
      this.vertexOverlay_ = new VectorLayer$1({
        source: new VectorSource$1({
          useSpatialIndex: false,
          wrapX: !!opt_options.wrapX
        }),
        style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      if (opt_options.extent) {
        this.setExtent(opt_options.extent);
      }
    }

    if ( PointerInteraction$$1 ) ExtentInteraction.__proto__ = PointerInteraction$$1;
    ExtentInteraction.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    ExtentInteraction.prototype.constructor = ExtentInteraction;

    /**
     * @param {import("../pixel.js").Pixel} pixel cursor location
     * @param {import("../PluggableMap.js").default} map map
     * @returns {import("../coordinate.js").Coordinate|null} snapped vertex on extent
     * @private
     */
    ExtentInteraction.prototype.snapToVertex_ = function snapToVertex_ (pixel, map) {
      var pixelCoordinate = map.getCoordinateFromPixel(pixel);
      var sortByDistance = function(a, b) {
        return squaredDistanceToSegment(pixelCoordinate, a) -
            squaredDistanceToSegment(pixelCoordinate, b);
      };
      var extent$$1 = this.getExtent();
      if (extent$$1) {
        //convert extents to line segments and find the segment closest to pixelCoordinate
        var segments = getSegments(extent$$1);
        segments.sort(sortByDistance);
        var closestSegment = segments[0];

        var vertex = (closestOnSegment(pixelCoordinate,
          closestSegment));
        var vertexPixel = map.getPixelFromCoordinate(vertex);

        //if the distance is within tolerance, snap to the segment
        if (distance$1(pixel, vertexPixel) <= this.pixelTolerance_) {
          //test if we should further snap to a vertex
          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
          var squaredDist1 = squaredDistance$1(vertexPixel, pixel1);
          var squaredDist2 = squaredDistance$1(vertexPixel, pixel2);
          var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
          this.snappedToVertex_ = dist <= this.pixelTolerance_;
          if (this.snappedToVertex_) {
            vertex = squaredDist1 > squaredDist2 ?
              closestSegment[1] : closestSegment[0];
          }
          return vertex;
        }
      }
      return null;
    };

    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent pointer move event
     * @private
     */
    ExtentInteraction.prototype.handlePointerMove_ = function handlePointerMove_ (mapBrowserEvent) {
      var pixel = mapBrowserEvent.pixel;
      var map = mapBrowserEvent.map;

      var vertex = this.snapToVertex_(pixel, map);
      if (!vertex) {
        vertex = map.getCoordinateFromPixel(pixel);
      }
      this.createOrUpdatePointerFeature_(vertex);
    };

    /**
     * @param {import("../extent.js").Extent} extent extent
     * @returns {Feature} extent as featrue
     * @private
     */
    ExtentInteraction.prototype.createOrUpdateExtentFeature_ = function createOrUpdateExtentFeature_ (extent$$1) {
      var extentFeature = this.extentFeature_;

      if (!extentFeature) {
        if (!extent$$1) {
          extentFeature = new Feature$1({});
        } else {
          extentFeature = new Feature$1(fromExtent(extent$$1));
        }
        this.extentFeature_ = extentFeature;
        /** @type {VectorSource} */ (this.extentOverlay_.getSource()).addFeature(extentFeature);
      } else {
        if (!extent$$1) {
          extentFeature.setGeometry(undefined);
        } else {
          extentFeature.setGeometry(fromExtent(extent$$1));
        }
      }
      return extentFeature;
    };

    /**
     * @param {import("../coordinate.js").Coordinate} vertex location of feature
     * @returns {Feature} vertex as feature
     * @private
     */
    ExtentInteraction.prototype.createOrUpdatePointerFeature_ = function createOrUpdatePointerFeature_ (vertex) {
      var vertexFeature = this.vertexFeature_;
      if (!vertexFeature) {
        vertexFeature = new Feature$1(new Point$1(vertex));
        this.vertexFeature_ = vertexFeature;
        /** @type {VectorSource} */ (this.vertexOverlay_.getSource()).addFeature(vertexFeature);
      } else {
        var geometry = /** @type {Point} */ (vertexFeature.getGeometry());
        geometry.setCoordinates(vertex);
      }
      return vertexFeature;
    };

    /**
     * @inheritDoc
     */
    ExtentInteraction.prototype.handleEvent = function handleEvent (mapBrowserEvent) {
      if (!(/** @type {import("../MapBrowserPointerEvent.js").default} */ (mapBrowserEvent).pointerEvent)) {
        return true;
      }
      //display pointer (if not dragging)
      if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {
        this.handlePointerMove_(mapBrowserEvent);
      }
      //call pointer to determine up/down/drag
      PointerInteraction$$1.prototype.handleEvent.call(this, mapBrowserEvent);
      //return false to stop propagation
      return false;
    };

    /**
     * @inheritDoc
     */
    ExtentInteraction.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      var pixel = mapBrowserEvent.pixel;
      var map = mapBrowserEvent.map;

      var extent$$1 = this.getExtent();
      var vertex = this.snapToVertex_(pixel, map);

      //find the extent corner opposite the passed corner
      var getOpposingPoint = function(point) {
        var x_ = null;
        var y_ = null;
        if (point[0] == extent$$1[0]) {
          x_ = extent$$1[2];
        } else if (point[0] == extent$$1[2]) {
          x_ = extent$$1[0];
        }
        if (point[1] == extent$$1[1]) {
          y_ = extent$$1[3];
        } else if (point[1] == extent$$1[3]) {
          y_ = extent$$1[1];
        }
        if (x_ !== null && y_ !== null) {
          return [x_, y_];
        }
        return null;
      };
      if (vertex && extent$$1) {
        var x = (vertex[0] == extent$$1[0] || vertex[0] == extent$$1[2]) ? vertex[0] : null;
        var y = (vertex[1] == extent$$1[1] || vertex[1] == extent$$1[3]) ? vertex[1] : null;

        //snap to point
        if (x !== null && y !== null) {
          this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));
        //snap to edge
        } else if (x !== null) {
          this.pointerHandler_ = getEdgeHandler(
            getOpposingPoint([x, extent$$1[1]]),
            getOpposingPoint([x, extent$$1[3]])
          );
        } else if (y !== null) {
          this.pointerHandler_ = getEdgeHandler(
            getOpposingPoint([extent$$1[0], y]),
            getOpposingPoint([extent$$1[2], y])
          );
        }
      //no snap - new bbox
      } else {
        vertex = map.getCoordinateFromPixel(pixel);
        this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);
        this.pointerHandler_ = getPointHandler(vertex);
      }
      return true; //event handled; start downup sequence
    };

    /**
     * @inheritDoc
     */
    ExtentInteraction.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      if (this.pointerHandler_) {
        var pixelCoordinate = mapBrowserEvent.coordinate;
        this.setExtent(this.pointerHandler_(pixelCoordinate));
        this.createOrUpdatePointerFeature_(pixelCoordinate);
      }
      return true;
    };

    /**
     * @inheritDoc
     */
    ExtentInteraction.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      this.pointerHandler_ = null;
      //If bbox is zero area, set to null;
      var extent$$1 = this.getExtent();
      if (!extent$$1 || getArea(extent$$1) === 0) {
        this.setExtent(null);
      }
      return false; //Stop handling downup sequence
    };

    /**
     * @inheritDoc
     */
    ExtentInteraction.prototype.setMap = function setMap (map) {
      this.extentOverlay_.setMap(map);
      this.vertexOverlay_.setMap(map);
      PointerInteraction$$1.prototype.setMap.call(this, map);
    };

    /**
     * Returns the current drawn extent in the view projection
     *
     * @return {import("../extent.js").Extent} Drawn extent in the view projection.
     * @api
     */
    ExtentInteraction.prototype.getExtent = function getExtent () {
      return this.extent_;
    };

    /**
     * Manually sets the drawn extent, using the view projection.
     *
     * @param {import("../extent.js").Extent} extent Extent
     * @api
     */
    ExtentInteraction.prototype.setExtent = function setExtent (extent$$1) {
      //Null extent means no bbox
      this.extent_ = extent$$1 ? extent$$1 : null;
      this.createOrUpdateExtentFeature_(extent$$1);
      this.dispatchEvent(new ExtentInteractionEvent(this.extent_));
    };

    return ExtentInteraction;
  }(PointerInteraction));

  /**
   * Returns the default style for the drawn bbox
   *
   * @return {import("../style/Style.js").StyleFunction} Default Extent style
   */
  function getDefaultExtentStyleFunction() {
    var style = createEditingStyle();
    return function(feature, resolution) {
      return style[GeometryType.POLYGON];
    };
  }

  /**
   * Returns the default style for the pointer
   *
   * @return {import("../style/Style.js").StyleFunction} Default pointer style
   */
  function getDefaultPointerStyleFunction() {
    var style = createEditingStyle();
    return function(feature, resolution) {
      return style[GeometryType.POINT];
    };
  }

  /**
   * @param {import("../coordinate.js").Coordinate} fixedPoint corner that will be unchanged in the new extent
   * @returns {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent} event handler
   */
  function getPointHandler(fixedPoint) {
    return function(point) {
      return boundingExtent([fixedPoint, point]);
    };
  }

  /**
   * @param {import("../coordinate.js").Coordinate} fixedP1 first corner that will be unchanged in the new extent
   * @param {import("../coordinate.js").Coordinate} fixedP2 second corner that will be unchanged in the new extent
   * @returns {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null} event handler
   */
  function getEdgeHandler(fixedP1, fixedP2) {
    if (fixedP1[0] == fixedP2[0]) {
      return function(point) {
        return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);
      };
    } else if (fixedP1[1] == fixedP2[1]) {
      return function(point) {
        return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);
      };
    } else {
      return null;
    }
  }

  /**
   * @param {import("../extent.js").Extent} extent extent
   * @returns {Array<Array<import("../coordinate.js").Coordinate>>} extent line segments
   */
  function getSegments(extent$$1) {
    return [
      [[extent$$1[0], extent$$1[1]], [extent$$1[0], extent$$1[3]]],
      [[extent$$1[0], extent$$1[3]], [extent$$1[2], extent$$1[3]]],
      [[extent$$1[2], extent$$1[3]], [extent$$1[2], extent$$1[1]]],
      [[extent$$1[2], extent$$1[1]], [extent$$1[0], extent$$1[1]]]
    ];
  }

  /**
   * @module ol/interaction/Modify
   */


  /**
   * The segment index assigned to a circle's center when
   * breaking up a circle into ModifySegmentDataType segments.
   * @type {number}
   */
  var CIRCLE_CENTER_INDEX = 0;

  /**
   * The segment index assigned to a circle's circumference when
   * breaking up a circle into ModifySegmentDataType segments.
   * @type {number}
   */
  var CIRCLE_CIRCUMFERENCE_INDEX = 1;


  /**
   * @enum {string}
   */
  var ModifyEventType = {
    /**
     * Triggered upon feature modification start
     * @event ModifyEvent#modifystart
     * @api
     */
    MODIFYSTART: 'modifystart',
    /**
     * Triggered upon feature modification end
     * @event ModifyEvent#modifyend
     * @api
     */
    MODIFYEND: 'modifyend'
  };


  /**
   * @typedef {Object} SegmentData
   * @property {Array<number>} [depth]
   * @property {Feature} feature
   * @property {import("../geom/SimpleGeometry.js").default} geometry
   * @property {number} [index]
   * @property {Array<import("../extent.js").Extent>} segment
   * @property {Array<SegmentData>} [featureSegments]
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event will be considered to add or move a
   * vertex to the sketch. Default is
   * {@link module:ol/events/condition~primaryAction}.
   * @property {import("../events/condition.js").Condition} [deleteCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. By default,
   * {@link module:ol/events/condition~singleClick} with
   * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.
   * @property {import("../events/condition.js").Condition} [insertVertexCondition] A
   * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
   * returns a boolean to indicate whether a new vertex can be added to the sketch
   * features. Default is {@link module:ol/events/condition~always}.
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
   * pointer close enough to a segment or vertex for editing.
   * @property {import("../style/Style.js").StyleLike} [style]
   * Style used for the features being modified. By default the default edit
   * style is used (see {@link module:ol/style}).
   * @property {VectorSource} [source] The vector source with
   * features to modify.  If a vector source is not provided, a feature collection
   * must be provided with the features option.
   * @property {Collection<Feature>} [features]
   * The features the interaction works on.  If a feature collection is not
   * provided, a vector source must be provided with the source option.
   * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
   * overlay.
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are
   * instances of this type.
   */
  var ModifyEvent = /*@__PURE__*/(function (Event$$1) {
    function ModifyEvent(type, features, mapBrowserPointerEvent) {
      Event$$1.call(this, type);

      /**
       * The features being modified.
       * @type {Collection<Feature>}
       * @api
       */
      this.features = features;

      /**
       * Associated {@link module:ol/MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserPointerEvent;

    }

    if ( Event$$1 ) ModifyEvent.__proto__ = Event$$1;
    ModifyEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    ModifyEvent.prototype.constructor = ModifyEvent;

    return ModifyEvent;
  }(Event));


  /**
   * @classdesc
   * Interaction for modifying feature geometries.  To modify features that have
   * been added to an existing source, construct the modify interaction with the
   * `source` option.  If you want to modify features in a collection (for example,
   * the collection used by a select interaction), construct the interaction with
   * the `features` option.  The interaction must be constructed with either a
   * `source` or `features` option.
   *
   * By default, the interaction will allow deletion of vertices when the `alt`
   * key is pressed.  To configure the interaction with a different condition
   * for deletion, use the `deleteCondition` option.
   * @fires ModifyEvent
   * @api
   */
  var Modify = /*@__PURE__*/(function (PointerInteraction$$1) {
    function Modify(options) {

      PointerInteraction$$1.call(/** @type {import("./Pointer.js").Options} */ this, (options));

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : primaryAction;

      /**
       * @private
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
       * @return {boolean} Combined condition result.
       */
      this.defaultDeleteCondition_ = function(mapBrowserEvent) {
        return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);
      };

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.deleteCondition_ = options.deleteCondition ?
        options.deleteCondition : this.defaultDeleteCondition_;

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.insertVertexCondition_ = options.insertVertexCondition ?
        options.insertVertexCondition : always;

      /**
       * Editing vertex.
       * @type {Feature}
       * @private
       */
      this.vertexFeature_ = null;

      /**
       * Segments intersecting {@link this.vertexFeature_} by segment uid.
       * @type {Object<string, boolean>}
       * @private
       */
      this.vertexSegments_ = null;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.lastPixel_ = [0, 0];

      /**
       * Tracks if the next `singleclick` event should be ignored to prevent
       * accidental deletion right after vertex creation.
       * @type {boolean}
       * @private
       */
      this.ignoreNextSingleClick_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.modified_ = false;

      /**
       * Segment RTree for each layer
       * @type {RBush<SegmentData>}
       * @private
       */
      this.rBush_ = new RBush();

      /**
       * @type {number}
       * @private
       */
      this.pixelTolerance_ = options.pixelTolerance !== undefined ?
        options.pixelTolerance : 10;

      /**
       * @type {boolean}
       * @private
       */
      this.snappedToVertex_ = false;

      /**
       * Indicate whether the interaction is currently changing a feature's
       * coordinates.
       * @type {boolean}
       * @private
       */
      this.changingFeature_ = false;

      /**
       * @type {Array}
       * @private
       */
      this.dragSegments_ = [];

      /**
       * Draw overlay where sketch features are drawn.
       * @type {VectorLayer}
       * @private
       */
      this.overlay_ = new VectorLayer$1({
        source: new VectorSource$1({
          useSpatialIndex: false,
          wrapX: !!options.wrapX
        }),
        style: options.style ? options.style :
          getDefaultStyleFunction$1(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      /**
       * @const
       * @private
       * @type {!Object<string, function(Feature, import("../geom/Geometry.js").default)>}
       */
      this.SEGMENT_WRITERS_ = {
        'Point': this.writePointGeometry_,
        'LineString': this.writeLineStringGeometry_,
        'LinearRing': this.writeLineStringGeometry_,
        'Polygon': this.writePolygonGeometry_,
        'MultiPoint': this.writeMultiPointGeometry_,
        'MultiLineString': this.writeMultiLineStringGeometry_,
        'MultiPolygon': this.writeMultiPolygonGeometry_,
        'Circle': this.writeCircleGeometry_,
        'GeometryCollection': this.writeGeometryCollectionGeometry_
      };


      /**
       * @type {VectorSource}
       * @private
       */
      this.source_ = null;

      var features;
      if (options.source) {
        this.source_ = options.source;
        features = new Collection$1(this.source_.getFeatures());
        listen(this.source_, VectorEventType.ADDFEATURE,
          this.handleSourceAdd_, this);
        listen(this.source_, VectorEventType.REMOVEFEATURE,
          this.handleSourceRemove_, this);
      } else {
        features = options.features;
      }
      if (!features) {
        throw new Error('The modify interaction requires features or a source');
      }

      /**
       * @type {Collection<Feature>}
       * @private
       */
      this.features_ = features;

      this.features_.forEach(this.addFeature_.bind(this));
      listen(this.features_, CollectionEventType.ADD,
        this.handleFeatureAdd_, this);
      listen(this.features_, CollectionEventType.REMOVE,
        this.handleFeatureRemove_, this);

      /**
       * @type {import("../MapBrowserPointerEvent.js").default}
       * @private
       */
      this.lastPointerEvent_ = null;

    }

    if ( PointerInteraction$$1 ) Modify.__proto__ = PointerInteraction$$1;
    Modify.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    Modify.prototype.constructor = Modify;

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    Modify.prototype.addFeature_ = function addFeature_ (feature) {
      var geometry = feature.getGeometry();
      if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {
        this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);
      }
      var map = this.getMap();
      if (map && map.isRendered() && this.getActive()) {
        this.handlePointerAtPixel_(this.lastPixel_, map);
      }
      listen(feature, EventType.CHANGE,
        this.handleFeatureChange_, this);
    };

    /**
     * @param {import("../MapBrowserPointerEvent.js").default} evt Map browser event
     * @private
     */
    Modify.prototype.willModifyFeatures_ = function willModifyFeatures_ (evt) {
      if (!this.modified_) {
        this.modified_ = true;
        this.dispatchEvent(new ModifyEvent(
          ModifyEventType.MODIFYSTART, this.features_, evt));
      }
    };

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    Modify.prototype.removeFeature_ = function removeFeature_ (feature) {
      this.removeFeatureSegmentData_(feature);
      // Remove the vertex feature if the collection of canditate features
      // is empty.
      if (this.vertexFeature_ && this.features_.getLength() === 0) {
        /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      unlisten(feature, EventType.CHANGE,
        this.handleFeatureChange_, this);
    };

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    Modify.prototype.removeFeatureSegmentData_ = function removeFeatureSegmentData_ (feature) {
      var rBush = this.rBush_;
      var /** @type {Array<SegmentData>} */ nodesToRemove = [];
      rBush.forEach(
        /**
         * @param {SegmentData} node RTree node.
         */
        function(node) {
          if (feature === node.feature) {
            nodesToRemove.push(node);
          }
        });
      for (var i = nodesToRemove.length - 1; i >= 0; --i) {
        rBush.remove(nodesToRemove[i]);
      }
    };

    /**
     * @inheritDoc
     */
    Modify.prototype.setActive = function setActive (active) {
      if (this.vertexFeature_ && !active) {
        /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      PointerInteraction$$1.prototype.setActive.call(this, active);
    };

    /**
     * @inheritDoc
     */
    Modify.prototype.setMap = function setMap (map) {
      this.overlay_.setMap(map);
      PointerInteraction$$1.prototype.setMap.call(this, map);
    };

    /**
     * Get the overlay layer that this interaction renders sketch features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    Modify.prototype.getOverlay = function getOverlay () {
      return this.overlay_;
    };

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    Modify.prototype.handleSourceAdd_ = function handleSourceAdd_ (event) {
      if (event.feature) {
        this.features_.push(event.feature);
      }
    };

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    Modify.prototype.handleSourceRemove_ = function handleSourceRemove_ (event) {
      if (event.feature) {
        this.features_.remove(event.feature);
      }
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Modify.prototype.handleFeatureAdd_ = function handleFeatureAdd_ (evt) {
      this.addFeature_(/** @type {Feature} */ (evt.element));
    };

    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */
    Modify.prototype.handleFeatureChange_ = function handleFeatureChange_ (evt) {
      if (!this.changingFeature_) {
        var feature = /** @type {Feature} */ (evt.target);
        this.removeFeature_(feature);
        this.addFeature_(feature);
      }
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Modify.prototype.handleFeatureRemove_ = function handleFeatureRemove_ (evt) {
      var feature = /** @type {Feature} */ (evt.element);
      this.removeFeature_(feature);
    };

    /**
     * @param {Feature} feature Feature
     * @param {Point} geometry Geometry.
     * @private
     */
    Modify.prototype.writePointGeometry_ = function writePointGeometry_ (feature, geometry) {
      var coordinates = geometry.getCoordinates();
      var segmentData = /** @type {SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        segment: [coordinates, coordinates]
      });
      this.rBush_.insert(geometry.getExtent(), segmentData);
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeMultiPointGeometry_ = function writeMultiPointGeometry_ (feature, geometry) {
      var points = geometry.getCoordinates();
      for (var i = 0, ii = points.length; i < ii; ++i) {
        var coordinates = points[i];
        var segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          geometry: geometry,
          depth: [i],
          index: i,
          segment: [coordinates, coordinates]
        });
        this.rBush_.insert(geometry.getExtent(), segmentData);
      }
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeLineStringGeometry_ = function writeLineStringGeometry_ (feature, geometry) {
      var coordinates = geometry.getCoordinates();
      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        var segment = coordinates.slice(i, i + 2);
        var segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          geometry: geometry,
          index: i,
          segment: segment
        });
        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeMultiLineStringGeometry_ = function writeMultiLineStringGeometry_ (feature, geometry) {
      var lines = geometry.getCoordinates();
      for (var j = 0, jj = lines.length; j < jj; ++j) {
        var coordinates = lines[j];
        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          var segment = coordinates.slice(i, i + 2);
          var segmentData = /** @type {SegmentData} */ ({
            feature: feature,
            geometry: geometry,
            depth: [j],
            index: i,
            segment: segment
          });
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writePolygonGeometry_ = function writePolygonGeometry_ (feature, geometry) {
      var rings = geometry.getCoordinates();
      for (var j = 0, jj = rings.length; j < jj; ++j) {
        var coordinates = rings[j];
        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          var segment = coordinates.slice(i, i + 2);
          var segmentData = /** @type {SegmentData} */ ({
            feature: feature,
            geometry: geometry,
            depth: [j],
            index: i,
            segment: segment
          });
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeMultiPolygonGeometry_ = function writeMultiPolygonGeometry_ (feature, geometry) {
      var polygons = geometry.getCoordinates();
      for (var k = 0, kk = polygons.length; k < kk; ++k) {
        var rings = polygons[k];
        for (var j = 0, jj = rings.length; j < jj; ++j) {
          var coordinates = rings[j];
          for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
            var segment = coordinates.slice(i, i + 2);
            var segmentData = /** @type {SegmentData} */ ({
              feature: feature,
              geometry: geometry,
              depth: [j, k],
              index: i,
              segment: segment
            });
            this.rBush_.insert(boundingExtent(segment), segmentData);
          }
        }
      }
    };

    /**
     * We convert a circle into two segments.  The segment at index
     * {@link CIRCLE_CENTER_INDEX} is the
     * circle's center (a point).  The segment at index
     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is
     * the circumference, and is not a line segment.
     *
     * @param {Feature} feature Feature.
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeCircleGeometry_ = function writeCircleGeometry_ (feature, geometry) {
      var coordinates = geometry.getCenter();
      var centerSegmentData = /** @type {SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        index: CIRCLE_CENTER_INDEX,
        segment: [coordinates, coordinates]
      });
      var circumferenceSegmentData = /** @type {SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        index: CIRCLE_CIRCUMFERENCE_INDEX,
        segment: [coordinates, coordinates]
      });
      var featureSegments = [centerSegmentData, circumferenceSegmentData];
      centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;
      this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);
      this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeGeometryCollectionGeometry_ = function writeGeometryCollectionGeometry_ (feature, geometry) {
      var geometries = geometry.getGeometriesArray();
      for (var i = 0; i < geometries.length; ++i) {
        this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);
      }
    };

    /**
     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
     * @return {Feature} Vertex feature.
     * @private
     */
    Modify.prototype.createOrUpdateVertexFeature_ = function createOrUpdateVertexFeature_ (coordinates) {
      var vertexFeature = this.vertexFeature_;
      if (!vertexFeature) {
        vertexFeature = new Feature$1(new Point$1(coordinates));
        this.vertexFeature_ = vertexFeature;
        /** @type {VectorSource} */ (this.overlay_.getSource()).addFeature(vertexFeature);
      } else {
        var geometry = /** @type {Point} */ (vertexFeature.getGeometry());
        geometry.setCoordinates(coordinates);
      }
      return vertexFeature;
    };

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.
     * @override
     */
    Modify.prototype.handleEvent = function handleEvent (mapBrowserEvent) {
      if (!(/** @type {import("../MapBrowserPointerEvent.js").default} */ (mapBrowserEvent).pointerEvent)) {
        return true;
      }
      this.lastPointerEvent_ = mapBrowserEvent;

      var handled;
      if (!mapBrowserEvent.map.getView().getInteracting() &&
          mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&
          !this.handlingDownUpSequence) {
        this.handlePointerMove_(mapBrowserEvent);
      }
      if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {
        if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {
          handled = this.removePoint();
        } else {
          handled = true;
        }
      }

      if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {
        this.ignoreNextSingleClick_ = false;
      }

      return PointerInteraction$$1.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;
    };

    /**
     * @inheritDoc
     */
    Modify.prototype.handleDragEvent = function handleDragEvent (evt) {
      this.ignoreNextSingleClick_ = false;
      this.willModifyFeatures_(evt);

      var vertex = evt.coordinate;
      for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {
        var dragSegment = this.dragSegments_[i];
        var segmentData = dragSegment[0];
        var depth = segmentData.depth;
        var geometry = segmentData.geometry;
        var coordinates = (void 0);
        var segment = segmentData.segment;
        var index = dragSegment[1];

        while (vertex.length < geometry.getStride()) {
          vertex.push(segment[index][vertex.length]);
        }

        switch (geometry.getType()) {
          case GeometryType.POINT:
            coordinates = vertex;
            segment[0] = segment[1] = vertex;
            break;
          case GeometryType.MULTI_POINT:
            coordinates = geometry.getCoordinates();
            coordinates[segmentData.index] = vertex;
            segment[0] = segment[1] = vertex;
            break;
          case GeometryType.LINE_STRING:
            coordinates = geometry.getCoordinates();
            coordinates[segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.MULTI_LINE_STRING:
            coordinates = geometry.getCoordinates();
            coordinates[depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.POLYGON:
            coordinates = geometry.getCoordinates();
            coordinates[depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.MULTI_POLYGON:
            coordinates = geometry.getCoordinates();
            coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.CIRCLE:
            segment[0] = segment[1] = vertex;
            if (segmentData.index === CIRCLE_CENTER_INDEX) {
              this.changingFeature_ = true;
              geometry.setCenter(vertex);
              this.changingFeature_ = false;
            } else { // We're dragging the circle's circumference:
              this.changingFeature_ = true;
              geometry.setRadius(distance$1(geometry.getCenter(), vertex));
              this.changingFeature_ = false;
            }
            break;
          default:
            // pass
        }

        if (coordinates) {
          this.setGeometryCoordinates_(geometry, coordinates);
        }
      }
      this.createOrUpdateVertexFeature_(vertex);
    };

    /**
     * @inheritDoc
     */
    Modify.prototype.handleDownEvent = function handleDownEvent (evt) {
      if (!this.condition_(evt)) {
        return false;
      }
      this.handlePointerAtPixel_(evt.pixel, evt.map);
      var pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);
      this.dragSegments_.length = 0;
      this.modified_ = false;
      var vertexFeature = this.vertexFeature_;
      if (vertexFeature) {
        var insertVertices = [];
        var geometry = /** @type {Point} */ (vertexFeature.getGeometry());
        var vertex = geometry.getCoordinates();
        var vertexExtent = boundingExtent([vertex]);
        var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);
        var componentSegments = {};
        segmentDataMatches.sort(compareIndexes);
        for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {
          var segmentDataMatch = segmentDataMatches[i];
          var segment = segmentDataMatch.segment;
          var uid = getUid(segmentDataMatch.feature);
          var depth = segmentDataMatch.depth;
          if (depth) {
            uid += '-' + depth.join('-'); // separate feature components
          }
          if (!componentSegments[uid]) {
            componentSegments[uid] = new Array(2);
          }
          if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE &&
          segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {

            var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);
            if (equals$2(closestVertex, vertex) && !componentSegments[uid][0]) {
              this.dragSegments_.push([segmentDataMatch, 0]);
              componentSegments[uid][0] = segmentDataMatch;
            }
          } else if (equals$2(segment[0], vertex) &&
              !componentSegments[uid][0]) {
            this.dragSegments_.push([segmentDataMatch, 0]);
            componentSegments[uid][0] = segmentDataMatch;
          } else if (equals$2(segment[1], vertex) &&
              !componentSegments[uid][1]) {

            // prevent dragging closed linestrings by the connecting node
            if ((segmentDataMatch.geometry.getType() ===
                GeometryType.LINE_STRING ||
                segmentDataMatch.geometry.getType() ===
                GeometryType.MULTI_LINE_STRING) &&
                componentSegments[uid][0] &&
                componentSegments[uid][0].index === 0) {
              continue;
            }

            this.dragSegments_.push([segmentDataMatch, 1]);
            componentSegments[uid][1] = segmentDataMatch;
          } else if (this.insertVertexCondition_(evt) && getUid(segment) in this.vertexSegments_ &&
              (!componentSegments[uid][0] && !componentSegments[uid][1])) {
            insertVertices.push([segmentDataMatch, vertex]);
          }
        }
        if (insertVertices.length) {
          this.willModifyFeatures_(evt);
        }
        for (var j = insertVertices.length - 1; j >= 0; --j) {
          this.insertVertex_.apply(this, insertVertices[j]);
        }
      }
      return !!this.vertexFeature_;
    };

    /**
     * @inheritDoc
     */
    Modify.prototype.handleUpEvent = function handleUpEvent (evt) {
      for (var i = this.dragSegments_.length - 1; i >= 0; --i) {
        var segmentData = this.dragSegments_[i][0];
        var geometry = segmentData.geometry;
        if (geometry.getType() === GeometryType.CIRCLE) {
          // Update a circle object in the R* bush:
          var coordinates = geometry.getCenter();
          var centerSegmentData = segmentData.featureSegments[0];
          var circumferenceSegmentData = segmentData.featureSegments[1];
          centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;
          circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;
          this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);
          this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);
        } else {
          this.rBush_.update(boundingExtent(segmentData.segment), segmentData);
        }
      }
      if (this.modified_) {
        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));
        this.modified_ = false;
      }
      return false;
    };

    /**
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @private
     */
    Modify.prototype.handlePointerMove_ = function handlePointerMove_ (evt) {
      this.lastPixel_ = evt.pixel;
      this.handlePointerAtPixel_(evt.pixel, evt.map);
    };

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../PluggableMap.js").default} map Map.
     * @private
     */
    Modify.prototype.handlePointerAtPixel_ = function handlePointerAtPixel_ (pixel, map) {
      var pixelCoordinate = map.getCoordinateFromPixel(pixel);
      var sortByDistance = function(a, b) {
        return pointDistanceToSegmentDataSquared(pixelCoordinate, a) -
            pointDistanceToSegmentDataSquared(pixelCoordinate, b);
      };

      var box = buffer(createOrUpdateFromCoordinate(pixelCoordinate),
        map.getView().getResolution() * this.pixelTolerance_);

      var rBush = this.rBush_;
      var nodes = rBush.getInExtent(box);
      if (nodes.length > 0) {
        nodes.sort(sortByDistance);
        var node = nodes[0];
        var closestSegment = node.segment;
        var vertex = closestOnSegmentData(pixelCoordinate, node);
        var vertexPixel = map.getPixelFromCoordinate(vertex);
        var dist = distance$1(pixel, vertexPixel);
        if (dist <= this.pixelTolerance_) {
          /** @type {Object<string, boolean>} */
          var vertexSegments = {};

          if (node.geometry.getType() === GeometryType.CIRCLE &&
          node.index === CIRCLE_CIRCUMFERENCE_INDEX) {

            this.snappedToVertex_ = true;
            this.createOrUpdateVertexFeature_(vertex);
          } else {
            var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
            var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
            var squaredDist1 = squaredDistance$1(vertexPixel, pixel1);
            var squaredDist2 = squaredDistance$1(vertexPixel, pixel2);
            dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
            this.snappedToVertex_ = dist <= this.pixelTolerance_;
            if (this.snappedToVertex_) {
              vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
            }
            this.createOrUpdateVertexFeature_(vertex);
            for (var i = 1, ii = nodes.length; i < ii; ++i) {
              var segment = nodes[i].segment;
              if ((equals$2(closestSegment[0], segment[0]) &&
                  equals$2(closestSegment[1], segment[1]) ||
                  (equals$2(closestSegment[0], segment[1]) &&
                  equals$2(closestSegment[1], segment[0])))) {
                vertexSegments[getUid(segment)] = true;
              } else {
                break;
              }
            }
          }

          vertexSegments[getUid(closestSegment)] = true;
          this.vertexSegments_ = vertexSegments;
          return;
        }
      }
      if (this.vertexFeature_) {
        /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
    };

    /**
     * @param {SegmentData} segmentData Segment data.
     * @param {import("../coordinate.js").Coordinate} vertex Vertex.
     * @private
     */
    Modify.prototype.insertVertex_ = function insertVertex_ (segmentData, vertex) {
      var segment = segmentData.segment;
      var feature = segmentData.feature;
      var geometry = segmentData.geometry;
      var depth = segmentData.depth;
      var index = /** @type {number} */ (segmentData.index);
      var coordinates;

      while (vertex.length < geometry.getStride()) {
        vertex.push(0);
      }

      switch (geometry.getType()) {
        case GeometryType.MULTI_LINE_STRING:
          coordinates = geometry.getCoordinates();
          coordinates[depth[0]].splice(index + 1, 0, vertex);
          break;
        case GeometryType.POLYGON:
          coordinates = geometry.getCoordinates();
          coordinates[depth[0]].splice(index + 1, 0, vertex);
          break;
        case GeometryType.MULTI_POLYGON:
          coordinates = geometry.getCoordinates();
          coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);
          break;
        case GeometryType.LINE_STRING:
          coordinates = geometry.getCoordinates();
          coordinates.splice(index + 1, 0, vertex);
          break;
        default:
          return;
      }

      this.setGeometryCoordinates_(geometry, coordinates);
      var rTree = this.rBush_;
      rTree.remove(segmentData);
      this.updateSegmentIndices_(geometry, index, depth, 1);
      var newSegmentData = /** @type {SegmentData} */ ({
        segment: [segment[0], vertex],
        feature: feature,
        geometry: geometry,
        depth: depth,
        index: index
      });
      rTree.insert(boundingExtent(newSegmentData.segment),
        newSegmentData);
      this.dragSegments_.push([newSegmentData, 1]);

      var newSegmentData2 = /** @type {SegmentData} */ ({
        segment: [vertex, segment[1]],
        feature: feature,
        geometry: geometry,
        depth: depth,
        index: index + 1
      });
      rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);
      this.dragSegments_.push([newSegmentData2, 0]);
      this.ignoreNextSingleClick_ = true;
    };

    /**
     * Removes the vertex currently being pointed.
     * @return {boolean} True when a vertex was removed.
     * @api
     */
    Modify.prototype.removePoint = function removePoint () {
      if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {
        var evt = this.lastPointerEvent_;
        this.willModifyFeatures_(evt);
        this.removeVertex_();
        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));
        this.modified_ = false;
        return true;
      }
      return false;
    };

    /**
     * Removes a vertex from all matching features.
     * @return {boolean} True when a vertex was removed.
     * @private
     */
    Modify.prototype.removeVertex_ = function removeVertex_ () {
      var dragSegments = this.dragSegments_;
      var segmentsByFeature = {};
      var deleted = false;
      var component, coordinates, dragSegment, geometry, i, index, left;
      var newIndex, right, segmentData, uid;
      for (i = dragSegments.length - 1; i >= 0; --i) {
        dragSegment = dragSegments[i];
        segmentData = dragSegment[0];
        uid = getUid(segmentData.feature);
        if (segmentData.depth) {
          // separate feature components
          uid += '-' + segmentData.depth.join('-');
        }
        if (!(uid in segmentsByFeature)) {
          segmentsByFeature[uid] = {};
        }
        if (dragSegment[1] === 0) {
          segmentsByFeature[uid].right = segmentData;
          segmentsByFeature[uid].index = segmentData.index;
        } else if (dragSegment[1] == 1) {
          segmentsByFeature[uid].left = segmentData;
          segmentsByFeature[uid].index = segmentData.index + 1;
        }

      }
      for (uid in segmentsByFeature) {
        right = segmentsByFeature[uid].right;
        left = segmentsByFeature[uid].left;
        index = segmentsByFeature[uid].index;
        newIndex = index - 1;
        if (left !== undefined) {
          segmentData = left;
        } else {
          segmentData = right;
        }
        if (newIndex < 0) {
          newIndex = 0;
        }
        geometry = segmentData.geometry;
        coordinates = geometry.getCoordinates();
        component = coordinates;
        deleted = false;
        switch (geometry.getType()) {
          case GeometryType.MULTI_LINE_STRING:
            if (coordinates[segmentData.depth[0]].length > 2) {
              coordinates[segmentData.depth[0]].splice(index, 1);
              deleted = true;
            }
            break;
          case GeometryType.LINE_STRING:
            if (coordinates.length > 2) {
              coordinates.splice(index, 1);
              deleted = true;
            }
            break;
          case GeometryType.MULTI_POLYGON:
            component = component[segmentData.depth[1]];
            /* falls through */
          case GeometryType.POLYGON:
            component = component[segmentData.depth[0]];
            if (component.length > 4) {
              if (index == component.length - 1) {
                index = 0;
              }
              component.splice(index, 1);
              deleted = true;
              if (index === 0) {
                // close the ring again
                component.pop();
                component.push(component[0]);
                newIndex = component.length - 1;
              }
            }
            break;
          default:
            // pass
        }

        if (deleted) {
          this.setGeometryCoordinates_(geometry, coordinates);
          var segments = [];
          if (left !== undefined) {
            this.rBush_.remove(left);
            segments.push(left.segment[0]);
          }
          if (right !== undefined) {
            this.rBush_.remove(right);
            segments.push(right.segment[1]);
          }
          if (left !== undefined && right !== undefined) {
            var newSegmentData = /** @type {SegmentData} */ ({
              depth: segmentData.depth,
              feature: segmentData.feature,
              geometry: segmentData.geometry,
              index: newIndex,
              segment: segments
            });
            this.rBush_.insert(boundingExtent(newSegmentData.segment),
              newSegmentData);
          }
          this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);
          if (this.vertexFeature_) {
            /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);
            this.vertexFeature_ = null;
          }
          dragSegments.length = 0;
        }

      }
      return deleted;
    };

    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {Array} coordinates Coordinates.
     * @private
     */
    Modify.prototype.setGeometryCoordinates_ = function setGeometryCoordinates_ (geometry, coordinates) {
      this.changingFeature_ = true;
      geometry.setCoordinates(coordinates);
      this.changingFeature_ = false;
    };

    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {number} index Index.
     * @param {Array<number>|undefined} depth Depth.
     * @param {number} delta Delta (1 or -1).
     * @private
     */
    Modify.prototype.updateSegmentIndices_ = function updateSegmentIndices_ (geometry, index, depth, delta) {
      this.rBush_.forEachInExtent(geometry.getExtent(), function(segmentDataMatch) {
        if (segmentDataMatch.geometry === geometry &&
            (depth === undefined || segmentDataMatch.depth === undefined ||
            equals(segmentDataMatch.depth, depth)) &&
            segmentDataMatch.index > index) {
          segmentDataMatch.index += delta;
        }
      });
    };

    return Modify;
  }(PointerInteraction));


  /**
   * @param {SegmentData} a The first segment data.
   * @param {SegmentData} b The second segment data.
   * @return {number} The difference in indexes.
   */
  function compareIndexes(a, b) {
    return a.index - b.index;
  }


  /**
   * Returns the distance from a point to a line segment.
   *
   * @param {import("../coordinate.js").Coordinate} pointCoordinates The coordinates of the point from
   *        which to calculate the distance.
   * @param {SegmentData} segmentData The object describing the line
   *        segment we are calculating the distance to.
   * @return {number} The square of the distance between a point and a line segment.
   */
  function pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {
    var geometry = segmentData.geometry;

    if (geometry.getType() === GeometryType.CIRCLE) {
      var circleGeometry = /** @type {import("../geom/Circle.js").default} */ (geometry);

      if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
        var distanceToCenterSquared =
              squaredDistance$1(circleGeometry.getCenter(), pointCoordinates);
        var distanceToCircumference =
              Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();
        return distanceToCircumference * distanceToCircumference;
      }
    }
    return squaredDistanceToSegment(pointCoordinates, segmentData.segment);
  }

  /**
   * Returns the point closest to a given line segment.
   *
   * @param {import("../coordinate.js").Coordinate} pointCoordinates The point to which a closest point
   *        should be found.
   * @param {SegmentData} segmentData The object describing the line
   *        segment which should contain the closest point.
   * @return {import("../coordinate.js").Coordinate} The point closest to the specified line segment.
   */
  function closestOnSegmentData(pointCoordinates, segmentData) {
    var geometry = segmentData.geometry;

    if (geometry.getType() === GeometryType.CIRCLE &&
    segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
      return geometry.getClosestPoint(pointCoordinates);
    }
    return closestOnSegment(pointCoordinates, segmentData.segment);
  }


  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction$1() {
    var style = createEditingStyle();
    return function(feature, resolution) {
      return style[GeometryType.POINT];
    };
  }

  /**
   * @module ol/interaction/Select
   */


  /**
   * @enum {string}
   */
  var SelectEventType = {
    /**
     * Triggered when feature(s) has been (de)selected.
     * @event SelectEvent#select
     * @api
     */
    SELECT: 'select'
  };


  /**
   * A function that takes an {@link module:ol/Feature} or
   * {@link module:ol/render/Feature} and an
   * {@link module:ol/layer/Layer} and returns `true` if the feature may be
   * selected or `false` otherwise.
   * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default):boolean} FilterFunction
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [addCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default, this is {@link module:ol/events/condition~never}. Use this if you
   * want to use different events for add and remove instead of `toggle`.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. This is the event
   * for the selected features as a whole. By default, this is
   * {@link module:ol/events/condition~singleClick}. Clicking on a feature selects that
   * feature and removes any that were in the selection. Clicking outside any
   * feature removes all from the selection.
   * See `toggle`, `add`, `remove` options for adding/removing extra features to/
   * from the selection.
   * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default): boolean} [layers]
   * A list of layers from which features should be selected. Alternatively, a
   * filter function can be provided. The function will be called for each layer
   * in the map and should return `true` for layers that you want to be
   * selectable. If the option is absent, all visible layers will be considered
   * selectable.
   * @property {import("../style/Style.js").StyleLike} [style]
   * Style for the selected features. By default the default edit style is used
   * (see {@link module:ol/style}).
   * @property {import("../events/condition.js").Condition} [removeCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default, this is {@link module:ol/events/condition~never}. Use this if you
   * want to use different events for add and remove instead of `toggle`.
   * @property {import("../events/condition.js").Condition} [toggleCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. This is in addition
   * to the `condition` event. By default,
   * {@link module:ol/events/condition~shiftKeyOnly}, i.e. pressing `shift` as
   * well as the `condition` event, adds that feature to the current selection if
   * it is not currently selected, and removes it if it is. See `add` and `remove`
   * if you want to use different events instead of a toggle.
   * @property {boolean} [multi=false] A boolean that determines if the default
   * behaviour should select only single features or all (overlapping) features at
   * the clicked map position. The default of `false` means single select.
   * @property {import("../Collection.js").default<import("../Feature.js").default>} [features]
   * Collection where the interaction will place selected features. Optional. If
   * not set the interaction will create a collection. In any case the collection
   * used by the interaction is returned by
   * {@link module:ol/interaction/Select~Select#getFeatures}.
   * @property {FilterFunction} [filter] A function
   * that takes an {@link module:ol/Feature} and an
   * {@link module:ol/layer/Layer} and returns `true` if the feature may be
   * selected or `false` otherwise.
   * @property {boolean} [wrapX=true] Wrap the world horizontally on the selection
   * overlay.
   * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside
   * the radius around the given position will be checked for features. This only
   * works for the canvas renderer and not for WebGL.
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of
   * this type.
   */
  var SelectEvent = /*@__PURE__*/(function (Event$$1) {
    function SelectEvent(type, selected, deselected, mapBrowserEvent) {
      Event$$1.call(this, type);

      /**
       * Selected features array.
       * @type {Array<import("../Feature.js").default>}
       * @api
       */
      this.selected = selected;

      /**
       * Deselected features array.
       * @type {Array<import("../Feature.js").default>}
       * @api
       */
      this.deselected = deselected;

      /**
       * Associated {@link module:ol/MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;

    }

    if ( Event$$1 ) SelectEvent.__proto__ = Event$$1;
    SelectEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    SelectEvent.prototype.constructor = SelectEvent;

    return SelectEvent;
  }(Event));


  /**
   * @classdesc
   * Interaction for selecting vector features. By default, selected features are
   * styled differently, so this interaction can be used for visual highlighting,
   * as well as selecting features for other actions, such as modification or
   * output. There are three ways of controlling which features are selected:
   * using the browser event as defined by the `condition` and optionally the
   * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a
   * further feature filter using the `filter` option.
   *
   * Selected features are added to an internal unmanaged layer.
   *
   * @fires SelectEvent
   * @api
   */
  var Select = /*@__PURE__*/(function (Interaction$$1) {
    function Select(opt_options) {

      Interaction$$1.call(this, {
        handleEvent: handleEvent$3
      });

      var options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : singleClick;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.addCondition_ = options.addCondition ? options.addCondition : never;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.removeCondition_ = options.removeCondition ? options.removeCondition : never;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.toggleCondition_ = options.toggleCondition ? options.toggleCondition : shiftKeyOnly;

      /**
       * @private
       * @type {boolean}
       */
      this.multi_ = options.multi ? options.multi : false;

      /**
       * @private
       * @type {FilterFunction}
       */
      this.filter_ = options.filter ? options.filter : TRUE;

      /**
       * @private
       * @type {number}
       */
      this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

      var featureOverlay = new VectorLayer$1({
        source: new VectorSource$1({
          useSpatialIndex: false,
          features: options.features,
          wrapX: options.wrapX
        }),
        style: options.style ? options.style :
          getDefaultStyleFunction$2(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      /**
       * @private
       * @type {VectorLayer}
       */
      this.featureOverlay_ = featureOverlay;

      /** @type {function(import("../layer/Layer.js").default): boolean} */
      var layerFilter;
      if (options.layers) {
        if (typeof options.layers === 'function') {
          layerFilter = options.layers;
        } else {
          var layers = options.layers;
          layerFilter = function(layer) {
            return includes$1(layers, layer);
          };
        }
      } else {
        layerFilter = TRUE;
      }

      /**
       * @private
       * @type {function(import("../layer/Layer.js").default): boolean}
       */
      this.layerFilter_ = layerFilter;

      /**
       * An association between selected feature (key)
       * and layer (value)
       * @private
       * @type {Object<string, import("../layer/Layer.js").default>}
       */
      this.featureLayerAssociation_ = {};

      var features = this.getFeatures();
      listen(features, CollectionEventType.ADD,
        this.addFeature_, this);
      listen(features, CollectionEventType.REMOVE,
        this.removeFeature_, this);
    }

    if ( Interaction$$1 ) Select.__proto__ = Interaction$$1;
    Select.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    Select.prototype.constructor = Select;

    /**
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../layer/Layer.js").default} layer Layer.
     * @private
     */
    Select.prototype.addFeatureLayerAssociation_ = function addFeatureLayerAssociation_ (feature, layer) {
      this.featureLayerAssociation_[getUid(feature)] = layer;
    };

    /**
     * Get the selected features.
     * @return {import("../Collection.js").default<import("../Feature.js").default>} Features collection.
     * @api
     */
    Select.prototype.getFeatures = function getFeatures () {
      return /** @type {VectorSource} */ (this.featureOverlay_.getSource()).getFeaturesCollection();
    };

    /**
     * Returns the Hit-detection tolerance.
     * @returns {number} Hit tolerance in pixels.
     * @api
     */
    Select.prototype.getHitTolerance = function getHitTolerance () {
      return this.hitTolerance_;
    };

    /**
     * Returns the associated {@link module:ol/layer/Vector~Vector vectorlayer} of
     * the (last) selected feature. Note that this will not work with any
     * programmatic method like pushing features to
     * {@link module:ol/interaction/Select~Select#getFeatures collection}.
     * @param {import("../Feature.js").FeatureLike} feature Feature
     * @return {VectorLayer} Layer.
     * @api
     */
    Select.prototype.getLayer = function getLayer (feature) {
      return (
        /** @type {VectorLayer} */ (this.featureLayerAssociation_[getUid(feature)])
      );
    };

    /**
     * Get the overlay layer that this interaction renders selected features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    Select.prototype.getOverlay = function getOverlay () {
      return this.featureOverlay_;
    };

    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features. This only works for the canvas renderer and
     * not for WebGL.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */
    Select.prototype.setHitTolerance = function setHitTolerance (hitTolerance) {
      this.hitTolerance_ = hitTolerance;
    };

    /**
     * Remove the interaction from its current map, if any,  and attach it to a new
     * map, if any. Pass `null` to just remove the interaction from the current map.
     * @param {import("../PluggableMap.js").default} map Map.
     * @override
     * @api
     */
    Select.prototype.setMap = function setMap (map) {
      var currentMap = this.getMap();
      var selectedFeatures = this.getFeatures();
      if (currentMap) {
        selectedFeatures.forEach(currentMap.unskipFeature.bind(currentMap));
      }
      Interaction$$1.prototype.setMap.call(this, map);
      this.featureOverlay_.setMap(map);
      if (map) {
        selectedFeatures.forEach(map.skipFeature.bind(map));
      }
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Select.prototype.addFeature_ = function addFeature_ (evt) {
      var map = this.getMap();
      if (map) {
        map.skipFeature(/** @type {import("../Feature.js").default} */ (evt.element));
      }
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Select.prototype.removeFeature_ = function removeFeature_ (evt) {
      var map = this.getMap();
      if (map) {
        map.unskipFeature(/** @type {import("../Feature.js").default} */ (evt.element));
      }
    };

    /**
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @private
     */
    Select.prototype.removeFeatureLayerAssociation_ = function removeFeatureLayerAssociation_ (feature) {
      delete this.featureLayerAssociation_[getUid(feature)];
    };

    return Select;
  }(Interaction$1));


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may change the
   * selected state of features.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {Select}
   */
  function handleEvent$3(mapBrowserEvent) {
    if (!this.condition_(mapBrowserEvent)) {
      return true;
    }
    var add = this.addCondition_(mapBrowserEvent);
    var remove$$1 = this.removeCondition_(mapBrowserEvent);
    var toggle = this.toggleCondition_(mapBrowserEvent);
    var set = !add && !remove$$1 && !toggle;
    var map = mapBrowserEvent.map;
    var features = this.getFeatures();
    var deselected = [];
    var selected = [];
    if (set) {
      // Replace the currently selected feature(s) with the feature(s) at the
      // pixel, or clear the selected feature(s) if there is no feature at
      // the pixel.
      clear(this.featureLayerAssociation_);
      map.forEachFeatureAtPixel(mapBrowserEvent.pixel,
        (
          /**
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {boolean|undefined} Continue to iterate over the features.
           */
          function(feature, layer) {
            if (this.filter_(feature, layer)) {
              selected.push(feature);
              this.addFeatureLayerAssociation_(feature, layer);
              return !this.multi_;
            }
          }).bind(this), {
          layerFilter: this.layerFilter_,
          hitTolerance: this.hitTolerance_
        });
      for (var i = features.getLength() - 1; i >= 0; --i) {
        var feature = features.item(i);
        var index = selected.indexOf(feature);
        if (index > -1) {
          // feature is already selected
          selected.splice(index, 1);
        } else {
          features.remove(feature);
          deselected.push(feature);
        }
      }
      if (selected.length !== 0) {
        features.extend(selected);
      }
    } else {
      // Modify the currently selected feature(s).
      map.forEachFeatureAtPixel(mapBrowserEvent.pixel,
        (
          /**
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {boolean|undefined} Continue to iterate over the features.
           */
          function(feature, layer) {
            if (this.filter_(feature, layer)) {
              if ((add || toggle) && !includes$1(features.getArray(), feature)) {
                selected.push(feature);
                this.addFeatureLayerAssociation_(feature, layer);
              } else if ((remove$$1 || toggle) && includes$1(features.getArray(), feature)) {
                deselected.push(feature);
                this.removeFeatureLayerAssociation_(feature);
              }
              return !this.multi_;
            }
          }).bind(this), {
          layerFilter: this.layerFilter_,
          hitTolerance: this.hitTolerance_
        });
      for (var j = deselected.length - 1; j >= 0; --j) {
        features.remove(deselected[j]);
      }
      features.extend(selected);
    }
    if (selected.length > 0 || deselected.length > 0) {
      this.dispatchEvent(
        new SelectEvent(SelectEventType.SELECT,
          selected, deselected, mapBrowserEvent));
    }
    return pointerMove$1(mapBrowserEvent);
  }


  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction$2() {
    var styles = createEditingStyle();
    extend(styles[GeometryType.POLYGON], styles[GeometryType.LINE_STRING]);
    extend(styles[GeometryType.GEOMETRY_COLLECTION], styles[GeometryType.LINE_STRING]);

    return function(feature, resolution) {
      if (!feature.getGeometry()) {
        return null;
      }
      return styles[feature.getGeometry().getType()];
    };
  }

  /**
   * @module ol/interaction/Snap
   */


  /**
   * @typedef {Object} Result
   * @property {boolean} snapped
   * @property {import("../coordinate.js").Coordinate|null} vertex
   * @property {import("../pixel.js").Pixel|null} vertexPixel
   */


  /**
   * @typedef {Object} SegmentData
   * @property {import("../Feature.js").default} feature
   * @property {Array<import("../coordinate.js").Coordinate>} segment
   */


  /**
   * @typedef {Object} Options
   * @property {import("../Collection.js").default<import("../Feature.js").default>} [features] Snap to these features. Either this option or source should be provided.
   * @property {boolean} [edge=true] Snap to edges.
   * @property {boolean} [vertex=true] Snap to vertices.
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the pointer close enough to a segment or
   * vertex for snapping.
   * @property {import("../source/Vector.js").default} [source] Snap to features from this source. Either this option or features should be provided
   */


  /**
   * @param  {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
   * @return {import("../Feature.js").default} Feature.
   */
  function getFeatureFromEvent(evt) {
    if (/** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt).feature) {
      return /** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt).feature;
    } else if (/** @type {import("../Collection.js").CollectionEvent} */ (evt).element) {
      return /** @type {import("../Feature.js").default} */ (/** @type {import("../Collection.js").CollectionEvent} */ (evt).element);
    }

  }

  /**
   * @classdesc
   * Handles snapping of vector features while modifying or drawing them.  The
   * features can come from a {@link module:ol/source/Vector} or {@link module:ol/Collection~Collection}
   * Any interaction object that allows the user to interact
   * with the features using the mouse can benefit from the snapping, as long
   * as it is added before.
   *
   * The snap interaction modifies map browser event `coordinate` and `pixel`
   * properties to force the snap to occur to any interaction that them.
   *
   * Example:
   *
   *     import Snap from 'ol/interaction/Snap';
   *
   *     var snap = new Snap({
   *       source: source
   *     });
   *
   * @api
   */
  var Snap = /*@__PURE__*/(function (PointerInteraction$$1) {
    function Snap(opt_options) {

      var options = opt_options ? opt_options : {};

      var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);

      if (!pointerOptions.handleDownEvent) {
        pointerOptions.handleDownEvent = TRUE;
      }

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      PointerInteraction$$1.call(this, pointerOptions);

      /**
       * @type {import("../source/Vector.js").default}
       * @private
       */
      this.source_ = options.source ? options.source : null;

      /**
       * @private
       * @type {boolean}
       */
      this.vertex_ = options.vertex !== undefined ? options.vertex : true;

      /**
       * @private
       * @type {boolean}
       */
      this.edge_ = options.edge !== undefined ? options.edge : true;

      /**
       * @type {import("../Collection.js").default<import("../Feature.js").default>}
       * @private
       */
      this.features_ = options.features ? options.features : null;

      /**
       * @type {Array<import("../events.js").EventsKey>}
       * @private
       */
      this.featuresListenerKeys_ = [];

      /**
       * @type {Object<string, import("../events.js").EventsKey>}
       * @private
       */
      this.featureChangeListenerKeys_ = {};

      /**
       * Extents are preserved so indexed segment can be quickly removed
       * when its feature geometry changes
       * @type {Object<string, import("../extent.js").Extent>}
       * @private
       */
      this.indexedFeaturesExtents_ = {};

      /**
       * If a feature geometry changes while a pointer drag|move event occurs, the
       * feature doesn't get updated right away.  It will be at the next 'pointerup'
       * event fired.
       * @type {!Object<string, import("../Feature.js").default>}
       * @private
       */
      this.pendingFeatures_ = {};

      /**
       * Used for distance sorting in sortByDistance_
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.pixelCoordinate_ = null;

      /**
       * @type {number}
       * @private
       */
      this.pixelTolerance_ = options.pixelTolerance !== undefined ?
        options.pixelTolerance : 10;

      /**
       * @type {function(SegmentData, SegmentData): number}
       * @private
       */
      this.sortByDistance_ = sortByDistance.bind(this);


      /**
      * Segment RTree for each layer
      * @type {import("../structs/RBush.js").default<SegmentData>}
      * @private
      */
      this.rBush_ = new RBush();


      /**
      * @const
      * @private
      * @type {Object<string, function(import("../Feature.js").default, import("../geom/Geometry.js").default)>}
      */
      this.SEGMENT_WRITERS_ = {
        'Point': this.writePointGeometry_,
        'LineString': this.writeLineStringGeometry_,
        'LinearRing': this.writeLineStringGeometry_,
        'Polygon': this.writePolygonGeometry_,
        'MultiPoint': this.writeMultiPointGeometry_,
        'MultiLineString': this.writeMultiLineStringGeometry_,
        'MultiPolygon': this.writeMultiPolygonGeometry_,
        'GeometryCollection': this.writeGeometryCollectionGeometry_,
        'Circle': this.writeCircleGeometry_
      };
    }

    if ( PointerInteraction$$1 ) Snap.__proto__ = PointerInteraction$$1;
    Snap.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    Snap.prototype.constructor = Snap;

    /**
     * Add a feature to the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {boolean=} opt_listen Whether to listen to the feature change or not
     *     Defaults to `true`.
     * @api
     */
    Snap.prototype.addFeature = function addFeature (feature, opt_listen) {
      var register = opt_listen !== undefined ? opt_listen : true;
      var feature_uid = getUid(feature);
      var geometry = feature.getGeometry();
      if (geometry) {
        var segmentWriter = this.SEGMENT_WRITERS_[geometry.getType()];
        if (segmentWriter) {
          this.indexedFeaturesExtents_[feature_uid] = geometry.getExtent(createEmpty());
          segmentWriter.call(this, feature, geometry);
        }
      }

      if (register) {
        this.featureChangeListenerKeys_[feature_uid] = listen(
          feature,
          EventType.CHANGE,
          this.handleFeatureChange_, this);
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @private
     */
    Snap.prototype.forEachFeatureAdd_ = function forEachFeatureAdd_ (feature) {
      this.addFeature(feature);
    };

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @private
     */
    Snap.prototype.forEachFeatureRemove_ = function forEachFeatureRemove_ (feature) {
      this.removeFeature(feature);
    };

    /**
     * @return {import("../Collection.js").default<import("../Feature.js").default>|Array<import("../Feature.js").default>} Features.
     * @private
     */
    Snap.prototype.getFeatures_ = function getFeatures_ () {
      var features;
      if (this.features_) {
        features = this.features_;
      } else if (this.source_) {
        features = this.source_.getFeatures();
      }
      return features;
    };

    /**
     * @inheritDoc
     */
    Snap.prototype.handleEvent = function handleEvent (evt) {
      var result = this.snapTo(evt.pixel, evt.coordinate, evt.map);
      if (result.snapped) {
        evt.coordinate = result.vertex.slice(0, 2);
        evt.pixel = result.vertexPixel;
      }
      return PointerInteraction$$1.prototype.handleEvent.call(this, evt);
    };

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Snap.prototype.handleFeatureAdd_ = function handleFeatureAdd_ (evt) {
      var feature = getFeatureFromEvent(evt);
      this.addFeature(feature);
    };

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Snap.prototype.handleFeatureRemove_ = function handleFeatureRemove_ (evt) {
      var feature = getFeatureFromEvent(evt);
      this.removeFeature(feature);
    };

    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */
    Snap.prototype.handleFeatureChange_ = function handleFeatureChange_ (evt) {
      var feature = /** @type {import("../Feature.js").default} */ (evt.target);
      if (this.handlingDownUpSequence) {
        var uid = getUid(feature);
        if (!(uid in this.pendingFeatures_)) {
          this.pendingFeatures_[uid] = feature;
        }
      } else {
        this.updateFeature_(feature);
      }
    };

    /**
     * @inheritDoc
     */
    Snap.prototype.handleUpEvent = function handleUpEvent (evt) {
      var featuresToUpdate = getValues(this.pendingFeatures_);
      if (featuresToUpdate.length) {
        featuresToUpdate.forEach(this.updateFeature_.bind(this));
        this.pendingFeatures_ = {};
      }
      return false;
    };

    /**
     * Remove a feature from the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature
     * @param {boolean=} opt_unlisten Whether to unlisten to the feature change
     *     or not. Defaults to `true`.
     * @api
     */
    Snap.prototype.removeFeature = function removeFeature (feature, opt_unlisten) {
      var unregister = opt_unlisten !== undefined ? opt_unlisten : true;
      var feature_uid = getUid(feature);
      var extent$$1 = this.indexedFeaturesExtents_[feature_uid];
      if (extent$$1) {
        var rBush = this.rBush_;
        var nodesToRemove = [];
        rBush.forEachInExtent(extent$$1, function(node) {
          if (feature === node.feature) {
            nodesToRemove.push(node);
          }
        });
        for (var i = nodesToRemove.length - 1; i >= 0; --i) {
          rBush.remove(nodesToRemove[i]);
        }
      }

      if (unregister) {
        unlistenByKey(this.featureChangeListenerKeys_[feature_uid]);
        delete this.featureChangeListenerKeys_[feature_uid];
      }
    };

    /**
     * @inheritDoc
     */
    Snap.prototype.setMap = function setMap (map) {
      var currentMap = this.getMap();
      var keys = this.featuresListenerKeys_;
      var features = /** @type {Array<import("../Feature.js").default>} */ (this.getFeatures_());

      if (currentMap) {
        keys.forEach(unlistenByKey);
        keys.length = 0;
        features.forEach(this.forEachFeatureRemove_.bind(this));
      }
      PointerInteraction$$1.prototype.setMap.call(this, map);

      if (map) {
        if (this.features_) {
          keys.push(
            listen(this.features_, CollectionEventType.ADD,
              this.handleFeatureAdd_, this),
            listen(this.features_, CollectionEventType.REMOVE,
              this.handleFeatureRemove_, this)
          );
        } else if (this.source_) {
          keys.push(
            listen(this.source_, VectorEventType.ADDFEATURE,
              this.handleFeatureAdd_, this),
            listen(this.source_, VectorEventType.REMOVEFEATURE,
              this.handleFeatureRemove_, this)
          );
        }
        features.forEach(this.forEachFeatureAdd_.bind(this));
      }
    };

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../coordinate.js").Coordinate} pixelCoordinate Coordinate
     * @param {import("../PluggableMap.js").default} map Map.
     * @return {Result} Snap result
     */
    Snap.prototype.snapTo = function snapTo (pixel, pixelCoordinate, map) {

      var lowerLeft = map.getCoordinateFromPixel(
        [pixel[0] - this.pixelTolerance_, pixel[1] + this.pixelTolerance_]);
      var upperRight = map.getCoordinateFromPixel(
        [pixel[0] + this.pixelTolerance_, pixel[1] - this.pixelTolerance_]);
      var box = boundingExtent([lowerLeft, upperRight]);

      var segments = this.rBush_.getInExtent(box);

      // If snapping on vertices only, don't consider circles
      if (this.vertex_ && !this.edge_) {
        segments = segments.filter(function(segment) {
          return segment.feature.getGeometry().getType() !==
              GeometryType.CIRCLE;
        });
      }

      var snappedToVertex = false;
      var snapped = false;
      var vertex = null;
      var vertexPixel = null;
      var dist, pixel1, pixel2, squaredDist1, squaredDist2;
      if (segments.length > 0) {
        this.pixelCoordinate_ = pixelCoordinate;
        segments.sort(this.sortByDistance_);
        var closestSegment = segments[0].segment;
        var isCircle = segments[0].feature.getGeometry().getType() ===
            GeometryType.CIRCLE;
        if (this.vertex_ && !this.edge_) {
          pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
          pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
          squaredDist1 = squaredDistance$1(pixel, pixel1);
          squaredDist2 = squaredDistance$1(pixel, pixel2);
          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
          snappedToVertex = dist <= this.pixelTolerance_;
          if (snappedToVertex) {
            snapped = true;
            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
            vertexPixel = map.getPixelFromCoordinate(vertex);
          }
        } else if (this.edge_) {
          if (isCircle) {
            vertex = closestOnCircle(pixelCoordinate,
              /** @type {import("../geom/Circle.js").default} */ (segments[0].feature.getGeometry()));
          } else {
            vertex = closestOnSegment(pixelCoordinate, closestSegment);
          }
          vertexPixel = map.getPixelFromCoordinate(vertex);
          if (distance$1(pixel, vertexPixel) <= this.pixelTolerance_) {
            snapped = true;
            if (this.vertex_ && !isCircle) {
              pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
              pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
              squaredDist1 = squaredDistance$1(vertexPixel, pixel1);
              squaredDist2 = squaredDistance$1(vertexPixel, pixel2);
              dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
              snappedToVertex = dist <= this.pixelTolerance_;
              if (snappedToVertex) {
                vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
                vertexPixel = map.getPixelFromCoordinate(vertex);
              }
            }
          }
        }
        if (snapped) {
          vertexPixel = [Math.round(vertexPixel[0]), Math.round(vertexPixel[1])];
        }
      }
      return (
        /** @type {Result} */ ({
          snapped: snapped,
          vertex: vertex,
          vertexPixel: vertexPixel
        })
      );
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @private
     */
    Snap.prototype.updateFeature_ = function updateFeature_ (feature) {
      this.removeFeature(feature, false);
      this.addFeature(feature, false);
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeCircleGeometry_ = function writeCircleGeometry_ (feature, geometry) {
      var polygon = fromCircle(geometry);
      var coordinates = polygon.getCoordinates()[0];
      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        var segment = coordinates.slice(i, i + 2);
        var segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          segment: segment
        });
        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeGeometryCollectionGeometry_ = function writeGeometryCollectionGeometry_ (feature, geometry) {
      var geometries = geometry.getGeometriesArray();
      for (var i = 0; i < geometries.length; ++i) {
        var segmentWriter = this.SEGMENT_WRITERS_[geometries[i].getType()];
        if (segmentWriter) {
          segmentWriter.call(this, feature, geometries[i]);
        }
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeLineStringGeometry_ = function writeLineStringGeometry_ (feature, geometry) {
      var coordinates = geometry.getCoordinates();
      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        var segment = coordinates.slice(i, i + 2);
        var segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          segment: segment
        });
        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeMultiLineStringGeometry_ = function writeMultiLineStringGeometry_ (feature, geometry) {
      var lines = geometry.getCoordinates();
      for (var j = 0, jj = lines.length; j < jj; ++j) {
        var coordinates = lines[j];
        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          var segment = coordinates.slice(i, i + 2);
          var segmentData = /** @type {SegmentData} */ ({
            feature: feature,
            segment: segment
          });
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeMultiPointGeometry_ = function writeMultiPointGeometry_ (feature, geometry) {
      var points = geometry.getCoordinates();
      for (var i = 0, ii = points.length; i < ii; ++i) {
        var coordinates = points[i];
        var segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          segment: [coordinates, coordinates]
        });
        this.rBush_.insert(geometry.getExtent(), segmentData);
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeMultiPolygonGeometry_ = function writeMultiPolygonGeometry_ (feature, geometry) {
      var polygons = geometry.getCoordinates();
      for (var k = 0, kk = polygons.length; k < kk; ++k) {
        var rings = polygons[k];
        for (var j = 0, jj = rings.length; j < jj; ++j) {
          var coordinates = rings[j];
          for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
            var segment = coordinates.slice(i, i + 2);
            var segmentData = /** @type {SegmentData} */ ({
              feature: feature,
              segment: segment
            });
            this.rBush_.insert(boundingExtent(segment), segmentData);
          }
        }
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/Point.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writePointGeometry_ = function writePointGeometry_ (feature, geometry) {
      var coordinates = geometry.getCoordinates();
      var segmentData = /** @type {SegmentData} */ ({
        feature: feature,
        segment: [coordinates, coordinates]
      });
      this.rBush_.insert(geometry.getExtent(), segmentData);
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writePolygonGeometry_ = function writePolygonGeometry_ (feature, geometry) {
      var rings = geometry.getCoordinates();
      for (var j = 0, jj = rings.length; j < jj; ++j) {
        var coordinates = rings[j];
        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          var segment = coordinates.slice(i, i + 2);
          var segmentData = /** @type {SegmentData} */ ({
            feature: feature,
            segment: segment
          });
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    };

    return Snap;
  }(PointerInteraction));


  /**
   * Sort segments by distance, helper function
   * @param {SegmentData} a The first segment data.
   * @param {SegmentData} b The second segment data.
   * @return {number} The difference in distance.
   * @this {Snap}
   */
  function sortByDistance(a, b) {
    var deltaA = squaredDistanceToSegment(this.pixelCoordinate_, a.segment);
    var deltaB = squaredDistanceToSegment(this.pixelCoordinate_, b.segment);
    return deltaA - deltaB;
  }

  /**
   * @module ol/interaction/Translate
   */


  /**
   * @enum {string}
   */
  var TranslateEventType = {
    /**
     * Triggered upon feature translation start.
     * @event TranslateEvent#translatestart
     * @api
     */
    TRANSLATESTART: 'translatestart',
    /**
     * Triggered upon feature translation.
     * @event TranslateEvent#translating
     * @api
     */
    TRANSLATING: 'translating',
    /**
     * Triggered upon feature translation end.
     * @event TranslateEvent#translateend
     * @api
     */
    TRANSLATEEND: 'translateend'
  };


  /**
   * @typedef {Object} Options
   * @property {Collection<import("../Feature.js").default>} [features] Only features contained in this collection will be able to be translated. If
   * not specified, all features on the map will be able to be translated.
   * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default): boolean} [layers] A list of layers from which features should be
   * translated. Alternatively, a filter function can be provided. The
   * function will be called for each layer in the map and should return
   * `true` for layers that you want to be translatable. If the option is
   * absent, all visible layers will be considered translatable.
   * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside the radius around the given position
   * will be checked for features. This only works for the canvas renderer and
   * not for WebGL.
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Translate~Translate} instances
   * are instances of this type.
   */
  var TranslateEvent = /*@__PURE__*/(function (Event$$1) {
    function TranslateEvent(type, features, coordinate) {

      Event$$1.call(this, type);

      /**
       * The features being translated.
       * @type {Collection<import("../Feature.js").default>}
       * @api
       */
      this.features = features;

      /**
       * The coordinate of the drag event.
       * @const
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = coordinate;

    }

    if ( Event$$1 ) TranslateEvent.__proto__ = Event$$1;
    TranslateEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    TranslateEvent.prototype.constructor = TranslateEvent;

    return TranslateEvent;
  }(Event));


  /**
   * @classdesc
   * Interaction for translating (moving) features.
   *
   * @fires TranslateEvent
   * @api
   */
  var Translate = /*@__PURE__*/(function (PointerInteraction$$1) {
    function Translate(opt_options) {
      var options = opt_options ? opt_options : {};

      PointerInteraction$$1.call(/** @type {import("./Pointer.js").Options} */ this, (options));

      /**
       * The last position we translated to.
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.lastCoordinate_ = null;


      /**
       * @type {Collection<import("../Feature.js").default>}
       * @private
       */
      this.features_ = options.features !== undefined ? options.features : null;

      /** @type {function(import("../layer/Layer.js").default): boolean} */
      var layerFilter;
      if (options.layers) {
        if (typeof options.layers === 'function') {
          layerFilter = options.layers;
        } else {
          var layers = options.layers;
          layerFilter = function(layer) {
            return includes$1(layers, layer);
          };
        }
      } else {
        layerFilter = TRUE;
      }

      /**
       * @private
       * @type {function(import("../layer/Layer.js").default): boolean}
       */
      this.layerFilter_ = layerFilter;

      /**
       * @private
       * @type {number}
       */
      this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

      /**
       * @type {import("../Feature.js").default}
       * @private
       */
      this.lastFeature_ = null;

      listen(this,
        getChangeEventType(InteractionProperty.ACTIVE),
        this.handleActiveChanged_, this);

    }

    if ( PointerInteraction$$1 ) Translate.__proto__ = PointerInteraction$$1;
    Translate.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    Translate.prototype.constructor = Translate;

    /**
     * @inheritDoc
     */
    Translate.prototype.handleDownEvent = function handleDownEvent (event) {
      this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
      if (!this.lastCoordinate_ && this.lastFeature_) {
        this.lastCoordinate_ = event.coordinate;
        this.handleMoveEvent(event);

        var features = this.features_ || new Collection$1([this.lastFeature_]);

        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATESTART, features,
            event.coordinate));
        return true;
      }
      return false;
    };

    /**
     * @inheritDoc
     */
    Translate.prototype.handleUpEvent = function handleUpEvent (event) {
      if (this.lastCoordinate_) {
        this.lastCoordinate_ = null;
        this.handleMoveEvent(event);

        var features = this.features_ || new Collection$1([this.lastFeature_]);

        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATEEND, features,
            event.coordinate));
        return true;
      }
      return false;
    };

    /**
     * @inheritDoc
     */
    Translate.prototype.handleDragEvent = function handleDragEvent (event) {
      if (this.lastCoordinate_) {
        var newCoordinate = event.coordinate;
        var deltaX = newCoordinate[0] - this.lastCoordinate_[0];
        var deltaY = newCoordinate[1] - this.lastCoordinate_[1];

        var features = this.features_ || new Collection$1([this.lastFeature_]);

        features.forEach(function(feature) {
          var geom = feature.getGeometry();
          geom.translate(deltaX, deltaY);
          feature.setGeometry(geom);
        });

        this.lastCoordinate_ = newCoordinate;
        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATING, features,
            newCoordinate));
      }
    };

    /**
     * @inheritDoc
     */
    Translate.prototype.handleMoveEvent = function handleMoveEvent (event) {
      var elem = event.map.getViewport();

      // Change the cursor to grab/grabbing if hovering any of the features managed
      // by the interaction
      if (this.featuresAtPixel_(event.pixel, event.map)) {
        elem.classList.remove(this.lastCoordinate_ ? 'ol-grab' : 'ol-grabbing');
        elem.classList.add(this.lastCoordinate_ ? 'ol-grabbing' : 'ol-grab');
      } else {
        elem.classList.remove('ol-grab', 'ol-grabbing');
      }
    };

    /**
     * Tests to see if the given coordinates intersects any of our selected
     * features.
     * @param {import("../pixel.js").Pixel} pixel Pixel coordinate to test for intersection.
     * @param {import("../PluggableMap.js").default} map Map to test the intersection on.
     * @return {import("../Feature.js").default} Returns the feature found at the specified pixel
     * coordinates.
     * @private
     */
    Translate.prototype.featuresAtPixel_ = function featuresAtPixel_ (pixel, map) {
      return map.forEachFeatureAtPixel(pixel,
        function(feature) {
          if (!this.features_ || includes$1(this.features_.getArray(), feature)) {
            return feature;
          }
        }.bind(this), {
          layerFilter: this.layerFilter_,
          hitTolerance: this.hitTolerance_
        });
    };

    /**
     * Returns the Hit-detection tolerance.
     * @returns {number} Hit tolerance in pixels.
     * @api
     */
    Translate.prototype.getHitTolerance = function getHitTolerance () {
      return this.hitTolerance_;
    };

    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features. This only works for the canvas renderer and
     * not for WebGL.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */
    Translate.prototype.setHitTolerance = function setHitTolerance (hitTolerance) {
      this.hitTolerance_ = hitTolerance;
    };

    /**
     * @inheritDoc
     */
    Translate.prototype.setMap = function setMap (map) {
      var oldMap = this.getMap();
      PointerInteraction$$1.prototype.setMap.call(this, map);
      this.updateState_(oldMap);
    };

    /**
     * @private
     */
    Translate.prototype.handleActiveChanged_ = function handleActiveChanged_ () {
      this.updateState_(null);
    };

    /**
     * @param {import("../PluggableMap.js").default} oldMap Old map.
     * @private
     */
    Translate.prototype.updateState_ = function updateState_ (oldMap) {
      var map = this.getMap();
      var active = this.getActive();
      if (!map || !active) {
        map = map || oldMap;
        if (map) {
          var elem = map.getViewport();
          elem.classList.remove('ol-grab', 'ol-grabbing');
        }
      }
    };

    return Translate;
  }(PointerInteraction));

  /**
   * @module ol/interaction
   */


  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
   * desired.
   * @property {boolean} [onFocusOnly=false] Interact only when the map has the
   * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
   * useful when page scroll is desired for maps that do not have the browser's
   * focus.
   * @property {boolean} [constrainResolution=false] Zoom to the closest integer
   * zoom level after the wheel/trackpad or pinch gesture ends.
   * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
   * desired.
   * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
   * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
   * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
   * @property {boolean} [dragPan=true] Whether drag pan is desired.
   * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
   * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
   * @property {number} [zoomDelta] Zoom level delta when using keyboard or
   * mousewheel zoom.
   * @property {number} [zoomDuration] Duration of the zoom animation in
   * milliseconds.
   */


  /**
   * Set of interactions included in maps by default. Specific interactions can be
   * excluded by setting the appropriate option to false in the constructor
   * options, but the order of the interactions is fixed.  If you want to specify
   * a different order for interactions, you will need to create your own
   * {@link module:ol/interaction/Interaction} instances and insert
   * them into a {@link module:ol/Collection} in the order you want
   * before creating your {@link module:ol/Map~Map} instance. The default set of
   * interactions, in sequence, is:
   * * {@link module:ol/interaction/DragRotate~DragRotate}
   * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
   * * {@link module:ol/interaction/DragPan~DragPan}
   * * {@link module:ol/interaction/PinchRotate~PinchRotate}
   * * {@link module:ol/interaction/PinchZoom~PinchZoom}
   * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
   * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
   * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
   * * {@link module:ol/interaction/DragZoom~DragZoom}
   *
   * @param {DefaultsOptions=} opt_options Defaults options.
   * @return {import("./Collection.js").default<import("./interaction/Interaction.js").default>}
   * A collection of interactions to be used with the {@link module:ol/Map~Map}
   * constructor's `interactions` option.
   * @api
   */
  function defaults$1(opt_options) {

    var options = opt_options ? opt_options : {};

    var interactions = new Collection$1();

    var kinetic = new Kinetic(-0.005, 0.05, 100);

    var altShiftDragRotate = options.altShiftDragRotate !== undefined ?
      options.altShiftDragRotate : true;
    if (altShiftDragRotate) {
      interactions.push(new DragRotate());
    }

    var doubleClickZoom = options.doubleClickZoom !== undefined ?
      options.doubleClickZoom : true;
    if (doubleClickZoom) {
      interactions.push(new DoubleClickZoom({
        delta: options.zoomDelta,
        duration: options.zoomDuration
      }));
    }

    var dragPan = options.dragPan !== undefined ? options.dragPan : true;
    if (dragPan) {
      interactions.push(new DragPan({
        condition: options.onFocusOnly ? focus : undefined,
        kinetic: kinetic
      }));
    }

    var pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate :
      true;
    if (pinchRotate) {
      interactions.push(new PinchRotate());
    }

    var pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
    if (pinchZoom) {
      interactions.push(new PinchZoom({
        constrainResolution: options.constrainResolution,
        duration: options.zoomDuration
      }));
    }

    var keyboard = options.keyboard !== undefined ? options.keyboard : true;
    if (keyboard) {
      interactions.push(new KeyboardPan());
      interactions.push(new KeyboardZoom({
        delta: options.zoomDelta,
        duration: options.zoomDuration
      }));
    }

    var mouseWheelZoom = options.mouseWheelZoom !== undefined ?
      options.mouseWheelZoom : true;
    if (mouseWheelZoom) {
      interactions.push(new MouseWheelZoom({
        condition: options.onFocusOnly ? focus : undefined,
        constrainResolution: options.constrainResolution,
        duration: options.zoomDuration
      }));
    }

    var shiftDragZoom = options.shiftDragZoom !== undefined ?
      options.shiftDragZoom : true;
    if (shiftDragZoom) {
      interactions.push(new DragZoom({
        duration: options.zoomDuration
      }));
    }

    return interactions;

  }

  /**
   * @module ol/reproj/common
   */

  /**
   * @module ol/render/Event
   */

  var RenderEvent = /*@__PURE__*/(function (Event$$1) {
    function RenderEvent(type, opt_vectorContext, opt_frameState, opt_context, opt_glContext) {

      Event$$1.call(this, type);

      /**
       * For canvas, this is an instance of {@link module:ol/render/canvas/Immediate}.
       * @type {import("./VectorContext.js").default|undefined}
       * @api
       */
      this.vectorContext = opt_vectorContext;

      /**
       * An object representing the current render frame state.
       * @type {import("../PluggableMap.js").FrameState|undefined}
       * @api
       */
      this.frameState = opt_frameState;

      /**
       * Canvas context. Only available when a Canvas renderer is used, null
       * otherwise.
       * @type {CanvasRenderingContext2D|null|undefined}
       * @api
       */
      this.context = opt_context;

      /**
       * WebGL context. Only available when a WebGL renderer is used, null
       * otherwise.
       * @type {import("../webgl/Context.js").default|null|undefined}
       * @api
       */
      this.glContext = opt_glContext;

    }

    if ( Event$$1 ) RenderEvent.__proto__ = Event$$1;
    RenderEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    RenderEvent.prototype.constructor = RenderEvent;

    return RenderEvent;
  }(Event));

  /**
   * @module ol/render/VectorContext
   */

  /**
   * @classdesc
   * Context for drawing geometries.  A vector context is available on render
   * events and does not need to be constructed directly.
   * @api
   */
  var VectorContext = function VectorContext () {};

  VectorContext.prototype.drawCustom = function drawCustom (geometry, feature, renderer) {};

  /**
   * Render a geometry.
   *
   * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
   */
  VectorContext.prototype.drawGeometry = function drawGeometry (geometry) {};

  /**
   * Set the rendering style.
   *
   * @param {import("../style/Style.js").default} style The rendering style.
   */
  VectorContext.prototype.setStyle = function setStyle (style) {};

  /**
   * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
   * @param {import("../Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawCircle = function drawCircle (circleGeometry, feature) {};

  /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   */
  VectorContext.prototype.drawFeature = function drawFeature (feature, style) {};

  /**
   * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
   * @param {import("../Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawGeometryCollection = function drawGeometryCollection (geometryCollectionGeometry, feature) {};

  /**
   * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawLineString = function drawLineString (lineStringGeometry, feature) {};

  /**
   * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawMultiLineString = function drawMultiLineString (multiLineStringGeometry, feature) {};

  /**
   * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawMultiPoint = function drawMultiPoint (multiPointGeometry, feature) {};

  /**
   * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawMultiPolygon = function drawMultiPolygon (multiPolygonGeometry, feature) {};

  /**
   * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawPoint = function drawPoint (pointGeometry, feature) {};

  /**
   * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawPolygon = function drawPolygon (polygonGeometry, feature) {};

  /**
   * @param {import("../geom/Geometry.js").default|import("./Feature.js").default} geometry Geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawText = function drawText (geometry, feature) {};

  /**
   * @param {import("../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
   */
  VectorContext.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {};

  /**
   * @param {import("../style/Image.js").default} imageStyle Image style.
   * @param {import("./canvas.js").DeclutterGroup=} opt_declutterGroup Declutter.
   */
  VectorContext.prototype.setImageStyle = function setImageStyle (imageStyle, opt_declutterGroup) {};

  /**
   * @param {import("../style/Text.js").default} textStyle Text style.
   * @param {import("./canvas.js").DeclutterGroup=} opt_declutterGroup Declutter.
   */
  VectorContext.prototype.setTextStyle = function setTextStyle (textStyle, opt_declutterGroup) {};

  /**
   * @module ol/render/canvas/Immediate
   */

  /**
   * @classdesc
   * A concrete subclass of {@link module:ol/render/VectorContext} that implements
   * direct rendering of features and geometries to an HTML5 Canvas context.
   * Instances of this class are created internally by the library and
   * provided to application code as vectorContext member of the
   * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
   * render events emitted by layers and maps.
   */
  var CanvasImmediateRenderer = /*@__PURE__*/(function (VectorContext$$1) {
    function CanvasImmediateRenderer(context, pixelRatio, extent$$1, transform, viewRotation) {
      VectorContext$$1.call(this);

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = context;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.extent_ = extent$$1;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.transform_ = transform;

      /**
       * @private
       * @type {number}
       */
      this.viewRotation_ = viewRotation;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.contextFillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.contextStrokeState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").TextState}
       */
      this.contextTextState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.fillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.strokeState_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number}
       */
      this.imageAnchorX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageAnchorY_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageHeight_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOpacity_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOriginX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOriginY_ = 0;

      /**
       * @private
       * @type {boolean}
       */
      this.imageRotateWithView_ = false;

      /**
       * @private
       * @type {number}
       */
      this.imageRotation_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageScale_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageWidth_ = 0;

      /**
       * @private
       * @type {string}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number}
       */
      this.textOffsetX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textOffsetY_ = 0;

      /**
       * @private
       * @type {boolean}
       */
      this.textRotateWithView_ = false;

      /**
       * @private
       * @type {number}
       */
      this.textRotation_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textScale_ = 0;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.textFillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.textStrokeState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").TextState}
       */
      this.textState_ = null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.pixelCoordinates_ = [];

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.tmpLocalTransform_ = create();

    }

    if ( VectorContext$$1 ) CanvasImmediateRenderer.__proto__ = VectorContext$$1;
    CanvasImmediateRenderer.prototype = Object.create( VectorContext$$1 && VectorContext$$1.prototype );
    CanvasImmediateRenderer.prototype.constructor = CanvasImmediateRenderer;

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */
    CanvasImmediateRenderer.prototype.drawImages_ = function drawImages_ (flatCoordinates, offset, end, stride) {
      if (!this.image_) {
        return;
      }
      var pixelCoordinates = transform2D(
        flatCoordinates, offset, end, 2, this.transform_,
        this.pixelCoordinates_);
      var context = this.context_;
      var localTransform = this.tmpLocalTransform_;
      var alpha = context.globalAlpha;
      if (this.imageOpacity_ != 1) {
        context.globalAlpha = alpha * this.imageOpacity_;
      }
      var rotation = this.imageRotation_;
      if (this.imageRotateWithView_) {
        rotation += this.viewRotation_;
      }
      for (var i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {
        var x = pixelCoordinates[i] - this.imageAnchorX_;
        var y = pixelCoordinates[i + 1] - this.imageAnchorY_;
        if (rotation !== 0 || this.imageScale_ != 1) {
          var centerX = x + this.imageAnchorX_;
          var centerY = y + this.imageAnchorY_;
          compose(localTransform,
            centerX, centerY,
            this.imageScale_, this.imageScale_,
            rotation,
            -centerX, -centerY);
          context.setTransform.apply(context, localTransform);
        }
        context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_,
          this.imageWidth_, this.imageHeight_, x, y,
          this.imageWidth_, this.imageHeight_);
      }
      if (rotation !== 0 || this.imageScale_ != 1) {
        context.setTransform(1, 0, 0, 1, 0, 0);
      }
      if (this.imageOpacity_ != 1) {
        context.globalAlpha = alpha;
      }
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */
    CanvasImmediateRenderer.prototype.drawText_ = function drawText_ (flatCoordinates, offset, end, stride) {
      if (!this.textState_ || this.text_ === '') {
        return;
      }
      if (this.textFillState_) {
        this.setContextFillState_(this.textFillState_);
      }
      if (this.textStrokeState_) {
        this.setContextStrokeState_(this.textStrokeState_);
      }
      this.setContextTextState_(this.textState_);
      var pixelCoordinates = transform2D(
        flatCoordinates, offset, end, stride, this.transform_,
        this.pixelCoordinates_);
      var context = this.context_;
      var rotation = this.textRotation_;
      if (this.textRotateWithView_) {
        rotation += this.viewRotation_;
      }
      for (; offset < end; offset += stride) {
        var x = pixelCoordinates[offset] + this.textOffsetX_;
        var y = pixelCoordinates[offset + 1] + this.textOffsetY_;
        if (rotation !== 0 || this.textScale_ != 1) {
          var localTransform = compose(this.tmpLocalTransform_,
            x, y,
            this.textScale_, this.textScale_,
            rotation,
            -x, -y);
          context.setTransform.apply(context, localTransform);
        }
        if (this.textStrokeState_) {
          context.strokeText(this.text_, x, y);
        }
        if (this.textFillState_) {
          context.fillText(this.text_, x, y);
        }
      }
      if (rotation !== 0 || this.textScale_ != 1) {
        context.setTransform(1, 0, 0, 1, 0, 0);
      }
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} close Close.
     * @private
     * @return {number} end End.
     */
    CanvasImmediateRenderer.prototype.moveToLineTo_ = function moveToLineTo_ (flatCoordinates, offset, end, stride, close) {
      var context = this.context_;
      var pixelCoordinates = transform2D(
        flatCoordinates, offset, end, stride, this.transform_,
        this.pixelCoordinates_);
      context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
      var length = pixelCoordinates.length;
      if (close) {
        length -= 2;
      }
      for (var i = 2; i < length; i += 2) {
        context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
      }
      if (close) {
        context.closePath();
      }
      return end;
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */
    CanvasImmediateRenderer.prototype.drawRings_ = function drawRings_ (flatCoordinates, offset, ends, stride) {
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
      }
      return offset;
    };

    /**
     * Render a circle geometry into the canvas.  Rendering is immediate and uses
     * the current fill and stroke styles.
     *
     * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
     * @override
     * @api
     */
    CanvasImmediateRenderer.prototype.drawCircle = function drawCircle (geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.fillState_ || this.strokeState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        var pixelCoordinates = transformGeom2D(
          geometry, this.transform_, this.pixelCoordinates_);
        var dx = pixelCoordinates[2] - pixelCoordinates[0];
        var dy = pixelCoordinates[3] - pixelCoordinates[1];
        var radius = Math.sqrt(dx * dx + dy * dy);
        var context = this.context_;
        context.beginPath();
        context.arc(
          pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        this.drawText_(geometry.getCenter(), 0, 2, 2);
      }
    };

    /**
     * Set the rendering style.  Note that since this is an immediate rendering API,
     * any `zIndex` on the provided style will be ignored.
     *
     * @param {import("../../style/Style.js").default} style The rendering style.
     * @override
     * @api
     */
    CanvasImmediateRenderer.prototype.setStyle = function setStyle (style) {
      this.setFillStrokeStyle(style.getFill(), style.getStroke());
      this.setImageStyle(style.getImage());
      this.setTextStyle(style.getText());
    };

    /**
     * Render a geometry into the canvas.  Call
     * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.
     *
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
     * @override
     * @api
     */
    CanvasImmediateRenderer.prototype.drawGeometry = function drawGeometry (geometry) {
      var type = geometry.getType();
      switch (type) {
        case GeometryType.POINT:
          this.drawPoint(/** @type {import("../../geom/Point.js").default} */ (geometry));
          break;
        case GeometryType.LINE_STRING:
          this.drawLineString(/** @type {import("../../geom/LineString.js").default} */ (geometry));
          break;
        case GeometryType.POLYGON:
          this.drawPolygon(/** @type {import("../../geom/Polygon.js").default} */ (geometry));
          break;
        case GeometryType.MULTI_POINT:
          this.drawMultiPoint(/** @type {import("../../geom/MultiPoint.js").default} */ (geometry));
          break;
        case GeometryType.MULTI_LINE_STRING:
          this.drawMultiLineString(/** @type {import("../../geom/MultiLineString.js").default} */ (geometry));
          break;
        case GeometryType.MULTI_POLYGON:
          this.drawMultiPolygon(/** @type {import("../../geom/MultiPolygon.js").default} */ (geometry));
          break;
        case GeometryType.GEOMETRY_COLLECTION:
          this.drawGeometryCollection(/** @type {import("../../geom/GeometryCollection.js").default} */ (geometry));
          break;
        case GeometryType.CIRCLE:
          this.drawCircle(/** @type {import("../../geom/Circle.js").default} */ (geometry));
          break;
        default:
      }
    };

    /**
     * Render a feature into the canvas.  Note that any `zIndex` on the provided
     * style will be ignored - features are rendered immediately in the order that
     * this method is called.  If you need `zIndex` support, you should be using an
     * {@link module:ol/layer/Vector~VectorLayer} instead.
     *
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {import("../../style/Style.js").default} style Style.
     * @override
     * @api
     */
    CanvasImmediateRenderer.prototype.drawFeature = function drawFeature (feature, style) {
      var geometry = style.getGeometryFunction()(feature);
      if (!geometry || !intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      this.setStyle(style);
      this.drawGeometry(geometry);
    };

    /**
     * Render a GeometryCollection to the canvas.  Rendering is immediate and
     * uses the current styles appropriate for each geometry in the collection.
     *
     * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawGeometryCollection = function drawGeometryCollection (geometry) {
      var geometries = geometry.getGeometriesArray();
      for (var i = 0, ii = geometries.length; i < ii; ++i) {
        this.drawGeometry(geometries[i]);
      }
    };

    /**
     * Render a Point geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawPoint = function drawPoint (geometry) {
      var flatCoordinates = geometry.getFlatCoordinates();
      var stride = geometry.getStride();
      if (this.image_) {
        this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
      if (this.text_ !== '') {
        this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
    };

    /**
     * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
     * uses the current style.
     *
     * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawMultiPoint = function drawMultiPoint (geometry) {
      var flatCoordinates = geometry.getFlatCoordinates();
      var stride = geometry.getStride();
      if (this.image_) {
        this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
      if (this.text_ !== '') {
        this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
    };

    /**
     * Render a LineString into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawLineString = function drawLineString (geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        var context = this.context_;
        var flatCoordinates = geometry.getFlatCoordinates();
        context.beginPath();
        this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length,
          geometry.getStride(), false);
        context.stroke();
      }
      if (this.text_ !== '') {
        var flatMidpoint = geometry.getFlatMidpoint();
        this.drawText_(flatMidpoint, 0, 2, 2);
      }
    };

    /**
     * Render a MultiLineString geometry into the canvas.  Rendering is immediate
     * and uses the current style.
     *
     * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawMultiLineString = function drawMultiLineString (geometry) {
      var geometryExtent = geometry.getExtent();
      if (!intersects(this.extent_, geometryExtent)) {
        return;
      }
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        var context = this.context_;
        var flatCoordinates = geometry.getFlatCoordinates();
        var offset = 0;
        var ends = /** @type {Array<number>} */ (geometry.getEnds());
        var stride = geometry.getStride();
        context.beginPath();
        for (var i = 0, ii = ends.length; i < ii; ++i) {
          offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
        }
        context.stroke();
      }
      if (this.text_ !== '') {
        var flatMidpoints = geometry.getFlatMidpoints();
        this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
      }
    };

    /**
     * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawPolygon = function drawPolygon (geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_ || this.fillState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        var context = this.context_;
        context.beginPath();
        this.drawRings_(geometry.getOrientedFlatCoordinates(),
          0, /** @type {Array<number>} */ (geometry.getEnds()), geometry.getStride());
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        var flatInteriorPoint = geometry.getFlatInteriorPoint();
        this.drawText_(flatInteriorPoint, 0, 2, 2);
      }
    };

    /**
     * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
     * uses the current style.
     * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawMultiPolygon = function drawMultiPolygon (geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_ || this.fillState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        var context = this.context_;
        var flatCoordinates = geometry.getOrientedFlatCoordinates();
        var offset = 0;
        var endss = geometry.getEndss();
        var stride = geometry.getStride();
        context.beginPath();
        for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          offset = this.drawRings_(flatCoordinates, offset, ends, stride);
        }
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        var flatInteriorPoints = geometry.getFlatInteriorPoints();
        this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
      }
    };

    /**
     * @param {import("../canvas.js").FillState} fillState Fill state.
     * @private
     */
    CanvasImmediateRenderer.prototype.setContextFillState_ = function setContextFillState_ (fillState) {
      var context = this.context_;
      var contextFillState = this.contextFillState_;
      if (!contextFillState) {
        context.fillStyle = fillState.fillStyle;
        this.contextFillState_ = {
          fillStyle: fillState.fillStyle
        };
      } else {
        if (contextFillState.fillStyle != fillState.fillStyle) {
          contextFillState.fillStyle = context.fillStyle = fillState.fillStyle;
        }
      }
    };

    /**
     * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
     * @private
     */
    CanvasImmediateRenderer.prototype.setContextStrokeState_ = function setContextStrokeState_ (strokeState) {
      var context = this.context_;
      var contextStrokeState = this.contextStrokeState_;
      if (!contextStrokeState) {
        context.lineCap = /** @type {CanvasLineCap} */ (strokeState.lineCap);
        if (CANVAS_LINE_DASH) {
          context.setLineDash(strokeState.lineDash);
          context.lineDashOffset = strokeState.lineDashOffset;
        }
        context.lineJoin = /** @type {CanvasLineJoin} */ (strokeState.lineJoin);
        context.lineWidth = strokeState.lineWidth;
        context.miterLimit = strokeState.miterLimit;
        context.strokeStyle = strokeState.strokeStyle;
        this.contextStrokeState_ = {
          lineCap: strokeState.lineCap,
          lineDash: strokeState.lineDash,
          lineDashOffset: strokeState.lineDashOffset,
          lineJoin: strokeState.lineJoin,
          lineWidth: strokeState.lineWidth,
          miterLimit: strokeState.miterLimit,
          strokeStyle: strokeState.strokeStyle
        };
      } else {
        if (contextStrokeState.lineCap != strokeState.lineCap) {
          contextStrokeState.lineCap = context.lineCap = /** @type {CanvasLineCap} */ (strokeState.lineCap);
        }
        if (CANVAS_LINE_DASH) {
          if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {
            context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);
          }
          if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
            contextStrokeState.lineDashOffset = context.lineDashOffset =
                strokeState.lineDashOffset;
          }
        }
        if (contextStrokeState.lineJoin != strokeState.lineJoin) {
          contextStrokeState.lineJoin = context.lineJoin = /** @type {CanvasLineJoin} */ (strokeState.lineJoin);
        }
        if (contextStrokeState.lineWidth != strokeState.lineWidth) {
          contextStrokeState.lineWidth = context.lineWidth = strokeState.lineWidth;
        }
        if (contextStrokeState.miterLimit != strokeState.miterLimit) {
          contextStrokeState.miterLimit = context.miterLimit =
              strokeState.miterLimit;
        }
        if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
          contextStrokeState.strokeStyle = context.strokeStyle =
              strokeState.strokeStyle;
        }
      }
    };

    /**
     * @param {import("../canvas.js").TextState} textState Text state.
     * @private
     */
    CanvasImmediateRenderer.prototype.setContextTextState_ = function setContextTextState_ (textState) {
      var context = this.context_;
      var contextTextState = this.contextTextState_;
      var textAlign = textState.textAlign ?
        textState.textAlign : defaultTextAlign;
      if (!contextTextState) {
        context.font = textState.font;
        context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
        context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
        this.contextTextState_ = {
          font: textState.font,
          textAlign: textAlign,
          textBaseline: textState.textBaseline
        };
      } else {
        if (contextTextState.font != textState.font) {
          contextTextState.font = context.font = textState.font;
        }
        if (contextTextState.textAlign != textAlign) {
          contextTextState.textAlign = context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
        }
        if (contextTextState.textBaseline != textState.textBaseline) {
          contextTextState.textBaseline = context.textBaseline =
            /** @type {CanvasTextBaseline} */ (textState.textBaseline);
        }
      }
    };

    /**
     * Set the fill and stroke style for subsequent draw operations.  To clear
     * either fill or stroke styles, pass null for the appropriate parameter.
     *
     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
     * @override
     */
    CanvasImmediateRenderer.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      if (!fillStyle) {
        this.fillState_ = null;
      } else {
        var fillStyleColor = fillStyle.getColor();
        this.fillState_ = {
          fillStyle: asColorLike(fillStyleColor ?
            fillStyleColor : defaultFillStyle)
        };
      }
      if (!strokeStyle) {
        this.strokeState_ = null;
      } else {
        var strokeStyleColor = strokeStyle.getColor();
        var strokeStyleLineCap = strokeStyle.getLineCap();
        var strokeStyleLineDash = strokeStyle.getLineDash();
        var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        var strokeStyleLineJoin = strokeStyle.getLineJoin();
        var strokeStyleWidth = strokeStyle.getWidth();
        var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
        this.strokeState_ = {
          lineCap: strokeStyleLineCap !== undefined ?
            strokeStyleLineCap : defaultLineCap,
          lineDash: strokeStyleLineDash ?
            strokeStyleLineDash : defaultLineDash,
          lineDashOffset: strokeStyleLineDashOffset ?
            strokeStyleLineDashOffset : defaultLineDashOffset,
          lineJoin: strokeStyleLineJoin !== undefined ?
            strokeStyleLineJoin : defaultLineJoin,
          lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ?
            strokeStyleWidth : defaultLineWidth),
          miterLimit: strokeStyleMiterLimit !== undefined ?
            strokeStyleMiterLimit : defaultMiterLimit,
          strokeStyle: asColorLike(strokeStyleColor ?
            strokeStyleColor : defaultStrokeStyle)
        };
      }
    };

    /**
     * Set the image style for subsequent draw operations.  Pass null to remove
     * the image style.
     *
     * @param {import("../../style/Image.js").default} imageStyle Image style.
     * @override
     */
    CanvasImmediateRenderer.prototype.setImageStyle = function setImageStyle (imageStyle) {
      if (!imageStyle) {
        this.image_ = null;
      } else {
        var imageAnchor = imageStyle.getAnchor();
        // FIXME pixel ratio
        var imageImage = imageStyle.getImage(1);
        var imageOrigin = imageStyle.getOrigin();
        var imageSize = imageStyle.getSize();
        this.imageAnchorX_ = imageAnchor[0];
        this.imageAnchorY_ = imageAnchor[1];
        this.imageHeight_ = imageSize[1];
        this.image_ = imageImage;
        this.imageOpacity_ = imageStyle.getOpacity();
        this.imageOriginX_ = imageOrigin[0];
        this.imageOriginY_ = imageOrigin[1];
        this.imageRotateWithView_ = imageStyle.getRotateWithView();
        this.imageRotation_ = imageStyle.getRotation();
        this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;
        this.imageWidth_ = imageSize[0];
      }
    };

    /**
     * Set the text style for subsequent draw operations.  Pass null to
     * remove the text style.
     *
     * @param {import("../../style/Text.js").default} textStyle Text style.
     * @override
     */
    CanvasImmediateRenderer.prototype.setTextStyle = function setTextStyle (textStyle) {
      if (!textStyle) {
        this.text_ = '';
      } else {
        var textFillStyle = textStyle.getFill();
        if (!textFillStyle) {
          this.textFillState_ = null;
        } else {
          var textFillStyleColor = textFillStyle.getColor();
          this.textFillState_ = {
            fillStyle: asColorLike(textFillStyleColor ?
              textFillStyleColor : defaultFillStyle)
          };
        }
        var textStrokeStyle = textStyle.getStroke();
        if (!textStrokeStyle) {
          this.textStrokeState_ = null;
        } else {
          var textStrokeStyleColor = textStrokeStyle.getColor();
          var textStrokeStyleLineCap = textStrokeStyle.getLineCap();
          var textStrokeStyleLineDash = textStrokeStyle.getLineDash();
          var textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
          var textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
          var textStrokeStyleWidth = textStrokeStyle.getWidth();
          var textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
          this.textStrokeState_ = {
            lineCap: textStrokeStyleLineCap !== undefined ?
              textStrokeStyleLineCap : defaultLineCap,
            lineDash: textStrokeStyleLineDash ?
              textStrokeStyleLineDash : defaultLineDash,
            lineDashOffset: textStrokeStyleLineDashOffset ?
              textStrokeStyleLineDashOffset : defaultLineDashOffset,
            lineJoin: textStrokeStyleLineJoin !== undefined ?
              textStrokeStyleLineJoin : defaultLineJoin,
            lineWidth: textStrokeStyleWidth !== undefined ?
              textStrokeStyleWidth : defaultLineWidth,
            miterLimit: textStrokeStyleMiterLimit !== undefined ?
              textStrokeStyleMiterLimit : defaultMiterLimit,
            strokeStyle: asColorLike(textStrokeStyleColor ?
              textStrokeStyleColor : defaultStrokeStyle)
          };
        }
        var textFont = textStyle.getFont();
        var textOffsetX = textStyle.getOffsetX();
        var textOffsetY = textStyle.getOffsetY();
        var textRotateWithView = textStyle.getRotateWithView();
        var textRotation = textStyle.getRotation();
        var textScale = textStyle.getScale();
        var textText = textStyle.getText();
        var textTextAlign = textStyle.getTextAlign();
        var textTextBaseline = textStyle.getTextBaseline();
        this.textState_ = {
          font: textFont !== undefined ?
            textFont : defaultFont,
          textAlign: textTextAlign !== undefined ?
            textTextAlign : defaultTextAlign,
          textBaseline: textTextBaseline !== undefined ?
            textTextBaseline : defaultTextBaseline
        };
        this.text_ = textText !== undefined ? textText : '';
        this.textOffsetX_ =
            textOffsetX !== undefined ? (this.pixelRatio_ * textOffsetX) : 0;
        this.textOffsetY_ =
            textOffsetY !== undefined ? (this.pixelRatio_ * textOffsetY) : 0;
        this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;
        this.textRotation_ = textRotation !== undefined ? textRotation : 0;
        this.textScale_ = this.pixelRatio_ * (textScale !== undefined ?
          textScale : 1);
      }
    };

    return CanvasImmediateRenderer;
  }(VectorContext));

  /**
   * @module ol/style/IconImageCache
   */

  /**
   * @classdesc
   * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.
   */
  var IconImageCache = function IconImageCache() {

    /**
    * @type {!Object<string, import("./IconImage.js").default>}
    * @private
    */
    this.cache_ = {};

    /**
    * @type {number}
    * @private
    */
    this.cacheSize_ = 0;

    /**
    * @type {number}
    * @private
    */
    this.maxCacheSize_ = 32;
  };

  /**
  * FIXME empty description for jsdoc
  */
  IconImageCache.prototype.clear = function clear () {
    this.cache_ = {};
    this.cacheSize_ = 0;
  };

  /**
  * FIXME empty description for jsdoc
  */
  IconImageCache.prototype.expire = function expire () {
    if (this.cacheSize_ > this.maxCacheSize_) {
      var i = 0;
      for (var key in this.cache_) {
        var iconImage = this.cache_[key];
        if ((i++ & 3) === 0 && !iconImage.hasListener()) {
          delete this.cache_[key];
          --this.cacheSize_;
        }
      }
    }
  };

  /**
  * @param {string} src Src.
  * @param {?string} crossOrigin Cross origin.
  * @param {import("../color.js").Color} color Color.
  * @return {import("./IconImage.js").default} Icon image.
  */
  IconImageCache.prototype.get = function get (src, crossOrigin, color) {
    var key = getKey(src, crossOrigin, color);
    return key in this.cache_ ? this.cache_[key] : null;
  };

  /**
  * @param {string} src Src.
  * @param {?string} crossOrigin Cross origin.
  * @param {import("../color.js").Color} color Color.
  * @param {import("./IconImage.js").default} iconImage Icon image.
  */
  IconImageCache.prototype.set = function set (src, crossOrigin, color, iconImage) {
    var key = getKey(src, crossOrigin, color);
    this.cache_[key] = iconImage;
    ++this.cacheSize_;
  };

  /**
  * Set the cache size of the icon cache. Default is `32`. Change this value when
  * your map uses more than 32 different icon images and you are not caching icon
  * styles on the application level.
  * @param {number} maxCacheSize Cache max size.
  * @api
  */
  IconImageCache.prototype.setSize = function setSize (maxCacheSize) {
    this.maxCacheSize_ = maxCacheSize;
    this.expire();
  };


  /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color} color Color.
   * @return {string} Cache key.
   */
  function getKey(src, crossOrigin, color) {
    var colorString = color ? asString(color) : 'null';
    return crossOrigin + ':' + src + ':' + colorString;
  }


  /**
   * The {@link module:ol/style/IconImageCache~IconImageCache} for
   * {@link module:ol/style/Icon~Icon} images.
   * @api
   */
  var shared = new IconImageCache();

  /**
   * @module ol/renderer/Map
   */

  /**
   * @abstract
   */
  var MapRenderer = /*@__PURE__*/(function (Disposable$$1) {
    function MapRenderer(map) {
      Disposable$$1.call(this);

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = map;

      /**
       * @private
       * @type {!Object<string, import("./Layer.js").default>}
       */
      this.layerRenderers_ = {};

      /**
       * @private
       * @type {Object<string, import("../events.js").EventsKey>}
       */
      this.layerRendererListeners_ = {};

      /**
       * @private
       * @type {Array<typeof import("./Layer.js").default>}
       */
      this.layerRendererConstructors_ = [];

    }

    if ( Disposable$$1 ) MapRenderer.__proto__ = Disposable$$1;
    MapRenderer.prototype = Object.create( Disposable$$1 && Disposable$$1.prototype );
    MapRenderer.prototype.constructor = MapRenderer;

    /**
     * @abstract
     * @param {import("../render/EventType.js").default} type Event type.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    MapRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent (type, frameState) {
      abstract();
    };

    /**
     * Register layer renderer constructors.
     * @param {Array<typeof import("./Layer.js").default>} constructors Layer renderers.
     */
    MapRenderer.prototype.registerLayerRenderers = function registerLayerRenderers (constructors) {
      this.layerRendererConstructors_.push.apply(this.layerRendererConstructors_, constructors);
    };

    /**
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @protected
     */
    MapRenderer.prototype.calculateMatrices2D = function calculateMatrices2D (frameState) {
      var viewState = frameState.viewState;
      var coordinateToPixelTransform = frameState.coordinateToPixelTransform;
      var pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;

      compose(coordinateToPixelTransform,
        frameState.size[0] / 2, frameState.size[1] / 2,
        1 / viewState.resolution, -1 / viewState.resolution,
        -viewState.rotation,
        -viewState.center[0], -viewState.center[1]);

      invert(
        setFromArray(pixelToCoordinateTransform, coordinateToPixelTransform));
    };

    /**
     * Removes all layer renderers.
     */
    MapRenderer.prototype.removeLayerRenderers = function removeLayerRenderers () {
      for (var key in this.layerRenderers_) {
        this.removeLayerRendererByKey_(key).dispose();
      }
    };

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: S, import("../Feature.js").FeatureLike,
     *     import("../layer/Layer.js").default): T} callback Feature callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    MapRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (
      coordinate,
      frameState,
      hitTolerance,
      callback,
      thisArg,
      layerFilter,
      thisArg2
    ) {
      var result;
      var viewState = frameState.viewState;
      var viewResolution = viewState.resolution;

      /**
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       * @param {import("../layer/Layer.js").default} layer Layer.
       * @return {?} Callback result.
       */
      function forEachFeatureAtCoordinate(feature, layer) {
        var managed = frameState.layerStates[getUid(layer)].managed;
        if (!(getUid(feature) in frameState.skippedFeatureUids && !managed)) {
          return callback.call(thisArg, feature, managed ? layer : null);
        }
      }

      var projection = viewState.projection;

      var translatedCoordinate = coordinate;
      if (projection.canWrapX()) {
        var projectionExtent = projection.getExtent();
        var worldWidth = getWidth(projectionExtent);
        var x = coordinate[0];
        if (x < projectionExtent[0] || x > projectionExtent[2]) {
          var worldsAway = Math.ceil((projectionExtent[0] - x) / worldWidth);
          translatedCoordinate = [x + worldWidth * worldsAway, coordinate[1]];
        }
      }

      var layerStates = frameState.layerStatesArray;
      var numLayers = layerStates.length;
      var i;
      for (i = numLayers - 1; i >= 0; --i) {
        var layerState = layerStates[i];
        var layer = layerState.layer;
        if (visibleAtResolution(layerState, viewResolution) && layerFilter.call(thisArg2, layer)) {
          var layerRenderer = this.getLayerRenderer(layer);
          var source = /** @type {import("../layer/Layer.js").default} */ (layer).getSource();
          if (source) {
            result = layerRenderer.forEachFeatureAtCoordinate(
              source.getWrapX() ? translatedCoordinate : coordinate,
              frameState, hitTolerance, forEachFeatureAtCoordinate);
          }
          if (result) {
            return result;
          }
        }
      }
      return undefined;
    };

    /**
     * @abstract
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: S, import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
     *     callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    MapRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, hitTolerance, callback, thisArg, layerFilter, thisArg2) {
      return abstract();
    };

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
     * @return {boolean} Is there a feature at the given coordinate?
     * @template U
     */
    MapRenderer.prototype.hasFeatureAtCoordinate = function hasFeatureAtCoordinate (coordinate, frameState, hitTolerance, layerFilter, thisArg) {
      var hasFeature = this.forEachFeatureAtCoordinate(
        coordinate, frameState, hitTolerance, TRUE, this, layerFilter, thisArg);

      return hasFeature !== undefined;
    };

    /**
     * @param {import("../layer/Base.js").default} layer Layer.
     * @protected
     * @return {import("./Layer.js").default} Layer renderer.
     */
    MapRenderer.prototype.getLayerRenderer = function getLayerRenderer (layer) {
      var layerKey = getUid(layer);
      if (layerKey in this.layerRenderers_) {
        return this.layerRenderers_[layerKey];
      } else {
        var renderer;
        for (var i = 0, ii = this.layerRendererConstructors_.length; i < ii; ++i) {
          var candidate = this.layerRendererConstructors_[i];
          if (candidate['handles'](layer)) {
            renderer = candidate['create'](this, layer);
            break;
          }
        }
        if (renderer) {
          this.layerRenderers_[layerKey] = renderer;
          this.layerRendererListeners_[layerKey] = listen(renderer,
            EventType.CHANGE, this.handleLayerRendererChange_, this);
        } else {
          throw new Error('Unable to create renderer for layer: ' + layer.getType());
        }
        return renderer;
      }
    };

    /**
     * @param {string} layerKey Layer key.
     * @protected
     * @return {import("./Layer.js").default} Layer renderer.
     */
    MapRenderer.prototype.getLayerRendererByKey = function getLayerRendererByKey (layerKey) {
      return this.layerRenderers_[layerKey];
    };

    /**
     * @protected
     * @return {Object<string, import("./Layer.js").default>} Layer renderers.
     */
    MapRenderer.prototype.getLayerRenderers = function getLayerRenderers () {
      return this.layerRenderers_;
    };

    /**
     * @return {import("../PluggableMap.js").default} Map.
     */
    MapRenderer.prototype.getMap = function getMap () {
      return this.map_;
    };

    /**
     * Handle changes in a layer renderer.
     * @private
     */
    MapRenderer.prototype.handleLayerRendererChange_ = function handleLayerRendererChange_ () {
      this.map_.render();
    };

    /**
     * @param {string} layerKey Layer key.
     * @return {import("./Layer.js").default} Layer renderer.
     * @private
     */
    MapRenderer.prototype.removeLayerRendererByKey_ = function removeLayerRendererByKey_ (layerKey) {
      var layerRenderer = this.layerRenderers_[layerKey];
      delete this.layerRenderers_[layerKey];

      unlistenByKey(this.layerRendererListeners_[layerKey]);
      delete this.layerRendererListeners_[layerKey];

      return layerRenderer;
    };

    /**
     * @param {import("../PluggableMap.js").default} map Map.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */
    MapRenderer.prototype.removeUnusedLayerRenderers_ = function removeUnusedLayerRenderers_ (map, frameState) {
      for (var layerKey in this.layerRenderers_) {
        if (!frameState || !(layerKey in frameState.layerStates)) {
          this.removeLayerRendererByKey_(layerKey).dispose();
        }
      }
    };

    /**
     * Render.
     * @abstract
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    MapRenderer.prototype.renderFrame = function renderFrame (frameState) {
      abstract();
    };

    /**
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */
    MapRenderer.prototype.scheduleExpireIconCache = function scheduleExpireIconCache (frameState) {
      frameState.postRenderFunctions.push(/** @type {import("../PluggableMap.js").PostRenderFunction} */ (expireIconCache));
    };

    /**
     * @param {!import("../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */
    MapRenderer.prototype.scheduleRemoveUnusedLayerRenderers = function scheduleRemoveUnusedLayerRenderers (frameState) {
      for (var layerKey in this.layerRenderers_) {
        if (!(layerKey in frameState.layerStates)) {
          frameState.postRenderFunctions.push(
            /** @type {import("../PluggableMap.js").PostRenderFunction} */ (this.removeUnusedLayerRenderers_.bind(this))
          );
          return;
        }
      }
    };

    return MapRenderer;
  }(Disposable));


  /**
   * @param {import("../PluggableMap.js").default} map Map.
   * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
   */
  function expireIconCache(map, frameState) {
    shared.expire();
  }


  /**
   * @param {import("../layer/Layer.js").State} state1 First layer state.
   * @param {import("../layer/Layer.js").State} state2 Second layer state.
   * @return {number} The zIndex difference.
   */
  function sortByZIndex(state1, state2) {
    return state1.zIndex - state2.zIndex;
  }

  /**
   * @module ol/renderer/canvas/Map
   */


  /**
   * @type {Array<typeof import("../Layer.js").default>}
   */
  var layerRendererConstructors = [];

  /**
   * @classdesc
   * Canvas map renderer.
   * @api
   */
  var CanvasMapRenderer = /*@__PURE__*/(function (MapRenderer$$1) {
    function CanvasMapRenderer(map) {
      MapRenderer$$1.call(this, map);

      var container = map.getViewport();

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = createCanvasContext2D();

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = this.context_.canvas;

      this.canvas_.style.width = '100%';
      this.canvas_.style.height = '100%';
      this.canvas_.style.display = 'block';
      this.canvas_.className = CLASS_UNSELECTABLE;
      container.insertBefore(this.canvas_, container.childNodes[0] || null);

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.transform_ = create();

    }

    if ( MapRenderer$$1 ) CanvasMapRenderer.__proto__ = MapRenderer$$1;
    CanvasMapRenderer.prototype = Object.create( MapRenderer$$1 && MapRenderer$$1.prototype );
    CanvasMapRenderer.prototype.constructor = CanvasMapRenderer;

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     */
    CanvasMapRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent (type, frameState) {
      var map = this.getMap();
      var context = this.context_;
      if (map.hasListener(type)) {
        var extent$$1 = frameState.extent;
        var pixelRatio = frameState.pixelRatio;
        var viewState = frameState.viewState;
        var rotation = viewState.rotation;

        var transform = this.getTransform(frameState);

        var vectorContext = new CanvasImmediateRenderer(context, pixelRatio,
          extent$$1, transform, rotation);
        var composeEvent = new RenderEvent(type, vectorContext,
          frameState, context, null);
        map.dispatchEvent(composeEvent);
      }
    };

    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     * @return {!import("../../transform.js").Transform} Transform.
     */
    CanvasMapRenderer.prototype.getTransform = function getTransform (frameState) {
      var viewState = frameState.viewState;
      var dx1 = this.canvas_.width / 2;
      var dy1 = this.canvas_.height / 2;
      var sx = frameState.pixelRatio / viewState.resolution;
      var sy = -sx;
      var angle = -viewState.rotation;
      var dx2 = -viewState.center[0];
      var dy2 = -viewState.center[1];
      return compose(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);
    };

    /**
     * @inheritDoc
     */
    CanvasMapRenderer.prototype.renderFrame = function renderFrame (frameState) {

      if (!frameState) {
        if (this.renderedVisible_) {
          this.canvas_.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      var context = this.context_;
      var pixelRatio = frameState.pixelRatio;
      var width = Math.round(frameState.size[0] * pixelRatio);
      var height = Math.round(frameState.size[1] * pixelRatio);
      if (this.canvas_.width != width || this.canvas_.height != height) {
        this.canvas_.width = width;
        this.canvas_.height = height;
      } else {
        context.clearRect(0, 0, width, height);
      }

      var rotation = frameState.viewState.rotation;

      this.calculateMatrices2D(frameState);

      this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);

      var layerStatesArray = frameState.layerStatesArray;
      stableSort(layerStatesArray, sortByZIndex);

      if (rotation) {
        context.save();
        rotateAtOffset(context, rotation, width / 2, height / 2);
      }

      var viewResolution = frameState.viewState.resolution;
      var i, ii;
      for (i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        var layerState = layerStatesArray[i];
        var layer = layerState.layer;
        var layerRenderer = /** @type {import("./Layer.js").default} */ (this.getLayerRenderer(layer));
        if (!visibleAtResolution(layerState, viewResolution) ||
            layerState.sourceState != SourceState.READY) {
          continue;
        }
        if (layerRenderer.prepareFrame(frameState, layerState)) {
          layerRenderer.composeFrame(frameState, layerState, context);
        }
      }

      if (rotation) {
        context.restore();
      }

      this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);

      if (!this.renderedVisible_) {
        this.canvas_.style.display = '';
        this.renderedVisible_ = true;
      }

      this.scheduleRemoveUnusedLayerRenderers(frameState);
      this.scheduleExpireIconCache(frameState);
    };

    /**
     * @inheritDoc
     */
    CanvasMapRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, hitTolerance, callback, thisArg, layerFilter, thisArg2) {
      var result;
      var viewState = frameState.viewState;
      var viewResolution = viewState.resolution;

      var layerStates = frameState.layerStatesArray;
      var numLayers = layerStates.length;

      var coordinate = apply(
        frameState.pixelToCoordinateTransform, pixel.slice());

      var i;
      for (i = numLayers - 1; i >= 0; --i) {
        var layerState = layerStates[i];
        var layer = layerState.layer;
        if (visibleAtResolution(layerState, viewResolution) && layerFilter.call(thisArg2, layer)) {
          var layerRenderer = /** @type {import("./Layer.js").default} */ (this.getLayerRenderer(layer));
          result = layerRenderer.forEachLayerAtCoordinate(
            coordinate, frameState, hitTolerance, callback, thisArg);
          if (result) {
            return result;
          }
        }
      }
      return undefined;
    };

    /**
     * @inheritDoc
     */
    CanvasMapRenderer.prototype.registerLayerRenderers = function registerLayerRenderers (constructors) {
      MapRenderer$$1.prototype.registerLayerRenderers.call(this, constructors);
      for (var i = 0, ii = constructors.length; i < ii; ++i) {
        var ctor = constructors[i];
        if (!includes$1(layerRendererConstructors, ctor)) {
          layerRendererConstructors.push(ctor);
        }
      }
    };

    return CanvasMapRenderer;
  }(MapRenderer));

  /**
   * @module ol/renderer/Layer
   */

  var LayerRenderer = /*@__PURE__*/(function (Observable$$1) {
    function LayerRenderer(layer) {

      Observable$$1.call(this);

      /**
       * @private
       * @type {import("../layer/Layer.js").default}
       */
      this.layer_ = layer;

    }

    if ( Observable$$1 ) LayerRenderer.__proto__ = Observable$$1;
    LayerRenderer.prototype = Object.create( Observable$$1 && Observable$$1.prototype );
    LayerRenderer.prototype.constructor = LayerRenderer;

    /**
     * Create a function that adds loaded tiles to the tile lookup.
     * @param {import("../source/Tile.js").default} source Tile source.
     * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
     * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
     * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
     *     called with a zoom level and a tile range to add loaded tiles to the lookup.
     * @protected
     */
    LayerRenderer.prototype.createLoadedTileFinder = function createLoadedTileFinder (source, projection, tiles) {
      return (
        /**
         * @param {number} zoom Zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @return {boolean} The tile range is fully loaded.
         */
        function(zoom, tileRange) {
          /**
           * @param {import("../Tile.js").default} tile Tile.
           */
          function callback(tile) {
            if (!tiles[zoom]) {
              tiles[zoom] = {};
            }
            tiles[zoom][tile.tileCoord.toString()] = tile;
          }
          return source.forEachLoadedTile(projection, zoom, tileRange, callback);
        }
      );
    };

    /**
     * @abstract
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default): T} callback Feature callback.
     * @return {T|void} Callback result.
     * @template T
     */
    LayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback) {};

    /**
     * @return {import("../layer/Layer.js").default} Layer.
     */
    LayerRenderer.prototype.getLayer = function getLayer () {
      return this.layer_;
    };

    /**
     * Handle changes in image state.
     * @param {import("../events/Event.js").default} event Image change event.
     * @private
     */
    LayerRenderer.prototype.handleImageChange_ = function handleImageChange_ (event) {
      var image = /** @type {import("../Image.js").default} */ (event.target);
      if (image.getState() === ImageState.LOADED) {
        this.renderIfReadyAndVisible();
      }
    };

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @return {boolean} Is there a feature at the given coordinate?
     */
    LayerRenderer.prototype.hasFeatureAtCoordinate = function hasFeatureAtCoordinate (coordinate, frameState) {
      return false;
    };

    /**
     * Load the image if not already loaded, and register the image change
     * listener if needed.
     * @param {import("../ImageBase.js").default} image Image.
     * @return {boolean} `true` if the image is already loaded, `false` otherwise.
     * @protected
     */
    LayerRenderer.prototype.loadImage = function loadImage (image) {
      var imageState = image.getState();
      if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {
        listen(image, EventType.CHANGE, this.handleImageChange_, this);
      }
      if (imageState == ImageState.IDLE) {
        image.load();
        imageState = image.getState();
      }
      return imageState == ImageState.LOADED;
    };

    /**
     * @protected
     */
    LayerRenderer.prototype.renderIfReadyAndVisible = function renderIfReadyAndVisible () {
      var layer = this.getLayer();
      if (layer.getVisible() && layer.getSourceState() == SourceState.READY) {
        this.changed();
      }
    };

    /**
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../source/Tile.js").default} tileSource Tile source.
     * @protected
     */
    LayerRenderer.prototype.scheduleExpireCache = function scheduleExpireCache (frameState, tileSource) {
      if (tileSource.canExpireCache()) {
        /**
         * @param {import("../source/Tile.js").default} tileSource Tile source.
         * @param {import("../PluggableMap.js").default} map Map.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        var postRenderFunction = function(tileSource, map, frameState) {
          var tileSourceKey = getUid(tileSource);
          if (tileSourceKey in frameState.usedTiles) {
            tileSource.expireCache(frameState.viewState.projection,
              frameState.usedTiles[tileSourceKey]);
          }
        }.bind(null, tileSource);

        frameState.postRenderFunctions.push(
          /** @type {import("../PluggableMap.js").PostRenderFunction} */ (postRenderFunction)
        );
      }
    };

    /**
     * @param {!Object<string, !Object<string, import("../TileRange.js").default>>} usedTiles Used tiles.
     * @param {import("../source/Tile.js").default} tileSource Tile source.
     * @param {number} z Z.
     * @param {import("../TileRange.js").default} tileRange Tile range.
     * @protected
     */
    LayerRenderer.prototype.updateUsedTiles = function updateUsedTiles (usedTiles, tileSource, z, tileRange) {
      // FIXME should we use tilesToDrawByZ instead?
      var tileSourceKey = getUid(tileSource);
      var zKey = z.toString();
      if (tileSourceKey in usedTiles) {
        if (zKey in usedTiles[tileSourceKey]) {
          usedTiles[tileSourceKey][zKey].extend(tileRange);
        } else {
          usedTiles[tileSourceKey][zKey] = tileRange;
        }
      } else {
        usedTiles[tileSourceKey] = {};
        usedTiles[tileSourceKey][zKey] = tileRange;
      }
    };

    /**
     * Manage tile pyramid.
     * This function performs a number of functions related to the tiles at the
     * current zoom and lower zoom levels:
     * - registers idle tiles in frameState.wantedTiles so that they are not
     *   discarded by the tile queue
     * - enqueues missing tiles
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../source/Tile.js").default} tileSource Tile source.
     * @param {import("../tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} currentZ Current Z.
     * @param {number} preload Load low resolution tiles up to 'preload' levels.
     * @param {function(this: T, import("../Tile.js").default)=} opt_tileCallback Tile callback.
     * @param {T=} opt_this Object to use as `this` in `opt_tileCallback`.
     * @protected
     * @template T
     */
    LayerRenderer.prototype.manageTilePyramid = function manageTilePyramid (
      frameState,
      tileSource,
      tileGrid,
      pixelRatio,
      projection,
      extent$$1,
      currentZ,
      preload,
      opt_tileCallback,
      opt_this
    ) {
      var tileSourceKey = getUid(tileSource);
      if (!(tileSourceKey in frameState.wantedTiles)) {
        frameState.wantedTiles[tileSourceKey] = {};
      }
      var wantedTiles = frameState.wantedTiles[tileSourceKey];
      var tileQueue = frameState.tileQueue;
      var minZoom = tileGrid.getMinZoom();
      var tile, tileRange, tileResolution, x, y, z;
      for (z = minZoom; z <= currentZ; ++z) {
        tileRange = tileGrid.getTileRangeForExtentAndZ(extent$$1, z, tileRange);
        tileResolution = tileGrid.getResolution(z);
        for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
          for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
            if (currentZ - z <= preload) {
              tile = tileSource.getTile(z, x, y, pixelRatio, projection);
              if (tile.getState() == TileState.IDLE) {
                wantedTiles[tile.getKey()] = true;
                if (!tileQueue.isKeyQueued(tile.getKey())) {
                  tileQueue.enqueue([tile, tileSourceKey,
                    tileGrid.getTileCoordCenter(tile.tileCoord), tileResolution]);
                }
              }
              if (opt_tileCallback !== undefined) {
                opt_tileCallback.call(opt_this, tile);
              }
            } else {
              tileSource.useTile(z, x, y, projection);
            }
          }
        }
      }
    };

    return LayerRenderer;
  }(Observable));

  /**
   * @module ol/renderer/canvas/Layer
   */

  /**
   * @abstract
   */
  var CanvasLayerRenderer = /*@__PURE__*/(function (LayerRenderer$$1) {
    function CanvasLayerRenderer(layer) {

      LayerRenderer$$1.call(this, layer);

      /**
       * @protected
       * @type {number}
       */
      this.renderedResolution;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.transform_ = create();

    }

    if ( LayerRenderer$$1 ) CanvasLayerRenderer.__proto__ = LayerRenderer$$1;
    CanvasLayerRenderer.prototype = Object.create( LayerRenderer$$1 && LayerRenderer$$1.prototype );
    CanvasLayerRenderer.prototype.constructor = CanvasLayerRenderer;

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../extent.js").Extent} extent Clip extent.
     * @protected
     */
    CanvasLayerRenderer.prototype.clip = function clip (context, frameState, extent$$1) {
      var pixelRatio = frameState.pixelRatio;
      var width = frameState.size[0] * pixelRatio;
      var height = frameState.size[1] * pixelRatio;
      var rotation = frameState.viewState.rotation;
      var topLeft = getTopLeft(extent$$1);
      var topRight = getTopRight(extent$$1);
      var bottomRight = getBottomRight(extent$$1);
      var bottomLeft = getBottomLeft(extent$$1);

      apply(frameState.coordinateToPixelTransform, topLeft);
      apply(frameState.coordinateToPixelTransform, topRight);
      apply(frameState.coordinateToPixelTransform, bottomRight);
      apply(frameState.coordinateToPixelTransform, bottomLeft);

      context.save();
      rotateAtOffset(context, -rotation, width / 2, height / 2);
      context.beginPath();
      context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);
      context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);
      context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);
      context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);
      context.clip();
      rotateAtOffset(context, rotation, width / 2, height / 2);
    };

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../transform.js").Transform=} opt_transform Transform.
     * @private
     */
    CanvasLayerRenderer.prototype.dispatchComposeEvent_ = function dispatchComposeEvent_ (type, context, frameState, opt_transform) {
      var layer = this.getLayer();
      if (layer.hasListener(type)) {
        var width = frameState.size[0] * frameState.pixelRatio;
        var height = frameState.size[1] * frameState.pixelRatio;
        var rotation = frameState.viewState.rotation;
        rotateAtOffset(context, -rotation, width / 2, height / 2);
        var transform = opt_transform !== undefined ?
          opt_transform : this.getTransform(frameState, 0);
        var render = new CanvasImmediateRenderer(
          context, frameState.pixelRatio, frameState.extent, transform,
          frameState.viewState.rotation);
        var composeEvent = new RenderEvent(type, render, frameState,
          context, null);
        layer.dispatchEvent(composeEvent);
        rotateAtOffset(context, rotation, width / 2, height / 2);
      }
    };

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: S, import("../../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
     *     callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    CanvasLayerRenderer.prototype.forEachLayerAtCoordinate = function forEachLayerAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {
      var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, TRUE);

      if (hasFeature) {
        return callback.call(thisArg, this.getLayer(), null);
      } else {
        return undefined;
      }
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @param {import("../../transform.js").Transform=} opt_transform Transform.
     * @protected
     */
    CanvasLayerRenderer.prototype.postCompose = function postCompose (context, frameState, layerState, opt_transform) {
      this.dispatchComposeEvent_(RenderEventType.POSTCOMPOSE, context, frameState, opt_transform);
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../transform.js").Transform=} opt_transform Transform.
     * @protected
     */
    CanvasLayerRenderer.prototype.preCompose = function preCompose (context, frameState, opt_transform) {
      this.dispatchComposeEvent_(RenderEventType.PRECOMPOSE, context, frameState, opt_transform);
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../transform.js").Transform=} opt_transform Transform.
     * @protected
     */
    CanvasLayerRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent (context, frameState, opt_transform) {
      this.dispatchComposeEvent_(RenderEventType.RENDER, context, frameState, opt_transform);
    };

    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} offsetX Offset on the x-axis in view coordinates.
     * @protected
     * @return {!import("../../transform.js").Transform} Transform.
     */
    CanvasLayerRenderer.prototype.getTransform = function getTransform (frameState, offsetX) {
      var viewState = frameState.viewState;
      var pixelRatio = frameState.pixelRatio;
      var dx1 = pixelRatio * frameState.size[0] / 2;
      var dy1 = pixelRatio * frameState.size[1] / 2;
      var sx = pixelRatio / viewState.resolution;
      var sy = -sx;
      var angle = -viewState.rotation;
      var dx2 = -viewState.center[0] + offsetX;
      var dy2 = -viewState.center[1];
      return compose(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);
    };

    /**
     * @abstract
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @param {CanvasRenderingContext2D} context Context.
     */
    CanvasLayerRenderer.prototype.composeFrame = function composeFrame (frameState, layerState, context) {
      abstract();
    };

    /**
     * @abstract
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @return {boolean} whether composeFrame should be called.
     */
    CanvasLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {
      return abstract();
    };

    return CanvasLayerRenderer;
  }(LayerRenderer));

  /**
   * @module ol/renderer/canvas/IntermediateCanvas
   */

  /**
   * @abstract
   */
  var IntermediateCanvasRenderer = /*@__PURE__*/(function (CanvasLayerRenderer$$1) {
    function IntermediateCanvasRenderer(layer) {

      CanvasLayerRenderer$$1.call(this, layer);

      /**
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.coordinateToCanvasPixelTransform = create();

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.hitCanvasContext_ = null;

    }

    if ( CanvasLayerRenderer$$1 ) IntermediateCanvasRenderer.__proto__ = CanvasLayerRenderer$$1;
    IntermediateCanvasRenderer.prototype = Object.create( CanvasLayerRenderer$$1 && CanvasLayerRenderer$$1.prototype );
    IntermediateCanvasRenderer.prototype.constructor = IntermediateCanvasRenderer;

    /**
     * @inheritDoc
     */
    IntermediateCanvasRenderer.prototype.composeFrame = function composeFrame (frameState, layerState, context) {

      this.preCompose(context, frameState);

      var image = this.getImage();
      if (image) {

        // clipped rendering if layer extent is set
        var extent$$1 = layerState.extent;
        var clipped = extent$$1 !== undefined &&
            !containsExtent(extent$$1, frameState.extent) &&
            intersects(extent$$1, frameState.extent);
        if (clipped) {
          this.clip(context, frameState, /** @type {import("../../extent.js").Extent} */ (extent$$1));
        }

        var imageTransform = this.getImageTransform();
        // for performance reasons, context.save / context.restore is not used
        // to save and restore the transformation matrix and the opacity.
        // see http://jsperf.com/context-save-restore-versus-variable
        var alpha = context.globalAlpha;
        context.globalAlpha = layerState.opacity;

        // for performance reasons, context.setTransform is only used
        // when the view is rotated. see http://jsperf.com/canvas-transform
        var dx = imageTransform[4];
        var dy = imageTransform[5];
        var dw = image.width * imageTransform[0];
        var dh = image.height * imageTransform[3];
        if (dw >= 0.5 && dh >= 0.5) {
          context.drawImage(image, 0, 0, +image.width, +image.height,
            Math.round(dx), Math.round(dy), Math.round(dw), Math.round(dh));
        }
        context.globalAlpha = alpha;

        if (clipped) {
          context.restore();
        }
      }

      this.postCompose(context, frameState, layerState);
    };

    /**
     * @abstract
     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Canvas.
     */
    IntermediateCanvasRenderer.prototype.getImage = function getImage () {
      return abstract();
    };

    /**
     * @abstract
     * @return {!import("../../transform.js").Transform} Image transform.
     */
    IntermediateCanvasRenderer.prototype.getImageTransform = function getImageTransform () {
      return abstract();
    };

    /**
     * @inheritDoc
     */
    IntermediateCanvasRenderer.prototype.forEachLayerAtCoordinate = function forEachLayerAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {
      if (!this.getImage()) {
        return undefined;
      }

      var pixel = apply(this.coordinateToCanvasPixelTransform, coordinate.slice());
      scale$2(pixel, frameState.viewState.resolution / this.renderedResolution);

      if (!this.hitCanvasContext_) {
        this.hitCanvasContext_ = createCanvasContext2D(1, 1);
      }

      this.hitCanvasContext_.clearRect(0, 0, 1, 1);
      this.hitCanvasContext_.drawImage(this.getImage(), pixel[0], pixel[1], 1, 1, 0, 0, 1, 1);

      var imageData = this.hitCanvasContext_.getImageData(0, 0, 1, 1).data;
      if (imageData[3] > 0) {
        return callback.call(thisArg, this.getLayer(), imageData);
      } else {
        return undefined;
      }
    };

    return IntermediateCanvasRenderer;
  }(CanvasLayerRenderer));

  /**
   * @module ol/renderer/canvas/ImageLayer
   */

  /**
   * @classdesc
   * Canvas renderer for image layers.
   * @api
   */
  var CanvasImageLayerRenderer = /*@__PURE__*/(function (IntermediateCanvasRenderer$$1) {
    function CanvasImageLayerRenderer(imageLayer) {

      IntermediateCanvasRenderer$$1.call(this, imageLayer);

      /**
       * @private
       * @type {?import("../../ImageBase.js").default}
       */
      this.image_ = null;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.imageTransform_ = create();

      /**
       * @type {!Array<string>}
       */
      this.skippedFeatures_ = [];

      /**
       * @private
       * @type {import("./VectorLayer.js").default}
       */
      this.vectorRenderer_ = null;

      if (imageLayer.getType() === LayerType.VECTOR) {
        for (var i = 0, ii = layerRendererConstructors.length; i < ii; ++i) {
          var ctor = layerRendererConstructors[i];
          if (ctor !== CanvasImageLayerRenderer && ctor['handles'](imageLayer)) {
            this.vectorRenderer_ = /** @type {import("./VectorLayer.js").default} */ (new ctor(imageLayer));
            break;
          }
        }
      }

    }

    if ( IntermediateCanvasRenderer$$1 ) CanvasImageLayerRenderer.__proto__ = IntermediateCanvasRenderer$$1;
    CanvasImageLayerRenderer.prototype = Object.create( IntermediateCanvasRenderer$$1 && IntermediateCanvasRenderer$$1.prototype );
    CanvasImageLayerRenderer.prototype.constructor = CanvasImageLayerRenderer;

    /**
     * @inheritDoc
     */
    CanvasImageLayerRenderer.prototype.disposeInternal = function disposeInternal () {
      if (this.vectorRenderer_) {
        this.vectorRenderer_.dispose();
      }
      IntermediateCanvasRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @inheritDoc
     */
    CanvasImageLayerRenderer.prototype.getImage = function getImage () {
      return !this.image_ ? null : this.image_.getImage();
    };

    /**
     * @inheritDoc
     */
    CanvasImageLayerRenderer.prototype.getImageTransform = function getImageTransform () {
      return this.imageTransform_;
    };

    /**
     * @inheritDoc
     */
    CanvasImageLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {

      var pixelRatio = frameState.pixelRatio;
      var size$$1 = frameState.size;
      var viewState = frameState.viewState;
      var viewCenter = viewState.center;
      var viewResolution = viewState.resolution;

      var image;
      var imageLayer = /** @type {import("../../layer/Image.js").default} */ (this.getLayer());
      var imageSource = /** @type {import("../../source/Image.js").default} */ (imageLayer.getSource());

      var hints = frameState.viewHints;

      var vectorRenderer = this.vectorRenderer_;
      var renderedExtent = frameState.extent;
      if (!vectorRenderer && layerState.extent !== undefined) {
        renderedExtent = getIntersection(renderedExtent, layerState.extent);
      }

      if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] &&
          !isEmpty$2(renderedExtent)) {
        var projection = viewState.projection;
        var skippedFeatures = this.skippedFeatures_;
        if (vectorRenderer) {
          var context = vectorRenderer.context;
          var imageFrameState = /** @type {import("../../PluggableMap.js").FrameState} */ (assign({}, frameState, {
            size: [
              getWidth(renderedExtent) / viewResolution,
              getHeight(renderedExtent) / viewResolution
            ],
            viewState: /** @type {import("../../View.js").State} */ (assign({}, frameState.viewState, {
              rotation: 0
            }))
          }));
          var newSkippedFeatures = Object.keys(imageFrameState.skippedFeatureUids).sort();
          image = new ImageCanvas(renderedExtent, viewResolution, pixelRatio, context.canvas, function(callback) {
            if (vectorRenderer.prepareFrame(imageFrameState, layerState) &&
                (vectorRenderer.replayGroupChanged ||
                !equals(skippedFeatures, newSkippedFeatures))) {
              context.canvas.width = imageFrameState.size[0] * pixelRatio;
              context.canvas.height = imageFrameState.size[1] * pixelRatio;
              vectorRenderer.compose(context, imageFrameState, layerState);
              skippedFeatures = newSkippedFeatures;
              callback();
            }
          });
        } else {
          image = imageSource.getImage(
            renderedExtent, viewResolution, pixelRatio, projection);
        }
        if (image && this.loadImage(image)) {
          this.image_ = image;
          this.skippedFeatures_ = skippedFeatures;
        }
      }

      if (this.image_) {
        image = this.image_;
        var imageExtent = image.getExtent();
        var imageResolution = image.getResolution();
        var imagePixelRatio = image.getPixelRatio();
        var scale = pixelRatio * imageResolution /
            (viewResolution * imagePixelRatio);
        var transform = compose(this.imageTransform_,
          pixelRatio * size$$1[0] / 2, pixelRatio * size$$1[1] / 2,
          scale, scale,
          0,
          imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution,
          imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);
        compose(this.coordinateToCanvasPixelTransform,
          pixelRatio * size$$1[0] / 2 - transform[4], pixelRatio * size$$1[1] / 2 - transform[5],
          pixelRatio / viewResolution, -pixelRatio / viewResolution,
          0,
          -viewCenter[0], -viewCenter[1]);

        this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;
      }

      return !!this.image_;
    };

    /**
     * @inheritDoc
     */
    CanvasImageLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback) {
      if (this.vectorRenderer_) {
        return this.vectorRenderer_.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback);
      } else {
        return IntermediateCanvasRenderer$$1.prototype.forEachFeatureAtCoordinate.call(this, coordinate, frameState, hitTolerance, callback);
      }
    };

    return CanvasImageLayerRenderer;
  }(IntermediateCanvasRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  CanvasImageLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.IMAGE ||
      layer.getType() === LayerType.VECTOR &&
      /** @type {import("../../layer/Vector.js").default} */ (layer).getRenderMode() === VectorRenderType.IMAGE;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {CanvasImageLayerRenderer} The layer renderer.
   */
  CanvasImageLayerRenderer['create'] = function(mapRenderer, layer) {
    return new CanvasImageLayerRenderer(/** @type {import("../../layer/Image.js").default} */ (layer));
  };

  /**
   * @module ol/TileRange
   */

  /**
   * A representation of a contiguous block of tiles.  A tile range is specified
   * by its min/max tile coordinates and is inclusive of coordinates.
   */
  var TileRange = function TileRange(minX, maxX, minY, maxY) {

    /**
     * @type {number}
     */
    this.minX = minX;

    /**
     * @type {number}
     */
    this.maxX = maxX;

    /**
     * @type {number}
     */
    this.minY = minY;

    /**
     * @type {number}
     */
    this.maxY = maxY;

  };

  /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {boolean} Contains tile coordinate.
   */
  TileRange.prototype.contains = function contains (tileCoord) {
    return this.containsXY(tileCoord[1], tileCoord[2]);
  };

  /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Contains.
   */
  TileRange.prototype.containsTileRange = function containsTileRange (tileRange) {
    return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&
       this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;
  };

  /**
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @return {boolean} Contains coordinate.
   */
  TileRange.prototype.containsXY = function containsXY (x, y) {
    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
  };

  /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Equals.
   */
  TileRange.prototype.equals = function equals (tileRange) {
    return this.minX == tileRange.minX && this.minY == tileRange.minY &&
       this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;
  };

  /**
   * @param {TileRange} tileRange Tile range.
   */
  TileRange.prototype.extend = function extend (tileRange) {
    if (tileRange.minX < this.minX) {
      this.minX = tileRange.minX;
    }
    if (tileRange.maxX > this.maxX) {
      this.maxX = tileRange.maxX;
    }
    if (tileRange.minY < this.minY) {
      this.minY = tileRange.minY;
    }
    if (tileRange.maxY > this.maxY) {
      this.maxY = tileRange.maxY;
    }
  };

  /**
   * @return {number} Height.
   */
  TileRange.prototype.getHeight = function getHeight () {
    return this.maxY - this.minY + 1;
  };

  /**
   * @return {import("./size.js").Size} Size.
   */
  TileRange.prototype.getSize = function getSize () {
    return [this.getWidth(), this.getHeight()];
  };

  /**
   * @return {number} Width.
   */
  TileRange.prototype.getWidth = function getWidth () {
    return this.maxX - this.minX + 1;
  };

  /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Intersects.
   */
  TileRange.prototype.intersects = function intersects (tileRange) {
    return this.minX <= tileRange.maxX &&
       this.maxX >= tileRange.minX &&
       this.minY <= tileRange.maxY &&
       this.maxY >= tileRange.minY;
  };


  /**
   * @param {number} minX Minimum X.
   * @param {number} maxX Maximum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxY Maximum Y.
   * @param {TileRange=} tileRange TileRange.
   * @return {TileRange} Tile range.
   */
  function createOrUpdate$1(minX, maxX, minY, maxY, tileRange) {
    if (tileRange !== undefined) {
      tileRange.minX = minX;
      tileRange.maxX = maxX;
      tileRange.minY = minY;
      tileRange.maxY = maxY;
      return tileRange;
    } else {
      return new TileRange(minX, maxX, minY, maxY);
    }
  }

  /**
   * @module ol/renderer/canvas/TileLayer
   */

  /**
   * @classdesc
   * Canvas renderer for tile layers.
   * @api
   */
  var CanvasTileLayerRenderer = /*@__PURE__*/(function (IntermediateCanvasRenderer$$1) {
    function CanvasTileLayerRenderer(tileLayer, opt_noContext) {

      IntermediateCanvasRenderer$$1.call(this, tileLayer);

      /**
       * @protected
       * @type {CanvasRenderingContext2D}
       */
      this.context = opt_noContext ? null : createCanvasContext2D();

      /**
       * @private
       * @type {number}
       */
      this.oversampling_;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedExtent_ = null;

      /**
       * @protected
       * @type {number}
       */
      this.renderedRevision;

      /**
       * @protected
       * @type {!Array<import("../../Tile.js").default>}
       */
      this.renderedTiles = [];

      /**
       * @private
       * @type {boolean}
       */
      this.newTiles_ = false;

      /**
       * @protected
       * @type {import("../../extent.js").Extent}
       */
      this.tmpExtent = createEmpty();

      /**
       * @private
       * @type {import("../../TileRange.js").default}
       */
      this.tmpTileRange_ = new TileRange(0, 0, 0, 0);

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.imageTransform_ = create();

      /**
       * @protected
       * @type {number}
       */
      this.zDirection = 0;

    }

    if ( IntermediateCanvasRenderer$$1 ) CanvasTileLayerRenderer.__proto__ = IntermediateCanvasRenderer$$1;
    CanvasTileLayerRenderer.prototype = Object.create( IntermediateCanvasRenderer$$1 && IntermediateCanvasRenderer$$1.prototype );
    CanvasTileLayerRenderer.prototype.constructor = CanvasTileLayerRenderer;

    /**
     * @private
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {boolean} Tile is drawable.
     */
    CanvasTileLayerRenderer.prototype.isDrawableTile_ = function isDrawableTile_ (tile) {
      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      var tileState = tile.getState();
      var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
      return tileState == TileState.LOADED ||
          tileState == TileState.EMPTY ||
          tileState == TileState.ERROR && !useInterimTilesOnError;
    };

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @return {!import("../../Tile.js").default} Tile.
     */
    CanvasTileLayerRenderer.prototype.getTile = function getTile (z, x, y, pixelRatio, projection) {
      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      var tileSource = /** @type {import("../../source/Tile.js").default} */ (tileLayer.getSource());
      var tile = tileSource.getTile(z, x, y, pixelRatio, projection);
      if (tile.getState() == TileState.ERROR) {
        if (!tileLayer.getUseInterimTilesOnError()) {
          // When useInterimTilesOnError is false, we consider the error tile as loaded.
          tile.setState(TileState.LOADED);
        } else if (tileLayer.getPreload() > 0) {
          // Preloaded tiles for lower resolutions might have finished loading.
          this.newTiles_ = true;
        }
      }
      if (!this.isDrawableTile_(tile)) {
        tile = tile.getInterimTile();
      }
      return tile;
    };

    /**
     * @inheritDoc
     */
    CanvasTileLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {

      var pixelRatio = frameState.pixelRatio;
      var size$$1 = frameState.size;
      var viewState = frameState.viewState;
      var projection = viewState.projection;
      var viewResolution = viewState.resolution;
      var viewCenter = viewState.center;

      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      var tileSource = /** @type {import("../../source/Tile.js").default} */ (tileLayer.getSource());
      var sourceRevision = tileSource.getRevision();
      var tileGrid = tileSource.getTileGridForProjection(projection);
      var z = tileGrid.getZForResolution(viewResolution, this.zDirection);
      var tileResolution = tileGrid.getResolution(z);
      var oversampling = Math.round(viewResolution / tileResolution) || 1;
      var extent$$1 = frameState.extent;

      if (layerState.extent !== undefined) {
        extent$$1 = getIntersection(extent$$1, layerState.extent);
      }
      if (isEmpty$2(extent$$1)) {
        // Return false to prevent the rendering of the layer.
        return false;
      }

      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent$$1, z);
      var imageExtent = tileGrid.getTileRangeExtent(z, tileRange);

      var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);

      /**
       * @type {Object<number, Object<string, import("../../Tile.js").default>>}
       */
      var tilesToDrawByZ = {};
      tilesToDrawByZ[z] = {};

      var findLoadedTiles = this.createLoadedTileFinder(
        tileSource, projection, tilesToDrawByZ);

      var hints = frameState.viewHints;
      var animatingOrInteracting = hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING];

      var tmpExtent = this.tmpExtent;
      var tmpTileRange = this.tmpTileRange_;
      this.newTiles_ = false;
      var tile, x, y;
      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
          if (Date.now() - frameState.time > 16 && animatingOrInteracting) {
            continue;
          }
          tile = this.getTile(z, x, y, pixelRatio, projection);
          if (this.isDrawableTile_(tile)) {
            var uid = getUid(this);
            if (tile.getState() == TileState.LOADED) {
              tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
              var inTransition = tile.inTransition(uid);
              if (!this.newTiles_ && (inTransition || this.renderedTiles.indexOf(tile) === -1)) {
                this.newTiles_ = true;
              }
            }
            if (tile.getAlpha(uid, frameState.time) === 1) {
              // don't look for alt tiles if alpha is 1
              continue;
            }
          }

          var childTileRange = tileGrid.getTileCoordChildTileRange(
            tile.tileCoord, tmpTileRange, tmpExtent);
          var covered = false;
          if (childTileRange) {
            covered = findLoadedTiles(z + 1, childTileRange);
          }
          if (!covered) {
            tileGrid.forEachTileCoordParentTileRange(
              tile.tileCoord, findLoadedTiles, null, tmpTileRange, tmpExtent);
          }

        }
      }

      var renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;
      if (!(this.renderedResolution && Date.now() - frameState.time > 16 && animatingOrInteracting) && (
        this.newTiles_ ||
            !(this.renderedExtent_ && containsExtent(this.renderedExtent_, extent$$1)) ||
            this.renderedRevision != sourceRevision ||
            oversampling != this.oversampling_ ||
            !animatingOrInteracting && renderedResolution != this.renderedResolution
      )) {

        var context = this.context;
        if (context) {
          var tilePixelSize = tileSource.getTilePixelSize(z, pixelRatio, projection);
          var width = Math.round(tileRange.getWidth() * tilePixelSize[0] / oversampling);
          var height = Math.round(tileRange.getHeight() * tilePixelSize[1] / oversampling);
          var canvas = context.canvas;
          if (canvas.width != width || canvas.height != height) {
            this.oversampling_ = oversampling;
            canvas.width = width;
            canvas.height = height;
          } else {
            if ((this.renderedExtent_ && !equals$1(imageExtent, this.renderedExtent_)) ||
                this.renderedRevision != sourceRevision) {
              context.clearRect(0, 0, width, height);
            }
            oversampling = this.oversampling_;
          }
        }

        this.renderedTiles.length = 0;
        /** @type {Array<number>} */
        var zs = Object.keys(tilesToDrawByZ).map(Number);
        zs.sort(function(a, b) {
          if (a === z) {
            return 1;
          } else if (b === z) {
            return -1;
          } else {
            return a > b ? 1 : a < b ? -1 : 0;
          }
        });
        var currentResolution, currentScale, currentTilePixelSize, currentZ, i, ii;
        var tileExtent, tileGutter, tilesToDraw, w, h;
        for (i = 0, ii = zs.length; i < ii; ++i) {
          currentZ = zs[i];
          currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
          currentResolution = tileGrid.getResolution(currentZ);
          currentScale = currentResolution / tileResolution;
          tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
          tilesToDraw = tilesToDrawByZ[currentZ];
          for (var tileCoordKey in tilesToDraw) {
            tile = tilesToDraw[tileCoordKey];
            tileExtent = tileGrid.getTileCoordExtent(tile.getTileCoord(), tmpExtent);
            x = (tileExtent[0] - imageExtent[0]) / tileResolution * tilePixelRatio / oversampling;
            y = (imageExtent[3] - tileExtent[3]) / tileResolution * tilePixelRatio / oversampling;
            w = currentTilePixelSize[0] * currentScale / oversampling;
            h = currentTilePixelSize[1] * currentScale / oversampling;
            this.drawTileImage(tile, frameState, layerState, x, y, w, h, tileGutter, z === currentZ);
            this.renderedTiles.push(tile);
          }
        }

        this.renderedRevision = sourceRevision;
        this.renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;
        this.renderedExtent_ = imageExtent;
      }

      var scale = this.renderedResolution / viewResolution;
      var transform = compose(this.imageTransform_,
        pixelRatio * size$$1[0] / 2, pixelRatio * size$$1[1] / 2,
        scale, scale,
        0,
        (this.renderedExtent_[0] - viewCenter[0]) / this.renderedResolution * pixelRatio,
        (viewCenter[1] - this.renderedExtent_[3]) / this.renderedResolution * pixelRatio);
      compose(this.coordinateToCanvasPixelTransform,
        pixelRatio * size$$1[0] / 2 - transform[4], pixelRatio * size$$1[1] / 2 - transform[5],
        pixelRatio / viewResolution, -pixelRatio / viewResolution,
        0,
        -viewCenter[0], -viewCenter[1]);


      this.updateUsedTiles(frameState.usedTiles, tileSource, z, tileRange);
      this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio,
        projection, extent$$1, z, tileLayer.getPreload());
      this.scheduleExpireCache(frameState, tileSource);

      return this.renderedTiles.length > 0;
    };

    /**
     * @param {import("../../Tile.js").default} tile Tile.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @param {number} x Left of the tile.
     * @param {number} y Top of the tile.
     * @param {number} w Width of the tile.
     * @param {number} h Height of the tile.
     * @param {number} gutter Tile gutter.
     * @param {boolean} transition Apply an alpha transition.
     */
    CanvasTileLayerRenderer.prototype.drawTileImage = function drawTileImage (tile, frameState, layerState, x, y, w, h, gutter, transition) {
      var image = this.getTileImage(tile);
      if (!image) {
        return;
      }
      var uid = getUid(this);
      var alpha = transition ? tile.getAlpha(uid, frameState.time) : 1;
      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      var tileSource = /** @type {import("../../source/Tile.js").default} */ (tileLayer.getSource());
      if (alpha === 1 && !tileSource.getOpaque(frameState.viewState.projection)) {
        this.context.clearRect(x, y, w, h);
      }
      var alphaChanged = alpha !== this.context.globalAlpha;
      if (alphaChanged) {
        this.context.save();
        this.context.globalAlpha = alpha;
      }
      this.context.drawImage(image, gutter, gutter,
        image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);

      if (alphaChanged) {
        this.context.restore();
      }
      if (alpha !== 1) {
        frameState.animate = true;
      } else if (transition) {
        tile.endTransition(uid);
      }
    };

    /**
     * @inheritDoc
     */
    CanvasTileLayerRenderer.prototype.getImage = function getImage () {
      var context = this.context;
      return context ? context.canvas : null;
    };

    /**
     * @inheritDoc
     */
    CanvasTileLayerRenderer.prototype.getImageTransform = function getImageTransform () {
      return this.imageTransform_;
    };

    /**
     * Get the image from a tile.
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @protected
     */
    CanvasTileLayerRenderer.prototype.getTileImage = function getTileImage (tile) {
      return /** @type {import("../../ImageTile.js").default} */ (tile).getImage();
    };

    return CanvasTileLayerRenderer;
  }(IntermediateCanvasRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  CanvasTileLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.TILE;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {CanvasTileLayerRenderer} The layer renderer.
   */
  CanvasTileLayerRenderer['create'] = function(mapRenderer, layer) {
    return new CanvasTileLayerRenderer(/** @type {import("../../layer/Tile.js").default} */ (layer));
  };


  /**
   * @function
   * @return {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default}
   */
  CanvasTileLayerRenderer.prototype.getLayer;

  /**
   * @module ol/render/ReplayGroup
   */

  /**
   * Base class for replay groups.
   */
  var ReplayGroup = function ReplayGroup () {};

  ReplayGroup.prototype.getReplay = function getReplay (zIndex, replayType) {
    return abstract();
  };

  /**
   * @abstract
   * @return {boolean} Is empty.
   */
  ReplayGroup.prototype.isEmpty = function isEmpty () {
    return abstract();
  };

  /**
   * @abstract
   * @param {boolean} group Group with previous replay
   * @return {Array<*>} The resulting instruction group
   */
  ReplayGroup.prototype.addDeclutter = function addDeclutter (group) {
    return abstract();
  };

  /**
   * @module ol/render/ReplayType
   */

  /**
   * @enum {string}
   */
  var ReplayType = {
    CIRCLE: 'Circle',
    DEFAULT: 'Default',
    IMAGE: 'Image',
    LINE_STRING: 'LineString',
    POLYGON: 'Polygon',
    TEXT: 'Text'
  };

  /**
   * @module ol/geom/flat/textpath
   */


  /**
   * @param {Array<number>} flatCoordinates Path to put text on.
   * @param {number} offset Start offset of the `flatCoordinates`.
   * @param {number} end End offset of the `flatCoordinates`.
   * @param {number} stride Stride.
   * @param {string} text Text to place on the path.
   * @param {function(string):number} measure Measure function returning the
   * width of the character passed as 1st argument.
   * @param {number} startM m along the path where the text starts.
   * @param {number} maxAngle Max angle between adjacent chars in radians.
   * @return {Array<Array<*>>} The result array of null if `maxAngle` was
   * exceeded. Entries of the array are x, y, anchorX, angle, chunk.
   */
  function drawTextOnPath(
    flatCoordinates, offset, end, stride, text, measure, startM, maxAngle) {
    var result = [];

    // Keep text upright
    var reverse = flatCoordinates[offset] > flatCoordinates[end - stride];

    var numChars = text.length;

    var x1 = flatCoordinates[offset];
    var y1 = flatCoordinates[offset + 1];
    offset += stride;
    var x2 = flatCoordinates[offset];
    var y2 = flatCoordinates[offset + 1];
    var segmentM = 0;
    var segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));

    var chunk = '';
    var chunkLength = 0;
    var data, index, previousAngle;
    for (var i = 0; i < numChars; ++i) {
      index = reverse ? numChars - i - 1 : i;
      var char = text.charAt(index);
      chunk = reverse ? char + chunk : chunk + char;
      var charLength = measure(chunk) - chunkLength;
      chunkLength += charLength;
      var charM = startM + charLength / 2;
      while (offset < end - stride && segmentM + segmentLength < charM) {
        x1 = x2;
        y1 = y2;
        offset += stride;
        x2 = flatCoordinates[offset];
        y2 = flatCoordinates[offset + 1];
        segmentM += segmentLength;
        segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
      }
      var segmentPos = charM - segmentM;
      var angle = Math.atan2(y2 - y1, x2 - x1);
      if (reverse) {
        angle += angle > 0 ? -Math.PI : Math.PI;
      }
      if (previousAngle !== undefined) {
        var delta = angle - previousAngle;
        delta += (delta > Math.PI) ? -2 * Math.PI : (delta < -Math.PI) ? 2 * Math.PI : 0;
        if (Math.abs(delta) > maxAngle) {
          return null;
        }
      }
      var interpolate = segmentPos / segmentLength;
      var x = lerp(x1, x2, interpolate);
      var y = lerp(y1, y2, interpolate);
      if (previousAngle == angle) {
        if (reverse) {
          data[0] = x;
          data[1] = y;
          data[2] = charLength / 2;
        }
        data[4] = chunk;
      } else {
        chunk = char;
        chunkLength = charLength;
        data = [x, y, charLength / 2, angle, chunk];
        if (reverse) {
          result.unshift(data);
        } else {
          result.push(data);
        }
        previousAngle = angle;
      }
      startM += charLength;
    }
    return result;
  }

  /**
   * @module ol/render/canvas/Instruction
   */

  /**
   * @enum {number}
   */
  var Instruction = {
    BEGIN_GEOMETRY: 0,
    BEGIN_PATH: 1,
    CIRCLE: 2,
    CLOSE_PATH: 3,
    CUSTOM: 4,
    DRAW_CHARS: 5,
    DRAW_IMAGE: 6,
    END_GEOMETRY: 7,
    FILL: 8,
    MOVE_TO_LINE_TO: 9,
    SET_FILL_STYLE: 10,
    SET_STROKE_STYLE: 11,
    STROKE: 12
  };


  /**
   * @type {Array<Instruction>}
   */
  var fillInstruction = [Instruction.FILL];


  /**
   * @type {Array<Instruction>}
   */
  var strokeInstruction = [Instruction.STROKE];


  /**
   * @type {Array<Instruction>}
   */
  var beginPathInstruction = [Instruction.BEGIN_PATH];


  /**
   * @type {Array<Instruction>}
   */
  var closePathInstruction = [Instruction.CLOSE_PATH];

  /**
   * @module ol/render/replay
   */


  /**
   * @const
   * @type {Array<ReplayType>}
   */
  var ORDER = [
    ReplayType.POLYGON,
    ReplayType.CIRCLE,
    ReplayType.LINE_STRING,
    ReplayType.IMAGE,
    ReplayType.TEXT,
    ReplayType.DEFAULT
  ];

  /**
   * @const
   * @enum {number}
   */
  var TEXT_ALIGN = {};
  TEXT_ALIGN['left'] = 0;
  TEXT_ALIGN['end'] = 0;
  TEXT_ALIGN['center'] = 0.5;
  TEXT_ALIGN['right'] = 1;
  TEXT_ALIGN['start'] = 1;
  TEXT_ALIGN['top'] = 0;
  TEXT_ALIGN['middle'] = 0.5;
  TEXT_ALIGN['hanging'] = 0.2;
  TEXT_ALIGN['alphabetic'] = 0.8;
  TEXT_ALIGN['ideographic'] = 0.8;
  TEXT_ALIGN['bottom'] = 1;

  /**
   * @module ol/render/canvas/Replay
   */


  /**
   * @type {import("../../extent.js").Extent}
   */
  var tmpExtent = createEmpty();


  /**
   * @type {!import("../../transform.js").Transform}
   */
  var tmpTransform$1 = create();


  var CanvasReplay = /*@__PURE__*/(function (VectorContext$$1) {
    function CanvasReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
      VectorContext$$1.call(this);

      /**
       * @type {?}
       */
      this.declutterTree = declutterTree;

      /**
       * @protected
       * @type {number}
       */
      this.tolerance = tolerance;

      /**
       * @protected
       * @const
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent = maxExtent;

      /**
       * @protected
       * @type {boolean}
       */
      this.overlaps = overlaps;

      /**
       * @protected
       * @type {number}
       */
      this.pixelRatio = pixelRatio;

      /**
       * @protected
       * @type {number}
       */
      this.maxLineWidth = 0;

      /**
       * @protected
       * @const
       * @type {number}
       */
      this.resolution = resolution;

      /**
       * @private
       * @type {boolean}
       */
      this.alignFill_;

      /**
       * @private
       * @type {Array<*>}
       */
      this.beginGeometryInstruction1_ = null;

      /**
       * @private
       * @type {Array<*>}
       */
      this.beginGeometryInstruction2_ = null;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.bufferedMaxExtent_ = null;

      /**
       * @protected
       * @type {Array<*>}
       */
      this.instructions = [];

      /**
       * @protected
       * @type {Array<number>}
       */
      this.coordinates = [];

      /**
       * @private
       * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
       */
      this.coordinateCache_ = {};

      /**
       * @private
       * @type {!import("../../transform.js").Transform}
       */
      this.renderedTransform_ = create();

      /**
       * @protected
       * @type {Array<*>}
       */
      this.hitDetectionInstructions = [];

      /**
       * @private
       * @type {Array<number>}
       */
      this.pixelCoordinates_ = null;

      /**
       * @protected
       * @type {import("../canvas.js").FillStrokeState}
       */
      this.state = /** @type {import("../canvas.js").FillStrokeState} */ ({});

      /**
       * @private
       * @type {number}
       */
      this.viewRotation_ = 0;

    }

    if ( VectorContext$$1 ) CanvasReplay.__proto__ = VectorContext$$1;
    CanvasReplay.prototype = Object.create( VectorContext$$1 && VectorContext$$1.prototype );
    CanvasReplay.prototype.constructor = CanvasReplay;

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     */
    CanvasReplay.prototype.replayTextBackground_ = function replayTextBackground_ (context, p1, p2, p3, p4, fillInstruction$$1, strokeInstruction$$1) {
      context.beginPath();
      context.moveTo.apply(context, p1);
      context.lineTo.apply(context, p2);
      context.lineTo.apply(context, p3);
      context.lineTo.apply(context, p4);
      context.lineTo.apply(context, p1);
      if (fillInstruction$$1) {
        this.alignFill_ = /** @type {boolean} */ (fillInstruction$$1[2]);
        this.fill_(context);
      }
      if (strokeInstruction$$1) {
        this.setStrokeStyle_(context, /** @type {Array<*>} */ (strokeInstruction$$1));
        context.stroke();
      }
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.
     * @param {number} anchorX Anchor X.
     * @param {number} anchorY Anchor Y.
     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
     * @param {number} height Height.
     * @param {number} opacity Opacity.
     * @param {number} originX Origin X.
     * @param {number} originY Origin Y.
     * @param {number} rotation Rotation.
     * @param {number} scale Scale.
     * @param {boolean} snapToPixel Snap to pixel.
     * @param {number} width Width.
     * @param {Array<number>} padding Padding.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     */
    CanvasReplay.prototype.replayImage_ = function replayImage_ (
      context,
      x,
      y,
      image,
      anchorX,
      anchorY,
      declutterGroup,
      height,
      opacity,
      originX,
      originY,
      rotation,
      scale$$1,
      snapToPixel,
      width,
      padding,
      fillInstruction$$1,
      strokeInstruction$$1
    ) {
      var fillStroke = fillInstruction$$1 || strokeInstruction$$1;
      anchorX *= scale$$1;
      anchorY *= scale$$1;
      x -= anchorX;
      y -= anchorY;

      var w = (width + originX > image.width) ? image.width - originX : width;
      var h = (height + originY > image.height) ? image.height - originY : height;
      var boxW = padding[3] + w * scale$$1 + padding[1];
      var boxH = padding[0] + h * scale$$1 + padding[2];
      var boxX = x - padding[3];
      var boxY = y - padding[0];

      /** @type {import("../../coordinate.js").Coordinate} */
      var p1;
      /** @type {import("../../coordinate.js").Coordinate} */
      var p2;
      /** @type {import("../../coordinate.js").Coordinate} */
      var p3;
      /** @type {import("../../coordinate.js").Coordinate} */
      var p4;
      if (fillStroke || rotation !== 0) {
        p1 = [boxX, boxY];
        p2 = [boxX + boxW, boxY];
        p3 = [boxX + boxW, boxY + boxH];
        p4 = [boxX, boxY + boxH];
      }

      var transform = null;
      if (rotation !== 0) {
        var centerX = x + anchorX;
        var centerY = y + anchorY;
        transform = compose(tmpTransform$1, centerX, centerY, 1, 1, rotation, -centerX, -centerY);

        createOrUpdateEmpty(tmpExtent);
        extendCoordinate(tmpExtent, apply(tmpTransform$1, p1));
        extendCoordinate(tmpExtent, apply(tmpTransform$1, p2));
        extendCoordinate(tmpExtent, apply(tmpTransform$1, p3));
        extendCoordinate(tmpExtent, apply(tmpTransform$1, p4));
      } else {
        createOrUpdate(boxX, boxY, boxX + boxW, boxY + boxH, tmpExtent);
      }
      var canvas = context.canvas;
      var strokePadding = strokeInstruction$$1 ? (strokeInstruction$$1[2] * scale$$1 / 2) : 0;
      var intersects$$1 =
          tmpExtent[0] - strokePadding <= canvas.width && tmpExtent[2] + strokePadding >= 0 &&
          tmpExtent[1] - strokePadding <= canvas.height && tmpExtent[3] + strokePadding >= 0;

      if (snapToPixel) {
        x = Math.round(x);
        y = Math.round(y);
      }

      if (declutterGroup) {
        if (!intersects$$1 && declutterGroup[4] == 1) {
          return;
        }
        extend$1(declutterGroup, tmpExtent);
        var declutterArgs = intersects$$1 ?
          [context, transform ? transform.slice(0) : null, opacity, image, originX, originY, w, h, x, y, scale$$1] :
          null;
        if (declutterArgs && fillStroke) {
          declutterArgs.push(fillInstruction$$1, strokeInstruction$$1, p1, p2, p3, p4);
        }
        declutterGroup.push(declutterArgs);
      } else if (intersects$$1) {
        if (fillStroke) {
          this.replayTextBackground_(context, p1, p2, p3, p4,
            /** @type {Array<*>} */ (fillInstruction$$1),
            /** @type {Array<*>} */ (strokeInstruction$$1));
        }
        drawImage(context, transform, opacity, image, originX, originY, w, h, x, y, scale$$1);
      }
    };

    /**
     * @protected
     * @param {Array<number>} dashArray Dash array.
     * @return {Array<number>} Dash array with pixel ratio applied
     */
    CanvasReplay.prototype.applyPixelRatio = function applyPixelRatio (dashArray) {
      var pixelRatio = this.pixelRatio;
      return pixelRatio == 1 ? dashArray : dashArray.map(function(dash) {
        return dash * pixelRatio;
      });
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} closed Last input coordinate equals first.
     * @param {boolean} skipFirst Skip first coordinate.
     * @protected
     * @return {number} My end.
     */
    CanvasReplay.prototype.appendFlatCoordinates = function appendFlatCoordinates (flatCoordinates, offset, end, stride, closed, skipFirst) {

      var myEnd = this.coordinates.length;
      var extent$$1 = this.getBufferedMaxExtent();
      if (skipFirst) {
        offset += stride;
      }
      var lastCoord = [flatCoordinates[offset], flatCoordinates[offset + 1]];
      var nextCoord = [NaN, NaN];
      var skipped = true;

      var i, lastRel, nextRel;
      for (i = offset + stride; i < end; i += stride) {
        nextCoord[0] = flatCoordinates[i];
        nextCoord[1] = flatCoordinates[i + 1];
        nextRel = coordinateRelationship(extent$$1, nextCoord);
        if (nextRel !== lastRel) {
          if (skipped) {
            this.coordinates[myEnd++] = lastCoord[0];
            this.coordinates[myEnd++] = lastCoord[1];
          }
          this.coordinates[myEnd++] = nextCoord[0];
          this.coordinates[myEnd++] = nextCoord[1];
          skipped = false;
        } else if (nextRel === Relationship.INTERSECTING) {
          this.coordinates[myEnd++] = nextCoord[0];
          this.coordinates[myEnd++] = nextCoord[1];
          skipped = false;
        } else {
          skipped = true;
        }
        lastCoord[0] = nextCoord[0];
        lastCoord[1] = nextCoord[1];
        lastRel = nextRel;
      }

      // Last coordinate equals first or only one point to append:
      if ((closed && skipped) || i === offset + stride) {
        this.coordinates[myEnd++] = lastCoord[0];
        this.coordinates[myEnd++] = lastCoord[1];
      }
      return myEnd;
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<number>} replayEnds Replay ends.
     * @return {number} Offset.
     */
    CanvasReplay.prototype.drawCustomCoordinates_ = function drawCustomCoordinates_ (flatCoordinates, offset, ends, stride, replayEnds) {
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        var end = ends[i];
        var replayEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
        replayEnds.push(replayEnd);
        offset = end;
      }
      return offset;
    };

    /**
     * @inheritDoc.
     */
    CanvasReplay.prototype.drawCustom = function drawCustom (geometry, feature, renderer) {
      this.beginGeometry(geometry, feature);
      var type = geometry.getType();
      var stride = geometry.getStride();
      var replayBegin = this.coordinates.length;
      var flatCoordinates, replayEnd, replayEnds, replayEndss;
      var offset;
      if (type == GeometryType.MULTI_POLYGON) {
        geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry);
        flatCoordinates = geometry.getOrientedFlatCoordinates();
        replayEndss = [];
        var endss = geometry.getEndss();
        offset = 0;
        for (var i = 0, ii = endss.length; i < ii; ++i) {
          var myEnds = [];
          offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
          replayEndss.push(myEnds);
        }
        this.instructions.push([Instruction.CUSTOM,
          replayBegin, replayEndss, geometry, renderer, inflateMultiCoordinatesArray]);
      } else if (type == GeometryType.POLYGON || type == GeometryType.MULTI_LINE_STRING) {
        replayEnds = [];
        flatCoordinates = (type == GeometryType.POLYGON) ?
          /** @type {import("../../geom/Polygon.js").default} */ (geometry).getOrientedFlatCoordinates() :
          geometry.getFlatCoordinates();
        offset = this.drawCustomCoordinates_(flatCoordinates, 0,
          /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ (geometry).getEnds(),
          stride, replayEnds);
        this.instructions.push([Instruction.CUSTOM,
          replayBegin, replayEnds, geometry, renderer, inflateCoordinatesArray]);
      } else if (type == GeometryType.LINE_STRING || type == GeometryType.MULTI_POINT) {
        flatCoordinates = geometry.getFlatCoordinates();
        replayEnd = this.appendFlatCoordinates(
          flatCoordinates, 0, flatCoordinates.length, stride, false, false);
        this.instructions.push([Instruction.CUSTOM,
          replayBegin, replayEnd, geometry, renderer, inflateCoordinates]);
      } else if (type == GeometryType.POINT) {
        flatCoordinates = geometry.getFlatCoordinates();
        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
        replayEnd = this.coordinates.length;
        this.instructions.push([Instruction.CUSTOM,
          replayBegin, replayEnd, geometry, renderer]);
      }
      this.endGeometry(geometry, feature);
    };

    /**
     * @protected
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
     */
    CanvasReplay.prototype.beginGeometry = function beginGeometry (geometry, feature) {
      this.beginGeometryInstruction1_ = [Instruction.BEGIN_GEOMETRY, feature, 0];
      this.instructions.push(this.beginGeometryInstruction1_);
      this.beginGeometryInstruction2_ = [Instruction.BEGIN_GEOMETRY, feature, 0];
      this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
    };

    /**
     * FIXME empty description for jsdoc
     */
    CanvasReplay.prototype.finish = function finish () {};

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     */
    CanvasReplay.prototype.fill_ = function fill_ (context) {
      if (this.alignFill_) {
        var origin = apply(this.renderedTransform_, [0, 0]);
        var repeatSize = 512 * this.pixelRatio;
        context.translate(origin[0] % repeatSize, origin[1] % repeatSize);
        context.rotate(this.viewRotation_);
      }
      context.fill();
      if (this.alignFill_) {
        context.setTransform.apply(context, resetTransform);
      }
    };

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {Array<*>} instruction Instruction.
     */
    CanvasReplay.prototype.setStrokeStyle_ = function setStrokeStyle_ (context, instruction) {
      context.strokeStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
      context.lineWidth = /** @type {number} */ (instruction[2]);
      context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);
      context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);
      context.miterLimit = /** @type {number} */ (instruction[5]);
      if (CANVAS_LINE_DASH) {
        context.lineDashOffset = /** @type {number} */ (instruction[7]);
        context.setLineDash(/** @type {Array<number>} */ (instruction[6]));
      }
    };

    /**
     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
     * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
     */
    CanvasReplay.prototype.renderDeclutter_ = function renderDeclutter_ (declutterGroup, feature) {
      if (declutterGroup && declutterGroup.length > 5) {
        var groupCount = declutterGroup[4];
        if (groupCount == 1 || groupCount == declutterGroup.length - 5) {
          /** @type {import("../../structs/RBush.js").Entry} */
          var box = {
            minX: /** @type {number} */ (declutterGroup[0]),
            minY: /** @type {number} */ (declutterGroup[1]),
            maxX: /** @type {number} */ (declutterGroup[2]),
            maxY: /** @type {number} */ (declutterGroup[3]),
            value: feature
          };
          if (!this.declutterTree.collides(box)) {
            this.declutterTree.insert(box);
            for (var j = 5, jj = declutterGroup.length; j < jj; ++j) {
              var declutterData = /** @type {Array} */ (declutterGroup[j]);
              if (declutterData) {
                if (declutterData.length > 11) {
                  this.replayTextBackground_(declutterData[0],
                    declutterData[13], declutterData[14], declutterData[15], declutterData[16],
                    declutterData[11], declutterData[12]);
                }
                drawImage.apply(undefined, declutterData);
              }
            }
          }
          declutterGroup.length = 5;
          createOrUpdateEmpty(declutterGroup);
        }
      }
    };

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *     to skip.
     * @param {Array<*>} instructions Instructions array.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
     *     extent.
     * @return {T|undefined} Callback result.
     * @template T
     */
    CanvasReplay.prototype.replay_ = function replay_ (
      context,
      transform,
      skippedFeaturesHash,
      instructions,
      snapToPixel,
      featureCallback,
      opt_hitExtent
    ) {
      /** @type {Array<number>} */
      var pixelCoordinates;
      if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {
        pixelCoordinates = this.pixelCoordinates_;
      } else {
        if (!this.pixelCoordinates_) {
          this.pixelCoordinates_ = [];
        }
        pixelCoordinates = transform2D(
          this.coordinates, 0, this.coordinates.length, 2,
          transform, this.pixelCoordinates_);
        setFromArray(this.renderedTransform_, transform);
      }
      var skipFeatures = !isEmpty$1(skippedFeaturesHash);
      var i = 0; // instruction index
      var ii = instructions.length; // end of instructions
      var d = 0; // data index
      var dd; // end of per-instruction data
      var anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, image;
      var pendingFill = 0;
      var pendingStroke = 0;
      var lastFillInstruction = null;
      var lastStrokeInstruction = null;
      var coordinateCache = this.coordinateCache_;
      var viewRotation = this.viewRotation_;

      var state = /** @type {import("../../render.js").State} */ ({
        context: context,
        pixelRatio: this.pixelRatio,
        resolution: this.resolution,
        rotation: viewRotation
      });

      // When the batch size gets too big, performance decreases. 200 is a good
      // balance between batch size and number of fill/stroke instructions.
      var batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
      var /** @type {import("../../Feature.js").default|import("../Feature.js").default} */ feature;
      var x, y;
      while (i < ii) {
        var instruction = instructions[i];
        var type = /** @type {CanvasInstruction} */ (instruction[0]);
        switch (type) {
          case Instruction.BEGIN_GEOMETRY:
            feature = /** @type {import("../../Feature.js").default|import("../Feature.js").default} */ (instruction[1]);
            if ((skipFeatures && skippedFeaturesHash[getUid(feature)]) || !feature.getGeometry()) {
              i = /** @type {number} */ (instruction[2]);
            } else if (opt_hitExtent !== undefined && !intersects(
              opt_hitExtent, feature.getGeometry().getExtent())) {
              i = /** @type {number} */ (instruction[2]) + 1;
            } else {
              ++i;
            }
            break;
          case Instruction.BEGIN_PATH:
            if (pendingFill > batchSize) {
              this.fill_(context);
              pendingFill = 0;
            }
            if (pendingStroke > batchSize) {
              context.stroke();
              pendingStroke = 0;
            }
            if (!pendingFill && !pendingStroke) {
              context.beginPath();
              prevX = prevY = NaN;
            }
            ++i;
            break;
          case Instruction.CIRCLE:
            d = /** @type {number} */ (instruction[1]);
            var x1 = pixelCoordinates[d];
            var y1 = pixelCoordinates[d + 1];
            var x2 = pixelCoordinates[d + 2];
            var y2 = pixelCoordinates[d + 3];
            var dx = x2 - x1;
            var dy = y2 - y1;
            var r = Math.sqrt(dx * dx + dy * dy);
            context.moveTo(x1 + r, y1);
            context.arc(x1, y1, r, 0, 2 * Math.PI, true);
            ++i;
            break;
          case Instruction.CLOSE_PATH:
            context.closePath();
            ++i;
            break;
          case Instruction.CUSTOM:
            d = /** @type {number} */ (instruction[1]);
            dd = instruction[2];
            var geometry = /** @type {import("../../geom/SimpleGeometry.js").default} */ (instruction[3]);
            var renderer = instruction[4];
            var fn = instruction.length == 6 ? instruction[5] : undefined;
            state.geometry = geometry;
            state.feature = feature;
            if (!(i in coordinateCache)) {
              coordinateCache[i] = [];
            }
            var coords = coordinateCache[i];
            if (fn) {
              fn(pixelCoordinates, d, dd, 2, coords);
            } else {
              coords[0] = pixelCoordinates[d];
              coords[1] = pixelCoordinates[d + 1];
              coords.length = 2;
            }
            renderer(coords, state);
            ++i;
            break;
          case Instruction.DRAW_IMAGE:
            d = /** @type {number} */ (instruction[1]);
            dd = /** @type {number} */ (instruction[2]);
            image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */
                (instruction[3]);
            // Remaining arguments in DRAW_IMAGE are in alphabetical order
            anchorX = /** @type {number} */ (instruction[4]);
            anchorY = /** @type {number} */ (instruction[5]);
            declutterGroup = featureCallback ? null : /** @type {import("../canvas.js").DeclutterGroup} */ (instruction[6]);
            var height = /** @type {number} */ (instruction[7]);
            var opacity = /** @type {number} */ (instruction[8]);
            var originX = /** @type {number} */ (instruction[9]);
            var originY = /** @type {number} */ (instruction[10]);
            var rotateWithView = /** @type {boolean} */ (instruction[11]);
            var rotation = /** @type {number} */ (instruction[12]);
            var scale$$1 = /** @type {number} */ (instruction[13]);
            var width = /** @type {number} */ (instruction[14]);

            var padding = (void 0), backgroundFill = (void 0), backgroundStroke = (void 0);
            if (instruction.length > 16) {
              padding = /** @type {Array<number>} */ (instruction[15]);
              backgroundFill = /** @type {boolean} */ (instruction[16]);
              backgroundStroke = /** @type {boolean} */ (instruction[17]);
            } else {
              padding = defaultPadding;
              backgroundFill = backgroundStroke = false;
            }

            if (rotateWithView) {
              rotation += viewRotation;
            }
            for (; d < dd; d += 2) {
              this.replayImage_(context,
                pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY,
                declutterGroup, height, opacity, originX, originY, rotation, scale$$1,
                snapToPixel, width, padding,
                backgroundFill ? /** @type {Array<*>} */ (lastFillInstruction) : null,
                backgroundStroke ? /** @type {Array<*>} */ (lastStrokeInstruction) : null);
            }
            this.renderDeclutter_(declutterGroup, feature);
            ++i;
            break;
          case Instruction.DRAW_CHARS:
            var begin = /** @type {number} */ (instruction[1]);
            var end = /** @type {number} */ (instruction[2]);
            var baseline = /** @type {number} */ (instruction[3]);
            declutterGroup = featureCallback ? null : /** @type {import("../canvas.js").DeclutterGroup} */ (instruction[4]);
            var overflow = /** @type {number} */ (instruction[5]);
            var fillKey = /** @type {string} */ (instruction[6]);
            var maxAngle = /** @type {number} */ (instruction[7]);
            var measure = /** @type {function(string):number} */ (instruction[8]);
            var offsetY = /** @type {number} */ (instruction[9]);
            var strokeKey = /** @type {string} */ (instruction[10]);
            var strokeWidth = /** @type {number} */ (instruction[11]);
            var text = /** @type {string} */ (instruction[12]);
            var textKey = /** @type {string} */ (instruction[13]);
            var textScale = /** @type {number} */ (instruction[14]);

            var pathLength = lineStringLength(pixelCoordinates, begin, end, 2);
            var textLength = measure(text);
            if (overflow || textLength <= pathLength) {
              /** @type {import("./TextReplay.js").default} */
              var textReplay = /** @type {?} */ (this);
              var textAlign = textReplay.textStates[textKey].textAlign;
              var startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];
              var parts = drawTextOnPath(
                pixelCoordinates, begin, end, 2, text, measure, startM, maxAngle);
              if (parts) {
                var c = (void 0), cc = (void 0), chars = (void 0), label = (void 0), part = (void 0);
                if (strokeKey) {
                  for (c = 0, cc = parts.length; c < cc; ++c) {
                    part = parts[c]; // x, y, anchorX, rotation, chunk
                    chars = /** @type {string} */ (part[4]);
                    label = textReplay.getImage(chars, textKey, '', strokeKey);
                    anchorX = /** @type {number} */ (part[2]) + strokeWidth;
                    anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth - offsetY;
                    this.replayImage_(context,
                      /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label,
                      anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,
                      /** @type {number} */ (part[3]), textScale, false, label.width,
                      defaultPadding, null, null);
                  }
                }
                if (fillKey) {
                  for (c = 0, cc = parts.length; c < cc; ++c) {
                    part = parts[c]; // x, y, anchorX, rotation, chunk
                    chars = /** @type {string} */ (part[4]);
                    label = textReplay.getImage(chars, textKey, fillKey, '');
                    anchorX = /** @type {number} */ (part[2]);
                    anchorY = baseline * label.height - offsetY;
                    this.replayImage_(context,
                      /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label,
                      anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,
                      /** @type {number} */ (part[3]), textScale, false, label.width,
                      defaultPadding, null, null);
                  }
                }
              }
            }
            this.renderDeclutter_(declutterGroup, feature);
            ++i;
            break;
          case Instruction.END_GEOMETRY:
            if (featureCallback !== undefined) {
              feature = /** @type {import("../../Feature.js").default|import("../Feature.js").default} */ (instruction[1]);
              var result = featureCallback(feature);
              if (result) {
                return result;
              }
            }
            ++i;
            break;
          case Instruction.FILL:
            if (batchSize) {
              pendingFill++;
            } else {
              this.fill_(context);
            }
            ++i;
            break;
          case Instruction.MOVE_TO_LINE_TO:
            d = /** @type {number} */ (instruction[1]);
            dd = /** @type {number} */ (instruction[2]);
            x = pixelCoordinates[d];
            y = pixelCoordinates[d + 1];
            roundX = (x + 0.5) | 0;
            roundY = (y + 0.5) | 0;
            if (roundX !== prevX || roundY !== prevY) {
              context.moveTo(x, y);
              prevX = roundX;
              prevY = roundY;
            }
            for (d += 2; d < dd; d += 2) {
              x = pixelCoordinates[d];
              y = pixelCoordinates[d + 1];
              roundX = (x + 0.5) | 0;
              roundY = (y + 0.5) | 0;
              if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                context.lineTo(x, y);
                prevX = roundX;
                prevY = roundY;
              }
            }
            ++i;
            break;
          case Instruction.SET_FILL_STYLE:
            lastFillInstruction = instruction;
            this.alignFill_ = instruction[2];

            if (pendingFill) {
              this.fill_(context);
              pendingFill = 0;
              if (pendingStroke) {
                context.stroke();
                pendingStroke = 0;
              }
            }

            context.fillStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
            ++i;
            break;
          case Instruction.SET_STROKE_STYLE:
            lastStrokeInstruction = instruction;
            if (pendingStroke) {
              context.stroke();
              pendingStroke = 0;
            }
            this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));
            ++i;
            break;
          case Instruction.STROKE:
            if (batchSize) {
              pendingStroke++;
            } else {
              context.stroke();
            }
            ++i;
            break;
          default:
            ++i; // consume the instruction anyway, to avoid an infinite loop
            break;
        }
      }
      if (pendingFill) {
        this.fill_(context);
      }
      if (pendingStroke) {
        context.stroke();
      }
      return undefined;
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *     to skip.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     */
    CanvasReplay.prototype.replay = function replay (context, transform, viewRotation, skippedFeaturesHash, snapToPixel) {
      this.viewRotation_ = viewRotation;
      this.replay_(context, transform,
        skippedFeaturesHash, this.instructions, snapToPixel, undefined, undefined);
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *     to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T=} opt_featureCallback
     *     Feature callback.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
     *     extent.
     * @return {T|undefined} Callback result.
     * @template T
     */
    CanvasReplay.prototype.replayHitDetection = function replayHitDetection (
      context,
      transform,
      viewRotation,
      skippedFeaturesHash,
      opt_featureCallback,
      opt_hitExtent
    ) {
      this.viewRotation_ = viewRotation;
      return this.replay_(context, transform, skippedFeaturesHash,
        this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);
    };

    /**
     * Reverse the hit detection instructions.
     */
    CanvasReplay.prototype.reverseHitDetectionInstructions = function reverseHitDetectionInstructions () {
      var hitDetectionInstructions = this.hitDetectionInstructions;
      // step 1 - reverse array
      hitDetectionInstructions.reverse();
      // step 2 - reverse instructions within geometry blocks
      var i;
      var n = hitDetectionInstructions.length;
      var instruction;
      var type;
      var begin = -1;
      for (i = 0; i < n; ++i) {
        instruction = hitDetectionInstructions[i];
        type = /** @type {CanvasInstruction} */ (instruction[0]);
        if (type == Instruction.END_GEOMETRY) {
          begin = i;
        } else if (type == Instruction.BEGIN_GEOMETRY) {
          instruction[2] = i;
          reverseSubArray(this.hitDetectionInstructions, begin, i);
          begin = -1;
        }
      }
    };

    /**
     * @inheritDoc
     */
    CanvasReplay.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      var state = this.state;
      if (fillStyle) {
        var fillStyleColor = fillStyle.getColor();
        state.fillStyle = asColorLike(fillStyleColor ?
          fillStyleColor : defaultFillStyle);
      } else {
        state.fillStyle = undefined;
      }
      if (strokeStyle) {
        var strokeStyleColor = strokeStyle.getColor();
        state.strokeStyle = asColorLike(strokeStyleColor ?
          strokeStyleColor : defaultStrokeStyle);
        var strokeStyleLineCap = strokeStyle.getLineCap();
        state.lineCap = strokeStyleLineCap !== undefined ?
          strokeStyleLineCap : defaultLineCap;
        var strokeStyleLineDash = strokeStyle.getLineDash();
        state.lineDash = strokeStyleLineDash ?
          strokeStyleLineDash.slice() : defaultLineDash;
        var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        state.lineDashOffset = strokeStyleLineDashOffset ?
          strokeStyleLineDashOffset : defaultLineDashOffset;
        var strokeStyleLineJoin = strokeStyle.getLineJoin();
        state.lineJoin = strokeStyleLineJoin !== undefined ?
          strokeStyleLineJoin : defaultLineJoin;
        var strokeStyleWidth = strokeStyle.getWidth();
        state.lineWidth = strokeStyleWidth !== undefined ?
          strokeStyleWidth : defaultLineWidth;
        var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
        state.miterLimit = strokeStyleMiterLimit !== undefined ?
          strokeStyleMiterLimit : defaultMiterLimit;

        if (state.lineWidth > this.maxLineWidth) {
          this.maxLineWidth = state.lineWidth;
          // invalidate the buffered max extent cache
          this.bufferedMaxExtent_ = null;
        }
      } else {
        state.strokeStyle = undefined;
        state.lineCap = undefined;
        state.lineDash = null;
        state.lineDashOffset = undefined;
        state.lineJoin = undefined;
        state.lineWidth = undefined;
        state.miterLimit = undefined;
      }
    };

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @return {Array<*>} Fill instruction.
     */
    CanvasReplay.prototype.createFill = function createFill (state, geometry) {
      var fillStyle = state.fillStyle;
      /** @type {Array<*>} */
      var fillInstruction$$1 = [Instruction.SET_FILL_STYLE, fillStyle];
      if (typeof fillStyle !== 'string') {
        // Fill is a pattern or gradient - align it!
        fillInstruction$$1.push(true);
      }
      return fillInstruction$$1;
    };

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     */
    CanvasReplay.prototype.applyStroke = function applyStroke (state) {
      this.instructions.push(this.createStroke(state));
    };

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {Array<*>} Stroke instruction.
     */
    CanvasReplay.prototype.createStroke = function createStroke (state) {
      return [
        Instruction.SET_STROKE_STYLE,
        state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap,
        state.lineJoin, state.miterLimit,
        this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio
      ];
    };

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasReplay, import("../canvas.js").FillStrokeState, (import("../../geom/Geometry.js").default|import("../Feature.js").default)):Array<*>} createFill Create fill.
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     */
    CanvasReplay.prototype.updateFillStyle = function updateFillStyle (state, createFill, geometry) {
      var fillStyle = state.fillStyle;
      if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
        if (fillStyle !== undefined) {
          this.instructions.push(createFill.call(this, state, geometry));
        }
        state.currentFillStyle = fillStyle;
      }
    };

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasReplay, import("../canvas.js").FillStrokeState)} applyStroke Apply stroke.
     */
    CanvasReplay.prototype.updateStrokeStyle = function updateStrokeStyle (state, applyStroke) {
      var strokeStyle = state.strokeStyle;
      var lineCap = state.lineCap;
      var lineDash = state.lineDash;
      var lineDashOffset = state.lineDashOffset;
      var lineJoin = state.lineJoin;
      var lineWidth = state.lineWidth;
      var miterLimit = state.miterLimit;
      if (state.currentStrokeStyle != strokeStyle ||
          state.currentLineCap != lineCap ||
          (lineDash != state.currentLineDash && !equals(state.currentLineDash, lineDash)) ||
          state.currentLineDashOffset != lineDashOffset ||
          state.currentLineJoin != lineJoin ||
          state.currentLineWidth != lineWidth ||
          state.currentMiterLimit != miterLimit) {
        if (strokeStyle !== undefined) {
          applyStroke.call(this, state);
        }
        state.currentStrokeStyle = strokeStyle;
        state.currentLineCap = lineCap;
        state.currentLineDash = lineDash;
        state.currentLineDashOffset = lineDashOffset;
        state.currentLineJoin = lineJoin;
        state.currentLineWidth = lineWidth;
        state.currentMiterLimit = miterLimit;
      }
    };

    /**
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
     */
    CanvasReplay.prototype.endGeometry = function endGeometry (geometry, feature) {
      this.beginGeometryInstruction1_[2] = this.instructions.length;
      this.beginGeometryInstruction1_ = null;
      this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
      this.beginGeometryInstruction2_ = null;
      var endGeometryInstruction = [Instruction.END_GEOMETRY, feature];
      this.instructions.push(endGeometryInstruction);
      this.hitDetectionInstructions.push(endGeometryInstruction);
    };

    /**
     * Get the buffered rendering extent.  Rendering will be clipped to the extent
     * provided to the constructor.  To account for symbolizers that may intersect
     * this extent, we calculate a buffered extent (e.g. based on stroke width).
     * @return {import("../../extent.js").Extent} The buffered rendering extent.
     * @protected
     */
    CanvasReplay.prototype.getBufferedMaxExtent = function getBufferedMaxExtent () {
      if (!this.bufferedMaxExtent_) {
        this.bufferedMaxExtent_ = clone$1(this.maxExtent);
        if (this.maxLineWidth > 0) {
          var width = this.resolution * (this.maxLineWidth + 1) / 2;
          buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
        }
      }
      return this.bufferedMaxExtent_;
    };

    return CanvasReplay;
  }(VectorContext));

  /**
   * @module ol/render/canvas/ImageReplay
   */

  var CanvasImageReplay = /*@__PURE__*/(function (CanvasReplay$$1) {
    function CanvasImageReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
      CanvasReplay$$1.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);

      /**
       * @private
       * @type {import("../canvas.js").DeclutterGroup}
       */
      this.declutterGroup_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.hitDetectionImage_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.anchorX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.anchorY_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.height_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.opacity_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.originX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.originY_ = undefined;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.rotateWithView_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.scale_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.width_ = undefined;

    }

    if ( CanvasReplay$$1 ) CanvasImageReplay.__proto__ = CanvasReplay$$1;
    CanvasImageReplay.prototype = Object.create( CanvasReplay$$1 && CanvasReplay$$1.prototype );
    CanvasImageReplay.prototype.constructor = CanvasImageReplay;

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     * @return {number} My end.
     */
    CanvasImageReplay.prototype.drawCoordinates_ = function drawCoordinates_ (flatCoordinates, offset, end, stride) {
      return this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
    };

    /**
     * @inheritDoc
     */
    CanvasImageReplay.prototype.drawPoint = function drawPoint (pointGeometry, feature) {
      if (!this.image_) {
        return;
      }
      this.beginGeometry(pointGeometry, feature);
      var flatCoordinates = pointGeometry.getFlatCoordinates();
      var stride = pointGeometry.getStride();
      var myBegin = this.coordinates.length;
      var myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
      this.instructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_ * this.pixelRatio, this.width_
      ]);
      this.hitDetectionInstructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_, this.width_
      ]);
      this.endGeometry(pointGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasImageReplay.prototype.drawMultiPoint = function drawMultiPoint (multiPointGeometry, feature) {
      if (!this.image_) {
        return;
      }
      this.beginGeometry(multiPointGeometry, feature);
      var flatCoordinates = multiPointGeometry.getFlatCoordinates();
      var stride = multiPointGeometry.getStride();
      var myBegin = this.coordinates.length;
      var myEnd = this.drawCoordinates_(
        flatCoordinates, 0, flatCoordinates.length, stride);
      this.instructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_ * this.pixelRatio, this.width_
      ]);
      this.hitDetectionInstructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_, this.width_
      ]);
      this.endGeometry(multiPointGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasImageReplay.prototype.finish = function finish () {
      this.reverseHitDetectionInstructions();
      // FIXME this doesn't really protect us against further calls to draw*Geometry
      this.anchorX_ = undefined;
      this.anchorY_ = undefined;
      this.hitDetectionImage_ = null;
      this.image_ = null;
      this.height_ = undefined;
      this.scale_ = undefined;
      this.opacity_ = undefined;
      this.originX_ = undefined;
      this.originY_ = undefined;
      this.rotateWithView_ = undefined;
      this.rotation_ = undefined;
      this.width_ = undefined;
    };

    /**
     * @inheritDoc
     */
    CanvasImageReplay.prototype.setImageStyle = function setImageStyle (imageStyle, declutterGroup) {
      var anchor = imageStyle.getAnchor();
      var size$$1 = imageStyle.getSize();
      var hitDetectionImage = imageStyle.getHitDetectionImage(1);
      var image = imageStyle.getImage(1);
      var origin = imageStyle.getOrigin();
      this.anchorX_ = anchor[0];
      this.anchorY_ = anchor[1];
      this.declutterGroup_ = /** @type {import("../canvas.js").DeclutterGroup} */ (declutterGroup);
      this.hitDetectionImage_ = hitDetectionImage;
      this.image_ = image;
      this.height_ = size$$1[1];
      this.opacity_ = imageStyle.getOpacity();
      this.originX_ = origin[0];
      this.originY_ = origin[1];
      this.rotateWithView_ = imageStyle.getRotateWithView();
      this.rotation_ = imageStyle.getRotation();
      this.scale_ = imageStyle.getScale();
      this.width_ = size$$1[0];
    };

    return CanvasImageReplay;
  }(CanvasReplay));

  /**
   * @module ol/render/canvas/LineStringReplay
   */

  var CanvasLineStringReplay = /*@__PURE__*/(function (CanvasReplay$$1) {
    function CanvasLineStringReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
      CanvasReplay$$1.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);
    }

    if ( CanvasReplay$$1 ) CanvasLineStringReplay.__proto__ = CanvasReplay$$1;
    CanvasLineStringReplay.prototype = Object.create( CanvasReplay$$1 && CanvasReplay$$1.prototype );
    CanvasLineStringReplay.prototype.constructor = CanvasLineStringReplay;

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     * @return {number} end.
     */
    CanvasLineStringReplay.prototype.drawFlatCoordinates_ = function drawFlatCoordinates_ (flatCoordinates, offset, end, stride) {
      var myBegin = this.coordinates.length;
      var myEnd = this.appendFlatCoordinates(
        flatCoordinates, offset, end, stride, false, false);
      var moveToLineToInstruction = [Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
      this.instructions.push(moveToLineToInstruction);
      this.hitDetectionInstructions.push(moveToLineToInstruction);
      return end;
    };

    /**
     * @inheritDoc
     */
    CanvasLineStringReplay.prototype.drawLineString = function drawLineString (lineStringGeometry, feature) {
      var state = this.state;
      var strokeStyle = state.strokeStyle;
      var lineWidth = state.lineWidth;
      if (strokeStyle === undefined || lineWidth === undefined) {
        return;
      }
      this.updateStrokeStyle(state, this.applyStroke);
      this.beginGeometry(lineStringGeometry, feature);
      this.hitDetectionInstructions.push([
        Instruction.SET_STROKE_STYLE,
        state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
        state.miterLimit, state.lineDash, state.lineDashOffset
      ], beginPathInstruction);
      var flatCoordinates = lineStringGeometry.getFlatCoordinates();
      var stride = lineStringGeometry.getStride();
      this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
      this.hitDetectionInstructions.push(strokeInstruction);
      this.endGeometry(lineStringGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasLineStringReplay.prototype.drawMultiLineString = function drawMultiLineString (multiLineStringGeometry, feature) {
      var state = this.state;
      var strokeStyle = state.strokeStyle;
      var lineWidth = state.lineWidth;
      if (strokeStyle === undefined || lineWidth === undefined) {
        return;
      }
      this.updateStrokeStyle(state, this.applyStroke);
      this.beginGeometry(multiLineStringGeometry, feature);
      this.hitDetectionInstructions.push([
        Instruction.SET_STROKE_STYLE,
        state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
        state.miterLimit, state.lineDash, state.lineDashOffset
      ], beginPathInstruction);
      var ends = multiLineStringGeometry.getEnds();
      var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
      var stride = multiLineStringGeometry.getStride();
      var offset = 0;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        offset = this.drawFlatCoordinates_(flatCoordinates, offset, ends[i], stride);
      }
      this.hitDetectionInstructions.push(strokeInstruction);
      this.endGeometry(multiLineStringGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasLineStringReplay.prototype.finish = function finish () {
      var state = this.state;
      if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
        this.instructions.push(strokeInstruction);
      }
      this.reverseHitDetectionInstructions();
      this.state = null;
    };

    /**
     * @inheritDoc.
     */
    CanvasLineStringReplay.prototype.applyStroke = function applyStroke (state) {
      if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
        this.instructions.push(strokeInstruction);
        state.lastStroke = this.coordinates.length;
      }
      state.lastStroke = 0;
      CanvasReplay$$1.prototype.applyStroke.call(this, state);
      this.instructions.push(beginPathInstruction);
    };

    return CanvasLineStringReplay;
  }(CanvasReplay));

  /**
   * @module ol/render/canvas/PolygonReplay
   */


  var CanvasPolygonReplay = /*@__PURE__*/(function (CanvasReplay$$1) {
    function CanvasPolygonReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
      CanvasReplay$$1.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);
    }

    if ( CanvasReplay$$1 ) CanvasPolygonReplay.__proto__ = CanvasReplay$$1;
    CanvasPolygonReplay.prototype = Object.create( CanvasReplay$$1 && CanvasReplay$$1.prototype );
    CanvasPolygonReplay.prototype.constructor = CanvasPolygonReplay;

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */
    CanvasPolygonReplay.prototype.drawFlatCoordinatess_ = function drawFlatCoordinatess_ (flatCoordinates, offset, ends, stride) {
      var state = this.state;
      var fill = state.fillStyle !== undefined;
      var stroke = state.strokeStyle != undefined;
      var numEnds = ends.length;
      this.instructions.push(beginPathInstruction);
      this.hitDetectionInstructions.push(beginPathInstruction);
      for (var i = 0; i < numEnds; ++i) {
        var end = ends[i];
        var myBegin = this.coordinates.length;
        var myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
        var moveToLineToInstruction = [Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
        this.instructions.push(moveToLineToInstruction);
        this.hitDetectionInstructions.push(moveToLineToInstruction);
        if (stroke) {
          // Performance optimization: only call closePath() when we have a stroke.
          // Otherwise the ring is closed already (see appendFlatCoordinates above).
          this.instructions.push(closePathInstruction);
          this.hitDetectionInstructions.push(closePathInstruction);
        }
        offset = end;
      }
      if (fill) {
        this.instructions.push(fillInstruction);
        this.hitDetectionInstructions.push(fillInstruction);
      }
      if (stroke) {
        this.instructions.push(strokeInstruction);
        this.hitDetectionInstructions.push(strokeInstruction);
      }
      return offset;
    };

    /**
     * @inheritDoc
     */
    CanvasPolygonReplay.prototype.drawCircle = function drawCircle (circleGeometry, feature) {
      var state = this.state;
      var fillStyle = state.fillStyle;
      var strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_(circleGeometry);
      this.beginGeometry(circleGeometry, feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          asString(defaultFillStyle)
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
          state.miterLimit, state.lineDash, state.lineDashOffset
        ]);
      }
      var flatCoordinates = circleGeometry.getFlatCoordinates();
      var stride = circleGeometry.getStride();
      var myBegin = this.coordinates.length;
      this.appendFlatCoordinates(
        flatCoordinates, 0, flatCoordinates.length, stride, false, false);
      var circleInstruction = [Instruction.CIRCLE, myBegin];
      this.instructions.push(beginPathInstruction, circleInstruction);
      this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);
      this.hitDetectionInstructions.push(fillInstruction);
      if (state.fillStyle !== undefined) {
        this.instructions.push(fillInstruction);
      }
      if (state.strokeStyle !== undefined) {
        this.instructions.push(strokeInstruction);
        this.hitDetectionInstructions.push(strokeInstruction);
      }
      this.endGeometry(circleGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasPolygonReplay.prototype.drawPolygon = function drawPolygon (polygonGeometry, feature) {
      var state = this.state;
      var fillStyle = state.fillStyle;
      var strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_(polygonGeometry);
      this.beginGeometry(polygonGeometry, feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          asString(defaultFillStyle)
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
          state.miterLimit, state.lineDash, state.lineDashOffset
        ]);
      }
      var ends = polygonGeometry.getEnds();
      var flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
      var stride = polygonGeometry.getStride();
      this.drawFlatCoordinatess_(flatCoordinates, 0, ends, stride);
      this.endGeometry(polygonGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasPolygonReplay.prototype.drawMultiPolygon = function drawMultiPolygon (multiPolygonGeometry, feature) {
      var state = this.state;
      var fillStyle = state.fillStyle;
      var strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_(multiPolygonGeometry);
      this.beginGeometry(multiPolygonGeometry, feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          asString(defaultFillStyle)
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
          state.miterLimit, state.lineDash, state.lineDashOffset
        ]);
      }
      var endss = multiPolygonGeometry.getEndss();
      var flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
      var stride = multiPolygonGeometry.getStride();
      var offset = 0;
      for (var i = 0, ii = endss.length; i < ii; ++i) {
        offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
      }
      this.endGeometry(multiPolygonGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasPolygonReplay.prototype.finish = function finish () {
      this.reverseHitDetectionInstructions();
      this.state = null;
      // We want to preserve topology when drawing polygons.  Polygons are
      // simplified using quantization and point elimination. However, we might
      // have received a mix of quantized and non-quantized geometries, so ensure
      // that all are quantized by quantizing all coordinates in the batch.
      var tolerance = this.tolerance;
      if (tolerance !== 0) {
        var coordinates = this.coordinates;
        for (var i = 0, ii = coordinates.length; i < ii; ++i) {
          coordinates[i] = snap(coordinates[i], tolerance);
        }
      }
    };

    /**
     * @private
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     */
    CanvasPolygonReplay.prototype.setFillStrokeStyles_ = function setFillStrokeStyles_ (geometry) {
      var state = this.state;
      var fillStyle = state.fillStyle;
      if (fillStyle !== undefined) {
        this.updateFillStyle(state, this.createFill, geometry);
      }
      if (state.strokeStyle !== undefined) {
        this.updateStrokeStyle(state, this.applyStroke);
      }
    };

    return CanvasPolygonReplay;
  }(CanvasReplay));

  /**
   * @module ol/geom/flat/straightchunk
   */


  /**
   * @param {number} maxAngle Maximum acceptable angle delta between segments.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Array<number>} Start and end of the first suitable chunk of the
   * given `flatCoordinates`.
   */
  function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
    var chunkStart = offset;
    var chunkEnd = offset;
    var chunkM = 0;
    var m = 0;
    var start = offset;
    var acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
    for (i = offset; i < end; i += stride) {
      var x2 = flatCoordinates[i];
      var y2 = flatCoordinates[i + 1];
      if (x1 !== undefined) {
        x23 = x2 - x1;
        y23 = y2 - y1;
        m23 = Math.sqrt(x23 * x23 + y23 * y23);
        if (x12 !== undefined) {
          m += m12;
          acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
          if (acos > maxAngle) {
            if (m > chunkM) {
              chunkM = m;
              chunkStart = start;
              chunkEnd = i;
            }
            m = 0;
            start = i - stride;
          }
        }
        m12 = m23;
        x12 = x23;
        y12 = y23;
      }
      x1 = x2;
      y1 = y2;
    }
    m += m23;
    return m > chunkM ? [start, i] : [chunkStart, chunkEnd];
  }

  /**
   * @module ol/render/canvas/TextReplay
   */

  var CanvasTextReplay = /*@__PURE__*/(function (CanvasReplay$$1) {
    function CanvasTextReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
      CanvasReplay$$1.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);

      /**
       * @private
       * @type {import("../canvas.js").DeclutterGroup}
       */
      this.declutterGroup_;

      /**
       * @private
       * @type {Array<HTMLCanvasElement>}
       */
      this.labels_ = null;

      /**
       * @private
       * @type {string}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number}
       */
      this.textOffsetX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textOffsetY_ = 0;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.textRotateWithView_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.textRotation_ = 0;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.textFillState_ = null;

      /**
       * @type {!Object<string, import("../canvas.js").FillState>}
       */
      this.fillStates = {};

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.textStrokeState_ = null;

      /**
       * @type {!Object<string, import("../canvas.js").StrokeState>}
       */
      this.strokeStates = {};

      /**
       * @private
       * @type {import("../canvas.js").TextState}
       */
      this.textState_ = /** @type {import("../canvas.js").TextState} */ ({});

      /**
       * @type {!Object<string, import("../canvas.js").TextState>}
       */
      this.textStates = {};

      /**
       * @private
       * @type {string}
       */
      this.textKey_ = '';

      /**
       * @private
       * @type {string}
       */
      this.fillKey_ = '';

      /**
       * @private
       * @type {string}
       */
      this.strokeKey_ = '';

      /**
       * @private
       * @type {Object<string, Object<string, number>>}
       */
      this.widths_ = {};

      labelCache.prune();

    }

    if ( CanvasReplay$$1 ) CanvasTextReplay.__proto__ = CanvasReplay$$1;
    CanvasTextReplay.prototype = Object.create( CanvasReplay$$1 && CanvasReplay$$1.prototype );
    CanvasTextReplay.prototype.constructor = CanvasTextReplay;

    /**
     * @inheritDoc
     */
    CanvasTextReplay.prototype.drawText = function drawText (geometry, feature) {
      var fillState = this.textFillState_;
      var strokeState = this.textStrokeState_;
      var textState = this.textState_;
      if (this.text_ === '' || !textState || (!fillState && !strokeState)) {
        return;
      }

      var begin = this.coordinates.length;

      var geometryType = geometry.getType();
      var flatCoordinates = null;
      var end = 2;
      var stride = 2;
      var i, ii;

      if (textState.placement === TextPlacement.LINE) {
        if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {
          return;
        }
        var ends;
        flatCoordinates = geometry.getFlatCoordinates();
        stride = geometry.getStride();
        if (geometryType == GeometryType.LINE_STRING) {
          ends = [flatCoordinates.length];
        } else if (geometryType == GeometryType.MULTI_LINE_STRING) {
          ends = geometry.getEnds();
        } else if (geometryType == GeometryType.POLYGON) {
          ends = geometry.getEnds().slice(0, 1);
        } else if (geometryType == GeometryType.MULTI_POLYGON) {
          var endss = geometry.getEndss();
          ends = [];
          for (i = 0, ii = endss.length; i < ii; ++i) {
            ends.push(endss[i][0]);
          }
        }
        this.beginGeometry(geometry, feature);
        var textAlign = textState.textAlign;
        var flatOffset = 0;
        var flatEnd;
        for (var o = 0, oo = ends.length; o < oo; ++o) {
          if (textAlign == undefined) {
            var range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);
            flatOffset = range[0];
            flatEnd = range[1];
          } else {
            flatEnd = ends[o];
          }
          for (i = flatOffset; i < flatEnd; i += stride) {
            this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);
          }
          end = this.coordinates.length;
          flatOffset = ends[o];
          this.drawChars_(begin, end, this.declutterGroup_);
          begin = end;
        }
        this.endGeometry(geometry, feature);

      } else {
        var label = this.getImage(this.text_, this.textKey_, this.fillKey_, this.strokeKey_);
        var width = label.width / this.pixelRatio;
        switch (geometryType) {
          case GeometryType.POINT:
          case GeometryType.MULTI_POINT:
            flatCoordinates = geometry.getFlatCoordinates();
            end = flatCoordinates.length;
            break;
          case GeometryType.LINE_STRING:
            flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ (geometry).getFlatMidpoint();
            break;
          case GeometryType.CIRCLE:
            flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ (geometry).getCenter();
            break;
          case GeometryType.MULTI_LINE_STRING:
            flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getFlatMidpoints();
            end = flatCoordinates.length;
            break;
          case GeometryType.POLYGON:
            flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ (geometry).getFlatInteriorPoint();
            if (!textState.overflow && flatCoordinates[2] / this.resolution < width) {
              return;
            }
            stride = 3;
            break;
          case GeometryType.MULTI_POLYGON:
            var interiorPoints = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getFlatInteriorPoints();
            flatCoordinates = [];
            for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {
              if (textState.overflow || interiorPoints[i + 2] / this.resolution >= width) {
                flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
              }
            }
            end = flatCoordinates.length;
            if (end == 0) {
              return;
            }
            break;
          default:
        }
        end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);
        if (textState.backgroundFill || textState.backgroundStroke) {
          this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
          if (textState.backgroundFill) {
            this.updateFillStyle(this.state, this.createFill, geometry);
            this.hitDetectionInstructions.push(this.createFill(this.state, geometry));
          }
          if (textState.backgroundStroke) {
            this.updateStrokeStyle(this.state, this.applyStroke);
            this.hitDetectionInstructions.push(this.createStroke(this.state));
          }
        }
        this.beginGeometry(geometry, feature);
        this.drawTextImage_(label, begin, end);
        this.endGeometry(geometry, feature);
      }
    };

    /**
     * @param {string} text Text.
     * @param {string} textKey Text style key.
     * @param {string} fillKey Fill style key.
     * @param {string} strokeKey Stroke style key.
     * @return {HTMLCanvasElement} Image.
     */
    CanvasTextReplay.prototype.getImage = function getImage (text, textKey, fillKey, strokeKey) {
      var label;
      var key = strokeKey + textKey + text + fillKey + this.pixelRatio;

      if (!labelCache.containsKey(key)) {
        var strokeState = strokeKey ? this.strokeStates[strokeKey] || this.textStrokeState_ : null;
        var fillState = fillKey ? this.fillStates[fillKey] || this.textFillState_ : null;
        var textState = this.textStates[textKey] || this.textState_;
        var pixelRatio = this.pixelRatio;
        var scale = textState.scale * pixelRatio;
        var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];
        var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;

        var lines = text.split('\n');
        var numLines = lines.length;
        var widths = [];
        var width = measureTextWidths(textState.font, lines, widths);
        var lineHeight = measureTextHeight(textState.font);
        var height = lineHeight * numLines;
        var renderWidth = (width + strokeWidth);
        var context = createCanvasContext2D(
          Math.ceil(renderWidth * scale),
          Math.ceil((height + strokeWidth) * scale));
        label = context.canvas;
        labelCache.set(key, label);
        if (scale != 1) {
          context.scale(scale, scale);
        }
        context.font = textState.font;
        if (strokeKey) {
          context.strokeStyle = strokeState.strokeStyle;
          context.lineWidth = strokeWidth;
          context.lineCap = /** @type {CanvasLineCap} */ (strokeState.lineCap);
          context.lineJoin = /** @type {CanvasLineJoin} */ (strokeState.lineJoin);
          context.miterLimit = strokeState.miterLimit;
          if (CANVAS_LINE_DASH && strokeState.lineDash.length) {
            context.setLineDash(strokeState.lineDash);
            context.lineDashOffset = strokeState.lineDashOffset;
          }
        }
        if (fillKey) {
          context.fillStyle = fillState.fillStyle;
        }
        context.textBaseline = 'middle';
        context.textAlign = 'center';
        var leftRight = (0.5 - align);
        var x = align * label.width / scale + leftRight * strokeWidth;
        var i;
        if (strokeKey) {
          for (i = 0; i < numLines; ++i) {
            context.strokeText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
          }
        }
        if (fillKey) {
          for (i = 0; i < numLines; ++i) {
            context.fillText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
          }
        }
      }
      return labelCache.get(key);
    };

    /**
     * @private
     * @param {HTMLCanvasElement} label Label.
     * @param {number} begin Begin.
     * @param {number} end End.
     */
    CanvasTextReplay.prototype.drawTextImage_ = function drawTextImage_ (label, begin, end) {
      var textState = this.textState_;
      var strokeState = this.textStrokeState_;
      var pixelRatio = this.pixelRatio;
      var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];
      var baseline = TEXT_ALIGN[textState.textBaseline];
      var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;

      var anchorX = align * label.width / pixelRatio + 2 * (0.5 - align) * strokeWidth;
      var anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;
      this.instructions.push([Instruction.DRAW_IMAGE, begin, end,
        label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio,
        this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_,
        1, label.width,
        textState.padding == defaultPadding ?
          defaultPadding : textState.padding.map(function(p) {
            return p * pixelRatio;
          }),
        !!textState.backgroundFill, !!textState.backgroundStroke
      ]);
      this.hitDetectionInstructions.push([Instruction.DRAW_IMAGE, begin, end,
        label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio,
        this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_,
        1 / pixelRatio, label.width, textState.padding,
        !!textState.backgroundFill, !!textState.backgroundStroke
      ]);
    };

    /**
     * @private
     * @param {number} begin Begin.
     * @param {number} end End.
     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
     */
    CanvasTextReplay.prototype.drawChars_ = function drawChars_ (begin, end, declutterGroup) {
      var strokeState = this.textStrokeState_;
      var textState = this.textState_;
      var fillState = this.textFillState_;

      var strokeKey = this.strokeKey_;
      if (strokeState) {
        if (!(strokeKey in this.strokeStates)) {
          this.strokeStates[strokeKey] = /** @type {import("../canvas.js").StrokeState} */ ({
            strokeStyle: strokeState.strokeStyle,
            lineCap: strokeState.lineCap,
            lineDashOffset: strokeState.lineDashOffset,
            lineWidth: strokeState.lineWidth,
            lineJoin: strokeState.lineJoin,
            miterLimit: strokeState.miterLimit,
            lineDash: strokeState.lineDash
          });
        }
      }
      var textKey = this.textKey_;
      if (!(this.textKey_ in this.textStates)) {
        this.textStates[this.textKey_] = /** @type {import("../canvas.js").TextState} */ ({
          font: textState.font,
          textAlign: textState.textAlign || defaultTextAlign,
          scale: textState.scale
        });
      }
      var fillKey = this.fillKey_;
      if (fillState) {
        if (!(fillKey in this.fillStates)) {
          this.fillStates[fillKey] = /** @type {import("../canvas.js").FillState} */ ({
            fillStyle: fillState.fillStyle
          });
        }
      }

      var pixelRatio = this.pixelRatio;
      var baseline = TEXT_ALIGN[textState.textBaseline];

      var offsetY = this.textOffsetY_ * pixelRatio;
      var text = this.text_;
      var font = textState.font;
      var textScale = textState.scale;
      var strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;
      var widths = this.widths_[font];
      if (!widths) {
        this.widths_[font] = widths = {};
      }
      this.instructions.push([Instruction.DRAW_CHARS,
        begin, end, baseline, declutterGroup,
        textState.overflow, fillKey, textState.maxAngle,
        function(text) {
          var width = widths[text];
          if (!width) {
            width = widths[text] = measureTextWidth(font, text);
          }
          return width * textScale * pixelRatio;
        },
        offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1
      ]);
      this.hitDetectionInstructions.push([Instruction.DRAW_CHARS,
        begin, end, baseline, declutterGroup,
        textState.overflow, fillKey, textState.maxAngle,
        function(text) {
          var width = widths[text];
          if (!width) {
            width = widths[text] = measureTextWidth(font, text);
          }
          return width * textScale;
        },
        offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio
      ]);
    };

    /**
     * @inheritDoc
     */
    CanvasTextReplay.prototype.setTextStyle = function setTextStyle (textStyle, declutterGroup) {
      var textState, fillState, strokeState;
      if (!textStyle) {
        this.text_ = '';
      } else {
        this.declutterGroup_ = /** @type {import("../canvas.js").DeclutterGroup} */ (declutterGroup);

        var textFillStyle = textStyle.getFill();
        if (!textFillStyle) {
          fillState = this.textFillState_ = null;
        } else {
          fillState = this.textFillState_;
          if (!fillState) {
            fillState = this.textFillState_ = /** @type {import("../canvas.js").FillState} */ ({});
          }
          fillState.fillStyle = asColorLike(
            textFillStyle.getColor() || defaultFillStyle);
        }

        var textStrokeStyle = textStyle.getStroke();
        if (!textStrokeStyle) {
          strokeState = this.textStrokeState_ = null;
        } else {
          strokeState = this.textStrokeState_;
          if (!strokeState) {
            strokeState = this.textStrokeState_ = /** @type {import("../canvas.js").StrokeState} */ ({});
          }
          var lineDash = textStrokeStyle.getLineDash();
          var lineDashOffset = textStrokeStyle.getLineDashOffset();
          var lineWidth = textStrokeStyle.getWidth();
          var miterLimit = textStrokeStyle.getMiterLimit();
          strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;
          strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;
          strokeState.lineDashOffset =
              lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;
          strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;
          strokeState.lineWidth =
              lineWidth === undefined ? defaultLineWidth : lineWidth;
          strokeState.miterLimit =
              miterLimit === undefined ? defaultMiterLimit : miterLimit;
          strokeState.strokeStyle = asColorLike(
            textStrokeStyle.getColor() || defaultStrokeStyle);
        }

        textState = this.textState_;
        var font = textStyle.getFont() || defaultFont;
        checkFont(font);
        var textScale = textStyle.getScale();
        textState.overflow = textStyle.getOverflow();
        textState.font = font;
        textState.maxAngle = textStyle.getMaxAngle();
        textState.placement = textStyle.getPlacement();
        textState.textAlign = textStyle.getTextAlign();
        textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;
        textState.backgroundFill = textStyle.getBackgroundFill();
        textState.backgroundStroke = textStyle.getBackgroundStroke();
        textState.padding = textStyle.getPadding() || defaultPadding;
        textState.scale = textScale === undefined ? 1 : textScale;

        var textOffsetX = textStyle.getOffsetX();
        var textOffsetY = textStyle.getOffsetY();
        var textRotateWithView = textStyle.getRotateWithView();
        var textRotation = textStyle.getRotation();
        this.text_ = textStyle.getText() || '';
        this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
        this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
        this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;
        this.textRotation_ = textRotation === undefined ? 0 : textRotation;

        this.strokeKey_ = strokeState ?
          (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) +
          strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth +
          strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' :
          '';
        this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?');
        this.fillKey_ = fillState ?
          (typeof fillState.fillStyle == 'string' ? fillState.fillStyle : ('|' + getUid(fillState.fillStyle))) :
          '';
      }
    };

    return CanvasTextReplay;
  }(CanvasReplay));


  /**
   * @param {string} font Font to use for measuring.
   * @param {Array<string>} lines Lines to measure.
   * @param {Array<number>} widths Array will be populated with the widths of
   * each line.
   * @return {number} Width of the whole text.
   */
  function measureTextWidths(font, lines, widths) {
    var numLines = lines.length;
    var width = 0;
    for (var i = 0; i < numLines; ++i) {
      var currentWidth = measureTextWidth(font, lines[i]);
      width = Math.max(width, currentWidth);
      widths.push(currentWidth);
    }
    return width;
  }

  /**
   * @module ol/render/canvas/ReplayGroup
   */


  /**
   * @type {Object<ReplayType, typeof CanvasReplay>}
   */
  var BATCH_CONSTRUCTORS = {
    'Circle': CanvasPolygonReplay,
    'Default': CanvasReplay,
    'Image': CanvasImageReplay,
    'LineString': CanvasLineStringReplay,
    'Polygon': CanvasPolygonReplay,
    'Text': CanvasTextReplay
  };


  var CanvasReplayGroup = /*@__PURE__*/(function (ReplayGroup$$1) {
    function CanvasReplayGroup(
      tolerance,
      maxExtent,
      resolution,
      pixelRatio,
      overlaps,
      declutterTree,
      opt_renderBuffer
    ) {
      ReplayGroup$$1.call(this);

      /**
       * Declutter tree.
       * @private
       */
      this.declutterTree_ = declutterTree;

      /**
       * @type {import("../canvas.js").DeclutterGroup}
       * @private
       */
      this.declutterGroup_ = null;

      /**
       * @private
       * @type {number}
       */
      this.tolerance_ = tolerance;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent_ = maxExtent;

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = overlaps;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.resolution_ = resolution;

      /**
       * @private
       * @type {number|undefined}
       */
      this.renderBuffer_ = opt_renderBuffer;

      /**
       * @private
       * @type {!Object<string, !Object<ReplayType, CanvasReplay>>}
       */
      this.replaysByZIndex_ = {};

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.hitDetectionContext_ = createCanvasContext2D(1, 1);

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.hitDetectionTransform_ = create();
    }

    if ( ReplayGroup$$1 ) CanvasReplayGroup.__proto__ = ReplayGroup$$1;
    CanvasReplayGroup.prototype = Object.create( ReplayGroup$$1 && ReplayGroup$$1.prototype );
    CanvasReplayGroup.prototype.constructor = CanvasReplayGroup;

    /**
     * @inheritDoc
     */
    CanvasReplayGroup.prototype.addDeclutter = function addDeclutter (group) {
      var declutter = null;
      if (this.declutterTree_) {
        if (group) {
          declutter = this.declutterGroup_;
          /** @type {number} */ (declutter[4])++;
        } else {
          declutter = this.declutterGroup_ = createEmpty();
          declutter.push(1);
        }
      }
      return declutter;
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     */
    CanvasReplayGroup.prototype.clip = function clip (context, transform) {
      var flatClipCoords = this.getClipCoords(transform);
      context.beginPath();
      context.moveTo(flatClipCoords[0], flatClipCoords[1]);
      context.lineTo(flatClipCoords[2], flatClipCoords[3]);
      context.lineTo(flatClipCoords[4], flatClipCoords[5]);
      context.lineTo(flatClipCoords[6], flatClipCoords[7]);
      context.clip();
    };

    /**
     * @param {Array<ReplayType>} replays Replays.
     * @return {boolean} Has replays of the provided types.
     */
    CanvasReplayGroup.prototype.hasReplays = function hasReplays (replays) {
      for (var zIndex in this.replaysByZIndex_) {
        var candidates = this.replaysByZIndex_[zIndex];
        for (var i = 0, ii = replays.length; i < ii; ++i) {
          if (replays[i] in candidates) {
            return true;
          }
        }
      }
      return false;
    };

    /**
     * FIXME empty description for jsdoc
     */
    CanvasReplayGroup.prototype.finish = function finish () {
      for (var zKey in this.replaysByZIndex_) {
        var replays = this.replaysByZIndex_[zKey];
        for (var replayKey in replays) {
          replays[replayKey].finish();
        }
      }
    };

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T} callback Feature callback.
     * @param {Object<string, import("../canvas.js").DeclutterGroup>} declutterReplays Declutter replays.
     * @return {T|undefined} Callback result.
     * @template T
     */
    CanvasReplayGroup.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (
      coordinate,
      resolution,
      rotation,
      hitTolerance,
      skippedFeaturesHash,
      callback,
      declutterReplays
    ) {

      hitTolerance = Math.round(hitTolerance);
      var contextSize = hitTolerance * 2 + 1;
      var transform = compose(this.hitDetectionTransform_,
        hitTolerance + 0.5, hitTolerance + 0.5,
        1 / resolution, -1 / resolution,
        -rotation,
        -coordinate[0], -coordinate[1]);
      var context = this.hitDetectionContext_;

      if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {
        context.canvas.width = contextSize;
        context.canvas.height = contextSize;
      } else {
        context.clearRect(0, 0, contextSize, contextSize);
      }

      /**
       * @type {import("../../extent.js").Extent}
       */
      var hitExtent;
      if (this.renderBuffer_ !== undefined) {
        hitExtent = createEmpty();
        extendCoordinate(hitExtent, coordinate);
        buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
      }

      var mask = getCircleArray(hitTolerance);
      var declutteredFeatures;
      if (this.declutterTree_) {
        declutteredFeatures = this.declutterTree_.all().map(function(entry) {
          return entry.value;
        });
      }

      var replayType;

      /**
       * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
       * @return {?} Callback result.
       */
      function featureCallback(feature) {
        var imageData = context.getImageData(0, 0, contextSize, contextSize).data;
        for (var i = 0; i < contextSize; i++) {
          for (var j = 0; j < contextSize; j++) {
            if (mask[i][j]) {
              if (imageData[(j * contextSize + i) * 4 + 3] > 0) {
                var result = (void 0);
                if (!(declutteredFeatures && (replayType == ReplayType.IMAGE || replayType == ReplayType.TEXT)) ||
                    declutteredFeatures.indexOf(feature) !== -1) {
                  result = callback(feature);
                }
                if (result) {
                  return result;
                } else {
                  context.clearRect(0, 0, contextSize, contextSize);
                  return undefined;
                }
              }
            }
          }
        }
      }

      /** @type {Array<number>} */
      var zs = Object.keys(this.replaysByZIndex_).map(Number);
      zs.sort(numberSafeCompareFunction);

      var i, j, replays, replay, result;
      for (i = zs.length - 1; i >= 0; --i) {
        var zIndexKey = zs[i].toString();
        replays = this.replaysByZIndex_[zIndexKey];
        for (j = ORDER.length - 1; j >= 0; --j) {
          replayType = ORDER[j];
          replay = replays[replayType];
          if (replay !== undefined) {
            if (declutterReplays &&
                (replayType == ReplayType.IMAGE || replayType == ReplayType.TEXT)) {
              var declutter = declutterReplays[zIndexKey];
              if (!declutter) {
                declutterReplays[zIndexKey] = [replay, transform.slice(0)];
              } else {
                declutter.push(replay, transform.slice(0));
              }
            } else {
              result = replay.replayHitDetection(context, transform, rotation,
                skippedFeaturesHash, featureCallback, hitExtent);
              if (result) {
                return result;
              }
            }
          }
        }
      }
      return undefined;
    };

    /**
     * @param {import("../../transform.js").Transform} transform Transform.
     * @return {Array<number>} Clip coordinates.
     */
    CanvasReplayGroup.prototype.getClipCoords = function getClipCoords (transform) {
      var maxExtent = this.maxExtent_;
      var minX = maxExtent[0];
      var minY = maxExtent[1];
      var maxX = maxExtent[2];
      var maxY = maxExtent[3];
      var flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];
      transform2D(
        flatClipCoords, 0, 8, 2, transform, flatClipCoords);
      return flatClipCoords;
    };

    /**
     * @inheritDoc
     */
    CanvasReplayGroup.prototype.getReplay = function getReplay (zIndex, replayType) {
      var zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
      var replays = this.replaysByZIndex_[zIndexKey];
      if (replays === undefined) {
        replays = {};
        this.replaysByZIndex_[zIndexKey] = replays;
      }
      var replay = replays[replayType];
      if (replay === undefined) {
        var Constructor = BATCH_CONSTRUCTORS[replayType];
        replay = new Constructor(this.tolerance_, this.maxExtent_,
          this.resolution_, this.pixelRatio_, this.overlaps_, this.declutterTree_);
        replays[replayType] = replay;
      }
      return replay;
    };

    /**
     * @return {Object<string, Object<ReplayType, CanvasReplay>>} Replays.
     */
    CanvasReplayGroup.prototype.getReplays = function getReplays () {
      return this.replaysByZIndex_;
    };

    /**
     * @inheritDoc
     */
    CanvasReplayGroup.prototype.isEmpty = function isEmpty$1$$1 () {
      return isEmpty$1(this.replaysByZIndex_);
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
     * @param {Array<ReplayType>=} opt_replayTypes Ordered replay types to replay.
     *     Default is {@link module:ol/render/replay~ORDER}
     * @param {Object<string, import("../canvas.js").DeclutterGroup>=} opt_declutterReplays Declutter replays.
     */
    CanvasReplayGroup.prototype.replay = function replay (
      context,
      transform,
      viewRotation,
      skippedFeaturesHash,
      snapToPixel,
      opt_replayTypes,
      opt_declutterReplays
    ) {

      /** @type {Array<number>} */
      var zs = Object.keys(this.replaysByZIndex_).map(Number);
      zs.sort(numberSafeCompareFunction);

      // setup clipping so that the parts of over-simplified geometries are not
      // visible outside the current extent when panning
      context.save();
      this.clip(context, transform);

      var replayTypes = opt_replayTypes ? opt_replayTypes : ORDER;
      var i, ii, j, jj, replays, replay;
      for (i = 0, ii = zs.length; i < ii; ++i) {
        var zIndexKey = zs[i].toString();
        replays = this.replaysByZIndex_[zIndexKey];
        for (j = 0, jj = replayTypes.length; j < jj; ++j) {
          var replayType = replayTypes[j];
          replay = replays[replayType];
          if (replay !== undefined) {
            if (opt_declutterReplays &&
                (replayType == ReplayType.IMAGE || replayType == ReplayType.TEXT)) {
              var declutter = opt_declutterReplays[zIndexKey];
              if (!declutter) {
                opt_declutterReplays[zIndexKey] = [replay, transform.slice(0)];
              } else {
                declutter.push(replay, transform.slice(0));
              }
            } else {
              replay.replay(context, transform, viewRotation, skippedFeaturesHash, snapToPixel);
            }
          }
        }
      }

      context.restore();
    };

    return CanvasReplayGroup;
  }(ReplayGroup));


  /**
   * This cache is used for storing calculated pixel circles for increasing performance.
   * It is a static property to allow each Replaygroup to access it.
   * @type {Object<number, Array<Array<(boolean|undefined)>>>}
   */
  var circleArrayCache = {
    0: [[true]]
  };


  /**
   * This method fills a row in the array from the given coordinate to the
   * middle with `true`.
   * @param {Array<Array<(boolean|undefined)>>} array The array that will be altered.
   * @param {number} x X coordinate.
   * @param {number} y Y coordinate.
   */
  function fillCircleArrayRowToMiddle(array, x, y) {
    var i;
    var radius = Math.floor(array.length / 2);
    if (x >= radius) {
      for (i = radius; i < x; i++) {
        array[i][y] = true;
      }
    } else if (x < radius) {
      for (i = x + 1; i < radius; i++) {
        array[i][y] = true;
      }
    }
  }


  /**
   * This methods creates a circle inside a fitting array. Points inside the
   * circle are marked by true, points on the outside are undefined.
   * It uses the midpoint circle algorithm.
   * A cache is used to increase performance.
   * @param {number} radius Radius.
   * @returns {Array<Array<(boolean|undefined)>>} An array with marked circle points.
   */
  function getCircleArray(radius) {
    if (circleArrayCache[radius] !== undefined) {
      return circleArrayCache[radius];
    }

    var arraySize = radius * 2 + 1;
    var arr = new Array(arraySize);
    for (var i = 0; i < arraySize; i++) {
      arr[i] = new Array(arraySize);
    }

    var x = radius;
    var y = 0;
    var error = 0;

    while (x >= y) {
      fillCircleArrayRowToMiddle(arr, radius + x, radius + y);
      fillCircleArrayRowToMiddle(arr, radius + y, radius + x);
      fillCircleArrayRowToMiddle(arr, radius - y, radius + x);
      fillCircleArrayRowToMiddle(arr, radius - x, radius + y);
      fillCircleArrayRowToMiddle(arr, radius - x, radius - y);
      fillCircleArrayRowToMiddle(arr, radius - y, radius - x);
      fillCircleArrayRowToMiddle(arr, radius + y, radius - x);
      fillCircleArrayRowToMiddle(arr, radius + x, radius - y);

      y++;
      error += 1 + 2 * y;
      if (2 * (error - x) + 1 > 0) {
        x -= 1;
        error += 1 - 2 * x;
      }
    }

    circleArrayCache[radius] = arr;
    return arr;
  }


  /**
   * @param {!Object<string, Array<*>>} declutterReplays Declutter replays.
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} rotation Rotation.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   */
  function replayDeclutter(declutterReplays, context, rotation, snapToPixel) {
    var zs = Object.keys(declutterReplays).map(Number).sort(numberSafeCompareFunction);
    var skippedFeatureUids = {};
    for (var z = 0, zz = zs.length; z < zz; ++z) {
      var replayData = declutterReplays[zs[z].toString()];
      for (var i = 0, ii = replayData.length; i < ii;) {
        var replay = replayData[i++];
        var transform = replayData[i++];
        replay.replay(context, transform, rotation, skippedFeatureUids, snapToPixel);
      }
    }
  }

  /**
   * @module ol/renderer/vector
   */


  /**
   * Tolerance for geometry simplification in device pixels.
   * @type {number}
   */
  var SIMPLIFY_TOLERANCE = 0.5;


  /**
   * @const
   * @type {Object<import("../geom/GeometryType.js").default,
   *                function(import("../render/ReplayGroup.js").default, import("../geom/Geometry.js").default,
   *                         import("../style/Style.js").default, Object)>}
   */
  var GEOMETRY_RENDERERS = {
    'Point': renderPointGeometry,
    'LineString': renderLineStringGeometry,
    'Polygon': renderPolygonGeometry,
    'MultiPoint': renderMultiPointGeometry,
    'MultiLineString': renderMultiLineStringGeometry,
    'MultiPolygon': renderMultiPolygonGeometry,
    'GeometryCollection': renderGeometryCollectionGeometry,
    'Circle': renderCircleGeometry
  };


  /**
   * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.
   * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.
   * @return {number} Order.
   */
  function defaultOrder(feature1, feature2) {
    return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);
  }


  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Squared pixel tolerance.
   */
  function getSquaredTolerance(resolution, pixelRatio) {
    var tolerance = getTolerance(resolution, pixelRatio);
    return tolerance * tolerance;
  }


  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Pixel tolerance.
   */
  function getTolerance(resolution, pixelRatio) {
    return SIMPLIFY_TOLERANCE * resolution / pixelRatio;
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Circle.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderCircleGeometry(replayGroup, geometry, style, feature) {
    var fillStyle = style.getFill();
    var strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
      var circleReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.CIRCLE);
      circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      circleReplay.drawCircle(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {function(this: T, import("../events/Event.js").default)} listener Listener function.
   * @param {T} thisArg Value to use as `this` when executing `listener`.
   * @return {boolean} `true` if style is loading.
   * @template T
   */
  function renderFeature(replayGroup, feature, style, squaredTolerance, listener, thisArg) {
    var loading = false;
    var imageStyle = style.getImage();
    if (imageStyle) {
      var imageState = imageStyle.getImageState();
      if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {
        imageStyle.unlistenImageChange(listener, thisArg);
      } else {
        if (imageState == ImageState.IDLE) {
          imageStyle.load();
        }
        imageState = imageStyle.getImageState();
        imageStyle.listenImageChange(listener, thisArg);
        loading = true;
      }
    }
    renderFeatureInternal(replayGroup, feature, style, squaredTolerance);

    return loading;
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   */
  function renderFeatureInternal(replayGroup, feature, style, squaredTolerance) {
    var geometry = style.getGeometryFunction()(feature);
    if (!geometry) {
      return;
    }
    var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
    var renderer = style.getRenderer();
    if (renderer) {
      renderGeometry(replayGroup, simplifiedGeometry, style, feature);
    } else {
      var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
      geometryRenderer(replayGroup, simplifiedGeometry, style, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderGeometry(replayGroup, geometry, style, feature) {
    if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {
      var geometries = /** @type {import("../geom/GeometryCollection.js").default} */ (geometry).getGeometries();
      for (var i = 0, ii = geometries.length; i < ii; ++i) {
        renderGeometry(replayGroup, geometries[i], style, feature);
      }
      return;
    }
    var replay = replayGroup.getReplay(style.getZIndex(), ReplayType.DEFAULT);
    replay.drawCustom(/** @type {import("../geom/SimpleGeometry.js").default} */ (geometry), feature, style.getRenderer());
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderGeometryCollectionGeometry(replayGroup, geometry, style, feature) {
    var geometries = geometry.getGeometriesArray();
    var i, ii;
    for (i = 0, ii = geometries.length; i < ii; ++i) {
      var geometryRenderer =
          GEOMETRY_RENDERERS[geometries[i].getType()];
      geometryRenderer(replayGroup, geometries[i], style, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderLineStringGeometry(replayGroup, geometry, style, feature) {
    var strokeStyle = style.getStroke();
    if (strokeStyle) {
      var lineStringReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.LINE_STRING);
      lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      lineStringReplay.drawLineString(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderMultiLineStringGeometry(replayGroup, geometry, style, feature) {
    var strokeStyle = style.getStroke();
    if (strokeStyle) {
      var lineStringReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.LINE_STRING);
      lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      lineStringReplay.drawMultiLineString(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderMultiPolygonGeometry(replayGroup, geometry, style, feature) {
    var fillStyle = style.getFill();
    var strokeStyle = style.getStroke();
    if (strokeStyle || fillStyle) {
      var polygonReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.POLYGON);
      polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      polygonReplay.drawMultiPolygon(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderPointGeometry(replayGroup, geometry, style, feature) {
    var imageStyle = style.getImage();
    if (imageStyle) {
      if (imageStyle.getImageState() != ImageState.LOADED) {
        return;
      }
      var imageReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.IMAGE);
      imageReplay.setImageStyle(imageStyle, replayGroup.addDeclutter(false));
      imageReplay.drawPoint(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(!!imageStyle));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderMultiPointGeometry(replayGroup, geometry, style, feature) {
    var imageStyle = style.getImage();
    if (imageStyle) {
      if (imageStyle.getImageState() != ImageState.LOADED) {
        return;
      }
      var imageReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.IMAGE);
      imageReplay.setImageStyle(imageStyle, replayGroup.addDeclutter(false));
      imageReplay.drawMultiPoint(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(!!imageStyle));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderPolygonGeometry(replayGroup, geometry, style, feature) {
    var fillStyle = style.getFill();
    var strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
      var polygonReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.POLYGON);
      polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      polygonReplay.drawPolygon(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @module ol/renderer/canvas/VectorLayer
   */

  /**
   * @classdesc
   * Canvas renderer for vector layers.
   * @api
   */
  var CanvasVectorLayerRenderer = /*@__PURE__*/(function (CanvasLayerRenderer$$1) {
    function CanvasVectorLayerRenderer(vectorLayer) {

      CanvasLayerRenderer$$1.call(this, vectorLayer);

      /**
       * Declutter tree.
       * @private
       */
      this.declutterTree_ = vectorLayer.getDeclutter() ? rbush_1(9, undefined) : null;

      /**
       * @private
       * @type {boolean}
       */
      this.dirty_ = false;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.renderedResolution_ = NaN;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedExtent_ = createEmpty();

      /**
       * @private
       * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
       */
      this.renderedRenderOrder_ = null;

      /**
       * @private
       * @type {import("../../render/canvas/ReplayGroup.js").default}
       */
      this.replayGroup_ = null;

      /**
       * A new replay group had to be created by `prepareFrame()`
       * @type {boolean}
       */
      this.replayGroupChanged = true;

      /**
       * @type {CanvasRenderingContext2D}
       */
      this.context = createCanvasContext2D();

      listen(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);

    }

    if ( CanvasLayerRenderer$$1 ) CanvasVectorLayerRenderer.__proto__ = CanvasLayerRenderer$$1;
    CanvasVectorLayerRenderer.prototype = Object.create( CanvasLayerRenderer$$1 && CanvasLayerRenderer$$1.prototype );
    CanvasVectorLayerRenderer.prototype.constructor = CanvasVectorLayerRenderer;

    /**
     * @inheritDoc
     */
    CanvasVectorLayerRenderer.prototype.disposeInternal = function disposeInternal () {
      unlisten(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);
      CanvasLayerRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     */
    CanvasVectorLayerRenderer.prototype.compose = function compose (context, frameState, layerState) {
      var extent$$1 = frameState.extent;
      var pixelRatio = frameState.pixelRatio;
      var skippedFeatureUids = layerState.managed ?
        frameState.skippedFeatureUids : {};
      var viewState = frameState.viewState;
      var projection = viewState.projection;
      var rotation = viewState.rotation;
      var projectionExtent = projection.getExtent();
      var vectorSource = /** @type {import("../../source/Vector.js").default} */ (this.getLayer().getSource());

      var transform = this.getTransform(frameState, 0);

      // clipped rendering if layer extent is set
      var clipExtent = layerState.extent;
      var clipped = clipExtent !== undefined;
      if (clipped) {
        this.clip(context, frameState, /** @type {import("../../extent.js").Extent} */ (clipExtent));
      }
      var replayGroup = this.replayGroup_;
      if (replayGroup && !replayGroup.isEmpty()) {
        if (this.declutterTree_) {
          this.declutterTree_.clear();
        }
        var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
        var drawOffsetX = 0;
        var drawOffsetY = 0;
        var replayContext;
        var transparentLayer = layerState.opacity !== 1;
        var hasRenderListeners = layer.hasListener(RenderEventType.RENDER);
        if (transparentLayer || hasRenderListeners) {
          var drawWidth = context.canvas.width;
          var drawHeight = context.canvas.height;
          if (rotation) {
            var drawSize = Math.round(Math.sqrt(drawWidth * drawWidth + drawHeight * drawHeight));
            drawOffsetX = (drawSize - drawWidth) / 2;
            drawOffsetY = (drawSize - drawHeight) / 2;
            drawWidth = drawHeight = drawSize;
          }
          // resize and clear
          this.context.canvas.width = drawWidth;
          this.context.canvas.height = drawHeight;
          replayContext = this.context;
        } else {
          replayContext = context;
        }

        var alpha = replayContext.globalAlpha;
        if (!transparentLayer) {
          // for performance reasons, context.save / context.restore is not used
          // to save and restore the transformation matrix and the opacity.
          // see http://jsperf.com/context-save-restore-versus-variable
          replayContext.globalAlpha = layerState.opacity;
        }

        if (replayContext != context) {
          replayContext.translate(drawOffsetX, drawOffsetY);
        }

        var viewHints = frameState.viewHints;
        var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
        var width = frameState.size[0] * pixelRatio;
        var height = frameState.size[1] * pixelRatio;
        rotateAtOffset(replayContext, -rotation,
          width / 2, height / 2);
        replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);
        if (vectorSource.getWrapX() && projection.canWrapX() &&
            !containsExtent(projectionExtent, extent$$1)) {
          var startX = extent$$1[0];
          var worldWidth = getWidth(projectionExtent);
          var world = 0;
          var offsetX;
          while (startX < projectionExtent[0]) {
            --world;
            offsetX = worldWidth * world;
            transform = this.getTransform(frameState, offsetX);
            replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);
            startX += worldWidth;
          }
          world = 0;
          startX = extent$$1[2];
          while (startX > projectionExtent[2]) {
            ++world;
            offsetX = worldWidth * world;
            transform = this.getTransform(frameState, offsetX);
            replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);
            startX -= worldWidth;
          }
        }
        rotateAtOffset(replayContext, rotation,
          width / 2, height / 2);

        if (hasRenderListeners) {
          this.dispatchRenderEvent(replayContext, frameState, transform);
        }
        if (replayContext != context) {
          if (transparentLayer) {
            var mainContextAlpha = context.globalAlpha;
            context.globalAlpha = layerState.opacity;
            context.drawImage(replayContext.canvas, -drawOffsetX, -drawOffsetY);
            context.globalAlpha = mainContextAlpha;
          } else {
            context.drawImage(replayContext.canvas, -drawOffsetX, -drawOffsetY);
          }
          replayContext.translate(-drawOffsetX, -drawOffsetY);
        }

        if (!transparentLayer) {
          replayContext.globalAlpha = alpha;
        }
      }

      if (clipped) {
        context.restore();
      }
    };

    /**
     * @inheritDoc
     */
    CanvasVectorLayerRenderer.prototype.composeFrame = function composeFrame (frameState, layerState, context) {
      var transform = this.getTransform(frameState, 0);
      this.preCompose(context, frameState, transform);
      this.compose(context, frameState, layerState);
      this.postCompose(context, frameState, layerState, transform);
    };

    /**
     * @inheritDoc
     */
    CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {
      if (!this.replayGroup_) {
        return undefined;
      } else {
        var resolution = frameState.viewState.resolution;
        var rotation = frameState.viewState.rotation;
        var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
        /** @type {!Object<string, boolean>} */
        var features = {};
        var result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},
          /**
           * @param {import("../../Feature.js").FeatureLike} feature Feature.
           * @return {?} Callback result.
           */
          function(feature) {
            var key = getUid(feature);
            if (!(key in features)) {
              features[key] = true;
              return callback.call(thisArg, feature, layer);
            }
          }, null);
        return result;
      }
    };

    /**
     * @param {import("../../events/Event.js").default} event Event.
     */
    CanvasVectorLayerRenderer.prototype.handleFontsChanged_ = function handleFontsChanged_ (event) {
      var layer = this.getLayer();
      if (layer.getVisible() && this.replayGroup_) {
        layer.changed();
      }
    };

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function handleStyleImageChange_ (event) {
      this.renderIfReadyAndVisible();
    };

    /**
     * @inheritDoc
     */
    CanvasVectorLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {
      var vectorLayer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var vectorSource = /** @type {import("../../source/Vector.js").default} */ (vectorLayer.getSource());

      var animating = frameState.viewHints[ViewHint.ANIMATING];
      var interacting = frameState.viewHints[ViewHint.INTERACTING];
      var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
      var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();

      if (!this.dirty_ && (!updateWhileAnimating && animating) ||
          (!updateWhileInteracting && interacting)) {
        return true;
      }

      var frameStateExtent = frameState.extent;
      var viewState = frameState.viewState;
      var projection = viewState.projection;
      var resolution = viewState.resolution;
      var pixelRatio = frameState.pixelRatio;
      var vectorLayerRevision = vectorLayer.getRevision();
      var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
      var vectorLayerRenderOrder = vectorLayer.getRenderOrder();

      if (vectorLayerRenderOrder === undefined) {
        vectorLayerRenderOrder = defaultOrder;
      }

      var extent$$1 = buffer(frameStateExtent,
        vectorLayerRenderBuffer * resolution);
      var projectionExtent = viewState.projection.getExtent();

      if (vectorSource.getWrapX() && viewState.projection.canWrapX() &&
          !containsExtent(projectionExtent, frameState.extent)) {
        // For the replay group, we need an extent that intersects the real world
        // (-180° to +180°). To support geometries in a coordinate range from -540°
        // to +540°, we add at least 1 world width on each side of the projection
        // extent. If the viewport is wider than the world, we need to add half of
        // the viewport width to make sure we cover the whole viewport.
        var worldWidth = getWidth(projectionExtent);
        var gutter = Math.max(getWidth(extent$$1) / 2, worldWidth);
        extent$$1[0] = projectionExtent[0] - gutter;
        extent$$1[2] = projectionExtent[2] + gutter;
      }

      if (!this.dirty_ &&
          this.renderedResolution_ == resolution &&
          this.renderedRevision_ == vectorLayerRevision &&
          this.renderedRenderOrder_ == vectorLayerRenderOrder &&
          containsExtent(this.renderedExtent_, extent$$1)) {
        this.replayGroupChanged = false;
        return true;
      }

      this.replayGroup_ = null;

      this.dirty_ = false;

      var replayGroup = new CanvasReplayGroup(
        getTolerance(resolution, pixelRatio), extent$$1, resolution,
        pixelRatio, vectorSource.getOverlaps(), this.declutterTree_, vectorLayer.getRenderBuffer());
      vectorSource.loadFeatures(extent$$1, resolution, projection);
      /**
       * @param {import("../../Feature.js").default} feature Feature.
       * @this {CanvasVectorLayerRenderer}
       */
      var render = function(feature) {
        var styles;
        var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
        if (styleFunction) {
          styles = styleFunction(feature, resolution);
        }
        if (styles) {
          var dirty = this.renderFeature(
            feature, resolution, pixelRatio, styles, replayGroup);
          this.dirty_ = this.dirty_ || dirty;
        }
      }.bind(this);
      if (vectorLayerRenderOrder) {
        /** @type {Array<import("../../Feature.js").default>} */
        var features = [];
        vectorSource.forEachFeatureInExtent(extent$$1,
          /**
           * @param {import("../../Feature.js").default} feature Feature.
           */
          function(feature) {
            features.push(feature);
          });
        features.sort(vectorLayerRenderOrder);
        for (var i = 0, ii = features.length; i < ii; ++i) {
          render(features[i]);
        }
      } else {
        vectorSource.forEachFeatureInExtent(extent$$1, render);
      }
      replayGroup.finish();

      this.renderedResolution_ = resolution;
      this.renderedRevision_ = vectorLayerRevision;
      this.renderedRenderOrder_ = vectorLayerRenderOrder;
      this.renderedExtent_ = extent$$1;
      this.replayGroup_ = replayGroup;

      this.replayGroupChanged = true;
      return true;
    };

    /**
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
     * @param {import("../../render/canvas/ReplayGroup.js").default} replayGroup Replay group.
     * @return {boolean} `true` if an image is loading.
     */
    CanvasVectorLayerRenderer.prototype.renderFeature = function renderFeature$1 (feature, resolution, pixelRatio, styles, replayGroup) {
      if (!styles) {
        return false;
      }
      var loading = false;
      if (Array.isArray(styles)) {
        for (var i = 0, ii = styles.length; i < ii; ++i) {
          loading = renderFeature(
            replayGroup, feature, styles[i],
            getSquaredTolerance(resolution, pixelRatio),
            this.handleStyleImageChange_, this) || loading;
        }
      } else {
        loading = renderFeature(
          replayGroup, feature, styles,
          getSquaredTolerance(resolution, pixelRatio),
          this.handleStyleImageChange_, this);
      }
      return loading;
    };

    return CanvasVectorLayerRenderer;
  }(CanvasLayerRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  CanvasVectorLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.VECTOR;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {CanvasVectorLayerRenderer} The layer renderer.
   */
  CanvasVectorLayerRenderer['create'] = function(mapRenderer, layer) {
    return new CanvasVectorLayerRenderer(/** @type {import("../../layer/Vector.js").default} */ (layer));
  };

  /**
   * @module ol/layer/VectorTileRenderType
   */

  /**
   * @enum {string}
   * Render mode for vector tiles:
   *  * `'image'`: Vector tiles are rendered as images. Great performance, but
   *    point symbols and texts are always rotated with the view and pixels are
   *    scaled during zoom animations.
   *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels
   *    are scaled during zoom animations. Point symbols and texts are accurately
   *    rendered as vectors and can stay upright on rotated views.
   *  * `'vector'`: Vector tiles are rendered as vectors. Most accurate rendering
   *    even during animations, but slower performance than the other options.
   * @api
   */
  var VectorTileRenderType = {
    IMAGE: 'image',
    HYBRID: 'hybrid',
    VECTOR: 'vector'
  };

  /**
   * @module ol/renderer/canvas/VectorTileLayer
   */


  /**
   * @type {!Object<string, Array<import("../../render/ReplayType.js").default>>}
   */
  var IMAGE_REPLAYS = {
    'image': [ReplayType.POLYGON, ReplayType.CIRCLE,
      ReplayType.LINE_STRING, ReplayType.IMAGE, ReplayType.TEXT],
    'hybrid': [ReplayType.POLYGON, ReplayType.LINE_STRING]
  };


  /**
   * @type {!Object<string, Array<import("../../render/ReplayType.js").default>>}
   */
  var VECTOR_REPLAYS = {
    'image': [ReplayType.DEFAULT],
    'hybrid': [ReplayType.IMAGE, ReplayType.TEXT, ReplayType.DEFAULT],
    'vector': ORDER
  };


  /**
   * @classdesc
   * Canvas renderer for vector tile layers.
   * @api
   */
  var CanvasVectorTileLayerRenderer = /*@__PURE__*/(function (CanvasTileLayerRenderer$$1) {
    function CanvasVectorTileLayerRenderer(layer) {

      CanvasTileLayerRenderer$$1.call(this, layer, true);

      /**
       * Declutter tree.
       * @private
       */
      this.declutterTree_ = layer.getDeclutter() ? rbush_1(9, undefined) : null;

      /**
       * @private
       * @type {boolean}
       */
      this.dirty_ = false;

      /**
       * @private
       * @type {number}
       */
      this.renderedLayerRevision_;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.tmpTransform_ = create();

      var renderMode = layer.getRenderMode();

      // Use lower resolution for pure vector rendering. Closest resolution otherwise.
      this.zDirection = renderMode === VectorTileRenderType.VECTOR ? 1 : 0;

      if (renderMode !== VectorTileRenderType.VECTOR) {
        this.context = createCanvasContext2D();
      }


      listen(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);

    }

    if ( CanvasTileLayerRenderer$$1 ) CanvasVectorTileLayerRenderer.__proto__ = CanvasTileLayerRenderer$$1;
    CanvasVectorTileLayerRenderer.prototype = Object.create( CanvasTileLayerRenderer$$1 && CanvasTileLayerRenderer$$1.prototype );
    CanvasVectorTileLayerRenderer.prototype.constructor = CanvasVectorTileLayerRenderer;

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.disposeInternal = function disposeInternal () {
      unlisten(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);
      CanvasTileLayerRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.getTile = function getTile (z, x, y, pixelRatio, projection) {
      var tile = CanvasTileLayerRenderer$$1.prototype.getTile.call(this, z, x, y, pixelRatio, projection);
      if (tile.getState() === TileState.LOADED) {
        this.createReplayGroup_(/** @type {import("../../VectorImageTile.js").default} */ (tile), pixelRatio, projection);
        if (this.context) {
          this.renderTileImage_(/** @type {import("../../VectorImageTile.js").default} */ (tile), pixelRatio, projection);
        }
      }
      return tile;
    };

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.getTileImage = function getTileImage (tile) {
      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      return /** @type {import("../../VectorImageTile.js").default} */ (tile).getImage(tileLayer);
    };

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {
      var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var layerRevision = layer.getRevision();
      if (this.renderedLayerRevision_ != layerRevision) {
        this.renderedTiles.length = 0;
      }
      this.renderedLayerRevision_ = layerRevision;
      return CanvasTileLayerRenderer$$1.prototype.prepareFrame.call(this, frameState, layerState);
    };

    /**
     * @param {import("../../VectorImageTile.js").default} tile Tile.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @private
     */
    CanvasVectorTileLayerRenderer.prototype.createReplayGroup_ = function createReplayGroup_ (tile, pixelRatio, projection) {
      var this$1 = this;

      var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var revision = layer.getRevision();
      var renderOrder = /** @type {import("../../render.js").OrderFunction} */ (layer.getRenderOrder()) || null;

      var replayState = tile.getReplayState(layer);
      if (!replayState.dirty && replayState.renderedRevision == revision &&
          replayState.renderedRenderOrder == renderOrder) {
        return;
      }

      var source = /** @type {import("../../source/VectorTile.js").default} */ (layer.getSource());
      var sourceTileGrid = source.getTileGrid();
      var tileGrid = source.getTileGridForProjection(projection);
      var resolution = tileGrid.getResolution(tile.tileCoord[0]);
      var tileExtent = tile.extent;

      var loop = function ( t, tt ) {
        var sourceTile = tile.getTile(tile.tileKeys[t]);
        if (sourceTile.getState() != TileState.LOADED) {
          return;
        }

        var sourceTileCoord = sourceTile.tileCoord;
        var sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
        var sharedExtent = getIntersection(tileExtent, sourceTileExtent);
        var bufferedExtent = equals$1(sourceTileExtent, sharedExtent) ? null :
          buffer(sharedExtent, layer.getRenderBuffer() * resolution, this$1.tmpExtent);
        var tileProjection = sourceTile.getProjection();
        var reproject = false;
        if (!equivalent(projection, tileProjection)) {
          reproject = true;
          sourceTile.setProjection(projection);
        }
        replayState.dirty = false;
        var replayGroup = new CanvasReplayGroup(0, sharedExtent, resolution,
          pixelRatio, source.getOverlaps(), this$1.declutterTree_, layer.getRenderBuffer());
        var squaredTolerance = getSquaredTolerance(resolution, pixelRatio);

        /**
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @this {CanvasVectorTileLayerRenderer}
         */
        var render = function(feature) {
          var styles;
          var styleFunction = feature.getStyleFunction() || layer.getStyleFunction();
          if (styleFunction) {
            styles = styleFunction(feature, resolution);
          }
          if (styles) {
            var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup);
            this.dirty_ = this.dirty_ || dirty;
            replayState.dirty = replayState.dirty || dirty;
          }
        };

        var features = sourceTile.getFeatures();
        if (renderOrder && renderOrder !== replayState.renderedRenderOrder) {
          features.sort(renderOrder);
        }
        for (var i = 0, ii = features.length; i < ii; ++i) {
          var feature = features[i];
          if (reproject) {
            if (tileProjection.getUnits() == Units$1.TILE_PIXELS) {
              // projected tile extent
              tileProjection.setWorldExtent(sourceTileExtent);
              // tile extent in tile pixel space
              tileProjection.setExtent(sourceTile.getExtent());
            }
            feature.getGeometry().transform(tileProjection, projection);
          }
          if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {
            render.call(this$1, feature);
          }
        }
        replayGroup.finish();
        sourceTile.setReplayGroup(layer, tile.tileCoord.toString(), replayGroup);
      };

      for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) loop( t, tt );
      replayState.renderedRevision = revision;
      replayState.renderedRenderOrder = renderOrder;
    };

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {
      var resolution = frameState.viewState.resolution;
      var rotation = frameState.viewState.rotation;
      hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;
      var layer = this.getLayer();
      /** @type {!Object<string, boolean>} */
      var features = {};

      var renderedTiles = /** @type {Array<import("../../VectorImageTile.js").default>} */ (this.renderedTiles);

      var bufferedExtent, found;
      var i, ii;
      for (i = 0, ii = renderedTiles.length; i < ii; ++i) {
        var tile = renderedTiles[i];
        bufferedExtent = buffer(tile.extent, hitTolerance * resolution, bufferedExtent);
        if (!containsCoordinate(bufferedExtent, coordinate)) {
          continue;
        }
        for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {
          var sourceTile = tile.getTile(tile.tileKeys[t]);
          if (sourceTile.getState() != TileState.LOADED) {
            continue;
          }
          var replayGroup = /** @type {CanvasReplayGroup} */ (sourceTile.getReplayGroup(layer,
            tile.tileCoord.toString()));
          found = found || replayGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},
            /**
             * @param {import("../../Feature.js").FeatureLike} feature Feature.
             * @return {?} Callback result.
             */
            function(feature) {
              var key = getUid(feature);
              if (!(key in features)) {
                features[key] = true;
                return callback.call(thisArg, feature, layer);
              }
            }, null);
        }
      }
      return found;
    };

    /**
     * @param {import("../../VectorTile.js").default} tile Tile.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {import("../../transform.js").Transform} transform Transform.
     * @private
     */
    CanvasVectorTileLayerRenderer.prototype.getReplayTransform_ = function getReplayTransform_ (tile, frameState) {
      var layer = this.getLayer();
      var source = /** @type {import("../../source/VectorTile.js").default} */ (layer.getSource());
      var tileGrid = source.getTileGrid();
      var tileCoord = tile.tileCoord;
      var tileResolution = tileGrid.getResolution(tileCoord[0]);
      var viewState = frameState.viewState;
      var pixelRatio = frameState.pixelRatio;
      var renderResolution = viewState.resolution / pixelRatio;
      var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
      var center = viewState.center;
      var origin = getTopLeft(tileExtent);
      var size$$1 = frameState.size;
      var offsetX = Math.round(pixelRatio * size$$1[0] / 2);
      var offsetY = Math.round(pixelRatio * size$$1[1] / 2);
      return compose(this.tmpTransform_,
        offsetX, offsetY,
        tileResolution / renderResolution, tileResolution / renderResolution,
        viewState.rotation,
        (origin[0] - center[0]) / tileResolution,
        (center[1] - origin[1]) / tileResolution);
    };

    /**
     * @param {import("../../events/Event.js").default} event Event.
     */
    CanvasVectorTileLayerRenderer.prototype.handleFontsChanged_ = function handleFontsChanged_ (event) {
      var layer = this.getLayer();
      if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {
        layer.changed();
      }
    };

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    CanvasVectorTileLayerRenderer.prototype.handleStyleImageChange_ = function handleStyleImageChange_ (event) {
      this.renderIfReadyAndVisible();
    };

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.postCompose = function postCompose (context, frameState, layerState) {
      var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var renderMode = layer.getRenderMode();
      if (renderMode != VectorTileRenderType.IMAGE) {
        var declutterReplays = layer.getDeclutter() ? {} : null;
        var source = /** @type {import("../../source/VectorTile.js").default} */ (layer.getSource());
        var replayTypes = VECTOR_REPLAYS[renderMode];
        var pixelRatio = frameState.pixelRatio;
        var rotation = frameState.viewState.rotation;
        var size$$1 = frameState.size;
        var offsetX, offsetY;
        if (rotation) {
          offsetX = Math.round(pixelRatio * size$$1[0] / 2);
          offsetY = Math.round(pixelRatio * size$$1[1] / 2);
          rotateAtOffset(context, -rotation, offsetX, offsetY);
        }
        if (declutterReplays) {
          this.declutterTree_.clear();
        }
        var viewHints = frameState.viewHints;
        var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
        var tiles = this.renderedTiles;
        var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
        var clips = [];
        var zs = [];
        for (var i = tiles.length - 1; i >= 0; --i) {
          var tile = /** @type {import("../../VectorImageTile.js").default} */ (tiles[i]);
          if (tile.getState() == TileState.ABORT) {
            continue;
          }
          var tileCoord = tile.tileCoord;
          var worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tile.extent[0];
          var transform$$1 = undefined;
          for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {
            var sourceTile = tile.getTile(tile.tileKeys[t]);
            if (sourceTile.getState() != TileState.LOADED) {
              continue;
            }
            var replayGroup = /** @type {CanvasReplayGroup} */ (sourceTile.getReplayGroup(layer, tileCoord.toString()));
            if (!replayGroup || !replayGroup.hasReplays(replayTypes)) {
              // sourceTile was not yet loaded when this.createReplayGroup_() was
              // called, or it has no replays of the types we want to render
              continue;
            }
            if (!transform$$1) {
              transform$$1 = this.getTransform(frameState, worldOffset);
            }
            var currentZ = sourceTile.tileCoord[0];
            var currentClip = replayGroup.getClipCoords(transform$$1);
            context.save();
            context.globalAlpha = layerState.opacity;
            // Create a clip mask for regions in this low resolution tile that are
            // already filled by a higher resolution tile
            for (var j = 0, jj = clips.length; j < jj; ++j) {
              var clip = clips[j];
              if (currentZ < zs[j]) {
                context.beginPath();
                // counter-clockwise (outer ring) for current tile
                context.moveTo(currentClip[0], currentClip[1]);
                context.lineTo(currentClip[2], currentClip[3]);
                context.lineTo(currentClip[4], currentClip[5]);
                context.lineTo(currentClip[6], currentClip[7]);
                // clockwise (inner ring) for higher resolution tile
                context.moveTo(clip[6], clip[7]);
                context.lineTo(clip[4], clip[5]);
                context.lineTo(clip[2], clip[3]);
                context.lineTo(clip[0], clip[1]);
                context.clip();
              }
            }
            replayGroup.replay(context, transform$$1, rotation, {}, snapToPixel, replayTypes, declutterReplays);
            context.restore();
            clips.push(currentClip);
            zs.push(currentZ);
          }
        }
        if (declutterReplays) {
          replayDeclutter(declutterReplays, context, rotation, snapToPixel);
        }
        if (rotation) {
          rotateAtOffset(context, rotation,
            /** @type {number} */ (offsetX), /** @type {number} */ (offsetY));
        }
      }
      CanvasTileLayerRenderer$$1.prototype.postCompose.call(this, context, frameState, layerState);
    };

    /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
     * @param {import("../../render/canvas/ReplayGroup.js").default} replayGroup Replay group.
     * @return {boolean} `true` if an image is loading.
     */
    CanvasVectorTileLayerRenderer.prototype.renderFeature = function renderFeature$1 (feature, squaredTolerance, styles, replayGroup) {
      if (!styles) {
        return false;
      }
      var loading = false;
      if (Array.isArray(styles)) {
        for (var i = 0, ii = styles.length; i < ii; ++i) {
          loading = renderFeature(
            replayGroup, feature, styles[i], squaredTolerance,
            this.handleStyleImageChange_, this) || loading;
        }
      } else {
        loading = renderFeature(
          replayGroup, feature, styles, squaredTolerance,
          this.handleStyleImageChange_, this);
      }
      return loading;
    };

    /**
     * @param {import("../../VectorImageTile.js").default} tile Tile.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @private
     */
    CanvasVectorTileLayerRenderer.prototype.renderTileImage_ = function renderTileImage_ (tile, pixelRatio, projection) {
      var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var replayState = tile.getReplayState(layer);
      var revision = layer.getRevision();
      var replays = IMAGE_REPLAYS[layer.getRenderMode()];
      if (replays && replayState.renderedTileRevision !== revision) {
        replayState.renderedTileRevision = revision;
        var tileCoord = tile.wrappedTileCoord;
        var z = tileCoord[0];
        var source = /** @type {import("../../source/VectorTile.js").default} */ (layer.getSource());
        var tileGrid = source.getTileGridForProjection(projection);
        var resolution = tileGrid.getResolution(z);
        var context = tile.getContext(layer);
        var size$$1 = source.getTilePixelSize(z, pixelRatio, projection);
        context.canvas.width = size$$1[0];
        context.canvas.height = size$$1[1];
        var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
        for (var i = 0, ii = tile.tileKeys.length; i < ii; ++i) {
          var sourceTile = tile.getTile(tile.tileKeys[i]);
          if (sourceTile.getState() != TileState.LOADED) {
            continue;
          }
          var pixelScale = pixelRatio / resolution;
          var transform$$1 = reset(this.tmpTransform_);
          scale$1(transform$$1, pixelScale, -pixelScale);
          translate$1(transform$$1, -tileExtent[0], -tileExtent[3]);
          var replayGroup = /** @type {CanvasReplayGroup} */ (sourceTile.getReplayGroup(layer,
            tile.tileCoord.toString()));
          replayGroup.replay(context, transform$$1, 0, {}, true, replays);
        }
      }
    };

    return CanvasVectorTileLayerRenderer;
  }(CanvasTileLayerRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  CanvasVectorTileLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.VECTOR_TILE;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {CanvasVectorTileLayerRenderer} The layer renderer.
   */
  CanvasVectorTileLayerRenderer['create'] = function(mapRenderer, layer) {
    return new CanvasVectorTileLayerRenderer(/** @type {import("../../layer/VectorTile.js").default} */ (layer));
  };

  /**
   * @module ol/Map
   */

  /**
   * @classdesc
   * The map is the core component of OpenLayers. For a map to render, a view,
   * one or more layers, and a target container are needed:
   *
   *     import Map from 'ol/Map';
   *     import View from 'ol/View';
   *     import TileLayer from 'ol/layer/Tile';
   *     import OSM from 'ol/source/OSM';
   *
   *     var map = new Map({
   *       view: new View({
   *         center: [0, 0],
   *         zoom: 1
   *       }),
   *       layers: [
   *         new TileLayer({
   *           source: new OSM()
   *         })
   *       ],
   *       target: 'map'
   *     });
   *
   * The above snippet creates a map using a {@link module:ol/layer/Tile} to
   * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
   * element with the id `map`.
   *
   * The constructor places a viewport container (with CSS class name
   * `ol-viewport`) in the target element (see `getViewport()`), and then two
   * further elements within the viewport: one with CSS class name
   * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
   * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
   * option of {@link module:ol/Overlay~Overlay} for the difference). The map
   * itself is placed in a further element within the viewport.
   *
   * Layers are stored as a {@link module:ol/Collection~Collection} in
   * layerGroups. A top-level group is provided by the library. This is what is
   * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
   * options are added to this group, and `addLayer` and `removeLayer` change the
   * layer collection in the group. `getLayers` is a convenience function for
   * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}
   * is a subclass of {@link module:ol/layer/Base}, so layers entered in the
   * options or added with `addLayer` can be groups, which can contain further
   * groups, and so on.
   *
   * @fires import("./MapBrowserEvent.js").MapBrowserEvent
   * @fires import("./MapEvent.js").MapEvent
   * @fires module:ol/render/Event~RenderEvent#postcompose
   * @fires module:ol/render/Event~RenderEvent#precompose
   * @api
   */
  var Map$2 = /*@__PURE__*/(function (PluggableMap$$1) {
    function Map(options) {
      options = assign({}, options);
      if (!options.controls) {
        options.controls = defaults();
      }
      if (!options.interactions) {
        options.interactions = defaults$1();
      }

      PluggableMap$$1.call(this, options);
    }

    if ( PluggableMap$$1 ) Map.__proto__ = PluggableMap$$1;
    Map.prototype = Object.create( PluggableMap$$1 && PluggableMap$$1.prototype );
    Map.prototype.constructor = Map;

    Map.prototype.createRenderer = function createRenderer () {
      var renderer = new CanvasMapRenderer(this);
      renderer.registerLayerRenderers([
        CanvasImageLayerRenderer,
        CanvasTileLayerRenderer,
        CanvasVectorLayerRenderer,
        CanvasVectorTileLayerRenderer
      ]);
      return renderer;
    };

    return Map;
  }(PluggableMap$1));

  /**
   * @module ol/OverlayPositioning
   */

  /**
   * Overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,
   * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
   * `'top-center'`, `'top-right'`
   * @enum {string}
   */
  var OverlayPositioning = {
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_CENTER: 'bottom-center',
    BOTTOM_RIGHT: 'bottom-right',
    CENTER_LEFT: 'center-left',
    CENTER_CENTER: 'center-center',
    CENTER_RIGHT: 'center-right',
    TOP_LEFT: 'top-left',
    TOP_CENTER: 'top-center',
    TOP_RIGHT: 'top-right'
  };

  /**
   * @module ol/Overlay
   */


  /**
   * @typedef {Object} Options
   * @property {number|string} [id] Set the overlay id. The overlay id can be used
   * with the {@link module:ol/Map~Map#getOverlayById} method.
   * @property {HTMLElement} [element] The overlay element.
   * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning
   * the overlay. The first element in the
   * array is the horizontal offset. A positive value shifts the overlay right.
   * The second element in the array is the vertical offset. A positive value
   * shifts the overlay down.
   * @property {import("./coordinate.js").Coordinate} [position] The overlay position
   * in map projection.
   * @property {OverlayPositioning} [positioning='top-left'] Defines how
   * the overlay is actually positioned with respect to its `position` property.
   * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,
   * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
   * `'top-center'`, and `'top-right'`.
   * @property {boolean} [stopEvent=true] Whether event propagation to the map
   * viewport should be stopped. If `true` the overlay is placed in the same
   * container as that of the controls (CSS class name
   * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container
   * with CSS class name specified by the `className` property.
   * @property {boolean} [insertFirst=true] Whether the overlay is inserted first
   * in the overlay container, or appended. If the overlay is placed in the same
   * container as that of the controls (see the `stopEvent` option) you will
   * probably set `insertFirst` to `true` so the overlay is displayed below the
   * controls.
   * @property {boolean} [autoPan=false] If set to `true` the map is panned when
   * calling `setPosition`, so that the overlay is entirely visible in the current
   * viewport.
   * @property {PanOptions} [autoPanAnimation] The
   * animation options used to pan the overlay into view. This animation is only
   * used when `autoPan` is enabled. A `duration` and `easing` may be provided to
   * customize the animation.
   * @property {number} [autoPanMargin=20] The margin (in pixels) between the
   * overlay and the borders of the map when autopanning.
   * @property {string} [className='ol-overlay-container ol-selectable'] CSS class
   * name.
   */


  /**
   * @typedef {Object} PanOptions
   * @property {number} [duration=1000] The duration of the animation in
   * milliseconds.
   * @property {function(number):number} [easing] The easing function to use. Can
   * be one from {@link module:ol/easing} or a custom function.
   * Default is {@link module:ol/easing~inAndOut}.
   */


  /**
   * @enum {string}
   * @protected
   */
  var Property$4 = {
    ELEMENT: 'element',
    MAP: 'map',
    OFFSET: 'offset',
    POSITION: 'position',
    POSITIONING: 'positioning'
  };


  /**
   * @classdesc
   * An element to be displayed over the map and attached to a single map
   * location.  Like {@link module:ol/control/Control~Control}, Overlays are
   * visible widgets. Unlike Controls, they are not in a fixed position on the
   * screen, but are tied to a geographical coordinate, so panning the map will
   * move an Overlay but not a Control.
   *
   * Example:
   *
   *     import Overlay from 'ol/Overlay';
   *
   *     var popup = new Overlay({
   *       element: document.getElementById('popup')
   *     });
   *     popup.setPosition(coordinate);
   *     map.addOverlay(popup);
   *
   * @api
   */
  var Overlay$1 = /*@__PURE__*/(function (BaseObject$$1) {
    function Overlay$$1(options) {

      BaseObject$$1.call(this);

      /**
       * @protected
       * @type {Options}
       */
      this.options = options;

      /**
       * @protected
       * @type {number|string|undefined}
       */
      this.id = options.id;

      /**
       * @protected
       * @type {boolean}
       */
      this.insertFirst = options.insertFirst !== undefined ?
        options.insertFirst : true;

      /**
       * @protected
       * @type {boolean}
       */
      this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.element = document.createElement('div');
      this.element.className = options.className !== undefined ?
        options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;
      this.element.style.position = 'absolute';

      /**
       * @protected
       * @type {boolean}
       */
      this.autoPan = options.autoPan !== undefined ? options.autoPan : false;

      /**
       * @protected
       * @type {PanOptions}
       */
      this.autoPanAnimation = options.autoPanAnimation || /** @type {PanOptions} */ ({});

      /**
       * @protected
       * @type {number}
       */
      this.autoPanMargin = options.autoPanMargin !== undefined ?
        options.autoPanMargin : 20;

      /**
       * @protected
       * @type {{bottom_: string,
       *         left_: string,
       *         right_: string,
       *         top_: string,
       *         visible: boolean}}
       */
      this.rendered = {
        bottom_: '',
        left_: '',
        right_: '',
        top_: '',
        visible: true
      };

      /**
       * @protected
       * @type {?import("./events.js").EventsKey}
       */
      this.mapPostrenderListenerKey = null;

      listen(
        this, getChangeEventType(Property$4.ELEMENT),
        this.handleElementChanged, this);

      listen(
        this, getChangeEventType(Property$4.MAP),
        this.handleMapChanged, this);

      listen(
        this, getChangeEventType(Property$4.OFFSET),
        this.handleOffsetChanged, this);

      listen(
        this, getChangeEventType(Property$4.POSITION),
        this.handlePositionChanged, this);

      listen(
        this, getChangeEventType(Property$4.POSITIONING),
        this.handlePositioningChanged, this);

      if (options.element !== undefined) {
        this.setElement(options.element);
      }

      this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);

      this.setPositioning(options.positioning !== undefined ?
        /** @type {OverlayPositioning} */ (options.positioning) :
        OverlayPositioning.TOP_LEFT);

      if (options.position !== undefined) {
        this.setPosition(options.position);
      }

    }

    if ( BaseObject$$1 ) Overlay$$1.__proto__ = BaseObject$$1;
    Overlay$$1.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Overlay$$1.prototype.constructor = Overlay$$1;

    /**
     * Get the DOM element of this overlay.
     * @return {HTMLElement|undefined} The Element containing the overlay.
     * @observable
     * @api
     */
    Overlay$$1.prototype.getElement = function getElement () {
      return /** @type {HTMLElement|undefined} */ (this.get(Property$4.ELEMENT));
    };

    /**
     * Get the overlay identifier which is set on constructor.
     * @return {number|string|undefined} Id.
     * @api
     */
    Overlay$$1.prototype.getId = function getId () {
      return this.id;
    };

    /**
     * Get the map associated with this overlay.
     * @return {import("./PluggableMap.js").default|undefined} The map that the
     * overlay is part of.
     * @observable
     * @api
     */
    Overlay$$1.prototype.getMap = function getMap () {
      return (
        /** @type {import("./PluggableMap.js").default|undefined} */ (this.get(Property$4.MAP))
      );
    };

    /**
     * Get the offset of this overlay.
     * @return {Array<number>} The offset.
     * @observable
     * @api
     */
    Overlay$$1.prototype.getOffset = function getOffset () {
      return /** @type {Array<number>} */ (this.get(Property$4.OFFSET));
    };

    /**
     * Get the current position of this overlay.
     * @return {import("./coordinate.js").Coordinate|undefined} The spatial point that the overlay is
     *     anchored at.
     * @observable
     * @api
     */
    Overlay$$1.prototype.getPosition = function getPosition () {
      return (
        /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(Property$4.POSITION))
      );
    };

    /**
     * Get the current positioning of this overlay.
     * @return {OverlayPositioning} How the overlay is positioned
     *     relative to its point on the map.
     * @observable
     * @api
     */
    Overlay$$1.prototype.getPositioning = function getPositioning () {
      return (
        /** @type {OverlayPositioning} */ (this.get(Property$4.POSITIONING))
      );
    };

    /**
     * @protected
     */
    Overlay$$1.prototype.handleElementChanged = function handleElementChanged () {
      removeChildren(this.element);
      var element = this.getElement();
      if (element) {
        this.element.appendChild(element);
      }
    };

    /**
     * @protected
     */
    Overlay$$1.prototype.handleMapChanged = function handleMapChanged () {
      if (this.mapPostrenderListenerKey) {
        removeNode(this.element);
        unlistenByKey(this.mapPostrenderListenerKey);
        this.mapPostrenderListenerKey = null;
      }
      var map = this.getMap();
      if (map) {
        this.mapPostrenderListenerKey = listen(map,
          MapEventType.POSTRENDER, this.render, this);
        this.updatePixelPosition();
        var container = this.stopEvent ?
          map.getOverlayContainerStopEvent() : map.getOverlayContainer();
        if (this.insertFirst) {
          container.insertBefore(this.element, container.childNodes[0] || null);
        } else {
          container.appendChild(this.element);
        }
      }
    };

    /**
     * @protected
     */
    Overlay$$1.prototype.render = function render () {
      this.updatePixelPosition();
    };

    /**
     * @protected
     */
    Overlay$$1.prototype.handleOffsetChanged = function handleOffsetChanged () {
      this.updatePixelPosition();
    };

    /**
     * @protected
     */
    Overlay$$1.prototype.handlePositionChanged = function handlePositionChanged () {
      this.updatePixelPosition();
      if (this.get(Property$4.POSITION) && this.autoPan) {
        this.panIntoView();
      }
    };

    /**
     * @protected
     */
    Overlay$$1.prototype.handlePositioningChanged = function handlePositioningChanged () {
      this.updatePixelPosition();
    };

    /**
     * Set the DOM element to be associated with this overlay.
     * @param {HTMLElement|undefined} element The Element containing the overlay.
     * @observable
     * @api
     */
    Overlay$$1.prototype.setElement = function setElement (element) {
      this.set(Property$4.ELEMENT, element);
    };

    /**
     * Set the map to be associated with this overlay.
     * @param {import("./PluggableMap.js").default|undefined} map The map that the
     * overlay is part of.
     * @observable
     * @api
     */
    Overlay$$1.prototype.setMap = function setMap (map) {
      this.set(Property$4.MAP, map);
    };

    /**
     * Set the offset for this overlay.
     * @param {Array<number>} offset Offset.
     * @observable
     * @api
     */
    Overlay$$1.prototype.setOffset = function setOffset (offset) {
      this.set(Property$4.OFFSET, offset);
    };

    /**
     * Set the position for this overlay. If the position is `undefined` the
     * overlay is hidden.
     * @param {import("./coordinate.js").Coordinate|undefined} position The spatial point that the overlay
     *     is anchored at.
     * @observable
     * @api
     */
    Overlay$$1.prototype.setPosition = function setPosition (position) {
      this.set(Property$4.POSITION, position);
    };

    /**
     * Pan the map so that the overlay is entirely visible in the current viewport
     * (if necessary).
     * @protected
     */
    Overlay$$1.prototype.panIntoView = function panIntoView () {
      var map = this.getMap();

      if (!map || !map.getTargetElement()) {
        return;
      }

      var mapRect = this.getRect(map.getTargetElement(), map.getSize());
      var element = this.getElement();
      var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);

      var margin = this.autoPanMargin;
      if (!containsExtent(mapRect, overlayRect)) {
        // the overlay is not completely inside the viewport, so pan the map
        var offsetLeft = overlayRect[0] - mapRect[0];
        var offsetRight = mapRect[2] - overlayRect[2];
        var offsetTop = overlayRect[1] - mapRect[1];
        var offsetBottom = mapRect[3] - overlayRect[3];

        var delta = [0, 0];
        if (offsetLeft < 0) {
          // move map to the left
          delta[0] = offsetLeft - margin;
        } else if (offsetRight < 0) {
          // move map to the right
          delta[0] = Math.abs(offsetRight) + margin;
        }
        if (offsetTop < 0) {
          // move map up
          delta[1] = offsetTop - margin;
        } else if (offsetBottom < 0) {
          // move map down
          delta[1] = Math.abs(offsetBottom) + margin;
        }

        if (delta[0] !== 0 || delta[1] !== 0) {
          var center = /** @type {import("./coordinate.js").Coordinate} */ (map.getView().getCenter());
          var centerPx = map.getPixelFromCoordinate(center);
          var newCenterPx = [
            centerPx[0] + delta[0],
            centerPx[1] + delta[1]
          ];

          map.getView().animate({
            center: map.getCoordinateFromPixel(newCenterPx),
            duration: this.autoPanAnimation.duration,
            easing: this.autoPanAnimation.easing
          });
        }
      }
    };

    /**
     * Get the extent of an element relative to the document
     * @param {HTMLElement|undefined} element The element.
     * @param {import("./size.js").Size|undefined} size The size of the element.
     * @return {import("./extent.js").Extent} The extent.
     * @protected
     */
    Overlay$$1.prototype.getRect = function getRect (element, size$$1) {
      var box = element.getBoundingClientRect();
      var offsetX = box.left + window.pageXOffset;
      var offsetY = box.top + window.pageYOffset;
      return [
        offsetX,
        offsetY,
        offsetX + size$$1[0],
        offsetY + size$$1[1]
      ];
    };

    /**
     * Set the positioning for this overlay.
     * @param {OverlayPositioning} positioning how the overlay is
     *     positioned relative to its point on the map.
     * @observable
     * @api
     */
    Overlay$$1.prototype.setPositioning = function setPositioning (positioning) {
      this.set(Property$4.POSITIONING, positioning);
    };

    /**
     * Modify the visibility of the element.
     * @param {boolean} visible Element visibility.
     * @protected
     */
    Overlay$$1.prototype.setVisible = function setVisible (visible) {
      if (this.rendered.visible !== visible) {
        this.element.style.display = visible ? '' : 'none';
        this.rendered.visible = visible;
      }
    };

    /**
     * Update pixel position.
     * @protected
     */
    Overlay$$1.prototype.updatePixelPosition = function updatePixelPosition () {
      var map = this.getMap();
      var position = this.getPosition();
      if (!map || !map.isRendered() || !position) {
        this.setVisible(false);
        return;
      }

      var pixel = map.getPixelFromCoordinate(position);
      var mapSize = map.getSize();
      this.updateRenderedPosition(pixel, mapSize);
    };

    /**
     * @param {import("./pixel.js").Pixel} pixel The pixel location.
     * @param {import("./size.js").Size|undefined} mapSize The map size.
     * @protected
     */
    Overlay$$1.prototype.updateRenderedPosition = function updateRenderedPosition (pixel, mapSize) {
      var style = this.element.style;
      var offset = this.getOffset();

      var positioning = this.getPositioning();

      this.setVisible(true);

      var offsetX = offset[0];
      var offsetY = offset[1];
      if (positioning == OverlayPositioning.BOTTOM_RIGHT ||
          positioning == OverlayPositioning.CENTER_RIGHT ||
          positioning == OverlayPositioning.TOP_RIGHT) {
        if (this.rendered.left_ !== '') {
          this.rendered.left_ = style.left = '';
        }
        var right = Math.round(mapSize[0] - pixel[0] - offsetX) + 'px';
        if (this.rendered.right_ != right) {
          this.rendered.right_ = style.right = right;
        }
      } else {
        if (this.rendered.right_ !== '') {
          this.rendered.right_ = style.right = '';
        }
        if (positioning == OverlayPositioning.BOTTOM_CENTER ||
            positioning == OverlayPositioning.CENTER_CENTER ||
            positioning == OverlayPositioning.TOP_CENTER) {
          offsetX -= this.element.offsetWidth / 2;
        }
        var left = Math.round(pixel[0] + offsetX) + 'px';
        if (this.rendered.left_ != left) {
          this.rendered.left_ = style.left = left;
        }
      }
      if (positioning == OverlayPositioning.BOTTOM_LEFT ||
          positioning == OverlayPositioning.BOTTOM_CENTER ||
          positioning == OverlayPositioning.BOTTOM_RIGHT) {
        if (this.rendered.top_ !== '') {
          this.rendered.top_ = style.top = '';
        }
        var bottom = Math.round(mapSize[1] - pixel[1] - offsetY) + 'px';
        if (this.rendered.bottom_ != bottom) {
          this.rendered.bottom_ = style.bottom = bottom;
        }
      } else {
        if (this.rendered.bottom_ !== '') {
          this.rendered.bottom_ = style.bottom = '';
        }
        if (positioning == OverlayPositioning.CENTER_LEFT ||
            positioning == OverlayPositioning.CENTER_CENTER ||
            positioning == OverlayPositioning.CENTER_RIGHT) {
          offsetY -= this.element.offsetHeight / 2;
        }
        var top = Math.round(pixel[1] + offsetY) + 'px';
        if (this.rendered.top_ != top) {
          this.rendered.top_ = style.top = top;
        }
      }
    };

    /**
     * returns the options this Overlay has been created with
     * @return {Options} overlay options
     */
    Overlay$$1.prototype.getOptions = function getOptions () {
      return this.options;
    };

    return Overlay$$1;
  }(BaseObject));

  /**
   * @module ol/tilecoord
   */


  /**
   * An array of three numbers representing the location of a tile in a tile
   * grid. The order is `z`, `x`, and `y`. `z` is the zoom level.
   * @typedef {Array<number>} TileCoord
   * @api
   */


  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {TileCoord=} opt_tileCoord Tile coordinate.
   * @return {TileCoord} Tile coordinate.
   */
  function createOrUpdate$2(z, x, y, opt_tileCoord) {
    if (opt_tileCoord !== undefined) {
      opt_tileCoord[0] = z;
      opt_tileCoord[1] = x;
      opt_tileCoord[2] = y;
      return opt_tileCoord;
    } else {
      return [z, x, y];
    }
  }


  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {string} Key.
   */
  function getKeyZXY(z, x, y) {
    return z + '/' + x + '/' + y;
  }


  /**
   * Get the key for a tile coord.
   * @param {TileCoord} tileCoord The tile coord.
   * @return {string} Key.
   */
  function getKey$1(tileCoord) {
    return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
  }


  /**
   * Get a tile coord given a key.
   * @param {string} key The tile coord key.
   * @return {TileCoord} The tile coord.
   */
  function fromKey(key) {
    return key.split('/').map(Number);
  }


  /**
   * @param {TileCoord} tileCoord Tile coordinate.
   * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {boolean} Tile coordinate is within extent and zoom level range.
   */
  function withinExtentAndZ(tileCoord, tileGrid) {
    var z = tileCoord[0];
    var x = tileCoord[1];
    var y = tileCoord[2];

    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
      return false;
    }
    var extent$$1 = tileGrid.getExtent();
    var tileRange;
    if (!extent$$1) {
      tileRange = tileGrid.getFullTileRange(z);
    } else {
      tileRange = tileGrid.getTileRangeForExtentAndZ(extent$$1, z);
    }
    if (!tileRange) {
      return true;
    } else {
      return tileRange.containsXY(x, y);
    }
  }

  /**
   * @module ol/TileCache
   */

  var TileCache = /*@__PURE__*/(function (LRUCache$$1) {
    function TileCache(opt_highWaterMark) {

      LRUCache$$1.call(this, opt_highWaterMark);

    }

    if ( LRUCache$$1 ) TileCache.__proto__ = LRUCache$$1;
    TileCache.prototype = Object.create( LRUCache$$1 && LRUCache$$1.prototype );
    TileCache.prototype.constructor = TileCache;

    /**
     * @param {!Object<string, import("./TileRange.js").default>} usedTiles Used tiles.
     */
    TileCache.prototype.expireCache = function expireCache (usedTiles) {
      while (this.canExpireCache()) {
        var tile = this.peekLast();
        var zKey = tile.tileCoord[0].toString();
        if (zKey in usedTiles && usedTiles[zKey].contains(tile.tileCoord)) {
          break;
        } else {
          this.pop().dispose();
        }
      }
    };

    /**
     * Prune all tiles from the cache that don't have the same z as the newest tile.
     */
    TileCache.prototype.pruneExceptNewestZ = function pruneExceptNewestZ () {
      if (this.getCount() === 0) {
        return;
      }
      var key = this.peekFirstKey();
      var tileCoord = fromKey(key);
      var z = tileCoord[0];
      this.forEach(function(tile) {
        if (tile.tileCoord[0] !== z) {
          this.remove(getKey$1(tile.tileCoord));
          tile.dispose();
        }
      }, this);
    };

    return TileCache;
  }(LRUCache));

  /**
   * @module ol/VectorImageTile
   */


  /**
   * @typedef {Object} ReplayState
   * @property {boolean} dirty
   * @property {null|import("./render.js").OrderFunction} renderedRenderOrder
   * @property {number} renderedTileRevision
   * @property {number} renderedRevision
   */


  var VectorImageTile = /*@__PURE__*/(function (Tile$$1) {
    function VectorImageTile(tileCoord, state, sourceRevision, format, tileLoadFunction,
      urlTileCoord, tileUrlFunction, sourceTileGrid, tileGrid, sourceTiles,
      pixelRatio, projection, tileClass, handleTileChange, zoom) {

      Tile$$1.call(this, tileCoord, state, {transition: 0});

      /**
       * @private
       * @type {!Object<string, CanvasRenderingContext2D>}
       */
      this.context_ = {};

      /**
       * @private
       * @type {import("./featureloader.js").FeatureLoader}
       */
      this.loader_;

      /**
       * @private
       * @type {!Object<string, ReplayState>}
       */
      this.replayState_ = {};

      /**
       * @private
       * @type {Object<string, import("./VectorTile.js").default>}
       */
      this.sourceTiles_ = sourceTiles;

      /**
       * Keys of source tiles used by this tile. Use with {@link #getTile}.
       * @type {Array<string>}
       */
      this.tileKeys = [];

      /**
       * @type {import("./extent.js").Extent}
       */
      this.extent = null;

      /**
       * @type {number}
       */
      this.sourceRevision_ = sourceRevision;

      /**
       * @type {import("./tilecoord.js").TileCoord}
       */
      this.wrappedTileCoord = urlTileCoord;

      /**
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.loadListenerKeys_ = [];

      /**
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.sourceTileListenerKeys_ = [];

      if (urlTileCoord) {
        var extent$$1 = this.extent = tileGrid.getTileCoordExtent(urlTileCoord);
        var resolution = tileGrid.getResolution(zoom);
        var sourceZ = sourceTileGrid.getZForResolution(resolution);
        var useLoadedOnly = zoom != tileCoord[0];
        var loadCount = 0;
        sourceTileGrid.forEachTileCoord(extent$$1, sourceZ, function(sourceTileCoord) {
          var sharedExtent = getIntersection(extent$$1,
            sourceTileGrid.getTileCoordExtent(sourceTileCoord));
          var sourceExtent = sourceTileGrid.getExtent();
          if (sourceExtent) {
            sharedExtent = getIntersection(sharedExtent, sourceExtent, sharedExtent);
          }
          if (getWidth(sharedExtent) / resolution >= 0.5 &&
              getHeight(sharedExtent) / resolution >= 0.5) {
            // only include source tile if overlap is at least 1 pixel
            ++loadCount;
            var sourceTileKey = sourceTileCoord.toString();
            var sourceTile = sourceTiles[sourceTileKey];
            if (!sourceTile && !useLoadedOnly) {
              var tileUrl = tileUrlFunction(sourceTileCoord, pixelRatio, projection);
              sourceTile = sourceTiles[sourceTileKey] = new tileClass(sourceTileCoord,
                tileUrl == undefined ? TileState.EMPTY : TileState.IDLE,
                tileUrl == undefined ? '' : tileUrl,
                format, tileLoadFunction);
              this.sourceTileListenerKeys_.push(
                listen(sourceTile, EventType.CHANGE, handleTileChange));
            }
            if (sourceTile && (!useLoadedOnly || sourceTile.getState() == TileState.LOADED)) {
              sourceTile.consumers++;
              this.tileKeys.push(sourceTileKey);
            }
          }
        }.bind(this));

        if (useLoadedOnly && loadCount == this.tileKeys.length) {
          this.finishLoading_();
        }

        if (zoom <= tileCoord[0] && this.state != TileState.LOADED) {
          while (zoom > tileGrid.getMinZoom()) {
            var tile = new VectorImageTile(tileCoord, state, sourceRevision,
              format, tileLoadFunction, urlTileCoord, tileUrlFunction,
              sourceTileGrid, tileGrid, sourceTiles, pixelRatio, projection,
              tileClass, VOID, --zoom);
            if (tile.state == TileState.LOADED) {
              this.interimTile = tile;
              break;
            }
          }
        }
      }

    }

    if ( Tile$$1 ) VectorImageTile.__proto__ = Tile$$1;
    VectorImageTile.prototype = Object.create( Tile$$1 && Tile$$1.prototype );
    VectorImageTile.prototype.constructor = VectorImageTile;

    /**
     * @inheritDoc
     */
    VectorImageTile.prototype.disposeInternal = function disposeInternal () {
      this.state = TileState.ABORT;
      this.changed();
      if (this.interimTile) {
        this.interimTile.dispose();
      }

      for (var i = 0, ii = this.tileKeys.length; i < ii; ++i) {
        var sourceTileKey = this.tileKeys[i];
        var sourceTile = this.getTile(sourceTileKey);
        sourceTile.consumers--;
        if (sourceTile.consumers == 0) {
          delete this.sourceTiles_[sourceTileKey];
          sourceTile.dispose();
        }
      }
      this.tileKeys.length = 0;
      this.sourceTiles_ = null;
      this.loadListenerKeys_.forEach(unlistenByKey);
      this.loadListenerKeys_.length = 0;
      this.sourceTileListenerKeys_.forEach(unlistenByKey);
      this.sourceTileListenerKeys_.length = 0;
      Tile$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {CanvasRenderingContext2D} The rendering context.
     */
    VectorImageTile.prototype.getContext = function getContext (layer) {
      var key = getUid(layer);
      if (!(key in this.context_)) {
        this.context_[key] = createCanvasContext2D();
      }
      return this.context_[key];
    };

    /**
     * Get the Canvas for this tile.
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {HTMLCanvasElement} Canvas.
     */
    VectorImageTile.prototype.getImage = function getImage (layer) {
      return this.getReplayState(layer).renderedTileRevision == -1 ?
        null : this.getContext(layer).canvas;
    };

    /**
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {ReplayState} The replay state.
     */
    VectorImageTile.prototype.getReplayState = function getReplayState (layer) {
      var key = getUid(layer);
      if (!(key in this.replayState_)) {
        this.replayState_[key] = {
          dirty: false,
          renderedRenderOrder: null,
          renderedRevision: -1,
          renderedTileRevision: -1
        };
      }
      return this.replayState_[key];
    };

    /**
     * @inheritDoc
     */
    VectorImageTile.prototype.getKey = function getKey () {
      return this.tileKeys.join('/') + '-' + this.sourceRevision_;
    };

    /**
     * @param {string} tileKey Key (tileCoord) of the source tile.
     * @return {import("./VectorTile.js").default} Source tile.
     */
    VectorImageTile.prototype.getTile = function getTile (tileKey) {
      return this.sourceTiles_[tileKey];
    };

    /**
     * @inheritDoc
     */
    VectorImageTile.prototype.load = function load () {
      // Source tiles with LOADED state - we just count them because once they are
      // loaded, we're no longer listening to state changes.
      var leftToLoad = 0;
      // Source tiles with ERROR state - we track them because they can still have
      // an ERROR state after another load attempt.
      var errorSourceTiles = {};

      if (this.state == TileState.IDLE) {
        this.setState(TileState.LOADING);
      }
      if (this.state == TileState.LOADING) {
        this.tileKeys.forEach(function(sourceTileKey) {
          var sourceTile = this.getTile(sourceTileKey);
          if (sourceTile.state == TileState.IDLE) {
            sourceTile.setLoader(this.loader_);
            sourceTile.load();
          }
          if (sourceTile.state == TileState.LOADING) {
            var key = listen(sourceTile, EventType.CHANGE, function(e) {
              var state = sourceTile.getState();
              if (state == TileState.LOADED ||
                  state == TileState.ERROR) {
                var uid = getUid(sourceTile);
                if (state == TileState.ERROR) {
                  errorSourceTiles[uid] = true;
                } else {
                  --leftToLoad;
                  delete errorSourceTiles[uid];
                }
                if (leftToLoad - Object.keys(errorSourceTiles).length == 0) {
                  this.finishLoading_();
                }
              }
            }.bind(this));
            this.loadListenerKeys_.push(key);
            ++leftToLoad;
          }
        }.bind(this));
      }
      if (leftToLoad - Object.keys(errorSourceTiles).length == 0) {
        setTimeout(this.finishLoading_.bind(this), 0);
      }
    };

    /**
     * @private
     */
    VectorImageTile.prototype.finishLoading_ = function finishLoading_ () {
      var loaded = this.tileKeys.length;
      var empty = 0;
      for (var i = loaded - 1; i >= 0; --i) {
        var state = this.getTile(this.tileKeys[i]).getState();
        if (state != TileState.LOADED) {
          --loaded;
        }
        if (state == TileState.EMPTY) {
          ++empty;
        }
      }
      if (loaded == this.tileKeys.length) {
        this.loadListenerKeys_.forEach(unlistenByKey);
        this.loadListenerKeys_.length = 0;
        this.setState(TileState.LOADED);
      } else {
        this.setState(empty == this.tileKeys.length ? TileState.EMPTY : TileState.ERROR);
      }
    };

    return VectorImageTile;
  }(Tile));

  /**
   * @module ol/VectorTile
   */

  /**
   * @const
   * @type {import("./extent.js").Extent}
   */
  var DEFAULT_EXTENT = [0, 0, 4096, 4096];


  var VectorTile = /*@__PURE__*/(function (Tile$$1) {
    function VectorTile(tileCoord, state, src, format, tileLoadFunction, opt_options) {

      Tile$$1.call(this, tileCoord, state, opt_options);

      /**
       * @type {number}
       */
      this.consumers = 0;

      /**
       * @private
       * @type {import("./extent.js").Extent}
       */
      this.extent_ = null;

      /**
       * @private
       * @type {import("./format/Feature.js").default}
       */
      this.format_ = format;

      /**
       * @private
       * @type {Array<import("./Feature.js").default>}
       */
      this.features_ = null;

      /**
       * @private
       * @type {import("./featureloader.js").FeatureLoader}
       */
      this.loader_;

      /**
       * Data projection
       * @private
       * @type {import("./proj/Projection.js").default}
       */
      this.projection_ = null;

      /**
       * @private
       * @type {Object<string, import("./render/ReplayGroup.js").default>}
       */
      this.replayGroups_ = {};

      /**
       * @private
       * @type {import("./Tile.js").LoadFunction}
       */
      this.tileLoadFunction_ = tileLoadFunction;

      /**
       * @private
       * @type {string}
       */
      this.url_ = src;

    }

    if ( Tile$$1 ) VectorTile.__proto__ = Tile$$1;
    VectorTile.prototype = Object.create( Tile$$1 && Tile$$1.prototype );
    VectorTile.prototype.constructor = VectorTile;

    /**
     * @inheritDoc
     */
    VectorTile.prototype.disposeInternal = function disposeInternal () {
      this.features_ = null;
      this.replayGroups_ = {};
      this.state = TileState.ABORT;
      this.changed();
      Tile$$1.prototype.disposeInternal.call(this);
    };

    /**
     * Gets the extent of the vector tile.
     * @return {import("./extent.js").Extent} The extent.
     * @api
     */
    VectorTile.prototype.getExtent = function getExtent () {
      return this.extent_ || DEFAULT_EXTENT;
    };

    /**
     * Get the feature format assigned for reading this tile's features.
     * @return {import("./format/Feature.js").default} Feature format.
     * @api
     */
    VectorTile.prototype.getFormat = function getFormat () {
      return this.format_;
    };

    /**
     * Get the features for this tile. Geometries will be in the projection returned
     * by {@link module:ol/VectorTile~VectorTile#getProjection}.
     * @return {Array<import("./Feature.js").FeatureLike>} Features.
     * @api
     */
    VectorTile.prototype.getFeatures = function getFeatures () {
      return this.features_;
    };

    /**
     * @inheritDoc
     */
    VectorTile.prototype.getKey = function getKey () {
      return this.url_;
    };

    /**
     * Get the feature projection of features returned by
     * {@link module:ol/VectorTile~VectorTile#getFeatures}.
     * @return {import("./proj/Projection.js").default} Feature projection.
     * @api
     */
    VectorTile.prototype.getProjection = function getProjection () {
      return this.projection_;
    };

    /**
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @param {string} key Key.
     * @return {import("./render/ReplayGroup.js").default} Replay group.
     */
    VectorTile.prototype.getReplayGroup = function getReplayGroup (layer, key) {
      return this.replayGroups_[getUid(layer) + ',' + key];
    };

    /**
     * @inheritDoc
     */
    VectorTile.prototype.load = function load () {
      if (this.state == TileState.IDLE) {
        this.setState(TileState.LOADING);
        this.tileLoadFunction_(this, this.url_);
        this.loader_(null, NaN, null);
      }
    };

    /**
     * Handler for successful tile load.
     * @param {Array<import("./Feature.js").default>} features The loaded features.
     * @param {import("./proj/Projection.js").default} dataProjection Data projection.
     * @param {import("./extent.js").Extent} extent Extent.
     */
    VectorTile.prototype.onLoad = function onLoad (features, dataProjection, extent$$1) {
      this.setProjection(dataProjection);
      this.setFeatures(features);
      this.setExtent(extent$$1);
    };

    /**
     * Handler for tile load errors.
     */
    VectorTile.prototype.onError = function onError () {
      this.setState(TileState.ERROR);
    };

    /**
     * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s
     * `tileLoadFunction`. Sets the extent of the vector tile. This is only required
     * for tiles in projections with `tile-pixels` as units. The extent should be
     * set to `[0, 0, tilePixelSize, tilePixelSize]`, where `tilePixelSize` is
     * calculated by multiplying the tile size with the tile pixel ratio. For
     * sources using {@link module:ol/format/MVT~MVT} as feature format, the
     * {@link module:ol/format/MVT~MVT#getLastExtent} method will return the correct
     * extent. The default is `[0, 0, 4096, 4096]`.
     * @param {import("./extent.js").Extent} extent The extent.
     * @api
     */
    VectorTile.prototype.setExtent = function setExtent (extent$$1) {
      this.extent_ = extent$$1;
    };

    /**
     * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.
     * Sets the features for the tile.
     * @param {Array<import("./Feature.js").default>} features Features.
     * @api
     */
    VectorTile.prototype.setFeatures = function setFeatures (features) {
      this.features_ = features;
      this.setState(TileState.LOADED);
    };

    /**
     * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.
     * Sets the projection of the features that were added with
     * {@link module:ol/VectorTile~VectorTile#setFeatures}.
     * @param {import("./proj/Projection.js").default} projection Feature projection.
     * @api
     */
    VectorTile.prototype.setProjection = function setProjection (projection) {
      this.projection_ = projection;
    };

    /**
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @param {string} key Key.
     * @param {import("./render/ReplayGroup.js").default} replayGroup Replay group.
     */
    VectorTile.prototype.setReplayGroup = function setReplayGroup (layer, key, replayGroup) {
      this.replayGroups_[getUid(layer) + ',' + key] = replayGroup;
    };

    /**
     * Set the feature loader for reading this tile's features.
     * @param {import("./featureloader.js").FeatureLoader} loader Feature loader.
     * @api
     */
    VectorTile.prototype.setLoader = function setLoader (loader) {
      this.loader_ = loader;
    };

    return VectorTile;
  }(Tile));

  /**
   * @module ol/control/FullScreen
   */


  /**
   * @return {string} Change type.
   */
  var getChangeType = (function() {
    var changeType;
    return function() {
      if (!changeType) {
        var body = document.body;
        if (body.webkitRequestFullscreen) {
          changeType = 'webkitfullscreenchange';
        } else if (body.mozRequestFullScreen) {
          changeType = 'mozfullscreenchange';
        } else if (body.msRequestFullscreen) {
          changeType = 'MSFullscreenChange';
        } else if (body.requestFullscreen) {
          changeType = 'fullscreenchange';
        }
      }
      return changeType;
    };
  })();


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-full-screen'] CSS class name.
   * @property {string|Text} [label='\u2922'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|Text} [labelActive='\u00d7'] Text label to use for the
   * button when full-screen is active.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.
   * @property {boolean} [keys=false] Full keyboard access.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {HTMLElement|string} [source] The element to be displayed
   * fullscreen. When not provided, the element containing the map viewport will
   * be displayed fullscreen.
   */


  /**
   * @classdesc
   * Provides a button that when clicked fills up the full screen with the map.
   * The full screen source element is by default the element containing the map viewport unless
   * overridden by providing the `source` option. In which case, the dom
   * element introduced using this parameter will be displayed in full screen.
   *
   * When in full screen mode, a close button is shown to exit full screen mode.
   * The [Fullscreen API](http://www.w3.org/TR/fullscreen/) is used to
   * toggle the map in full screen mode.
   *
   * @api
   */
  var FullScreen = /*@__PURE__*/(function (Control$$1) {
    function FullScreen(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        target: options.target
      });

      /**
       * @private
       * @type {string}
       */
      this.cssClassName_ = options.className !== undefined ? options.className :
        'ol-full-screen';

      var label = options.label !== undefined ? options.label : '\u2922';

      /**
       * @private
       * @type {Text}
       */
      this.labelNode_ = typeof label === 'string' ?
        document.createTextNode(label) : label;

      var labelActive = options.labelActive !== undefined ? options.labelActive : '\u00d7';

      /**
       * @private
       * @type {Text}
       */
      this.labelActiveNode_ = typeof labelActive === 'string' ?
        document.createTextNode(labelActive) : labelActive;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.button_ = document.createElement('button');

      var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';
      this.setClassName_(this.button_, isFullScreen());
      this.button_.setAttribute('type', 'button');
      this.button_.title = tipLabel;
      this.button_.appendChild(this.labelNode_);

      listen(this.button_, EventType.CLICK,
        this.handleClick_, this);

      var cssClasses = this.cssClassName_ + ' ' + CLASS_UNSELECTABLE +
          ' ' + CLASS_CONTROL + ' ' +
          (!isFullScreenSupported() ? CLASS_UNSUPPORTED : '');
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(this.button_);

      /**
       * @private
       * @type {boolean}
       */
      this.keys_ = options.keys !== undefined ? options.keys : false;

      /**
       * @private
       * @type {HTMLElement|string|undefined}
       */
      this.source_ = options.source;

    }

    if ( Control$$1 ) FullScreen.__proto__ = Control$$1;
    FullScreen.prototype = Object.create( Control$$1 && Control$$1.prototype );
    FullScreen.prototype.constructor = FullScreen;

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    FullScreen.prototype.handleClick_ = function handleClick_ (event) {
      event.preventDefault();
      this.handleFullScreen_();
    };

    /**
     * @private
     */
    FullScreen.prototype.handleFullScreen_ = function handleFullScreen_ () {
      if (!isFullScreenSupported()) {
        return;
      }
      var map = this.getMap();
      if (!map) {
        return;
      }
      if (isFullScreen()) {
        exitFullScreen();
      } else {
        var element;
        if (this.source_) {
          element = typeof this.source_ === 'string' ?
            document.getElementById(this.source_) :
            this.source_;
        } else {
          element = map.getTargetElement();
        }
        if (this.keys_) {
          requestFullScreenWithKeys(element);

        } else {
          requestFullScreen(element);
        }
      }
    };

    /**
     * @private
     */
    FullScreen.prototype.handleFullScreenChange_ = function handleFullScreenChange_ () {
      var map = this.getMap();
      if (isFullScreen()) {
        this.setClassName_(this.button_, true);
        replaceNode(this.labelActiveNode_, this.labelNode_);
      } else {
        this.setClassName_(this.button_, false);
        replaceNode(this.labelNode_, this.labelActiveNode_);
      }
      if (map) {
        map.updateSize();
      }
    };

    /**
     * @param {HTMLElement} element Target element
     * @param {boolean} fullscreen True if fullscreen class name should be active
     * @private
     */
    FullScreen.prototype.setClassName_ = function setClassName_ (element, fullscreen) {
      var activeClassName = this.cssClassName_ + '-true';
      var inactiveClassName = this.cssClassName_ + '-false';
      var nextClassName = fullscreen ? activeClassName : inactiveClassName;
      element.classList.remove(activeClassName);
      element.classList.remove(inactiveClassName);
      element.classList.add(nextClassName);
    };

    /**
     * @inheritDoc
     * @api
     */
    FullScreen.prototype.setMap = function setMap (map) {
      Control$$1.prototype.setMap.call(this, map);
      if (map) {
        this.listenerKeys.push(listen(document,
          getChangeType(),
          this.handleFullScreenChange_, this)
        );
      }
    };

    return FullScreen;
  }(Control));


  /**
   * @return {boolean} Fullscreen is supported by the current platform.
   */
  function isFullScreenSupported() {
    var body = document.body;
    return !!(
      body.webkitRequestFullscreen ||
      (body.mozRequestFullScreen && document.mozFullScreenEnabled) ||
      (body.msRequestFullscreen && document.msFullscreenEnabled) ||
      (body.requestFullscreen && document.fullscreenEnabled)
    );
  }

  /**
   * @return {boolean} Element is currently in fullscreen.
   */
  function isFullScreen() {
    return !!(
      document.webkitIsFullScreen || document.mozFullScreen ||
      document.msFullscreenElement || document.fullscreenElement
    );
  }

  /**
   * Request to fullscreen an element.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreen(element) {
    if (element.requestFullscreen) {
      element.requestFullscreen();
    } else if (element.msRequestFullscreen) {
      element.msRequestFullscreen();
    } else if (element.mozRequestFullScreen) {
      element.mozRequestFullScreen();
    } else if (element.webkitRequestFullscreen) {
      element.webkitRequestFullscreen();
    }
  }

  /**
   * Request to fullscreen an element with keyboard input.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreenWithKeys(element) {
    if (element.mozRequestFullScreenWithKeys) {
      element.mozRequestFullScreenWithKeys();
    } else if (element.webkitRequestFullscreen) {
      element.webkitRequestFullscreen();
    } else {
      requestFullScreen(element);
    }
  }

  /**
   * Exit fullscreen.
   */
  function exitFullScreen() {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    }
  }

  /**
   * @module ol/control/MousePosition
   */


  /**
   * @type {string}
   */
  var PROJECTION = 'projection';

  /**
   * @type {string}
   */
  var COORDINATE_FORMAT = 'coordinateFormat';


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-mouse-position'] CSS class name.
   * @property {import("../coordinate.js").CoordinateFormat} [coordinateFormat] Coordinate format.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the
   * control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not
   * available (e.g. when the pointer leaves the map viewport).  By default, the last position
   * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To
   * retain the last rendered position, set this option to something falsey (like an empty
   * string `''`).
   */


  /**
   * @classdesc
   * A control to show the 2D coordinates of the mouse cursor. By default, these
   * are in the view projection, but can be in any supported projection.
   * By default the control is shown in the top right corner of the map, but this
   * can be changed by using the css selector `.ol-mouse-position`.
   *
   * On touch devices, which usually do not have a mouse cursor, the coordinates
   * of the currently touched position are shown.
   *
   * @api
   */
  var MousePosition = /*@__PURE__*/(function (Control$$1) {
    function MousePosition(opt_options) {

      var options = opt_options ? opt_options : {};

      var element = document.createElement('div');
      element.className = options.className !== undefined ? options.className : 'ol-mouse-position';

      Control$$1.call(this, {
        element: element,
        render: options.render || render$2,
        target: options.target
      });

      listen(this,
        getChangeEventType(PROJECTION),
        this.handleProjectionChanged_, this);

      if (options.coordinateFormat) {
        this.setCoordinateFormat(options.coordinateFormat);
      }
      if (options.projection) {
        this.setProjection(options.projection);
      }

      /**
       * @private
       * @type {string}
       */
      this.undefinedHTML_ = options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';

      /**
       * @private
       * @type {boolean}
       */
      this.renderOnMouseOut_ = !!this.undefinedHTML_;

      /**
       * @private
       * @type {string}
       */
      this.renderedHTML_ = element.innerHTML;

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.mapProjection_ = null;

      /**
       * @private
       * @type {?import("../proj.js").TransformFunction}
       */
      this.transform_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.lastMouseMovePixel_ = null;

    }

    if ( Control$$1 ) MousePosition.__proto__ = Control$$1;
    MousePosition.prototype = Object.create( Control$$1 && Control$$1.prototype );
    MousePosition.prototype.constructor = MousePosition;

    /**
     * @private
     */
    MousePosition.prototype.handleProjectionChanged_ = function handleProjectionChanged_ () {
      this.transform_ = null;
    };

    /**
     * Return the coordinate format type used to render the current position or
     * undefined.
     * @return {import("../coordinate.js").CoordinateFormat|undefined} The format to render the current
     *     position in.
     * @observable
     * @api
     */
    MousePosition.prototype.getCoordinateFormat = function getCoordinateFormat () {
      return (
        /** @type {import("../coordinate.js").CoordinateFormat|undefined} */ (this.get(COORDINATE_FORMAT))
      );
    };

    /**
     * Return the projection that is used to report the mouse position.
     * @return {import("../proj/Projection.js").default|undefined} The projection to report mouse
     *     position in.
     * @observable
     * @api
     */
    MousePosition.prototype.getProjection = function getProjection () {
      return (
        /** @type {import("../proj/Projection.js").default|undefined} */ (this.get(PROJECTION))
      );
    };

    /**
     * @param {Event} event Browser event.
     * @protected
     */
    MousePosition.prototype.handleMouseMove = function handleMouseMove (event) {
      var map = this.getMap();
      this.lastMouseMovePixel_ = map.getEventPixel(event);
      this.updateHTML_(this.lastMouseMovePixel_);
    };

    /**
     * @param {Event} event Browser event.
     * @protected
     */
    MousePosition.prototype.handleMouseOut = function handleMouseOut (event) {
      this.updateHTML_(null);
      this.lastMouseMovePixel_ = null;
    };

    /**
     * @inheritDoc
     * @api
     */
    MousePosition.prototype.setMap = function setMap (map) {
      Control$$1.prototype.setMap.call(this, map);
      if (map) {
        var viewport = map.getViewport();
        this.listenerKeys.push(
          listen(viewport, EventType.MOUSEMOVE, this.handleMouseMove, this),
          listen(viewport, EventType.TOUCHSTART, this.handleMouseMove, this)
        );
        if (this.renderOnMouseOut_) {
          this.listenerKeys.push(
            listen(viewport, EventType.MOUSEOUT, this.handleMouseOut, this),
            listen(viewport, EventType.TOUCHEND, this.handleMouseOut, this)
          );
        }
      }
    };

    /**
     * Set the coordinate format type used to render the current position.
     * @param {import("../coordinate.js").CoordinateFormat} format The format to render the current
     *     position in.
     * @observable
     * @api
     */
    MousePosition.prototype.setCoordinateFormat = function setCoordinateFormat (format) {
      this.set(COORDINATE_FORMAT, format);
    };

    /**
     * Set the projection that is used to report the mouse position.
     * @param {import("../proj.js").ProjectionLike} projection The projection to report mouse
     *     position in.
     * @observable
     * @api
     */
    MousePosition.prototype.setProjection = function setProjection (projection) {
      this.set(PROJECTION, get$3(projection));
    };

    /**
     * @param {?import("../pixel.js").Pixel} pixel Pixel.
     * @private
     */
    MousePosition.prototype.updateHTML_ = function updateHTML_ (pixel) {
      var html = this.undefinedHTML_;
      if (pixel && this.mapProjection_) {
        if (!this.transform_) {
          var projection = this.getProjection();
          if (projection) {
            this.transform_ = getTransformFromProjections(
              this.mapProjection_, projection);
          } else {
            this.transform_ = identityTransform;
          }
        }
        var map = this.getMap();
        var coordinate = map.getCoordinateFromPixel(pixel);
        if (coordinate) {
          this.transform_(coordinate, coordinate);
          var coordinateFormat = this.getCoordinateFormat();
          if (coordinateFormat) {
            html = coordinateFormat(coordinate);
          } else {
            html = coordinate.toString();
          }
        }
      }
      if (!this.renderedHTML_ || html !== this.renderedHTML_) {
        this.element.innerHTML = html;
        this.renderedHTML_ = html;
      }
    };

    return MousePosition;
  }(Control));


  /**
   * Update the projection. Rendering of the coordinates is done in
   * `handleMouseMove` and `handleMouseUp`.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {MousePosition}
   * @api
   */
  function render$2(mapEvent) {
    var frameState = mapEvent.frameState;
    if (!frameState) {
      this.mapProjection_ = null;
    } else {
      if (this.mapProjection_ != frameState.viewState.projection) {
        this.mapProjection_ = frameState.viewState.projection;
        this.transform_ = null;
      }
    }
  }

  /**
   * @module ol/control/OverviewMap
   */


  /**
   * Maximum width and/or height extent ratio that determines when the overview
   * map should be zoomed out.
   * @type {number}
   */
  var MAX_RATIO = 0.75;


  /**
   * Minimum width and/or height extent ratio that determines when the overview
   * map should be zoomed in.
   * @type {number}
   */
  var MIN_RATIO = 0.1;


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-overviewmap'] CSS class name.
   * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).
   * @property {string|HTMLElement} [collapseLabel='«'] Text label to use for the
   * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.
   * @property {string|HTMLElement} [label='»'] Text label to use for the collapsed
   * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {Array<import("../layer/Layer.js").default>|import("../Collection.js").default<import("../layer/Layer.js").default>} [layers]
   * Layers for the overview map. If not set, then all main map layers are used
   * instead.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.
   * @property {import("../View.js").default} [view] Custom view for the overview map. If not provided,
   * a default view with an EPSG:3857 projection will be used.
   */


  /**
   * Create a new control with a map acting as an overview map for an other
   * defined map.
   *
   * @api
   */
  var OverviewMap = /*@__PURE__*/(function (Control$$1) {
    function OverviewMap(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        render: options.render || render$3,
        target: options.target
      });

      /**
       * @type {boolean}
       * @private
       */
      this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;

      /**
       * @private
       * @type {boolean}
       */
      this.collapsible_ = options.collapsible !== undefined ?
        options.collapsible : true;

      if (!this.collapsible_) {
        this.collapsed_ = false;
      }

      var className = options.className !== undefined ? options.className : 'ol-overviewmap';

      var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';

      var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00AB';

      if (typeof collapseLabel === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.collapseLabel_ = document.createElement('span');
        this.collapseLabel_.textContent = collapseLabel;
      } else {
        this.collapseLabel_ = collapseLabel;
      }

      var label = options.label !== undefined ? options.label : '\u00BB';


      if (typeof label === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.label_ = document.createElement('span');
        this.label_.textContent = label;
      } else {
        this.label_ = label;
      }

      var activeLabel = (this.collapsible_ && !this.collapsed_) ?
        this.collapseLabel_ : this.label_;
      var button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(activeLabel);

      listen(button, EventType.CLICK,
        this.handleClick_, this);

      /**
       * @type {HTMLElement}
       * @private
       */
      this.ovmapDiv_ = document.createElement('div');
      this.ovmapDiv_.className = 'ol-overviewmap-map';

      /**
       * @type {import("../Map.js").default}
       * @private
       */
      this.ovmap_ = new Map$2({
        controls: new Collection$1(),
        interactions: new Collection$1(),
        view: options.view
      });
      var ovmap = this.ovmap_;

      if (options.layers) {
        /** @type {Array<import("../layer/Layer.js").default>} */ (options.layers).forEach(
          /**
           * @param {import("../layer/Layer.js").default} layer Layer.
           */
          (function(layer) {
            ovmap.addLayer(layer);
          }).bind(this));
      }

      var box = document.createElement('div');
      box.className = 'ol-overviewmap-box';
      box.style.boxSizing = 'border-box';

      /**
       * @type {import("../Overlay.js").default}
       * @private
       */
      this.boxOverlay_ = new Overlay$1({
        position: [0, 0],
        positioning: OverlayPositioning.BOTTOM_LEFT,
        element: box
      });
      this.ovmap_.addOverlay(this.boxOverlay_);

      var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +
          (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
          (this.collapsible_ ? '' : ' ol-uncollapsible');
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(this.ovmapDiv_);
      element.appendChild(button);

      /* Interactive map */

      var scope = this;

      var overlay = this.boxOverlay_;
      var overlayBox = this.boxOverlay_.getElement();

      /* Functions definition */

      var computeDesiredMousePosition = function(mousePosition) {
        return {
          clientX: mousePosition.clientX - (overlayBox.offsetWidth / 2),
          clientY: mousePosition.clientY + (overlayBox.offsetHeight / 2)
        };
      };

      var move = function(event) {
        var position = /** @type {?} */ (computeDesiredMousePosition(event));
        var coordinates = ovmap.getEventCoordinate(/** @type {Event} */ (position));

        overlay.setPosition(coordinates);
      };

      var endMoving = function(event) {
        var coordinates = ovmap.getEventCoordinate(event);

        scope.getMap().getView().setCenter(coordinates);

        window.removeEventListener('mousemove', move);
        window.removeEventListener('mouseup', endMoving);
      };

      /* Binding */

      overlayBox.addEventListener('mousedown', function() {
        window.addEventListener('mousemove', move);
        window.addEventListener('mouseup', endMoving);
      });
    }

    if ( Control$$1 ) OverviewMap.__proto__ = Control$$1;
    OverviewMap.prototype = Object.create( Control$$1 && Control$$1.prototype );
    OverviewMap.prototype.constructor = OverviewMap;

    /**
     * @inheritDoc
     * @api
     */
    OverviewMap.prototype.setMap = function setMap (map) {
      var oldMap = this.getMap();
      if (map === oldMap) {
        return;
      }
      if (oldMap) {
        var oldView = oldMap.getView();
        if (oldView) {
          this.unbindView_(oldView);
        }
        this.ovmap_.setTarget(null);
      }
      Control$$1.prototype.setMap.call(this, map);

      if (map) {
        this.ovmap_.setTarget(this.ovmapDiv_);
        this.listenerKeys.push(listen(
          map, ObjectEventType.PROPERTYCHANGE,
          this.handleMapPropertyChange_, this));

        // TODO: to really support map switching, this would need to be reworked
        if (this.ovmap_.getLayers().getLength() === 0) {
          this.ovmap_.setLayerGroup(map.getLayerGroup());
        }

        var view = map.getView();
        if (view) {
          this.bindView_(view);
          if (view.isDef()) {
            this.ovmap_.updateSize();
            this.resetExtent_();
          }
        }
      }
    };

    /**
     * Handle map property changes.  This only deals with changes to the map's view.
     * @param {import("../Object.js").ObjectEvent} event The propertychange event.
     * @private
     */
    OverviewMap.prototype.handleMapPropertyChange_ = function handleMapPropertyChange_ (event) {
      if (event.key === MapProperty.VIEW) {
        var oldView = /** @type {import("../View.js").default} */ (event.oldValue);
        if (oldView) {
          this.unbindView_(oldView);
        }
        var newView = this.getMap().getView();
        this.bindView_(newView);
      }
    };

    /**
     * Register listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */
    OverviewMap.prototype.bindView_ = function bindView_ (view) {
      listen(view,
        getChangeEventType(ViewProperty.ROTATION),
        this.handleRotationChanged_, this);
    };

    /**
     * Unregister listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */
    OverviewMap.prototype.unbindView_ = function unbindView_ (view) {
      unlisten(view,
        getChangeEventType(ViewProperty.ROTATION),
        this.handleRotationChanged_, this);
    };

    /**
     * Handle rotation changes to the main map.
     * TODO: This should rotate the extent rectrangle instead of the
     * overview map's view.
     * @private
     */
    OverviewMap.prototype.handleRotationChanged_ = function handleRotationChanged_ () {
      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());
    };

    /**
     * Reset the overview map extent if the box size (width or
     * height) is less than the size of the overview map size times minRatio
     * or is greater than the size of the overview size times maxRatio.
     *
     * If the map extent was not reset, the box size can fits in the defined
     * ratio sizes. This method then checks if is contained inside the overview
     * map current extent. If not, recenter the overview map to the current
     * main map center location.
     * @private
     */
    OverviewMap.prototype.validateExtent_ = function validateExtent_ () {
      var map = this.getMap();
      var ovmap = this.ovmap_;

      if (!map.isRendered() || !ovmap.isRendered()) {
        return;
      }

      var mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      var view = map.getView();
      var extent$$1 = view.calculateExtent(mapSize);

      var ovmapSize = /** @type {import("../size.js").Size} */ (ovmap.getSize());

      var ovview = ovmap.getView();
      var ovextent = ovview.calculateExtent(ovmapSize);

      var topLeftPixel =
          ovmap.getPixelFromCoordinate(getTopLeft(extent$$1));
      var bottomRightPixel =
          ovmap.getPixelFromCoordinate(getBottomRight(extent$$1));

      var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);
      var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);

      var ovmapWidth = ovmapSize[0];
      var ovmapHeight = ovmapSize[1];

      if (boxWidth < ovmapWidth * MIN_RATIO ||
          boxHeight < ovmapHeight * MIN_RATIO ||
          boxWidth > ovmapWidth * MAX_RATIO ||
          boxHeight > ovmapHeight * MAX_RATIO) {
        this.resetExtent_();
      } else if (!containsExtent(ovextent, extent$$1)) {
        this.recenter_();
      }
    };

    /**
     * Reset the overview map extent to half calculated min and max ratio times
     * the extent of the main map.
     * @private
     */
    OverviewMap.prototype.resetExtent_ = function resetExtent_ () {

      var map = this.getMap();
      var ovmap = this.ovmap_;

      var mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      var view = map.getView();
      var extent$$1 = view.calculateExtent(mapSize);

      var ovview = ovmap.getView();

      // get how many times the current map overview could hold different
      // box sizes using the min and max ratio, pick the step in the middle used
      // to calculate the extent from the main map to set it to the overview map,
      var steps = Math.log(
        MAX_RATIO / MIN_RATIO) / Math.LN2;
      var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);
      scaleFromCenter(extent$$1, ratio);
      ovview.fit(extent$$1);
    };

    /**
     * Set the center of the overview map to the map center without changing its
     * resolution.
     * @private
     */
    OverviewMap.prototype.recenter_ = function recenter_ () {
      var map = this.getMap();
      var ovmap = this.ovmap_;

      var view = map.getView();

      var ovview = ovmap.getView();

      ovview.setCenter(view.getCenter());
    };

    /**
     * Update the box using the main map extent
     * @private
     */
    OverviewMap.prototype.updateBox_ = function updateBox_ () {
      var map = this.getMap();
      var ovmap = this.ovmap_;

      if (!map.isRendered() || !ovmap.isRendered()) {
        return;
      }

      var mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      var view = map.getView();

      var ovview = ovmap.getView();

      var rotation = view.getRotation();

      var overlay = this.boxOverlay_;
      var box = this.boxOverlay_.getElement();
      var extent$$1 = view.calculateExtent(mapSize);
      var ovresolution = ovview.getResolution();
      var bottomLeft = getBottomLeft(extent$$1);
      var topRight = getTopRight(extent$$1);

      // set position using bottom left coordinates
      var rotateBottomLeft = this.calculateCoordinateRotate_(rotation, bottomLeft);
      overlay.setPosition(rotateBottomLeft);

      // set box size calculated from map extent size and overview map resolution
      if (box) {
        box.style.width = Math.abs((bottomLeft[0] - topRight[0]) / ovresolution) + 'px';
        box.style.height = Math.abs((topRight[1] - bottomLeft[1]) / ovresolution) + 'px';
      }
    };

    /**
     * @param {number} rotation Target rotation.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {import("../coordinate.js").Coordinate|undefined} Coordinate for rotation and center anchor.
     * @private
     */
    OverviewMap.prototype.calculateCoordinateRotate_ = function calculateCoordinateRotate_ (rotation, coordinate) {
      var coordinateRotate;

      var map = this.getMap();
      var view = map.getView();

      var currentCenter = view.getCenter();

      if (currentCenter) {
        coordinateRotate = [
          coordinate[0] - currentCenter[0],
          coordinate[1] - currentCenter[1]
        ];
        rotate$2(coordinateRotate, rotation);
        add$2(coordinateRotate, currentCenter);
      }
      return coordinateRotate;
    };

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    OverviewMap.prototype.handleClick_ = function handleClick_ (event) {
      event.preventDefault();
      this.handleToggle_();
    };

    /**
     * @private
     */
    OverviewMap.prototype.handleToggle_ = function handleToggle_ () {
      this.element.classList.toggle(CLASS_COLLAPSED);
      if (this.collapsed_) {
        replaceNode(this.collapseLabel_, this.label_);
      } else {
        replaceNode(this.label_, this.collapseLabel_);
      }
      this.collapsed_ = !this.collapsed_;

      // manage overview map if it had not been rendered before and control
      // is expanded
      var ovmap = this.ovmap_;
      if (!this.collapsed_ && !ovmap.isRendered()) {
        ovmap.updateSize();
        this.resetExtent_();
        listenOnce(ovmap, MapEventType.POSTRENDER,
          function(event) {
            this.updateBox_();
          },
          this);
      }
    };

    /**
     * Return `true` if the overview map is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */
    OverviewMap.prototype.getCollapsible = function getCollapsible () {
      return this.collapsible_;
    };

    /**
     * Set whether the overview map should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */
    OverviewMap.prototype.setCollapsible = function setCollapsible (collapsible) {
      if (this.collapsible_ === collapsible) {
        return;
      }
      this.collapsible_ = collapsible;
      this.element.classList.toggle('ol-uncollapsible');
      if (!collapsible && this.collapsed_) {
        this.handleToggle_();
      }
    };

    /**
     * Collapse or expand the overview map according to the passed parameter. Will
     * not do anything if the overview map isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */
    OverviewMap.prototype.setCollapsed = function setCollapsed (collapsed) {
      if (!this.collapsible_ || this.collapsed_ === collapsed) {
        return;
      }
      this.handleToggle_();
    };

    /**
     * Determine if the overview map is collapsed.
     * @return {boolean} The overview map is collapsed.
     * @api
     */
    OverviewMap.prototype.getCollapsed = function getCollapsed () {
      return this.collapsed_;
    };

    /**
     * Return the overview map.
     * @return {import("../PluggableMap.js").default} Overview map.
     * @api
     */
    OverviewMap.prototype.getOverviewMap = function getOverviewMap () {
      return this.ovmap_;
    };

    return OverviewMap;
  }(Control));


  /**
   * Update the overview map element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {OverviewMap}
   * @api
   */
  function render$3(mapEvent) {
    this.validateExtent_();
    this.updateBox_();
  }

  /**
   * @module ol/control/ScaleLine
   */


  /**
   * @type {string}
   */
  var UNITS_PROP = 'units';

  /**
   * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,
   * `'nautical'`, `'metric'`, `'us'`.
   * @enum {string}
   */
  var Units$2 = {
    DEGREES: 'degrees',
    IMPERIAL: 'imperial',
    NAUTICAL: 'nautical',
    METRIC: 'metric',
    US: 'us'
  };


  /**
   * @const
   * @type {Array<number>}
   */
  var LEADING_DIGITS = [1, 2, 5];


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-scale-line'] CSS Class name.
   * @property {number} [minWidth=64] Minimum width in pixels.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {Units|string} [units='metric'] Units.
   */


  /**
   * @classdesc
   * A control displaying rough y-axis distances, calculated for the center of the
   * viewport. For conformal projections (e.g. EPSG:3857, the default view
   * projection in OpenLayers), the scale is valid for all directions.
   * No scale line will be shown when the y-axis distance of a pixel at the
   * viewport center cannot be calculated in the view projection.
   * By default the scale line will show in the bottom left portion of the map,
   * but this can be changed by using the css selector `.ol-scale-line`.
   *
   * @api
   */
  var ScaleLine = /*@__PURE__*/(function (Control$$1) {
    function ScaleLine(opt_options) {

      var options = opt_options ? opt_options : {};

      var className = options.className !== undefined ? options.className : 'ol-scale-line';

      Control$$1.call(this, {
        element: document.createElement('div'),
        render: options.render || render$4,
        target: options.target
      });

      /**
       * @private
       * @type {HTMLElement}
       */
      this.innerElement_ = document.createElement('div');
      this.innerElement_.className = className + '-inner';

      this.element.className = className + ' ' + CLASS_UNSELECTABLE;
      this.element.appendChild(this.innerElement_);

      /**
       * @private
       * @type {?import("../View.js").State}
       */
      this.viewState_ = null;

      /**
       * @private
       * @type {number}
       */
      this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = false;

      /**
       * @private
       * @type {number|undefined}
       */
      this.renderedWidth_ = undefined;

      /**
       * @private
       * @type {string}
       */
      this.renderedHTML_ = '';

      listen(
        this, getChangeEventType(UNITS_PROP),
        this.handleUnitsChanged_, this);

      this.setUnits(/** @type {Units} */ (options.units) || Units$2.METRIC);

    }

    if ( Control$$1 ) ScaleLine.__proto__ = Control$$1;
    ScaleLine.prototype = Object.create( Control$$1 && Control$$1.prototype );
    ScaleLine.prototype.constructor = ScaleLine;

    /**
     * Return the units to use in the scale line.
     * @return {Units} The units
     * to use in the scale line.
     * @observable
     * @api
     */
    ScaleLine.prototype.getUnits = function getUnits () {
      return this.get(UNITS_PROP);
    };

    /**
     * @private
     */
    ScaleLine.prototype.handleUnitsChanged_ = function handleUnitsChanged_ () {
      this.updateElement_();
    };

    /**
     * Set the units to use in the scale line.
     * @param {Units} units The units to use in the scale line.
     * @observable
     * @api
     */
    ScaleLine.prototype.setUnits = function setUnits (units) {
      this.set(UNITS_PROP, units);
    };

    /**
     * @private
     */
    ScaleLine.prototype.updateElement_ = function updateElement_ () {
      var viewState = this.viewState_;

      if (!viewState) {
        if (this.renderedVisible_) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      var center = viewState.center;
      var projection = viewState.projection;
      var units = this.getUnits();
      var pointResolutionUnits = units == Units$2.DEGREES ?
        Units$1.DEGREES :
        Units$1.METERS;
      var pointResolution =
          getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);
      if (projection.getUnits() != Units$1.DEGREES && projection.getMetersPerUnit()
        && pointResolutionUnits == Units$1.METERS) {
        pointResolution *= projection.getMetersPerUnit();
      }

      var nominalCount = this.minWidth_ * pointResolution;
      var suffix = '';
      if (units == Units$2.DEGREES) {
        var metersPerDegree = METERS_PER_UNIT[Units$1.DEGREES];
        if (projection.getUnits() == Units$1.DEGREES) {
          nominalCount *= metersPerDegree;
        } else {
          pointResolution /= metersPerDegree;
        }
        if (nominalCount < metersPerDegree / 60) {
          suffix = '\u2033'; // seconds
          pointResolution *= 3600;
        } else if (nominalCount < metersPerDegree) {
          suffix = '\u2032'; // minutes
          pointResolution *= 60;
        } else {
          suffix = '\u00b0'; // degrees
        }
      } else if (units == Units$2.IMPERIAL) {
        if (nominalCount < 0.9144) {
          suffix = 'in';
          pointResolution /= 0.0254;
        } else if (nominalCount < 1609.344) {
          suffix = 'ft';
          pointResolution /= 0.3048;
        } else {
          suffix = 'mi';
          pointResolution /= 1609.344;
        }
      } else if (units == Units$2.NAUTICAL) {
        pointResolution /= 1852;
        suffix = 'nm';
      } else if (units == Units$2.METRIC) {
        if (nominalCount < 0.001) {
          suffix = 'μm';
          pointResolution *= 1000000;
        } else if (nominalCount < 1) {
          suffix = 'mm';
          pointResolution *= 1000;
        } else if (nominalCount < 1000) {
          suffix = 'm';
        } else {
          suffix = 'km';
          pointResolution /= 1000;
        }
      } else if (units == Units$2.US) {
        if (nominalCount < 0.9144) {
          suffix = 'in';
          pointResolution *= 39.37;
        } else if (nominalCount < 1609.344) {
          suffix = 'ft';
          pointResolution /= 0.30480061;
        } else {
          suffix = 'mi';
          pointResolution /= 1609.3472;
        }
      } else {
        assert(false, 33); // Invalid units
      }

      var i = 3 * Math.floor(
        Math.log(this.minWidth_ * pointResolution) / Math.log(10));
      var count, width;
      while (true) {
        count = LEADING_DIGITS[((i % 3) + 3) % 3] *
            Math.pow(10, Math.floor(i / 3));
        width = Math.round(count / pointResolution);
        if (isNaN(width)) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
          return;
        } else if (width >= this.minWidth_) {
          break;
        }
        ++i;
      }

      var html = count + ' ' + suffix;
      if (this.renderedHTML_ != html) {
        this.innerElement_.innerHTML = html;
        this.renderedHTML_ = html;
      }

      if (this.renderedWidth_ != width) {
        this.innerElement_.style.width = width + 'px';
        this.renderedWidth_ = width;
      }

      if (!this.renderedVisible_) {
        this.element.style.display = '';
        this.renderedVisible_ = true;
      }

    };

    return ScaleLine;
  }(Control));


  /**
   * Update the scale line element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {ScaleLine}
   * @api
   */
  function render$4(mapEvent) {
    var frameState = mapEvent.frameState;
    if (!frameState) {
      this.viewState_ = null;
    } else {
      this.viewState_ = frameState.viewState;
    }
    this.updateElement_();
  }

  /**
   * @module ol/control/ZoomSlider
   */


  /**
   * The enum for available directions.
   *
   * @enum {number}
   */
  var Direction = {
    VERTICAL: 0,
    HORIZONTAL: 1
  };


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-zoomslider'] CSS class name.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   */


  /**
   * @classdesc
   * A slider type of control for zooming.
   *
   * Example:
   *
   *     map.addControl(new ZoomSlider());
   *
   * @api
   */
  var ZoomSlider = /*@__PURE__*/(function (Control$$1) {
    function ZoomSlider(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        render: options.render || render$5
      });

      /**
        * @type {!Array.<import("../events.js").EventsKey>}
        * @private
        */
      this.dragListenerKeys_ = [];

      /**
       * Will hold the current resolution of the view.
       *
       * @type {number|undefined}
       * @private
       */
      this.currentResolution_ = undefined;

      /**
       * The direction of the slider. Will be determined from actual display of the
       * container and defaults to Direction.VERTICAL.
       *
       * @type {Direction}
       * @private
       */
      this.direction_ = Direction.VERTICAL;

      /**
       * @type {boolean}
       * @private
       */
      this.dragging_;

      /**
       * @type {number}
       * @private
       */
      this.heightLimit_ = 0;

      /**
       * @type {number}
       * @private
       */
      this.widthLimit_ = 0;

      /**
       * @type {number|undefined}
       * @private
       */
      this.previousX_;

      /**
       * @type {number|undefined}
       * @private
       */
      this.previousY_;

      /**
       * The calculated thumb size (border box plus margins).  Set when initSlider_
       * is called.
       * @type {import("../size.js").Size}
       * @private
       */
      this.thumbSize_ = null;

      /**
       * Whether the slider is initialized.
       * @type {boolean}
       * @private
       */
      this.sliderInitialized_ = false;

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 200;

      var className = options.className !== undefined ? options.className : 'ol-zoomslider';
      var thumbElement = document.createElement('button');
      thumbElement.setAttribute('type', 'button');
      thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;
      var containerElement = this.element;
      containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      containerElement.appendChild(thumbElement);
      /**
       * @type {PointerEventHandler}
       * @private
       */
      this.dragger_ = new PointerEventHandler(containerElement);

      listen(this.dragger_, PointerEventType.POINTERDOWN,
        this.handleDraggerStart_, this);
      listen(this.dragger_, PointerEventType.POINTERMOVE,
        this.handleDraggerDrag_, this);
      listen(this.dragger_, PointerEventType.POINTERUP,
        this.handleDraggerEnd_, this);

      listen(containerElement, EventType.CLICK, this.handleContainerClick_, this);
      listen(thumbElement, EventType.CLICK, stopPropagation);
    }

    if ( Control$$1 ) ZoomSlider.__proto__ = Control$$1;
    ZoomSlider.prototype = Object.create( Control$$1 && Control$$1.prototype );
    ZoomSlider.prototype.constructor = ZoomSlider;

    /**
     * @inheritDoc
     */
    ZoomSlider.prototype.disposeInternal = function disposeInternal () {
      this.dragger_.dispose();
      Control$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @inheritDoc
     */
    ZoomSlider.prototype.setMap = function setMap (map) {
      Control$$1.prototype.setMap.call(this, map);
      if (map) {
        map.render();
      }
    };

    /**
     * Initializes the slider element. This will determine and set this controls
     * direction_ and also constrain the dragging of the thumb to always be within
     * the bounds of the container.
     *
     * @private
     */
    ZoomSlider.prototype.initSlider_ = function initSlider_ () {
      var container = this.element;
      var containerSize = {
        width: container.offsetWidth, height: container.offsetHeight
      };

      var thumb = /** @type {HTMLElement} */ (container.firstElementChild);
      var computedStyle = getComputedStyle(thumb);
      var thumbWidth = thumb.offsetWidth +
          parseFloat(computedStyle['marginRight']) +
          parseFloat(computedStyle['marginLeft']);
      var thumbHeight = thumb.offsetHeight +
          parseFloat(computedStyle['marginTop']) +
          parseFloat(computedStyle['marginBottom']);
      this.thumbSize_ = [thumbWidth, thumbHeight];

      if (containerSize.width > containerSize.height) {
        this.direction_ = Direction.HORIZONTAL;
        this.widthLimit_ = containerSize.width - thumbWidth;
      } else {
        this.direction_ = Direction.VERTICAL;
        this.heightLimit_ = containerSize.height - thumbHeight;
      }
      this.sliderInitialized_ = true;
    };

    /**
     * @param {MouseEvent} event The browser event to handle.
     * @private
     */
    ZoomSlider.prototype.handleContainerClick_ = function handleContainerClick_ (event) {
      var view = this.getMap().getView();

      var relativePosition = this.getRelativePosition_(
        event.offsetX - this.thumbSize_[0] / 2,
        event.offsetY - this.thumbSize_[1] / 2);

      var resolution = this.getResolutionForPosition_(relativePosition);

      view.animate({
        resolution: view.constrainResolution(resolution),
        duration: this.duration_,
        easing: easeOut
      });
    };

    /**
     * Handle dragger start events.
     * @param {import("../pointer/PointerEvent.js").default} event The drag event.
     * @private
     */
    ZoomSlider.prototype.handleDraggerStart_ = function handleDraggerStart_ (event) {
      if (!this.dragging_ && event.originalEvent.target === this.element.firstElementChild) {
        this.getMap().getView().setHint(ViewHint.INTERACTING, 1);
        this.previousX_ = event.clientX;
        this.previousY_ = event.clientY;
        this.dragging_ = true;

        if (this.dragListenerKeys_.length === 0) {
          var drag = this.handleDraggerDrag_;
          var end = this.handleDraggerEnd_;
          this.dragListenerKeys_.push(
            listen(document, EventType.MOUSEMOVE, drag, this),
            listen(document, PointerEventType.POINTERMOVE, drag, this),
            listen(document, EventType.MOUSEUP, end, this),
            listen(document, PointerEventType.POINTERUP, end, this)
          );
        }
      }
    };

    /**
     * Handle dragger drag events.
     *
     * @param {import("../pointer/PointerEvent.js").default} event The drag event.
     * @private
     */
    ZoomSlider.prototype.handleDraggerDrag_ = function handleDraggerDrag_ (event) {
      if (this.dragging_) {
        var element = /** @type {HTMLElement} */ (this.element.firstElementChild);
        var deltaX = event.clientX - this.previousX_ + parseFloat(element.style.left);
        var deltaY = event.clientY - this.previousY_ + parseFloat(element.style.top);
        var relativePosition = this.getRelativePosition_(deltaX, deltaY);
        this.currentResolution_ = this.getResolutionForPosition_(relativePosition);
        this.getMap().getView().setResolution(this.currentResolution_);
        this.setThumbPosition_(this.currentResolution_);
        this.previousX_ = event.clientX;
        this.previousY_ = event.clientY;
      }
    };

    /**
     * Handle dragger end events.
     * @param {import("../pointer/PointerEvent.js").default} event The drag event.
     * @private
     */
    ZoomSlider.prototype.handleDraggerEnd_ = function handleDraggerEnd_ (event) {
      if (this.dragging_) {
        var view = this.getMap().getView();
        view.setHint(ViewHint.INTERACTING, -1);

        view.animate({
          resolution: view.constrainResolution(this.currentResolution_),
          duration: this.duration_,
          easing: easeOut
        });

        this.dragging_ = false;
        this.previousX_ = undefined;
        this.previousY_ = undefined;
        this.dragListenerKeys_.forEach(unlistenByKey);
        this.dragListenerKeys_.length = 0;
      }
    };

    /**
     * Positions the thumb inside its container according to the given resolution.
     *
     * @param {number} res The res.
     * @private
     */
    ZoomSlider.prototype.setThumbPosition_ = function setThumbPosition_ (res) {
      var position = this.getPositionForResolution_(res);
      var thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);

      if (this.direction_ == Direction.HORIZONTAL) {
        thumb.style.left = this.widthLimit_ * position + 'px';
      } else {
        thumb.style.top = this.heightLimit_ * position + 'px';
      }
    };

    /**
     * Calculates the relative position of the thumb given x and y offsets.  The
     * relative position scales from 0 to 1.  The x and y offsets are assumed to be
     * in pixel units within the dragger limits.
     *
     * @param {number} x Pixel position relative to the left of the slider.
     * @param {number} y Pixel position relative to the top of the slider.
     * @return {number} The relative position of the thumb.
     * @private
     */
    ZoomSlider.prototype.getRelativePosition_ = function getRelativePosition_ (x, y) {
      var amount;
      if (this.direction_ === Direction.HORIZONTAL) {
        amount = x / this.widthLimit_;
      } else {
        amount = y / this.heightLimit_;
      }
      return clamp(amount, 0, 1);
    };

    /**
     * Calculates the corresponding resolution of the thumb given its relative
     * position (where 0 is the minimum and 1 is the maximum).
     *
     * @param {number} position The relative position of the thumb.
     * @return {number} The corresponding resolution.
     * @private
     */
    ZoomSlider.prototype.getResolutionForPosition_ = function getResolutionForPosition_ (position) {
      var fn = this.getMap().getView().getResolutionForValueFunction();
      return fn(1 - position);
    };

    /**
     * Determines the relative position of the slider for the given resolution.  A
     * relative position of 0 corresponds to the minimum view resolution.  A
     * relative position of 1 corresponds to the maximum view resolution.
     *
     * @param {number} res The resolution.
     * @return {number} The relative position value (between 0 and 1).
     * @private
     */
    ZoomSlider.prototype.getPositionForResolution_ = function getPositionForResolution_ (res) {
      var fn = this.getMap().getView().getValueForResolutionFunction();
      return 1 - fn(res);
    };

    return ZoomSlider;
  }(Control));


  /**
   * Update the zoomslider element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {ZoomSlider}
   * @api
   */
  function render$5(mapEvent) {
    if (!mapEvent.frameState) {
      return;
    }
    if (!this.sliderInitialized_) {
      this.initSlider_();
    }
    var res = mapEvent.frameState.viewState.resolution;
    if (res !== this.currentResolution_) {
      this.currentResolution_ = res;
      this.setThumbPosition_(res);
    }
  }

  /**
   * @module ol/control/ZoomToExtent
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-zoom-extent'] Class name.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {string|HTMLElement} [label='E'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.
   * @property {import("../extent.js").Extent} [extent] The extent to zoom to. If undefined the validity
   * extent of the view projection is used.
   */


  /**
   * @classdesc
   * A button control which, when pressed, changes the map view to a specific
   * extent. To style this control use the css selector `.ol-zoom-extent`.
   *
   * @api
   */
  var ZoomToExtent = /*@__PURE__*/(function (Control$$1) {
    function ZoomToExtent(opt_options) {
      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        target: options.target
      });

      /**
       * @type {import("../extent.js").Extent}
       * @protected
       */
      this.extent = options.extent ? options.extent : null;

      var className = options.className !== undefined ? options.className : 'ol-zoom-extent';

      var label = options.label !== undefined ? options.label : 'E';
      var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';
      var button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(
        typeof label === 'string' ? document.createTextNode(label) : label
      );

      listen(button, EventType.CLICK, this.handleClick_, this);

      var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(button);
    }

    if ( Control$$1 ) ZoomToExtent.__proto__ = Control$$1;
    ZoomToExtent.prototype = Object.create( Control$$1 && Control$$1.prototype );
    ZoomToExtent.prototype.constructor = ZoomToExtent;

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    ZoomToExtent.prototype.handleClick_ = function handleClick_ (event) {
      event.preventDefault();
      this.handleZoomToExtent();
    };

    /**
     * @protected
     */
    ZoomToExtent.prototype.handleZoomToExtent = function handleZoomToExtent () {
      var map = this.getMap();
      var view = map.getView();
      var extent$$1 = !this.extent ? view.getProjection().getExtent() : this.extent;
      view.fit(extent$$1);
    };

    return ZoomToExtent;
  }(Control));

  /**
   * @module ol/control
   */

  /**
   * @module ol/webgl/Shader
   */

  /**
   * @abstract
   */
  var WebGLShader = function WebGLShader(source) {

    /**
     * @private
     * @type {string}
     */
    this.source_ = source;

  };

  /**
   * @return {boolean} Is animated?
   */
  WebGLShader.prototype.isAnimated = function isAnimated () {
    return false;
  };

  /**
   * @abstract
   * @return {number} Type.
   */
  WebGLShader.prototype.getType = function getType () {
    return abstract();
  };

  /**
   * @return {string} Source.
   */
  WebGLShader.prototype.getSource = function getSource () {
    return this.source_;
  };

  /**
   * @module ol/webgl/Fragment
   */

  var WebGLFragment = /*@__PURE__*/(function (WebGLShader$$1) {
    function WebGLFragment(source) {
      WebGLShader$$1.call(this, source);
    }

    if ( WebGLShader$$1 ) WebGLFragment.__proto__ = WebGLShader$$1;
    WebGLFragment.prototype = Object.create( WebGLShader$$1 && WebGLShader$$1.prototype );
    WebGLFragment.prototype.constructor = WebGLFragment;

    /**
     * @inheritDoc
     */
    WebGLFragment.prototype.getType = function getType () {
      return FRAGMENT_SHADER;
    };

    return WebGLFragment;
  }(WebGLShader));

  /**
   * @module ol/webgl/Vertex
   */

  var WebGLVertex = /*@__PURE__*/(function (WebGLShader$$1) {
    function WebGLVertex(source) {
      WebGLShader$$1.call(this, source);
    }

    if ( WebGLShader$$1 ) WebGLVertex.__proto__ = WebGLShader$$1;
    WebGLVertex.prototype = Object.create( WebGLShader$$1 && WebGLShader$$1.prototype );
    WebGLVertex.prototype.constructor = WebGLVertex;

    /**
     * @inheritDoc
     */
    WebGLVertex.prototype.getType = function getType () {
      return VERTEX_SHADER;
    };

    return WebGLVertex;
  }(WebGLShader));

  /**
   * @module ol/render/webgl/circlereplay/defaultshader
   */

  var fragment = new WebGLFragment('precision mediump float;\nvarying vec2 v_center;\nvarying vec2 v_offset;\nvarying float v_halfWidth;\nvarying float v_pixelRatio;\n\n\n\nuniform float u_opacity;\nuniform vec4 u_fillColor;\nuniform vec4 u_strokeColor;\nuniform vec2 u_size;\n\nvoid main(void) {\n  vec2 windowCenter = vec2((v_center.x + 1.0) / 2.0 * u_size.x * v_pixelRatio,\n      (v_center.y + 1.0) / 2.0 * u_size.y * v_pixelRatio);\n  vec2 windowOffset = vec2((v_offset.x + 1.0) / 2.0 * u_size.x * v_pixelRatio,\n      (v_offset.y + 1.0) / 2.0 * u_size.y * v_pixelRatio);\n  float radius = length(windowCenter - windowOffset);\n  float dist = length(windowCenter - gl_FragCoord.xy);\n  if (dist > radius + v_halfWidth) {\n    if (u_strokeColor.a == 0.0) {\n      gl_FragColor = u_fillColor;\n    } else {\n      gl_FragColor = u_strokeColor;\n    }\n    gl_FragColor.a = gl_FragColor.a - (dist - (radius + v_halfWidth));\n  } else if (u_fillColor.a == 0.0) {\n    // Hooray, no fill, just stroke. We can use real antialiasing.\n    gl_FragColor = u_strokeColor;\n    if (dist < radius - v_halfWidth) {\n      gl_FragColor.a = gl_FragColor.a - (radius - v_halfWidth - dist);\n    }\n  } else {\n    gl_FragColor = u_fillColor;\n    float strokeDist = radius - v_halfWidth;\n    float antialias = 2.0 * v_pixelRatio;\n    if (dist > strokeDist) {\n      gl_FragColor = u_strokeColor;\n    } else if (dist >= strokeDist - antialias) {\n      float step = smoothstep(strokeDist - antialias, strokeDist, dist);\n      gl_FragColor = mix(u_fillColor, u_strokeColor, step);\n    }\n  }\n  gl_FragColor.a = gl_FragColor.a * u_opacity;\n  if (gl_FragColor.a <= 0.0) {\n    discard;\n  }\n}\n');

  var vertex = new WebGLVertex('varying vec2 v_center;\nvarying vec2 v_offset;\nvarying float v_halfWidth;\nvarying float v_pixelRatio;\n\n\nattribute vec2 a_position;\nattribute float a_instruction;\nattribute float a_radius;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_lineWidth;\nuniform float u_pixelRatio;\n\nvoid main(void) {\n  mat4 offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n  v_center = vec4(u_projectionMatrix * vec4(a_position, 0.0, 1.0)).xy;\n  v_pixelRatio = u_pixelRatio;\n  float lineWidth = u_lineWidth * u_pixelRatio;\n  v_halfWidth = lineWidth / 2.0;\n  if (lineWidth == 0.0) {\n    lineWidth = 2.0 * u_pixelRatio;\n  }\n  vec2 offset;\n  // Radius with anitaliasing (roughly).\n  float radius = a_radius + 3.0 * u_pixelRatio;\n  // Until we get gl_VertexID in WebGL, we store an instruction.\n  if (a_instruction == 0.0) {\n    // Offsetting the edges of the triangle by lineWidth / 2 is necessary, however\n    // we should also leave some space for the antialiasing, thus we offset by lineWidth.\n    offset = vec2(-1.0, 1.0);\n  } else if (a_instruction == 1.0) {\n    offset = vec2(-1.0, -1.0);\n  } else if (a_instruction == 2.0) {\n    offset = vec2(1.0, -1.0);\n  } else {\n    offset = vec2(1.0, 1.0);\n  }\n\n  gl_Position = u_projectionMatrix * vec4(a_position + offset * radius, 0.0, 1.0) +\n      offsetMatrix * vec4(offset * lineWidth, 0.0, 0.0);\n  v_offset = vec4(u_projectionMatrix * vec4(a_position.x + a_radius, a_position.y,\n      0.0, 1.0)).xy;\n\n  if (distance(v_center, v_offset) > 20000.0) {\n    gl_Position = vec4(v_center, 0.0, 1.0);\n  }\n}\n\n\n');

  /**
   * @module ol/render/webgl/circlereplay/defaultshader/Locations
   */

  var Locations = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_projectionMatrix = gl.getUniformLocation(
      program, 'u_projectionMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetScaleMatrix = gl.getUniformLocation(
      program, 'u_offsetScaleMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetRotateMatrix = gl.getUniformLocation(
      program, 'u_offsetRotateMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_lineWidth = gl.getUniformLocation(
      program, 'u_lineWidth');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_pixelRatio = gl.getUniformLocation(
      program, 'u_pixelRatio');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_opacity = gl.getUniformLocation(
      program, 'u_opacity');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_fillColor = gl.getUniformLocation(
      program, 'u_fillColor');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_strokeColor = gl.getUniformLocation(
      program, 'u_strokeColor');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_size = gl.getUniformLocation(
      program, 'u_size');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

    /**
     * @type {number}
     */
    this.a_instruction = gl.getAttribLocation(
      program, 'a_instruction');

    /**
     * @type {number}
     */
    this.a_radius = gl.getAttribLocation(
      program, 'a_radius');

  };

  /**
   * @module ol/vec/mat4
   */


  /**
   * @return {Array<number>} 4x4 matrix representing a 3D identity transform.
   */
  function create$1() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }


  /**
   * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.
   * @param {import("../transform.js").Transform} transform Transformation matrix.
   * @return {Array<number>} 2D transformation matrix as flattened 4x4 matrix.
   */
  function fromTransform(mat4, transform) {
    mat4[0] = transform[0];
    mat4[1] = transform[1];
    mat4[4] = transform[2];
    mat4[5] = transform[3];
    mat4[12] = transform[4];
    mat4[13] = transform[5];
    return mat4;
  }

  /**
   * @module ol/render/webgl/Replay
   */

  var WebGLReplay = /*@__PURE__*/(function (VectorContext$$1) {
    function WebGLReplay(tolerance, maxExtent) {
      VectorContext$$1.call(this);

      /**
       * @protected
       * @type {number}
       */
      this.tolerance = tolerance;

      /**
       * @protected
       * @const
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent = maxExtent;

      /**
       * The origin of the coordinate system for the point coordinates sent to
       * the GPU. To eliminate jitter caused by precision problems in the GPU
       * we use the "Rendering Relative to Eye" technique described in the "3D
       * Engine Design for Virtual Globes" book.
       * @protected
       * @type {import("../../coordinate.js").Coordinate}
       */
      this.origin = getCenter(maxExtent);

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.projectionMatrix_ = create();

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.offsetRotateMatrix_ = create();

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.offsetScaleMatrix_ = create();

      /**
       * @private
       * @type {Array<number>}
       */
      this.tmpMat4_ = create$1();

      /**
       * @protected
       * @type {Array<number>}
       */
      this.indices = [];

      /**
       * @protected
       * @type {?import("../../webgl/Buffer.js").default}
       */
      this.indicesBuffer = null;

      /**
       * Start index per feature (the index).
       * @protected
       * @type {Array<number>}
       */
      this.startIndices = [];

      /**
       * Start index per feature (the feature).
       * @protected
       * @type {Array<import("../../Feature.js").default|import("../Feature.js").default>}
       */
      this.startIndicesFeature = [];

      /**
       * @protected
       * @type {Array<number>}
       */
      this.vertices = [];

      /**
       * @protected
       * @type {?import("../../webgl/Buffer.js").default}
       */
      this.verticesBuffer = null;

      /**
       * Optional parameter for PolygonReplay instances.
       * @protected
       * @type {import("./LineStringReplay.js").default|undefined}
       */
      this.lineStringReplay = undefined;

    }

    if ( VectorContext$$1 ) WebGLReplay.__proto__ = VectorContext$$1;
    WebGLReplay.prototype = Object.create( VectorContext$$1 && VectorContext$$1.prototype );
    WebGLReplay.prototype.constructor = WebGLReplay;

    /**
     * @abstract
     * @param {import("../../webgl/Context.js").default} context WebGL context.
     * @return {function()} Delete resources function.
     */
    WebGLReplay.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      return abstract();
    };

    /**
     * @abstract
     * @param {import("../../webgl/Context.js").default} context Context.
     */
    WebGLReplay.prototype.finish = function finish (context) {
      abstract();
    };

    /**
     * @abstract
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @return {import("./circlereplay/defaultshader/Locations.js").default|
       import("./linestringreplay/defaultshader/Locations.js").default|
       import("./polygonreplay/defaultshader/Locations.js").default|
       import("./texturereplay/defaultshader/Locations.js").default} Locations.
     */
    WebGLReplay.prototype.setUpProgram = function setUpProgram (gl, context, size$$1, pixelRatio) {
      return abstract();
    };

    /**
     * @abstract
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("./circlereplay/defaultshader/Locations.js").default|
       import("./linestringreplay/defaultshader/Locations.js").default|
       import("./polygonreplay/defaultshader/Locations.js").default|
       import("./texturereplay/defaultshader/Locations.js").default} locations Locations.
     */
    WebGLReplay.prototype.shutDownProgram = function shutDownProgram (gl, locations) {
      abstract();
    };

    /**
     * @abstract
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {boolean} hitDetection Hit detection mode.
     */
    WebGLReplay.prototype.drawReplay = function drawReplay (gl, context, skippedFeaturesHash, hitDetection) {
      abstract();
    };

    /**
     * @abstract
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Hit extent: Only features intersecting this extent are checked.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplay.prototype.drawHitDetectionReplayOneByOne = function drawHitDetectionReplayOneByOne (gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {
      return abstract();
    };

    /**
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @param {boolean} oneByOne Draw features one-by-one for the hit-detecion.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Hit extent: Only features intersecting this extent are checked.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplay.prototype.drawHitDetectionReplay = function drawHitDetectionReplay (gl, context, skippedFeaturesHash, featureCallback, oneByOne, opt_hitExtent) {
      if (!oneByOne) {
        // draw all hit-detection features in "once" (by texture group)
        return this.drawHitDetectionReplayAll(gl, context,
          skippedFeaturesHash, featureCallback);
      } else {
        // draw hit-detection features one by one
        return this.drawHitDetectionReplayOneByOne(gl, context,
          skippedFeaturesHash, featureCallback, opt_hitExtent);
      }
    };

    /**
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplay.prototype.drawHitDetectionReplayAll = function drawHitDetectionReplayAll (gl, context, skippedFeaturesHash, featureCallback) {
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      this.drawReplay(gl, context, skippedFeaturesHash, true);

      var result = featureCallback(null);
      if (result) {
        return result;
      } else {
        return undefined;
      }
    };

    /**
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} opacity Global opacity.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @param {boolean} oneByOne Draw features one-by-one for the hit-detecion.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Hit extent: Only features intersecting this extent are checked.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplay.prototype.replay = function replay (
      context,
      center,
      resolution,
      rotation,
      size$$1,
      pixelRatio,
      opacity,
      skippedFeaturesHash,
      featureCallback,
      oneByOne,
      opt_hitExtent
    ) {
      var gl = context.getGL();
      var tmpStencil, tmpStencilFunc, tmpStencilMaskVal, tmpStencilRef, tmpStencilMask,
          tmpStencilOpFail, tmpStencilOpPass, tmpStencilOpZFail;

      if (this.lineStringReplay) {
        tmpStencil = gl.isEnabled(gl.STENCIL_TEST);
        tmpStencilFunc = gl.getParameter(gl.STENCIL_FUNC);
        tmpStencilMaskVal = gl.getParameter(gl.STENCIL_VALUE_MASK);
        tmpStencilRef = gl.getParameter(gl.STENCIL_REF);
        tmpStencilMask = gl.getParameter(gl.STENCIL_WRITEMASK);
        tmpStencilOpFail = gl.getParameter(gl.STENCIL_FAIL);
        tmpStencilOpPass = gl.getParameter(gl.STENCIL_PASS_DEPTH_PASS);
        tmpStencilOpZFail = gl.getParameter(gl.STENCIL_PASS_DEPTH_FAIL);

        gl.enable(gl.STENCIL_TEST);
        gl.clear(gl.STENCIL_BUFFER_BIT);
        gl.stencilMask(255);
        gl.stencilFunc(gl.ALWAYS, 1, 255);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);

        this.lineStringReplay.replay(context,
          center, resolution, rotation, size$$1, pixelRatio,
          opacity, skippedFeaturesHash,
          featureCallback, oneByOne, opt_hitExtent);

        gl.stencilMask(0);
        gl.stencilFunc(gl.NOTEQUAL, 1, 255);
      }

      context.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);

      context.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);

      var locations = this.setUpProgram(gl, context, size$$1, pixelRatio);

      // set the "uniform" values
      var projectionMatrix = reset(this.projectionMatrix_);
      scale$1(projectionMatrix, 2 / (resolution * size$$1[0]), 2 / (resolution * size$$1[1]));
      rotate$1(projectionMatrix, -rotation);
      translate$1(projectionMatrix, -(center[0] - this.origin[0]), -(center[1] - this.origin[1]));

      var offsetScaleMatrix = reset(this.offsetScaleMatrix_);
      scale$1(offsetScaleMatrix, 2 / size$$1[0], 2 / size$$1[1]);

      var offsetRotateMatrix = reset(this.offsetRotateMatrix_);
      if (rotation !== 0) {
        rotate$1(offsetRotateMatrix, -rotation);
      }

      gl.uniformMatrix4fv(locations.u_projectionMatrix, false,
        fromTransform(this.tmpMat4_, projectionMatrix));
      gl.uniformMatrix4fv(locations.u_offsetScaleMatrix, false,
        fromTransform(this.tmpMat4_, offsetScaleMatrix));
      gl.uniformMatrix4fv(locations.u_offsetRotateMatrix, false,
        fromTransform(this.tmpMat4_, offsetRotateMatrix));
      gl.uniform1f(locations.u_opacity, opacity);

      // draw!
      var result;
      if (featureCallback === undefined) {
        this.drawReplay(gl, context, skippedFeaturesHash, false);
      } else {
        // draw feature by feature for the hit-detection
        result = this.drawHitDetectionReplay(gl, context, skippedFeaturesHash,
          featureCallback, oneByOne, opt_hitExtent);
      }

      // disable the vertex attrib arrays
      this.shutDownProgram(gl, locations);

      if (this.lineStringReplay) {
        if (!tmpStencil) {
          gl.disable(gl.STENCIL_TEST);
        }
        gl.clear(gl.STENCIL_BUFFER_BIT);
        gl.stencilFunc(/** @type {number} */ (tmpStencilFunc),
          /** @type {number} */ (tmpStencilRef), /** @type {number} */ (tmpStencilMaskVal));
        gl.stencilMask(/** @type {number} */ (tmpStencilMask));
        gl.stencilOp(/** @type {number} */ (tmpStencilOpFail),
          /** @type {number} */ (tmpStencilOpZFail), /** @type {number} */ (tmpStencilOpPass));
      }

      return result;
    };

    /**
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {number} start Start index.
     * @param {number} end End index.
     */
    WebGLReplay.prototype.drawElements = function drawElements (gl, context, start, end) {
      var elementType = context.hasOESElementIndexUint ?
        UNSIGNED_INT : UNSIGNED_SHORT;
      var elementSize = context.hasOESElementIndexUint ? 4 : 2;

      var numItems = end - start;
      var offsetInBytes = start * elementSize;
      gl.drawElements(TRIANGLES, numItems, elementType, offsetInBytes);
    };

    return WebGLReplay;
  }(VectorContext));

  /**
   * @module ol/render/webgl
   */


  /**
   * @const
   * @type {string}
   */
  var DEFAULT_FONT = '10px sans-serif';


  /**
   * @const
   * @type {import("../color.js").Color}
   */
  var DEFAULT_FILLSTYLE = [0.0, 0.0, 0.0, 1.0];


  /**
   * @const
   * @type {string}
   */
  var DEFAULT_LINECAP = 'round';


  /**
   * @const
   * @type {Array<number>}
   */
  var DEFAULT_LINEDASH = [];


  /**
   * @const
   * @type {number}
   */
  var DEFAULT_LINEDASHOFFSET = 0;


  /**
   * @const
   * @type {string}
   */
  var DEFAULT_LINEJOIN = 'round';


  /**
   * @const
   * @type {number}
   */
  var DEFAULT_MITERLIMIT = 10;

  /**
   * @const
   * @type {import("../color.js").Color}
   */
  var DEFAULT_STROKESTYLE = [0.0, 0.0, 0.0, 1.0];


  /**
   * @const
   * @type {number}
   */
  var DEFAULT_TEXTALIGN = 0.5;


  /**
   * @const
   * @type {number}
   */
  var DEFAULT_TEXTBASELINE = 0.5;


  /**
   * @const
   * @type {number}
   */
  var DEFAULT_LINEWIDTH = 1;

  /**
   * @const
   * @type {number}
   */
  var EPSILON = Number.EPSILON || 2.220446049250313e-16;

  /**
   * Calculates the orientation of a triangle based on the determinant method.
   * @param {number} x1 First X coordinate.
   * @param {number} y1 First Y coordinate.
   * @param {number} x2 Second X coordinate.
   * @param {number} y2 Second Y coordinate.
   * @param {number} x3 Third X coordinate.
   * @param {number} y3 Third Y coordinate.
   * @return {boolean|undefined} Triangle is clockwise.
   */
  var triangleIsCounterClockwise = function(x1, y1, x2, y2, x3, y3) {
    var area = (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1);
    return (area <= EPSILON && area >= -EPSILON) ?
      undefined : area > 0;
  };

  /**
   * @module ol/webgl/Buffer
   */

  /**
   * @enum {number}
   */
  var BufferUsage = {
    STATIC_DRAW: STATIC_DRAW,
    STREAM_DRAW: STREAM_DRAW,
    DYNAMIC_DRAW: DYNAMIC_DRAW
  };


  var WebGLBuffer = function WebGLBuffer(opt_arr, opt_usage) {

    /**
     * @private
     * @type {Array<number>}
     */
    this.arr_ = opt_arr !== undefined ? opt_arr : [];

    /**
     * @private
     * @type {number}
     */
    this.usage_ = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;

  };

  /**
   * @return {Array<number>} Array.
   */
  WebGLBuffer.prototype.getArray = function getArray () {
    return this.arr_;
  };

  /**
   * @return {number} Usage.
   */
  WebGLBuffer.prototype.getUsage = function getUsage () {
    return this.usage_;
  };

  /**
   * @module ol/render/webgl/CircleReplay
   */

  var WebGLCircleReplay = /*@__PURE__*/(function (WebGLReplay$$1) {
    function WebGLCircleReplay(tolerance, maxExtent) {
      WebGLReplay$$1.call(this, tolerance, maxExtent);

      /**
       * @private
       * @type {import("./circlereplay/defaultshader/Locations.js").default}
       */
      this.defaultLocations_ = null;

      /**
       * @private
       * @type {Array<Array<Array<number>|number>>}
       */
      this.styles_ = [];

      /**
       * @private
       * @type {Array<number>}
       */
      this.styleIndices_ = [];

      /**
       * @private
       * @type {number}
       */
      this.radius_ = 0;

      /**
       * @private
       * @type {{fillColor: (Array<number>|null),
       *         strokeColor: (Array<number>|null),
       *         lineDash: Array<number>,
       *         lineDashOffset: (number|undefined),
       *         lineWidth: (number|undefined),
       *         changed: boolean}|null}
       */
      this.state_ = {
        fillColor: null,
        strokeColor: null,
        lineDash: null,
        lineDashOffset: undefined,
        lineWidth: undefined,
        changed: false
      };

    }

    if ( WebGLReplay$$1 ) WebGLCircleReplay.__proto__ = WebGLReplay$$1;
    WebGLCircleReplay.prototype = Object.create( WebGLReplay$$1 && WebGLReplay$$1.prototype );
    WebGLCircleReplay.prototype.constructor = WebGLCircleReplay;

    /**
     * @private
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     */
    WebGLCircleReplay.prototype.drawCoordinates_ = function drawCoordinates_ (flatCoordinates, offset, end, stride) {
      var numVertices = this.vertices.length;
      var numIndices = this.indices.length;
      var n = numVertices / 4;
      var i, ii;
      for (i = offset, ii = end; i < ii; i += stride) {
        this.vertices[numVertices++] = flatCoordinates[i];
        this.vertices[numVertices++] = flatCoordinates[i + 1];
        this.vertices[numVertices++] = 0;
        this.vertices[numVertices++] = this.radius_;

        this.vertices[numVertices++] = flatCoordinates[i];
        this.vertices[numVertices++] = flatCoordinates[i + 1];
        this.vertices[numVertices++] = 1;
        this.vertices[numVertices++] = this.radius_;

        this.vertices[numVertices++] = flatCoordinates[i];
        this.vertices[numVertices++] = flatCoordinates[i + 1];
        this.vertices[numVertices++] = 2;
        this.vertices[numVertices++] = this.radius_;

        this.vertices[numVertices++] = flatCoordinates[i];
        this.vertices[numVertices++] = flatCoordinates[i + 1];
        this.vertices[numVertices++] = 3;
        this.vertices[numVertices++] = this.radius_;

        this.indices[numIndices++] = n;
        this.indices[numIndices++] = n + 1;
        this.indices[numIndices++] = n + 2;

        this.indices[numIndices++] = n + 2;
        this.indices[numIndices++] = n + 3;
        this.indices[numIndices++] = n;

        n += 4;
      }
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.drawCircle = function drawCircle (circleGeometry, feature) {
      var radius = circleGeometry.getRadius();
      var stride = circleGeometry.getStride();
      if (radius) {
        this.startIndices.push(this.indices.length);
        this.startIndicesFeature.push(feature);
        if (this.state_.changed) {
          this.styleIndices_.push(this.indices.length);
          this.state_.changed = false;
        }

        this.radius_ = radius;
        var flatCoordinates = circleGeometry.getFlatCoordinates();
        flatCoordinates = translate(flatCoordinates, 0, 2,
          stride, -this.origin[0], -this.origin[1]);
        this.drawCoordinates_(flatCoordinates, 0, 2, stride);
      } else {
        if (this.state_.changed) {
          this.styles_.pop();
          if (this.styles_.length) {
            var lastState = this.styles_[this.styles_.length - 1];
            this.state_.fillColor = /** @type {Array<number>} */ (lastState[0]);
            this.state_.strokeColor = /** @type {Array<number>} */ (lastState[1]);
            this.state_.lineWidth = /** @type {number} */ (lastState[2]);
            this.state_.changed = false;
          }
        }
      }
    };

    /**
     * @inheritDoc
     **/
    WebGLCircleReplay.prototype.finish = function finish (context) {
      // create, bind, and populate the vertices buffer
      this.verticesBuffer = new WebGLBuffer(this.vertices);

      // create, bind, and populate the indices buffer
      this.indicesBuffer = new WebGLBuffer(this.indices);

      this.startIndices.push(this.indices.length);

      //Clean up, if there is nothing to draw
      if (this.styleIndices_.length === 0 && this.styles_.length > 0) {
        this.styles_ = [];
      }

      this.vertices = null;
      this.indices = null;
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      // We only delete our stuff here. The shaders and the program may
      // be used by other CircleReplay instances (for other layers). And
      // they will be deleted when disposing of the import("../../webgl/Context.js").WebGLContext
      // object.
      var verticesBuffer = this.verticesBuffer;
      var indicesBuffer = this.indicesBuffer;
      return function() {
        context.deleteBuffer(verticesBuffer);
        context.deleteBuffer(indicesBuffer);
      };
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.setUpProgram = function setUpProgram (gl, context, size$$1, pixelRatio) {
      // get the program
      var program = context.getProgram(fragment, vertex);

      // get the locations
      var locations;
      if (!this.defaultLocations_) {
        locations = new Locations(gl, program);
        this.defaultLocations_ = locations;
      } else {
        locations = this.defaultLocations_;
      }

      context.useProgram(program);

      // enable the vertex attrib arrays
      gl.enableVertexAttribArray(locations.a_position);
      gl.vertexAttribPointer(locations.a_position, 2, FLOAT,
        false, 16, 0);

      gl.enableVertexAttribArray(locations.a_instruction);
      gl.vertexAttribPointer(locations.a_instruction, 1, FLOAT,
        false, 16, 8);

      gl.enableVertexAttribArray(locations.a_radius);
      gl.vertexAttribPointer(locations.a_radius, 1, FLOAT,
        false, 16, 12);

      // Enable renderer specific uniforms.
      gl.uniform2fv(locations.u_size, size$$1);
      gl.uniform1f(locations.u_pixelRatio, pixelRatio);

      return locations;
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.shutDownProgram = function shutDownProgram (gl, locations) {
      gl.disableVertexAttribArray(locations.a_position);
      gl.disableVertexAttribArray(locations.a_instruction);
      gl.disableVertexAttribArray(locations.a_radius);
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.drawReplay = function drawReplay (gl, context, skippedFeaturesHash, hitDetection) {
      if (!isEmpty$1(skippedFeaturesHash)) {
        this.drawReplaySkipping_(gl, context, skippedFeaturesHash);
      } else {
        //Draw by style groups to minimize drawElements() calls.
        var i, start, end, nextStyle;
        end = this.startIndices[this.startIndices.length - 1];
        for (i = this.styleIndices_.length - 1; i >= 0; --i) {
          start = this.styleIndices_[i];
          nextStyle = this.styles_[i];
          this.setFillStyle_(gl, /** @type {Array<number>} */ (nextStyle[0]));
          this.setStrokeStyle_(gl, /** @type {Array<number>} */ (nextStyle[1]),
            /** @type {number} */ (nextStyle[2]));
          this.drawElements(gl, context, start, end);
          end = start;
        }
      }
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.drawHitDetectionReplayOneByOne = function drawHitDetectionReplayOneByOne (gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex;
      featureIndex = this.startIndices.length - 2;
      end = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setFillStyle_(gl, /** @type {Array<number>} */ (nextStyle[0]));
        this.setStrokeStyle_(gl, /** @type {Array<number>} */ (nextStyle[1]),
          /** @type {number} */ (nextStyle[2]));
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          start = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)] === undefined &&
              feature.getGeometry() &&
              (opt_hitExtent === undefined || intersects(
                /** @type {Array<number>} */ (opt_hitExtent),
                feature.getGeometry().getExtent()))) {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            this.drawElements(gl, context, start, end);

            var result = featureCallback(feature);

            if (result) {
              return result;
            }

          }
          featureIndex--;
          end = start;
        }
      }
      return undefined;
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object} skippedFeaturesHash Ids of features to skip.
     */
    WebGLCircleReplay.prototype.drawReplaySkipping_ = function drawReplaySkipping_ (gl, context, skippedFeaturesHash) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex, featureStart;
      featureIndex = this.startIndices.length - 2;
      end = start = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setFillStyle_(gl, /** @type {Array<number>} */ (nextStyle[0]));
        this.setStrokeStyle_(gl, /** @type {Array<number>} */ (nextStyle[1]),
          /** @type {number} */ (nextStyle[2]));
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          featureStart = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)]) {
            if (start !== end) {
              this.drawElements(gl, context, start, end);
            }
            end = featureStart;
          }
          featureIndex--;
          start = featureStart;
        }
        if (start !== end) {
          this.drawElements(gl, context, start, end);
        }
        start = end = groupStart;
      }
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {Array<number>} color Color.
     */
    WebGLCircleReplay.prototype.setFillStyle_ = function setFillStyle_ (gl, color) {
      gl.uniform4fv(this.defaultLocations_.u_fillColor, color);
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {Array<number>} color Color.
     * @param {number} lineWidth Line width.
     */
    WebGLCircleReplay.prototype.setStrokeStyle_ = function setStrokeStyle_ (gl, color, lineWidth) {
      gl.uniform4fv(this.defaultLocations_.u_strokeColor, color);
      gl.uniform1f(this.defaultLocations_.u_lineWidth, lineWidth);
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      var strokeStyleColor, strokeStyleWidth;
      if (strokeStyle) {
        var strokeStyleLineDash = strokeStyle.getLineDash();
        this.state_.lineDash = strokeStyleLineDash ?
          strokeStyleLineDash : DEFAULT_LINEDASH;
        var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        this.state_.lineDashOffset = strokeStyleLineDashOffset ?
          strokeStyleLineDashOffset : DEFAULT_LINEDASHOFFSET;
        strokeStyleColor = strokeStyle.getColor();
        if (!(strokeStyleColor instanceof CanvasGradient) &&
            !(strokeStyleColor instanceof CanvasPattern)) {
          strokeStyleColor = asArray(strokeStyleColor).map(function(c, i) {
            return i != 3 ? c / 255 : c;
          }) || DEFAULT_STROKESTYLE;
        } else {
          strokeStyleColor = DEFAULT_STROKESTYLE;
        }
        strokeStyleWidth = strokeStyle.getWidth();
        strokeStyleWidth = strokeStyleWidth !== undefined ?
          strokeStyleWidth : DEFAULT_LINEWIDTH;
      } else {
        strokeStyleColor = [0, 0, 0, 0];
        strokeStyleWidth = 0;
      }
      var fillStyleColor = fillStyle ? fillStyle.getColor() : [0, 0, 0, 0];
      if (!(fillStyleColor instanceof CanvasGradient) &&
          !(fillStyleColor instanceof CanvasPattern)) {
        fillStyleColor = asArray(fillStyleColor).map(function(c, i) {
          return i != 3 ? c / 255 : c;
        }) || DEFAULT_FILLSTYLE;
      } else {
        fillStyleColor = DEFAULT_FILLSTYLE;
      }
      if (!this.state_.strokeColor || !equals(this.state_.strokeColor, strokeStyleColor) ||
          !this.state_.fillColor || !equals(this.state_.fillColor, fillStyleColor) ||
          this.state_.lineWidth !== strokeStyleWidth) {
        this.state_.changed = true;
        this.state_.fillColor = fillStyleColor;
        this.state_.strokeColor = strokeStyleColor;
        this.state_.lineWidth = strokeStyleWidth;
        this.styles_.push([fillStyleColor, strokeStyleColor, strokeStyleWidth]);
      }
    };

    return WebGLCircleReplay;
  }(WebGLReplay));

  /**
   * @module ol/render/webgl/texturereplay/defaultshader
   */

  var fragment$1 = new WebGLFragment('precision mediump float;\nvarying vec2 v_texCoord;\nvarying float v_opacity;\n\nuniform float u_opacity;\nuniform sampler2D u_image;\n\nvoid main(void) {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  gl_FragColor.rgb = texColor.rgb;\n  float alpha = texColor.a * v_opacity * u_opacity;\n  if (alpha == 0.0) {\n    discard;\n  }\n  gl_FragColor.a = alpha;\n}\n');

  var vertex$1 = new WebGLVertex('varying vec2 v_texCoord;\nvarying float v_opacity;\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nattribute vec2 a_offsets;\nattribute float a_opacity;\nattribute float a_rotateWithView;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\n\nvoid main(void) {\n  mat4 offsetMatrix = u_offsetScaleMatrix;\n  if (a_rotateWithView == 1.0) {\n    offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n  }\n  vec4 offsets = offsetMatrix * vec4(a_offsets, 0.0, 0.0);\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n  v_texCoord = a_texCoord;\n  v_opacity = a_opacity;\n}\n\n\n');

  /**
   * @module ol/render/webgl/texturereplay/defaultshader/Locations
   */

  var Locations$1 = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_projectionMatrix = gl.getUniformLocation(
      program, 'u_projectionMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetScaleMatrix = gl.getUniformLocation(
      program, 'u_offsetScaleMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetRotateMatrix = gl.getUniformLocation(
      program, 'u_offsetRotateMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_opacity = gl.getUniformLocation(
      program, 'u_opacity');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_image = gl.getUniformLocation(
      program, 'u_image');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

    /**
     * @type {number}
     */
    this.a_texCoord = gl.getAttribLocation(
      program, 'a_texCoord');

    /**
     * @type {number}
     */
    this.a_offsets = gl.getAttribLocation(
      program, 'a_offsets');

    /**
     * @type {number}
     */
    this.a_opacity = gl.getAttribLocation(
      program, 'a_opacity');

    /**
     * @type {number}
     */
    this.a_rotateWithView = gl.getAttribLocation(
      program, 'a_rotateWithView');

  };

  /**
   * @module ol/webgl/ContextEventType
   */

  /**
   * @enum {string}
   */
  var ContextEventType = {
    LOST: 'webglcontextlost',
    RESTORED: 'webglcontextrestored'
  };

  /**
   * @module ol/webgl/Context
   */


  /**
   * @typedef {Object} BufferCacheEntry
   * @property {import("./Buffer.js").default} buf
   * @property {WebGLBuffer} buffer
   */


  /**
   * @classdesc
   * A WebGL context for accessing low-level WebGL capabilities.
   */
  var WebGLContext = /*@__PURE__*/(function (Disposable$$1) {
    function WebGLContext(canvas, gl) {
      Disposable$$1.call(this);

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = canvas;

      /**
       * @private
       * @type {WebGLRenderingContext}
       */
      this.gl_ = gl;

      /**
       * @private
       * @type {!Object<string, BufferCacheEntry>}
       */
      this.bufferCache_ = {};

      /**
       * @private
       * @type {!Object<string, WebGLShader>}
       */
      this.shaderCache_ = {};

      /**
       * @private
       * @type {!Object<string, WebGLProgram>}
       */
      this.programCache_ = {};

      /**
       * @private
       * @type {WebGLProgram}
       */
      this.currentProgram_ = null;

      /**
       * @private
       * @type {WebGLFramebuffer}
       */
      this.hitDetectionFramebuffer_ = null;

      /**
       * @private
       * @type {WebGLTexture}
       */
      this.hitDetectionTexture_ = null;

      /**
       * @private
       * @type {WebGLRenderbuffer}
       */
      this.hitDetectionRenderbuffer_ = null;

      /**
       * @type {boolean}
       */
      this.hasOESElementIndexUint = includes$1(EXTENSIONS, 'OES_element_index_uint');

      // use the OES_element_index_uint extension if available
      if (this.hasOESElementIndexUint) {
        gl.getExtension('OES_element_index_uint');
      }

      listen(this.canvas_, ContextEventType.LOST,
        this.handleWebGLContextLost, this);
      listen(this.canvas_, ContextEventType.RESTORED,
        this.handleWebGLContextRestored, this);

    }

    if ( Disposable$$1 ) WebGLContext.__proto__ = Disposable$$1;
    WebGLContext.prototype = Object.create( Disposable$$1 && Disposable$$1.prototype );
    WebGLContext.prototype.constructor = WebGLContext;

    /**
     * Just bind the buffer if it's in the cache. Otherwise create
     * the WebGL buffer, bind it, populate it, and add an entry to
     * the cache.
     * @param {number} target Target.
     * @param {import("./Buffer.js").default} buf Buffer.
     */
    WebGLContext.prototype.bindBuffer = function bindBuffer (target, buf) {
      var gl = this.getGL();
      var arr = buf.getArray();
      var bufferKey = getUid(buf);
      if (bufferKey in this.bufferCache_) {
        var bufferCacheEntry = this.bufferCache_[bufferKey];
        gl.bindBuffer(target, bufferCacheEntry.buffer);
      } else {
        var buffer = gl.createBuffer();
        gl.bindBuffer(target, buffer);
        var /** @type {ArrayBufferView} */ arrayBuffer;
        if (target == ARRAY_BUFFER) {
          arrayBuffer = new Float32Array(arr);
        } else if (target == ELEMENT_ARRAY_BUFFER) {
          arrayBuffer = this.hasOESElementIndexUint ?
            new Uint32Array(arr) : new Uint16Array(arr);
        }
        gl.bufferData(target, arrayBuffer, buf.getUsage());
        this.bufferCache_[bufferKey] = {
          buf: buf,
          buffer: buffer
        };
      }
    };

    /**
     * @param {import("./Buffer.js").default} buf Buffer.
     */
    WebGLContext.prototype.deleteBuffer = function deleteBuffer (buf) {
      var gl = this.getGL();
      var bufferKey = getUid(buf);
      var bufferCacheEntry = this.bufferCache_[bufferKey];
      if (!gl.isContextLost()) {
        gl.deleteBuffer(bufferCacheEntry.buffer);
      }
      delete this.bufferCache_[bufferKey];
    };

    /**
     * @inheritDoc
     */
    WebGLContext.prototype.disposeInternal = function disposeInternal () {
      unlistenAll(this.canvas_);
      var gl = this.getGL();
      if (!gl.isContextLost()) {
        for (var key in this.bufferCache_) {
          gl.deleteBuffer(this.bufferCache_[key].buffer);
        }
        for (var key$1 in this.programCache_) {
          gl.deleteProgram(this.programCache_[key$1]);
        }
        for (var key$2 in this.shaderCache_) {
          gl.deleteShader(this.shaderCache_[key$2]);
        }
        // delete objects for hit-detection
        gl.deleteFramebuffer(this.hitDetectionFramebuffer_);
        gl.deleteRenderbuffer(this.hitDetectionRenderbuffer_);
        gl.deleteTexture(this.hitDetectionTexture_);
      }
    };

    /**
     * @return {HTMLCanvasElement} Canvas.
     */
    WebGLContext.prototype.getCanvas = function getCanvas () {
      return this.canvas_;
    };

    /**
     * Get the WebGL rendering context
     * @return {WebGLRenderingContext} The rendering context.
     * @api
     */
    WebGLContext.prototype.getGL = function getGL () {
      return this.gl_;
    };

    /**
     * Get the frame buffer for hit detection.
     * @return {WebGLFramebuffer} The hit detection frame buffer.
     */
    WebGLContext.prototype.getHitDetectionFramebuffer = function getHitDetectionFramebuffer () {
      if (!this.hitDetectionFramebuffer_) {
        this.initHitDetectionFramebuffer_();
      }
      return this.hitDetectionFramebuffer_;
    };

    /**
     * Get shader from the cache if it's in the cache. Otherwise, create
     * the WebGL shader, compile it, and add entry to cache.
     * @param {import("./Shader.js").default} shaderObject Shader object.
     * @return {WebGLShader} Shader.
     */
    WebGLContext.prototype.getShader = function getShader (shaderObject) {
      var shaderKey = getUid(shaderObject);
      if (shaderKey in this.shaderCache_) {
        return this.shaderCache_[shaderKey];
      } else {
        var gl = this.getGL();
        var shader = gl.createShader(shaderObject.getType());
        gl.shaderSource(shader, shaderObject.getSource());
        gl.compileShader(shader);
        this.shaderCache_[shaderKey] = shader;
        return shader;
      }
    };

    /**
     * Get the program from the cache if it's in the cache. Otherwise create
     * the WebGL program, attach the shaders to it, and add an entry to the
     * cache.
     * @param {import("./Fragment.js").default} fragmentShaderObject Fragment shader.
     * @param {import("./Vertex.js").default} vertexShaderObject Vertex shader.
     * @return {WebGLProgram} Program.
     */
    WebGLContext.prototype.getProgram = function getProgram (fragmentShaderObject, vertexShaderObject) {
      var programKey = getUid(fragmentShaderObject) + '/' + getUid(vertexShaderObject);
      if (programKey in this.programCache_) {
        return this.programCache_[programKey];
      } else {
        var gl = this.getGL();
        var program = gl.createProgram();
        gl.attachShader(program, this.getShader(fragmentShaderObject));
        gl.attachShader(program, this.getShader(vertexShaderObject));
        gl.linkProgram(program);
        this.programCache_[programKey] = program;
        return program;
      }
    };

    /**
     * FIXME empty description for jsdoc
     */
    WebGLContext.prototype.handleWebGLContextLost = function handleWebGLContextLost () {
      clear(this.bufferCache_);
      clear(this.shaderCache_);
      clear(this.programCache_);
      this.currentProgram_ = null;
      this.hitDetectionFramebuffer_ = null;
      this.hitDetectionTexture_ = null;
      this.hitDetectionRenderbuffer_ = null;
    };

    /**
     * FIXME empty description for jsdoc
     */
    WebGLContext.prototype.handleWebGLContextRestored = function handleWebGLContextRestored () {
    };

    /**
     * Creates a 1x1 pixel framebuffer for the hit-detection.
     * @private
     */
    WebGLContext.prototype.initHitDetectionFramebuffer_ = function initHitDetectionFramebuffer_ () {
      var gl = this.gl_;
      var framebuffer = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);

      var texture = createEmptyTexture(gl, 1, 1);
      var renderbuffer = gl.createRenderbuffer();
      gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 1, 1);
      gl.framebufferTexture2D(
        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT,
        gl.RENDERBUFFER, renderbuffer);

      gl.bindTexture(gl.TEXTURE_2D, null);
      gl.bindRenderbuffer(gl.RENDERBUFFER, null);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);

      this.hitDetectionFramebuffer_ = framebuffer;
      this.hitDetectionTexture_ = texture;
      this.hitDetectionRenderbuffer_ = renderbuffer;
    };

    /**
     * Use a program.  If the program is already in use, this will return `false`.
     * @param {WebGLProgram} program Program.
     * @return {boolean} Changed.
     * @api
     */
    WebGLContext.prototype.useProgram = function useProgram (program) {
      if (program == this.currentProgram_) {
        return false;
      } else {
        var gl = this.getGL();
        gl.useProgram(program);
        this.currentProgram_ = program;
        return true;
      }
    };

    return WebGLContext;
  }(Disposable));


  /**
   * @param {WebGLRenderingContext} gl WebGL rendering context.
   * @param {number=} opt_wrapS wrapS.
   * @param {number=} opt_wrapT wrapT.
   * @return {WebGLTexture} The texture.
   */
  function createTextureInternal(gl, opt_wrapS, opt_wrapT) {
    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

    if (opt_wrapS !== undefined) {
      gl.texParameteri(
        TEXTURE_2D, TEXTURE_WRAP_S, opt_wrapS);
    }
    if (opt_wrapT !== undefined) {
      gl.texParameteri(
        TEXTURE_2D, TEXTURE_WRAP_T, opt_wrapT);
    }

    return texture;
  }


  /**
   * @param {WebGLRenderingContext} gl WebGL rendering context.
   * @param {number} width Width.
   * @param {number} height Height.
   * @param {number=} opt_wrapS wrapS.
   * @param {number=} opt_wrapT wrapT.
   * @return {WebGLTexture} The texture.
   */
  function createEmptyTexture(gl, width, height, opt_wrapS, opt_wrapT) {
    var texture = createTextureInternal(gl, opt_wrapS, opt_wrapT);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    return texture;
  }


  /**
   * @param {WebGLRenderingContext} gl WebGL rendering context.
   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
   * @param {number=} opt_wrapS wrapS.
   * @param {number=} opt_wrapT wrapT.
   * @return {WebGLTexture} The texture.
   */
  function createTexture(gl, image, opt_wrapS, opt_wrapT) {
    var texture = createTextureInternal(gl, opt_wrapS, opt_wrapT);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
    return texture;
  }

  /**
   * @module ol/render/webgl/TextureReplay
   */

  var WebGLTextureReplay = /*@__PURE__*/(function (WebGLReplay$$1) {
    function WebGLTextureReplay(tolerance, maxExtent) {
      WebGLReplay$$1.call(this, tolerance, maxExtent);

      /**
       * @type {number|undefined}
       * @protected
       */
      this.anchorX = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.anchorY = undefined;

      /**
       * @type {Array<number>}
       * @protected
       */
      this.groupIndices = [];

      /**
       * @type {Array<number>}
       * @protected
       */
      this.hitDetectionGroupIndices = [];

      /**
       * @type {number|undefined}
       * @protected
       */
      this.height = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.imageHeight = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.imageWidth = undefined;

      /**
       * @protected
       * @type {import("./texturereplay/defaultshader/Locations.js").default}
       */
      this.defaultLocations = null;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.opacity = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.originX = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.originY = undefined;

      /**
       * @protected
       * @type {boolean|undefined}
       */
      this.rotateWithView = undefined;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.rotation = undefined;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.scale = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.width = undefined;
    }

    if ( WebGLReplay$$1 ) WebGLTextureReplay.__proto__ = WebGLReplay$$1;
    WebGLTextureReplay.prototype = Object.create( WebGLReplay$$1 && WebGLReplay$$1.prototype );
    WebGLTextureReplay.prototype.constructor = WebGLTextureReplay;

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      var verticesBuffer = this.verticesBuffer;
      var indicesBuffer = this.indicesBuffer;
      var textures = this.getTextures(true);
      var gl = context.getGL();
      return function() {
        if (!gl.isContextLost()) {
          var i, ii;
          for (i = 0, ii = textures.length; i < ii; ++i) {
            gl.deleteTexture(textures[i]);
          }
        }
        context.deleteBuffer(verticesBuffer);
        context.deleteBuffer(indicesBuffer);
      };
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {number} My end.
     * @protected
     */
    WebGLTextureReplay.prototype.drawCoordinates = function drawCoordinates (flatCoordinates, offset, end, stride) {
      var anchorX = /** @type {number} */ (this.anchorX);
      var anchorY = /** @type {number} */ (this.anchorY);
      var height = /** @type {number} */ (this.height);
      var imageHeight = /** @type {number} */ (this.imageHeight);
      var imageWidth = /** @type {number} */ (this.imageWidth);
      var opacity = /** @type {number} */ (this.opacity);
      var originX = /** @type {number} */ (this.originX);
      var originY = /** @type {number} */ (this.originY);
      var rotateWithView = this.rotateWithView ? 1.0 : 0.0;
      // this.rotation_ is anti-clockwise, but rotation is clockwise
      var rotation = /** @type {number} */ (-this.rotation);
      var scale = /** @type {number} */ (this.scale);
      var width = /** @type {number} */ (this.width);
      var cos = Math.cos(rotation);
      var sin = Math.sin(rotation);
      var numIndices = this.indices.length;
      var numVertices = this.vertices.length;
      var i, n, offsetX, offsetY, x, y;
      for (i = offset; i < end; i += stride) {
        x = flatCoordinates[i] - this.origin[0];
        y = flatCoordinates[i + 1] - this.origin[1];

        // There are 4 vertices per [x, y] point, one for each corner of the
        // rectangle we're going to draw. We'd use 1 vertex per [x, y] point if
        // WebGL supported Geometry Shaders (which can emit new vertices), but that
        // is not currently the case.
        //
        // And each vertex includes 8 values: the x and y coordinates, the x and
        // y offsets used to calculate the position of the corner, the u and
        // v texture coordinates for the corner, the opacity, and whether the
        // the image should be rotated with the view (rotateWithView).

        n = numVertices / 8;

        // bottom-left corner
        offsetX = -scale * anchorX;
        offsetY = -scale * (height - anchorY);
        this.vertices[numVertices++] = x;
        this.vertices[numVertices++] = y;
        this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
        this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
        this.vertices[numVertices++] = originX / imageWidth;
        this.vertices[numVertices++] = (originY + height) / imageHeight;
        this.vertices[numVertices++] = opacity;
        this.vertices[numVertices++] = rotateWithView;

        // bottom-right corner
        offsetX = scale * (width - anchorX);
        offsetY = -scale * (height - anchorY);
        this.vertices[numVertices++] = x;
        this.vertices[numVertices++] = y;
        this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
        this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
        this.vertices[numVertices++] = (originX + width) / imageWidth;
        this.vertices[numVertices++] = (originY + height) / imageHeight;
        this.vertices[numVertices++] = opacity;
        this.vertices[numVertices++] = rotateWithView;

        // top-right corner
        offsetX = scale * (width - anchorX);
        offsetY = scale * anchorY;
        this.vertices[numVertices++] = x;
        this.vertices[numVertices++] = y;
        this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
        this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
        this.vertices[numVertices++] = (originX + width) / imageWidth;
        this.vertices[numVertices++] = originY / imageHeight;
        this.vertices[numVertices++] = opacity;
        this.vertices[numVertices++] = rotateWithView;

        // top-left corner
        offsetX = -scale * anchorX;
        offsetY = scale * anchorY;
        this.vertices[numVertices++] = x;
        this.vertices[numVertices++] = y;
        this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
        this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
        this.vertices[numVertices++] = originX / imageWidth;
        this.vertices[numVertices++] = originY / imageHeight;
        this.vertices[numVertices++] = opacity;
        this.vertices[numVertices++] = rotateWithView;

        this.indices[numIndices++] = n;
        this.indices[numIndices++] = n + 1;
        this.indices[numIndices++] = n + 2;
        this.indices[numIndices++] = n;
        this.indices[numIndices++] = n + 2;
        this.indices[numIndices++] = n + 3;
      }

      return numVertices;
    };

    /**
     * @protected
     * @param {Array<WebGLTexture>} textures Textures.
     * @param {Array<HTMLCanvasElement|HTMLImageElement|HTMLVideoElement>} images Images.
     * @param {!Object<string, WebGLTexture>} texturePerImage Texture cache.
     * @param {WebGLRenderingContext} gl Gl.
     */
    WebGLTextureReplay.prototype.createTextures = function createTextures (textures, images, texturePerImage, gl) {
      var texture, image, uid, i;
      var ii = images.length;
      for (i = 0; i < ii; ++i) {
        image = images[i];

        uid = getUid(image);
        if (uid in texturePerImage) {
          texture = texturePerImage[uid];
        } else {
          texture = createTexture(
            gl, image, CLAMP_TO_EDGE, CLAMP_TO_EDGE);
          texturePerImage[uid] = texture;
        }
        textures[i] = texture;
      }
    };

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.setUpProgram = function setUpProgram (gl, context, size$$1, pixelRatio) {
      // get the program
      var program = context.getProgram(fragment$1, vertex$1);

      // get the locations
      var locations;
      if (!this.defaultLocations) {
        locations = new Locations$1(gl, program);
        this.defaultLocations = locations;
      } else {
        locations = this.defaultLocations;
      }

      // use the program (FIXME: use the return value)
      context.useProgram(program);

      // enable the vertex attrib arrays
      gl.enableVertexAttribArray(locations.a_position);
      gl.vertexAttribPointer(locations.a_position, 2, FLOAT,
        false, 32, 0);

      gl.enableVertexAttribArray(locations.a_offsets);
      gl.vertexAttribPointer(locations.a_offsets, 2, FLOAT,
        false, 32, 8);

      gl.enableVertexAttribArray(locations.a_texCoord);
      gl.vertexAttribPointer(locations.a_texCoord, 2, FLOAT,
        false, 32, 16);

      gl.enableVertexAttribArray(locations.a_opacity);
      gl.vertexAttribPointer(locations.a_opacity, 1, FLOAT,
        false, 32, 24);

      gl.enableVertexAttribArray(locations.a_rotateWithView);
      gl.vertexAttribPointer(locations.a_rotateWithView, 1, FLOAT,
        false, 32, 28);

      return locations;
    };

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.shutDownProgram = function shutDownProgram (gl, locations) {
      gl.disableVertexAttribArray(locations.a_position);
      gl.disableVertexAttribArray(locations.a_offsets);
      gl.disableVertexAttribArray(locations.a_texCoord);
      gl.disableVertexAttribArray(locations.a_opacity);
      gl.disableVertexAttribArray(locations.a_rotateWithView);
    };

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.drawReplay = function drawReplay (gl, context, skippedFeaturesHash, hitDetection) {
      var textures = hitDetection ? this.getHitDetectionTextures() : this.getTextures();
      var groupIndices = hitDetection ? this.hitDetectionGroupIndices : this.groupIndices;

      if (!isEmpty$1(skippedFeaturesHash)) {
        this.drawReplaySkipping(gl, context, skippedFeaturesHash, textures, groupIndices);
      } else {
        var i, ii, start;
        for (i = 0, ii = textures.length, start = 0; i < ii; ++i) {
          gl.bindTexture(TEXTURE_2D, textures[i]);
          var end = groupIndices[i];
          this.drawElements(gl, context, start, end);
          start = end;
        }
      }
    };

    /**
     * Draw the replay while paying attention to skipped features.
     *
     * This functions creates groups of features that can be drawn to together,
     * so that the number of `drawElements` calls is minimized.
     *
     * For example given the following texture groups:
     *
     *    Group 1: A B C
     *    Group 2: D [E] F G
     *
     * If feature E should be skipped, the following `drawElements` calls will be
     * made:
     *
     *    drawElements with feature A, B and C
     *    drawElements with feature D
     *    drawElements with feature F and G
     *
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *  to skip.
     * @param {Array<WebGLTexture>} textures Textures.
     * @param {Array<number>} groupIndices Texture group indices.
     */
    WebGLTextureReplay.prototype.drawReplaySkipping = function drawReplaySkipping (gl, context, skippedFeaturesHash, textures, groupIndices) {
      var featureIndex = 0;

      var i, ii;
      for (i = 0, ii = textures.length; i < ii; ++i) {
        gl.bindTexture(TEXTURE_2D, textures[i]);
        var groupStart = (i > 0) ? groupIndices[i - 1] : 0;
        var groupEnd = groupIndices[i];

        var start = groupStart;
        var end = groupStart;
        while (featureIndex < this.startIndices.length &&
            this.startIndices[featureIndex] <= groupEnd) {
          var feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)] !== undefined) {
            // feature should be skipped
            if (start !== end) {
              // draw the features so far
              this.drawElements(gl, context, start, end);
            }
            // continue with the next feature
            start = (featureIndex === this.startIndices.length - 1) ?
              groupEnd : this.startIndices[featureIndex + 1];
            end = start;
          } else {
            // the feature is not skipped, augment the end index
            end = (featureIndex === this.startIndices.length - 1) ?
              groupEnd : this.startIndices[featureIndex + 1];
          }
          featureIndex++;
        }

        if (start !== end) {
          // draw the remaining features (in case there was no skipped feature
          // in this texture group, all features of a group are drawn together)
          this.drawElements(gl, context, start, end);
        }
      }
    };

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.drawHitDetectionReplayOneByOne = function drawHitDetectionReplayOneByOne (gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {
      var i, groupStart, start, end, feature;
      var featureIndex = this.startIndices.length - 1;
      var hitDetectionTextures = this.getHitDetectionTextures();
      for (i = hitDetectionTextures.length - 1; i >= 0; --i) {
        gl.bindTexture(TEXTURE_2D, hitDetectionTextures[i]);
        groupStart = (i > 0) ? this.hitDetectionGroupIndices[i - 1] : 0;
        end = this.hitDetectionGroupIndices[i];

        // draw all features for this texture group
        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          start = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)] === undefined &&
              feature.getGeometry() &&
              (opt_hitExtent === undefined || intersects(
                /** @type {Array<number>} */ (opt_hitExtent),
                feature.getGeometry().getExtent()))) {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            this.drawElements(gl, context, start, end);

            var result = featureCallback(feature);
            if (result) {
              return result;
            }
          }

          end = start;
          featureIndex--;
        }
      }
      return undefined;
    };

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.finish = function finish (context) {
      this.anchorX = undefined;
      this.anchorY = undefined;
      this.height = undefined;
      this.imageHeight = undefined;
      this.imageWidth = undefined;
      this.indices = null;
      this.opacity = undefined;
      this.originX = undefined;
      this.originY = undefined;
      this.rotateWithView = undefined;
      this.rotation = undefined;
      this.scale = undefined;
      this.vertices = null;
      this.width = undefined;
    };

    /**
     * @abstract
     * @protected
     * @param {boolean=} opt_all Return hit detection textures with regular ones.
     * @return {Array<WebGLTexture>} Textures.
     */
    WebGLTextureReplay.prototype.getTextures = function getTextures (opt_all) {
      return abstract();
    };

    /**
     * @abstract
     * @protected
     * @return {Array<WebGLTexture>} Textures.
     */
    WebGLTextureReplay.prototype.getHitDetectionTextures = function getHitDetectionTextures () {
      return abstract();
    };

    return WebGLTextureReplay;
  }(WebGLReplay));

  /**
   * @module ol/render/webgl/ImageReplay
   */

  var WebGLImageReplay = /*@__PURE__*/(function (WebGLTextureReplay$$1) {
    function WebGLImageReplay(tolerance, maxExtent) {
      WebGLTextureReplay$$1.call(this, tolerance, maxExtent);

      /**
       * @type {Array<HTMLCanvasElement|HTMLImageElement|HTMLVideoElement>}
       * @protected
       */
      this.images_ = [];

      /**
       * @type {Array<HTMLCanvasElement|HTMLImageElement|HTMLVideoElement>}
       * @protected
       */
      this.hitDetectionImages_ = [];

      /**
       * @type {Array<WebGLTexture>}
       * @private
       */
      this.textures_ = [];

      /**
       * @type {Array<WebGLTexture>}
       * @private
       */
      this.hitDetectionTextures_ = [];

    }

    if ( WebGLTextureReplay$$1 ) WebGLImageReplay.__proto__ = WebGLTextureReplay$$1;
    WebGLImageReplay.prototype = Object.create( WebGLTextureReplay$$1 && WebGLTextureReplay$$1.prototype );
    WebGLImageReplay.prototype.constructor = WebGLImageReplay;

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.drawMultiPoint = function drawMultiPoint (multiPointGeometry, feature) {
      this.startIndices.push(this.indices.length);
      this.startIndicesFeature.push(feature);
      var flatCoordinates = multiPointGeometry.getFlatCoordinates();
      var stride = multiPointGeometry.getStride();
      this.drawCoordinates(
        flatCoordinates, 0, flatCoordinates.length, stride);
    };

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.drawPoint = function drawPoint (pointGeometry, feature) {
      this.startIndices.push(this.indices.length);
      this.startIndicesFeature.push(feature);
      var flatCoordinates = pointGeometry.getFlatCoordinates();
      var stride = pointGeometry.getStride();
      this.drawCoordinates(
        flatCoordinates, 0, flatCoordinates.length, stride);
    };

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.finish = function finish (context) {
      var gl = context.getGL();

      this.groupIndices.push(this.indices.length);
      this.hitDetectionGroupIndices.push(this.indices.length);

      // create, bind, and populate the vertices buffer
      this.verticesBuffer = new WebGLBuffer(this.vertices);

      var indices = this.indices;

      // create, bind, and populate the indices buffer
      this.indicesBuffer = new WebGLBuffer(indices);

      // create textures
      /** @type {Object<string, WebGLTexture>} */
      var texturePerImage = {};

      this.createTextures(this.textures_, this.images_, texturePerImage, gl);

      this.createTextures(this.hitDetectionTextures_, this.hitDetectionImages_,
        texturePerImage, gl);

      this.images_ = null;
      this.hitDetectionImages_ = null;
      WebGLTextureReplay$$1.prototype.finish.call(this, context);
    };

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.setImageStyle = function setImageStyle (imageStyle) {
      var anchor = imageStyle.getAnchor();
      var image = imageStyle.getImage(1);
      var imageSize = imageStyle.getImageSize();
      var hitDetectionImage = imageStyle.getHitDetectionImage(1);
      var opacity = imageStyle.getOpacity();
      var origin = imageStyle.getOrigin();
      var rotateWithView = imageStyle.getRotateWithView();
      var rotation = imageStyle.getRotation();
      var size$$1 = imageStyle.getSize();
      var scale = imageStyle.getScale();

      var currentImage;
      if (this.images_.length === 0) {
        this.images_.push(image);
      } else {
        currentImage = this.images_[this.images_.length - 1];
        if (getUid(currentImage) != getUid(image)) {
          this.groupIndices.push(this.indices.length);
          this.images_.push(image);
        }
      }

      if (this.hitDetectionImages_.length === 0) {
        this.hitDetectionImages_.push(hitDetectionImage);
      } else {
        currentImage =
            this.hitDetectionImages_[this.hitDetectionImages_.length - 1];
        if (getUid(currentImage) != getUid(hitDetectionImage)) {
          this.hitDetectionGroupIndices.push(this.indices.length);
          this.hitDetectionImages_.push(hitDetectionImage);
        }
      }

      this.anchorX = anchor[0];
      this.anchorY = anchor[1];
      this.height = size$$1[1];
      this.imageHeight = imageSize[1];
      this.imageWidth = imageSize[0];
      this.opacity = opacity;
      this.originX = origin[0];
      this.originY = origin[1];
      this.rotation = rotation;
      this.rotateWithView = rotateWithView;
      this.scale = scale;
      this.width = size$$1[0];
    };

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.getTextures = function getTextures (opt_all) {
      return opt_all ? this.textures_.concat(this.hitDetectionTextures_) : this.textures_;
    };

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.getHitDetectionTextures = function getHitDetectionTextures () {
      return this.hitDetectionTextures_;
    };

    return WebGLImageReplay;
  }(WebGLTextureReplay));

  /**
   * @module ol/geom/flat/topology
   */

  /**
   * Check if the linestring is a boundary.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {boolean} The linestring is a boundary.
   */
  function lineStringIsClosed(flatCoordinates, offset, end, stride) {
    var lastCoord = end - stride;
    if (flatCoordinates[offset] === flatCoordinates[lastCoord] &&
        flatCoordinates[offset + 1] === flatCoordinates[lastCoord + 1] && (end - offset) / stride > 3) {
      return !!linearRing(flatCoordinates, offset, end, stride);
    }
    return false;
  }

  /**
   * @module ol/render/webgl/linestringreplay/defaultshader
   */

  var fragment$2 = new WebGLFragment('precision mediump float;\nvarying float v_round;\nvarying vec2 v_roundVertex;\nvarying float v_halfWidth;\n\n\n\nuniform float u_opacity;\nuniform vec4 u_color;\nuniform vec2 u_size;\nuniform float u_pixelRatio;\n\nvoid main(void) {\n  if (v_round > 0.0) {\n    vec2 windowCoords = vec2((v_roundVertex.x + 1.0) / 2.0 * u_size.x * u_pixelRatio,\n        (v_roundVertex.y + 1.0) / 2.0 * u_size.y * u_pixelRatio);\n    if (length(windowCoords - gl_FragCoord.xy) > v_halfWidth * u_pixelRatio) {\n      discard;\n    }\n  }\n  gl_FragColor = u_color;\n  float alpha = u_color.a * u_opacity;\n  if (alpha == 0.0) {\n    discard;\n  }\n  gl_FragColor.a = alpha;\n}\n');

  var vertex$2 = new WebGLVertex('varying float v_round;\nvarying vec2 v_roundVertex;\nvarying float v_halfWidth;\n\n\nattribute vec2 a_lastPos;\nattribute vec2 a_position;\nattribute vec2 a_nextPos;\nattribute float a_direction;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_lineWidth;\nuniform float u_miterLimit;\n\nbool nearlyEquals(in float value, in float ref) {\n  float epsilon = 0.000000000001;\n  return value >= ref - epsilon && value <= ref + epsilon;\n}\n\nvoid alongNormal(out vec2 offset, in vec2 nextP, in float turnDir, in float direction) {\n  vec2 dirVect = nextP - a_position;\n  vec2 normal = normalize(vec2(-turnDir * dirVect.y, turnDir * dirVect.x));\n  offset = u_lineWidth / 2.0 * normal * direction;\n}\n\nvoid miterUp(out vec2 offset, out float round, in bool isRound, in float direction) {\n  float halfWidth = u_lineWidth / 2.0;\n  vec2 tangent = normalize(normalize(a_nextPos - a_position) + normalize(a_position - a_lastPos));\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 dirVect = a_nextPos - a_position;\n  vec2 tmpNormal = normalize(vec2(-dirVect.y, dirVect.x));\n  float miterLength = abs(halfWidth / dot(normal, tmpNormal));\n  offset = normal * direction * miterLength;\n  round = 0.0;\n  if (isRound) {\n    round = 1.0;\n  } else if (miterLength > u_miterLimit + u_lineWidth) {\n    offset = halfWidth * tmpNormal * direction;\n  }\n}\n\nbool miterDown(out vec2 offset, in vec4 projPos, in mat4 offsetMatrix, in float direction) {\n  bool degenerate = false;\n  vec2 tangent = normalize(normalize(a_nextPos - a_position) + normalize(a_position - a_lastPos));\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 dirVect = a_lastPos - a_position;\n  vec2 tmpNormal = normalize(vec2(-dirVect.y, dirVect.x));\n  vec2 longOffset, shortOffset, longVertex;\n  vec4 shortProjVertex;\n  float halfWidth = u_lineWidth / 2.0;\n  if (length(a_nextPos - a_position) > length(a_lastPos - a_position)) {\n    longOffset = tmpNormal * direction * halfWidth;\n    shortOffset = normalize(vec2(dirVect.y, -dirVect.x)) * direction * halfWidth;\n    longVertex = a_nextPos;\n    shortProjVertex = u_projectionMatrix * vec4(a_lastPos, 0.0, 1.0);\n  } else {\n    shortOffset = tmpNormal * direction * halfWidth;\n    longOffset = normalize(vec2(dirVect.y, -dirVect.x)) * direction * halfWidth;\n    longVertex = a_lastPos;\n    shortProjVertex = u_projectionMatrix * vec4(a_nextPos, 0.0, 1.0);\n  }\n  //Intersection algorithm based on theory by Paul Bourke (http://paulbourke.net/geometry/pointlineplane/).\n  vec4 p1 = u_projectionMatrix * vec4(longVertex, 0.0, 1.0) + offsetMatrix * vec4(longOffset, 0.0, 0.0);\n  vec4 p2 = projPos + offsetMatrix * vec4(longOffset, 0.0, 0.0);\n  vec4 p3 = shortProjVertex + offsetMatrix * vec4(-shortOffset, 0.0, 0.0);\n  vec4 p4 = shortProjVertex + offsetMatrix * vec4(shortOffset, 0.0, 0.0);\n  float denom = (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);\n  float firstU = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denom;\n  float secondU = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denom;\n  float epsilon = 0.000000000001;\n  if (firstU > epsilon && firstU < 1.0 - epsilon && secondU > epsilon && secondU < 1.0 - epsilon) {\n    shortProjVertex.x = p1.x + firstU * (p2.x - p1.x);\n    shortProjVertex.y = p1.y + firstU * (p2.y - p1.y);\n    offset = shortProjVertex.xy;\n    degenerate = true;\n  } else {\n    float miterLength = abs(halfWidth / dot(normal, tmpNormal));\n    offset = normal * direction * miterLength;\n  }\n  return degenerate;\n}\n\nvoid squareCap(out vec2 offset, out float round, in bool isRound, in vec2 nextP,\n    in float turnDir, in float direction) {\n  round = 0.0;\n  vec2 dirVect = a_position - nextP;\n  vec2 firstNormal = normalize(dirVect);\n  vec2 secondNormal = vec2(turnDir * firstNormal.y * direction, -turnDir * firstNormal.x * direction);\n  vec2 hypotenuse = normalize(firstNormal - secondNormal);\n  vec2 normal = vec2(turnDir * hypotenuse.y * direction, -turnDir * hypotenuse.x * direction);\n  float length = sqrt(v_halfWidth * v_halfWidth * 2.0);\n  offset = normal * length;\n  if (isRound) {\n    round = 1.0;\n  }\n}\n\nvoid main(void) {\n  bool degenerate = false;\n  float direction = float(sign(a_direction));\n  mat4 offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n  vec2 offset;\n  vec4 projPos = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n  bool round = nearlyEquals(mod(a_direction, 2.0), 0.0);\n\n  v_round = 0.0;\n  v_halfWidth = u_lineWidth / 2.0;\n  v_roundVertex = projPos.xy;\n\n  if (nearlyEquals(mod(a_direction, 3.0), 0.0) || nearlyEquals(mod(a_direction, 17.0), 0.0)) {\n    alongNormal(offset, a_nextPos, 1.0, direction);\n  } else if (nearlyEquals(mod(a_direction, 5.0), 0.0) || nearlyEquals(mod(a_direction, 13.0), 0.0)) {\n    alongNormal(offset, a_lastPos, -1.0, direction);\n  } else if (nearlyEquals(mod(a_direction, 23.0), 0.0)) {\n    miterUp(offset, v_round, round, direction);\n  } else if (nearlyEquals(mod(a_direction, 19.0), 0.0)) {\n    degenerate = miterDown(offset, projPos, offsetMatrix, direction);\n  } else if (nearlyEquals(mod(a_direction, 7.0), 0.0)) {\n    squareCap(offset, v_round, round, a_nextPos, 1.0, direction);\n  } else if (nearlyEquals(mod(a_direction, 11.0), 0.0)) {\n    squareCap(offset, v_round, round, a_lastPos, -1.0, direction);\n  }\n  if (!degenerate) {\n    vec4 offsets = offsetMatrix * vec4(offset, 0.0, 0.0);\n    gl_Position = projPos + offsets;\n  } else {\n    gl_Position = vec4(offset, 0.0, 1.0);\n  }\n}\n\n\n');

  /**
   * @module ol/render/webgl/linestringreplay/defaultshader/Locations
   */

  var Locations$2 = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_projectionMatrix = gl.getUniformLocation(
      program, 'u_projectionMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetScaleMatrix = gl.getUniformLocation(
      program, 'u_offsetScaleMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetRotateMatrix = gl.getUniformLocation(
      program, 'u_offsetRotateMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_lineWidth = gl.getUniformLocation(
      program, 'u_lineWidth');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_miterLimit = gl.getUniformLocation(
      program, 'u_miterLimit');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_opacity = gl.getUniformLocation(
      program, 'u_opacity');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_color = gl.getUniformLocation(
      program, 'u_color');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_size = gl.getUniformLocation(
      program, 'u_size');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_pixelRatio = gl.getUniformLocation(
      program, 'u_pixelRatio');

    /**
     * @type {number}
     */
    this.a_lastPos = gl.getAttribLocation(
      program, 'a_lastPos');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

    /**
     * @type {number}
     */
    this.a_nextPos = gl.getAttribLocation(
      program, 'a_nextPos');

    /**
     * @type {number}
     */
    this.a_direction = gl.getAttribLocation(
      program, 'a_direction');

  };

  /**
   * @module ol/render/webgl/LineStringReplay
   */


  /**
   * @enum {number}
   */
  var Instruction$1 = {
    ROUND: 2,
    BEGIN_LINE: 3,
    END_LINE: 5,
    BEGIN_LINE_CAP: 7,
    END_LINE_CAP: 11,
    BEVEL_FIRST: 13,
    BEVEL_SECOND: 17,
    MITER_BOTTOM: 19,
    MITER_TOP: 23
  };


  var WebGLLineStringReplay = /*@__PURE__*/(function (WebGLReplay$$1) {
    function WebGLLineStringReplay(tolerance, maxExtent) {
      WebGLReplay$$1.call(this, tolerance, maxExtent);

      /**
       * @private
       * @type {import("./linestringreplay/defaultshader/Locations.js").default}
       */
      this.defaultLocations_ = null;

      /**
       * @private
       * @type {Array<Array<?>>}
       */
      this.styles_ = [];

      /**
       * @private
       * @type {Array<number>}
       */
      this.styleIndices_ = [];

      /**
       * @private
       * @type {{strokeColor: (Array<number>|null),
       *         lineCap: (string|undefined),
       *         lineDash: Array<number>,
       *         lineDashOffset: (number|undefined),
       *         lineJoin: (string|undefined),
       *         lineWidth: (number|undefined),
       *         miterLimit: (number|undefined),
       *         changed: boolean}|null}
       */
      this.state_ = {
        strokeColor: null,
        lineCap: undefined,
        lineDash: null,
        lineDashOffset: undefined,
        lineJoin: undefined,
        lineWidth: undefined,
        miterLimit: undefined,
        changed: false
      };

    }

    if ( WebGLReplay$$1 ) WebGLLineStringReplay.__proto__ = WebGLReplay$$1;
    WebGLLineStringReplay.prototype = Object.create( WebGLReplay$$1 && WebGLReplay$$1.prototype );
    WebGLLineStringReplay.prototype.constructor = WebGLLineStringReplay;

    /**
     * Draw one segment.
     * @private
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     */
    WebGLLineStringReplay.prototype.drawCoordinates_ = function drawCoordinates_ (flatCoordinates, offset, end, stride) {

      var i, ii;
      var numVertices = this.vertices.length;
      var numIndices = this.indices.length;
      //To save a vertex, the direction of a point is a product of the sign (1 or -1), a prime from
      //Instruction, and a rounding factor (1 or 2). If the product is even,
      //we round it. If it is odd, we don't.
      var lineJoin = this.state_.lineJoin === 'bevel' ? 0 :
        this.state_.lineJoin === 'miter' ? 1 : 2;
      var lineCap = this.state_.lineCap === 'butt' ? 0 :
        this.state_.lineCap === 'square' ? 1 : 2;
      var closed = lineStringIsClosed(flatCoordinates, offset, end, stride);
      var startCoords, sign, n;
      var lastIndex = numIndices;
      var lastSign = 1;
      //We need the adjacent vertices to define normals in joins. p0 = last, p1 = current, p2 = next.
      var p0, p1, p2;

      for (i = offset, ii = end; i < ii; i += stride) {

        n = numVertices / 7;

        p0 = p1;
        p1 = p2 || [flatCoordinates[i], flatCoordinates[i + 1]];
        //First vertex.
        if (i === offset) {
          p2 = [flatCoordinates[i + stride], flatCoordinates[i + stride + 1]];
          if (end - offset === stride * 2 && equals(p1, p2)) {
            break;
          }
          if (closed) {
            //A closed line! Complete the circle.
            p0 = [flatCoordinates[end - stride * 2],
              flatCoordinates[end - stride * 2 + 1]];

            startCoords = p2;
          } else {
            //Add the first two/four vertices.

            if (lineCap) {
              numVertices = this.addVertices_([0, 0], p1, p2,
                lastSign * Instruction$1.BEGIN_LINE_CAP * lineCap, numVertices);

              numVertices = this.addVertices_([0, 0], p1, p2,
                -lastSign * Instruction$1.BEGIN_LINE_CAP * lineCap, numVertices);

              this.indices[numIndices++] = n + 2;
              this.indices[numIndices++] = n;
              this.indices[numIndices++] = n + 1;

              this.indices[numIndices++] = n + 1;
              this.indices[numIndices++] = n + 3;
              this.indices[numIndices++] = n + 2;

            }

            numVertices = this.addVertices_([0, 0], p1, p2,
              lastSign * Instruction$1.BEGIN_LINE * (lineCap || 1), numVertices);

            numVertices = this.addVertices_([0, 0], p1, p2,
              -lastSign * Instruction$1.BEGIN_LINE * (lineCap || 1), numVertices);

            lastIndex = numVertices / 7 - 1;

            continue;
          }
        } else if (i === end - stride) {
          //Last vertex.
          if (closed) {
            //Same as the first vertex.
            p2 = startCoords;
            break;
          } else {
            p0 = p0 || [0, 0];

            numVertices = this.addVertices_(p0, p1, [0, 0],
              lastSign * Instruction$1.END_LINE * (lineCap || 1), numVertices);

            numVertices = this.addVertices_(p0, p1, [0, 0],
              -lastSign * Instruction$1.END_LINE * (lineCap || 1), numVertices);

            this.indices[numIndices++] = n;
            this.indices[numIndices++] = lastIndex - 1;
            this.indices[numIndices++] = lastIndex;

            this.indices[numIndices++] = lastIndex;
            this.indices[numIndices++] = n + 1;
            this.indices[numIndices++] = n;

            if (lineCap) {
              numVertices = this.addVertices_(p0, p1, [0, 0],
                lastSign * Instruction$1.END_LINE_CAP * lineCap, numVertices);

              numVertices = this.addVertices_(p0, p1, [0, 0],
                -lastSign * Instruction$1.END_LINE_CAP * lineCap, numVertices);

              this.indices[numIndices++] = n + 2;
              this.indices[numIndices++] = n;
              this.indices[numIndices++] = n + 1;

              this.indices[numIndices++] = n + 1;
              this.indices[numIndices++] = n + 3;
              this.indices[numIndices++] = n + 2;

            }

            break;
          }
        } else {
          p2 = [flatCoordinates[i + stride], flatCoordinates[i + stride + 1]];
        }

        // We group CW and straight lines, thus the not so inituitive CCW checking function.
        sign = triangleIsCounterClockwise(p0[0], p0[1], p1[0], p1[1], p2[0], p2[1])
          ? -1 : 1;

        numVertices = this.addVertices_(p0, p1, p2,
          sign * Instruction$1.BEVEL_FIRST * (lineJoin || 1), numVertices);

        numVertices = this.addVertices_(p0, p1, p2,
          sign * Instruction$1.BEVEL_SECOND * (lineJoin || 1), numVertices);

        numVertices = this.addVertices_(p0, p1, p2,
          -sign * Instruction$1.MITER_BOTTOM * (lineJoin || 1), numVertices);

        if (i > offset) {
          this.indices[numIndices++] = n;
          this.indices[numIndices++] = lastIndex - 1;
          this.indices[numIndices++] = lastIndex;

          this.indices[numIndices++] = n + 2;
          this.indices[numIndices++] = n;
          this.indices[numIndices++] = lastSign * sign > 0 ? lastIndex : lastIndex - 1;
        }

        this.indices[numIndices++] = n;
        this.indices[numIndices++] = n + 2;
        this.indices[numIndices++] = n + 1;

        lastIndex = n + 2;
        lastSign = sign;

        //Add miter
        if (lineJoin) {
          numVertices = this.addVertices_(p0, p1, p2,
            sign * Instruction$1.MITER_TOP * lineJoin, numVertices);

          this.indices[numIndices++] = n + 1;
          this.indices[numIndices++] = n + 3;
          this.indices[numIndices++] = n;
        }
      }

      if (closed) {
        n = n || numVertices / 7;
        sign = linearRingIsClockwise([p0[0], p0[1], p1[0], p1[1], p2[0], p2[1]], 0, 6, 2)
          ? 1 : -1;

        numVertices = this.addVertices_(p0, p1, p2,
          sign * Instruction$1.BEVEL_FIRST * (lineJoin || 1), numVertices);

        numVertices = this.addVertices_(p0, p1, p2,
          -sign * Instruction$1.MITER_BOTTOM * (lineJoin || 1), numVertices);

        this.indices[numIndices++] = n;
        this.indices[numIndices++] = lastIndex - 1;
        this.indices[numIndices++] = lastIndex;

        this.indices[numIndices++] = n + 1;
        this.indices[numIndices++] = n;
        this.indices[numIndices++] = lastSign * sign > 0 ? lastIndex : lastIndex - 1;
      }
    };

    /**
     * @param {Array<number>} p0 Last coordinates.
     * @param {Array<number>} p1 Current coordinates.
     * @param {Array<number>} p2 Next coordinates.
     * @param {number} product Sign, instruction, and rounding product.
     * @param {number} numVertices Vertex counter.
     * @return {number} Vertex counter.
     * @private
     */
    WebGLLineStringReplay.prototype.addVertices_ = function addVertices_ (p0, p1, p2, product, numVertices) {
      this.vertices[numVertices++] = p0[0];
      this.vertices[numVertices++] = p0[1];
      this.vertices[numVertices++] = p1[0];
      this.vertices[numVertices++] = p1[1];
      this.vertices[numVertices++] = p2[0];
      this.vertices[numVertices++] = p2[1];
      this.vertices[numVertices++] = product;

      return numVertices;
    };

    /**
     * Check if the linestring can be drawn (i. e. valid).
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {boolean} The linestring can be drawn.
     * @private
     */
    WebGLLineStringReplay.prototype.isValid_ = function isValid_ (flatCoordinates, offset, end, stride) {
      var range = end - offset;
      if (range < stride * 2) {
        return false;
      } else if (range === stride * 2) {
        var firstP = [flatCoordinates[offset], flatCoordinates[offset + 1]];
        var lastP = [flatCoordinates[offset + stride], flatCoordinates[offset + stride + 1]];
        return !equals(firstP, lastP);
      }

      return true;
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.drawLineString = function drawLineString (lineStringGeometry, feature) {
      var flatCoordinates = lineStringGeometry.getFlatCoordinates();
      var stride = lineStringGeometry.getStride();
      if (this.isValid_(flatCoordinates, 0, flatCoordinates.length, stride)) {
        flatCoordinates = translate(flatCoordinates, 0, flatCoordinates.length,
          stride, -this.origin[0], -this.origin[1]);
        if (this.state_.changed) {
          this.styleIndices_.push(this.indices.length);
          this.state_.changed = false;
        }
        this.startIndices.push(this.indices.length);
        this.startIndicesFeature.push(feature);
        this.drawCoordinates_(
          flatCoordinates, 0, flatCoordinates.length, stride);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.drawMultiLineString = function drawMultiLineString (multiLineStringGeometry, feature) {
      var indexCount = this.indices.length;
      var ends = multiLineStringGeometry.getEnds();
      ends.unshift(0);
      var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
      var stride = multiLineStringGeometry.getStride();
      var i, ii;
      if (ends.length > 1) {
        for (i = 1, ii = ends.length; i < ii; ++i) {
          if (this.isValid_(flatCoordinates, ends[i - 1], ends[i], stride)) {
            var lineString = translate(flatCoordinates, ends[i - 1], ends[i],
              stride, -this.origin[0], -this.origin[1]);
            this.drawCoordinates_(
              lineString, 0, lineString.length, stride);
          }
        }
      }
      if (this.indices.length > indexCount) {
        this.startIndices.push(indexCount);
        this.startIndicesFeature.push(feature);
        if (this.state_.changed) {
          this.styleIndices_.push(indexCount);
          this.state_.changed = false;
        }
      }
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {Array<Array<number>>} holeFlatCoordinates Hole flat coordinates.
     * @param {number} stride Stride.
     */
    WebGLLineStringReplay.prototype.drawPolygonCoordinates = function drawPolygonCoordinates (flatCoordinates, holeFlatCoordinates, stride) {
      if (!lineStringIsClosed(flatCoordinates, 0, flatCoordinates.length, stride)) {
        flatCoordinates.push(flatCoordinates[0]);
        flatCoordinates.push(flatCoordinates[1]);
      }
      this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
      if (holeFlatCoordinates.length) {
        var i, ii;
        for (i = 0, ii = holeFlatCoordinates.length; i < ii; ++i) {
          if (!lineStringIsClosed(holeFlatCoordinates[i], 0, holeFlatCoordinates[i].length, stride)) {
            holeFlatCoordinates[i].push(holeFlatCoordinates[i][0]);
            holeFlatCoordinates[i].push(holeFlatCoordinates[i][1]);
          }
          this.drawCoordinates_(holeFlatCoordinates[i], 0,
            holeFlatCoordinates[i].length, stride);
        }
      }
    };

    /**
     * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
     * @param {number=} opt_index Index count.
     */
    WebGLLineStringReplay.prototype.setPolygonStyle = function setPolygonStyle (feature, opt_index) {
      var index = opt_index === undefined ? this.indices.length : opt_index;
      this.startIndices.push(index);
      this.startIndicesFeature.push(feature);
      if (this.state_.changed) {
        this.styleIndices_.push(index);
        this.state_.changed = false;
      }
    };

    /**
     * @return {number} Current index.
     */
    WebGLLineStringReplay.prototype.getCurrentIndex = function getCurrentIndex () {
      return this.indices.length;
    };

    /**
     * @inheritDoc
     **/
    WebGLLineStringReplay.prototype.finish = function finish (context) {
      // create, bind, and populate the vertices buffer
      this.verticesBuffer = new WebGLBuffer(this.vertices);

      // create, bind, and populate the indices buffer
      this.indicesBuffer = new WebGLBuffer(this.indices);

      this.startIndices.push(this.indices.length);

      //Clean up, if there is nothing to draw
      if (this.styleIndices_.length === 0 && this.styles_.length > 0) {
        this.styles_ = [];
      }

      this.vertices = null;
      this.indices = null;
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      var verticesBuffer = this.verticesBuffer;
      var indicesBuffer = this.indicesBuffer;
      return function() {
        context.deleteBuffer(verticesBuffer);
        context.deleteBuffer(indicesBuffer);
      };
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.setUpProgram = function setUpProgram (gl, context, size$$1, pixelRatio) {
      // get the program
      var program = context.getProgram(fragment$2, vertex$2);

      // get the locations
      var locations;
      if (!this.defaultLocations_) {
        locations = new Locations$2(gl, program);
        this.defaultLocations_ = locations;
      } else {
        locations = this.defaultLocations_;
      }

      context.useProgram(program);

      // enable the vertex attrib arrays
      gl.enableVertexAttribArray(locations.a_lastPos);
      gl.vertexAttribPointer(locations.a_lastPos, 2, FLOAT,
        false, 28, 0);

      gl.enableVertexAttribArray(locations.a_position);
      gl.vertexAttribPointer(locations.a_position, 2, FLOAT,
        false, 28, 8);

      gl.enableVertexAttribArray(locations.a_nextPos);
      gl.vertexAttribPointer(locations.a_nextPos, 2, FLOAT,
        false, 28, 16);

      gl.enableVertexAttribArray(locations.a_direction);
      gl.vertexAttribPointer(locations.a_direction, 1, FLOAT,
        false, 28, 24);

      // Enable renderer specific uniforms.
      gl.uniform2fv(locations.u_size, size$$1);
      gl.uniform1f(locations.u_pixelRatio, pixelRatio);

      return locations;
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.shutDownProgram = function shutDownProgram (gl, locations) {
      gl.disableVertexAttribArray(locations.a_lastPos);
      gl.disableVertexAttribArray(locations.a_position);
      gl.disableVertexAttribArray(locations.a_nextPos);
      gl.disableVertexAttribArray(locations.a_direction);
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.drawReplay = function drawReplay (gl, context, skippedFeaturesHash, hitDetection) {
      //Save GL parameters.
      var tmpDepthFunc = /** @type {number} */ (gl.getParameter(gl.DEPTH_FUNC));
      var tmpDepthMask = /** @type {boolean} */ (gl.getParameter(gl.DEPTH_WRITEMASK));

      if (!hitDetection) {
        gl.enable(gl.DEPTH_TEST);
        gl.depthMask(true);
        gl.depthFunc(gl.NOTEQUAL);
      }

      if (!isEmpty$1(skippedFeaturesHash)) {
        this.drawReplaySkipping_(gl, context, skippedFeaturesHash);
      } else {
        //Draw by style groups to minimize drawElements() calls.
        var i, start, end, nextStyle;
        end = this.startIndices[this.startIndices.length - 1];
        for (i = this.styleIndices_.length - 1; i >= 0; --i) {
          start = this.styleIndices_[i];
          nextStyle = this.styles_[i];
          this.setStrokeStyle_(gl, nextStyle[0], nextStyle[1], nextStyle[2]);
          this.drawElements(gl, context, start, end);
          gl.clear(gl.DEPTH_BUFFER_BIT);
          end = start;
        }
      }
      if (!hitDetection) {
        gl.disable(gl.DEPTH_TEST);
        gl.clear(gl.DEPTH_BUFFER_BIT);
        //Restore GL parameters.
        gl.depthMask(tmpDepthMask);
        gl.depthFunc(tmpDepthFunc);
      }
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object} skippedFeaturesHash Ids of features to skip.
     */
    WebGLLineStringReplay.prototype.drawReplaySkipping_ = function drawReplaySkipping_ (gl, context, skippedFeaturesHash) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex, featureStart;
      featureIndex = this.startIndices.length - 2;
      end = start = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setStrokeStyle_(gl, nextStyle[0], nextStyle[1], nextStyle[2]);
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          featureStart = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)]) {
            if (start !== end) {
              this.drawElements(gl, context, start, end);
              gl.clear(gl.DEPTH_BUFFER_BIT);
            }
            end = featureStart;
          }
          featureIndex--;
          start = featureStart;
        }
        if (start !== end) {
          this.drawElements(gl, context, start, end);
          gl.clear(gl.DEPTH_BUFFER_BIT);
        }
        start = end = groupStart;
      }
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.drawHitDetectionReplayOneByOne = function drawHitDetectionReplayOneByOne (gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex;
      featureIndex = this.startIndices.length - 2;
      end = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setStrokeStyle_(gl, nextStyle[0], nextStyle[1], nextStyle[2]);
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          start = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)] === undefined &&
              feature.getGeometry() &&
              (opt_hitExtent === undefined || intersects(
                /** @type {Array<number>} */ (opt_hitExtent),
                feature.getGeometry().getExtent()))) {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            this.drawElements(gl, context, start, end);

            var result = featureCallback(feature);

            if (result) {
              return result;
            }

          }
          featureIndex--;
          end = start;
        }
      }
      return undefined;
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {Array<number>} color Color.
     * @param {number} lineWidth Line width.
     * @param {number} miterLimit Miter limit.
     */
    WebGLLineStringReplay.prototype.setStrokeStyle_ = function setStrokeStyle_ (gl, color, lineWidth, miterLimit) {
      gl.uniform4fv(this.defaultLocations_.u_color, color);
      gl.uniform1f(this.defaultLocations_.u_lineWidth, lineWidth);
      gl.uniform1f(this.defaultLocations_.u_miterLimit, miterLimit);
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      var strokeStyleLineCap = strokeStyle.getLineCap();
      this.state_.lineCap = strokeStyleLineCap !== undefined ?
        strokeStyleLineCap : DEFAULT_LINECAP;
      var strokeStyleLineDash = strokeStyle.getLineDash();
      this.state_.lineDash = strokeStyleLineDash ?
        strokeStyleLineDash : DEFAULT_LINEDASH;
      var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
      this.state_.lineDashOffset = strokeStyleLineDashOffset ?
        strokeStyleLineDashOffset : DEFAULT_LINEDASHOFFSET;
      var strokeStyleLineJoin = strokeStyle.getLineJoin();
      this.state_.lineJoin = strokeStyleLineJoin !== undefined ?
        strokeStyleLineJoin : DEFAULT_LINEJOIN;
      var strokeStyleColor = strokeStyle.getColor();
      if (!(strokeStyleColor instanceof CanvasGradient) &&
          !(strokeStyleColor instanceof CanvasPattern)) {
        strokeStyleColor = asArray(strokeStyleColor).map(function(c, i) {
          return i != 3 ? c / 255 : c;
        }) || DEFAULT_STROKESTYLE;
      } else {
        strokeStyleColor = DEFAULT_STROKESTYLE;
      }
      var strokeStyleWidth = strokeStyle.getWidth();
      strokeStyleWidth = strokeStyleWidth !== undefined ?
        strokeStyleWidth : DEFAULT_LINEWIDTH;
      var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
      strokeStyleMiterLimit = strokeStyleMiterLimit !== undefined ?
        strokeStyleMiterLimit : DEFAULT_MITERLIMIT;
      if (!this.state_.strokeColor || !equals(this.state_.strokeColor, strokeStyleColor) ||
          this.state_.lineWidth !== strokeStyleWidth || this.state_.miterLimit !== strokeStyleMiterLimit) {
        this.state_.changed = true;
        this.state_.strokeColor = strokeStyleColor;
        this.state_.lineWidth = strokeStyleWidth;
        this.state_.miterLimit = strokeStyleMiterLimit;
        this.styles_.push([strokeStyleColor, strokeStyleWidth, strokeStyleMiterLimit]);
      }
    };

    return WebGLLineStringReplay;
  }(WebGLReplay));

  /**
   * @module ol/render/webgl/polygonreplay/defaultshader
   */

  var fragment$3 = new WebGLFragment('precision mediump float;\n\n\n\nuniform vec4 u_color;\nuniform float u_opacity;\n\nvoid main(void) {\n  gl_FragColor = u_color;\n  float alpha = u_color.a * u_opacity;\n  if (alpha == 0.0) {\n    discard;\n  }\n  gl_FragColor.a = alpha;\n}\n');

  var vertex$3 = new WebGLVertex('\n\nattribute vec2 a_position;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\n\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n}\n\n\n');

  /**
   * @module ol/render/webgl/polygonreplay/defaultshader/Locations
   */

  var Locations$3 = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_projectionMatrix = gl.getUniformLocation(
      program, 'u_projectionMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetScaleMatrix = gl.getUniformLocation(
      program, 'u_offsetScaleMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetRotateMatrix = gl.getUniformLocation(
      program, 'u_offsetRotateMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_color = gl.getUniformLocation(
      program, 'u_color');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_opacity = gl.getUniformLocation(
      program, 'u_opacity');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

  };

  /**
   * @module ol/structs/LinkedList
   */


  /**
   * @typedef {Object} Item
   * @property {Item} [prev]
   * @property {Item} [next]
   * @property {?} data
   */

  /**
   * @classdesc
   * Creates an empty linked list structure.
   */
  var LinkedList = function LinkedList(opt_circular) {

    /**
     * @private
     * @type {Item|undefined}
     */
    this.first_;

    /**
     * @private
     * @type {Item|undefined}
     */
    this.last_;

    /**
     * @private
     * @type {Item|undefined}
     */
    this.head_;

    /**
     * @private
     * @type {boolean}
     */
    this.circular_ = opt_circular === undefined ? true : opt_circular;

    /**
     * @private
     * @type {number}
     */
    this.length_ = 0;

  };

  /**
   * Inserts an item into the linked list right after the current one.
   *
   * @param {?} data Item data.
   */
  LinkedList.prototype.insertItem = function insertItem (data) {

    /** @type {Item} */
    var item = {
      prev: undefined,
      next: undefined,
      data: data
    };

    var head = this.head_;

    //Initialize the list.
    if (!head) {
      this.first_ = item;
      this.last_ = item;
      if (this.circular_) {
        item.next = item;
        item.prev = item;
      }
    } else {
      //Link the new item to the adjacent ones.
      var next = head.next;
      item.prev = head;
      item.next = next;
      head.next = item;
      if (next) {
        next.prev = item;
      }

      if (head === this.last_) {
        this.last_ = item;
      }
    }
    this.head_ = item;
    this.length_++;
  };

  /**
   * Removes the current item from the list. Sets the cursor to the next item,
   * if possible.
   */
  LinkedList.prototype.removeItem = function removeItem () {
    var head = this.head_;
    if (head) {
      var next = head.next;
      var prev = head.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      this.head_ = next || prev;

      if (this.first_ === this.last_) {
        this.head_ = undefined;
        this.first_ = undefined;
        this.last_ = undefined;
      } else if (this.first_ === head) {
        this.first_ = this.head_;
      } else if (this.last_ === head) {
        this.last_ = prev ? this.head_.prev : this.head_;
      }
      this.length_--;
    }
  };

  /**
   * Sets the cursor to the first item, and returns the associated data.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.firstItem = function firstItem () {
    this.head_ = this.first_;
    if (this.head_) {
      return this.head_.data;
    }
    return undefined;
  };

  /**
  * Sets the cursor to the last item, and returns the associated data.
  *
  * @return {?} Item data.
  */
  LinkedList.prototype.lastItem = function lastItem () {
    this.head_ = this.last_;
    if (this.head_) {
      return this.head_.data;
    }
    return undefined;
  };

  /**
   * Sets the cursor to the next item, and returns the associated data.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.nextItem = function nextItem () {
    if (this.head_ && this.head_.next) {
      this.head_ = this.head_.next;
      return this.head_.data;
    }
    return undefined;
  };

  /**
   * Returns the next item's data without moving the cursor.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.getNextItem = function getNextItem () {
    if (this.head_ && this.head_.next) {
      return this.head_.next.data;
    }
    return undefined;
  };

  /**
   * Sets the cursor to the previous item, and returns the associated data.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.prevItem = function prevItem () {
    if (this.head_ && this.head_.prev) {
      this.head_ = this.head_.prev;
      return this.head_.data;
    }
    return undefined;
  };

  /**
   * Returns the previous item's data without moving the cursor.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.getPrevItem = function getPrevItem () {
    if (this.head_ && this.head_.prev) {
      return this.head_.prev.data;
    }
    return undefined;
  };

  /**
   * Returns the current item's data.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.getCurrItem = function getCurrItem () {
    if (this.head_) {
      return this.head_.data;
    }
    return undefined;
  };

  /**
   * Sets the first item of the list. This only works for circular lists, and sets
   * the last item accordingly.
   */
  LinkedList.prototype.setFirstItem = function setFirstItem () {
    if (this.circular_ && this.head_) {
      this.first_ = this.head_;
      this.last_ = this.head_.prev;
    }
  };

  /**
   * Concatenates two lists.
   * @param {LinkedList} list List to merge into the current list.
   */
  LinkedList.prototype.concat = function concat (list) {
    if (list.head_) {
      if (this.head_) {
        var end = this.head_.next;
        this.head_.next = list.first_;
        list.first_.prev = this.head_;
        end.prev = list.last_;
        list.last_.next = end;
        this.length_ += list.length_;
      } else {
        this.head_ = list.head_;
        this.first_ = list.first_;
        this.last_ = list.last_;
        this.length_ = list.length_;
      }
      list.head_ = undefined;
      list.first_ = undefined;
      list.last_ = undefined;
      list.length_ = 0;
    }
  };

  /**
   * Returns the current length of the list.
   *
   * @return {number} Length.
   */
  LinkedList.prototype.getLength = function getLength () {
    return this.length_;
  };

  /**
   * @module ol/render/webgl/PolygonReplay
   */


  /**
   * @typedef {Object} PolygonVertex
   * @property {number} x
   * @property {number} y
   * @property {number} i
   * @property {boolean} [reflex]
   */

  /**
   * @typedef {Object} PolygonSegment
   * @property {PolygonVertex} p0
   * @property {PolygonVertex} p1
   */


  var WebGLPolygonReplay = /*@__PURE__*/(function (WebGLReplay$$1) {
    function WebGLPolygonReplay(tolerance, maxExtent) {
      WebGLReplay$$1.call(this, tolerance, maxExtent);

      this.lineStringReplay = new WebGLLineStringReplay(
        tolerance, maxExtent);

      /**
       * @private
       * @type {import("./polygonreplay/defaultshader/Locations.js").default}
       */
      this.defaultLocations_ = null;

      /**
       * @private
       * @type {Array<Array<number>>}
       */
      this.styles_ = [];

      /**
       * @private
       * @type {Array<number>}
       */
      this.styleIndices_ = [];

      /**
       * @private
       * @type {{fillColor: (Array<number>|null),
       *         changed: boolean}|null}
       */
      this.state_ = {
        fillColor: null,
        changed: false
      };

    }

    if ( WebGLReplay$$1 ) WebGLPolygonReplay.__proto__ = WebGLReplay$$1;
    WebGLPolygonReplay.prototype = Object.create( WebGLReplay$$1 && WebGLReplay$$1.prototype );
    WebGLPolygonReplay.prototype.constructor = WebGLPolygonReplay;

    /**
     * Draw one polygon.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {Array<Array<number>>} holeFlatCoordinates Hole flat coordinates.
     * @param {number} stride Stride.
     * @private
     */
    WebGLPolygonReplay.prototype.drawCoordinates_ = function drawCoordinates_ (flatCoordinates, holeFlatCoordinates, stride) {
      // Triangulate the polygon
      var outerRing = new LinkedList();
      var rtree = new RBush();
      // Initialize the outer ring
      this.processFlatCoordinates_(flatCoordinates, stride, outerRing, rtree, true);
      var maxCoords = this.getMaxCoords_(outerRing);

      // Eliminate holes, if there are any
      if (holeFlatCoordinates.length) {
        var i, ii;
        var holeLists = [];
        for (i = 0, ii = holeFlatCoordinates.length; i < ii; ++i) {
          var holeList = {
            list: new LinkedList(),
            maxCoords: undefined,
            rtree: new RBush()
          };
          holeLists.push(holeList);
          this.processFlatCoordinates_(holeFlatCoordinates[i],
            stride, holeList.list, holeList.rtree, false);
          this.classifyPoints_(holeList.list, holeList.rtree, true);
          holeList.maxCoords = this.getMaxCoords_(holeList.list);
        }
        holeLists.sort(function(a, b) {
          return b.maxCoords[0] === a.maxCoords[0] ?
            a.maxCoords[1] - b.maxCoords[1] : b.maxCoords[0] - a.maxCoords[0];
        });
        for (i = 0; i < holeLists.length; ++i) {
          var currList = holeLists[i].list;
          var start = currList.firstItem();
          var currItem = start;
          var intersection = (void 0);
          do {
            //TODO: Triangulate holes when they intersect the outer ring.
            if (this.getIntersections_(currItem, rtree).length) {
              intersection = true;
              break;
            }
            currItem = currList.nextItem();
          } while (start !== currItem);
          if (!intersection) {
            if (this.bridgeHole_(currList, holeLists[i].maxCoords[0], outerRing, maxCoords[0], rtree)) {
              rtree.concat(holeLists[i].rtree);
              this.classifyPoints_(outerRing, rtree, false);
            }
          }
        }
      } else {
        this.classifyPoints_(outerRing, rtree, false);
      }
      this.triangulate_(outerRing, rtree);
    };

    /**
     * Inserts flat coordinates in a linked list and adds them to the vertex buffer.
     * @private
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} stride Stride.
     * @param {import("../../structs/LinkedList.js").default} list Linked list.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean} clockwise Coordinate order should be clockwise.
     */
    WebGLPolygonReplay.prototype.processFlatCoordinates_ = function processFlatCoordinates_ (flatCoordinates, stride, list, rtree, clockwise) {
      var isClockwise = linearRingIsClockwise(flatCoordinates,
        0, flatCoordinates.length, stride);
      var i, ii;
      var n = this.vertices.length / 2;
      /** @type {PolygonVertex} */
      var start;
      /** @type {PolygonVertex} */
      var p0;
      /** @type {PolygonVertex} */
      var p1;
      var extents = [];
      var segments = [];
      if (clockwise === isClockwise) {
        start = this.createPoint_(flatCoordinates[0], flatCoordinates[1], n++);
        p0 = start;
        for (i = stride, ii = flatCoordinates.length; i < ii; i += stride) {
          p1 = this.createPoint_(flatCoordinates[i], flatCoordinates[i + 1], n++);
          segments.push(this.insertItem_(p0, p1, list));
          extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
            Math.max(p0.y, p1.y)]);
          p0 = p1;
        }
        segments.push(this.insertItem_(p1, start, list));
        extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
          Math.max(p0.y, p1.y)]);
      } else {
        var end = flatCoordinates.length - stride;
        start = this.createPoint_(flatCoordinates[end], flatCoordinates[end + 1], n++);
        p0 = start;
        for (i = end - stride, ii = 0; i >= ii; i -= stride) {
          p1 = this.createPoint_(flatCoordinates[i], flatCoordinates[i + 1], n++);
          segments.push(this.insertItem_(p0, p1, list));
          extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
            Math.max(p0.y, p1.y)]);
          p0 = p1;
        }
        segments.push(this.insertItem_(p1, start, list));
        extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
          Math.max(p0.y, p1.y)]);
      }
      rtree.load(extents, segments);
    };

    /**
     * Returns the rightmost coordinates of a polygon on the X axis.
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Polygons ring.
     * @return {Array<number>} Max X coordinates.
     */
    WebGLPolygonReplay.prototype.getMaxCoords_ = function getMaxCoords_ (list) {
      var start = list.firstItem();
      var seg = start;
      var maxCoords = [seg.p0.x, seg.p0.y];

      do {
        seg = list.nextItem();
        if (seg.p0.x > maxCoords[0]) {
          maxCoords = [seg.p0.x, seg.p0.y];
        }
      } while (seg !== start);

      return maxCoords;
    };

    /**
     * Classifies the points of a polygon list as convex, reflex. Removes collinear vertices.
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Polygon ring.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean} ccw The orientation of the polygon is counter-clockwise.
     * @return {boolean} There were reclassified points.
     */
    WebGLPolygonReplay.prototype.classifyPoints_ = function classifyPoints_ (list, rtree, ccw) {
      var start = list.firstItem();
      var s0 = start;
      var s1 = list.nextItem();
      var pointsReclassified = false;
      do {
        var reflex = ccw ? triangleIsCounterClockwise(s1.p1.x,
          s1.p1.y, s0.p1.x, s0.p1.y, s0.p0.x, s0.p0.y) :
          triangleIsCounterClockwise(s0.p0.x, s0.p0.y, s0.p1.x,
            s0.p1.y, s1.p1.x, s1.p1.y);
        if (reflex === undefined) {
          this.removeItem_(s0, s1, list, rtree);
          pointsReclassified = true;
          if (s1 === start) {
            start = list.getNextItem();
          }
          s1 = s0;
          list.prevItem();
        } else if (s0.p1.reflex !== reflex) {
          s0.p1.reflex = reflex;
          pointsReclassified = true;
        }
        s0 = s1;
        s1 = list.nextItem();
      } while (s0 !== start);
      return pointsReclassified;
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} hole Linked list of the hole.
     * @param {number} holeMaxX Maximum X value of the hole.
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {number} listMaxX Maximum X value of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @return {boolean} Bridging was successful.
     */
    WebGLPolygonReplay.prototype.bridgeHole_ = function bridgeHole_ (hole, holeMaxX, list, listMaxX, rtree) {
      var seg = hole.firstItem();
      while (seg.p1.x !== holeMaxX) {
        seg = hole.nextItem();
      }

      var p1 = seg.p1;
      /** @type {PolygonVertex} */
      var p2 = {x: listMaxX, y: p1.y, i: -1};
      var minDist = Infinity;
      var i, ii, bestPoint;
      /** @type {PolygonVertex} */
      var p5;

      var intersectingSegments = this.getIntersections_({p0: p1, p1: p2}, rtree, true);
      for (i = 0, ii = intersectingSegments.length; i < ii; ++i) {
        var currSeg = intersectingSegments[i];
        var intersection = this.calculateIntersection_(p1, p2, currSeg.p0,
          currSeg.p1, true);
        var dist = Math.abs(p1.x - intersection[0]);
        if (dist < minDist && triangleIsCounterClockwise(p1.x, p1.y,
          currSeg.p0.x, currSeg.p0.y, currSeg.p1.x, currSeg.p1.y) !== undefined) {
          minDist = dist;
          p5 = {x: intersection[0], y: intersection[1], i: -1};
          seg = currSeg;
        }
      }
      if (minDist === Infinity) {
        return false;
      }
      bestPoint = seg.p1;

      if (minDist > 0) {
        var pointsInTriangle = this.getPointsInTriangle_(p1, p5, seg.p1, rtree);
        if (pointsInTriangle.length) {
          var theta = Infinity;
          for (i = 0, ii = pointsInTriangle.length; i < ii; ++i) {
            var currPoint = pointsInTriangle[i];
            var currTheta = Math.atan2(p1.y - currPoint.y, p2.x - currPoint.x);
            if (currTheta < theta || (currTheta === theta && currPoint.x < bestPoint.x)) {
              theta = currTheta;
              bestPoint = currPoint;
            }
          }
        }
      }

      seg = list.firstItem();
      while (seg.p1.x !== bestPoint.x || seg.p1.y !== bestPoint.y) {
        seg = list.nextItem();
      }

      //We clone the bridge points as they can have different convexity.
      var p0Bridge = {x: p1.x, y: p1.y, i: p1.i, reflex: undefined};
      var p1Bridge = {x: seg.p1.x, y: seg.p1.y, i: seg.p1.i, reflex: undefined};

      hole.getNextItem().p0 = p0Bridge;
      this.insertItem_(p1, seg.p1, hole, rtree);
      this.insertItem_(p1Bridge, p0Bridge, hole, rtree);
      seg.p1 = p1Bridge;
      hole.setFirstItem();
      list.concat(hole);

      return true;
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     */
    WebGLPolygonReplay.prototype.triangulate_ = function triangulate_ (list, rtree) {
      var ccw = false;
      var simple = this.isSimple_(list, rtree);

      // Start clipping ears
      while (list.getLength() > 3) {
        if (simple) {
          if (!this.clipEars_(list, rtree, simple, ccw)) {
            if (!this.classifyPoints_(list, rtree, ccw)) {
              // Due to the behavior of OL's PIP algorithm, the ear clipping cannot
              // introduce touching segments. However, the original data may have some.
              if (!this.resolveSelfIntersections_(list, rtree, true)) {
                break;
              }
            }
          }
        } else {
          if (!this.clipEars_(list, rtree, simple, ccw)) {
            // We ran out of ears, try to reclassify.
            if (!this.classifyPoints_(list, rtree, ccw)) {
              // We have a bad polygon, try to resolve local self-intersections.
              if (!this.resolveSelfIntersections_(list, rtree)) {
                simple = this.isSimple_(list, rtree);
                if (!simple) {
                  // We have a really bad polygon, try more time consuming methods.
                  this.splitPolygon_(list, rtree);
                  break;
                } else {
                  ccw = !this.isClockwise_(list);
                  this.classifyPoints_(list, rtree, ccw);
                }
              }
            }
          }
        }
      }
      if (list.getLength() === 3) {
        var numIndices = this.indices.length;
        this.indices[numIndices++] = list.getPrevItem().p0.i;
        this.indices[numIndices++] = list.getCurrItem().p0.i;
        this.indices[numIndices++] = list.getNextItem().p0.i;
      }
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean} simple The polygon is simple.
     * @param {boolean} ccw Orientation of the polygon is counter-clockwise.
     * @return {boolean} There were processed ears.
     */
    WebGLPolygonReplay.prototype.clipEars_ = function clipEars_ (list, rtree, simple, ccw) {
      var numIndices = this.indices.length;
      var start = list.firstItem();
      var s0 = list.getPrevItem();
      var s1 = start;
      var s2 = list.nextItem();
      var s3 = list.getNextItem();
      var p0, p1, p2;
      var processedEars = false;
      do {
        p0 = s1.p0;
        p1 = s1.p1;
        p2 = s2.p1;
        if (p1.reflex === false) {
          // We might have a valid ear
          var variableCriterion = (void 0);
          if (simple) {
            variableCriterion = this.getPointsInTriangle_(p0, p1, p2, rtree, true).length === 0;
          } else {
            variableCriterion = ccw ? this.diagonalIsInside_(s3.p1, p2, p1, p0,
              s0.p0) : this.diagonalIsInside_(s0.p0, p0, p1, p2, s3.p1);
          }
          if ((simple || this.getIntersections_({p0: p0, p1: p2}, rtree).length === 0) &&
              variableCriterion) {
            //The diagonal is completely inside the polygon
            if (simple || p0.reflex === false || p2.reflex === false ||
                linearRingIsClockwise([s0.p0.x, s0.p0.y, p0.x,
                  p0.y, p1.x, p1.y, p2.x, p2.y, s3.p1.x, s3.p1.y], 0, 10, 2) === !ccw) {
              //The diagonal is persumably valid, we have an ear
              this.indices[numIndices++] = p0.i;
              this.indices[numIndices++] = p1.i;
              this.indices[numIndices++] = p2.i;
              this.removeItem_(s1, s2, list, rtree);
              if (s2 === start) {
                start = s3;
              }
              processedEars = true;
            }
          }
        }
        // Else we have a reflex point.
        s0 = list.getPrevItem();
        s1 = list.getCurrItem();
        s2 = list.nextItem();
        s3 = list.getNextItem();
      } while (s1 !== start && list.getLength() > 3);

      return processedEars;
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean=} opt_touch Resolve touching segments.
     * @return {boolean} There were resolved intersections.
    */
    WebGLPolygonReplay.prototype.resolveSelfIntersections_ = function resolveSelfIntersections_ (list, rtree, opt_touch) {
      var start = list.firstItem();
      list.nextItem();
      var s0 = start;
      var s1 = list.nextItem();
      var resolvedIntersections = false;

      do {
        var intersection = this.calculateIntersection_(s0.p0, s0.p1, s1.p0, s1.p1,
          opt_touch);
        if (intersection) {
          var breakCond = false;
          var numVertices = this.vertices.length;
          var numIndices = this.indices.length;
          var n = numVertices / 2;
          var seg = list.prevItem();
          list.removeItem();
          rtree.remove(seg);
          breakCond = (seg === start);
          var p = (void 0);
          if (opt_touch) {
            if (intersection[0] === s0.p0.x && intersection[1] === s0.p0.y) {
              list.prevItem();
              p = s0.p0;
              s1.p0 = p;
              rtree.remove(s0);
              breakCond = breakCond || (s0 === start);
            } else {
              p = s1.p1;
              s0.p1 = p;
              rtree.remove(s1);
              breakCond = breakCond || (s1 === start);
            }
            list.removeItem();
          } else {
            p = this.createPoint_(intersection[0], intersection[1], n);
            s0.p1 = p;
            s1.p0 = p;
            rtree.update([Math.min(s0.p0.x, s0.p1.x), Math.min(s0.p0.y, s0.p1.y),
              Math.max(s0.p0.x, s0.p1.x), Math.max(s0.p0.y, s0.p1.y)], s0);
            rtree.update([Math.min(s1.p0.x, s1.p1.x), Math.min(s1.p0.y, s1.p1.y),
              Math.max(s1.p0.x, s1.p1.x), Math.max(s1.p0.y, s1.p1.y)], s1);
          }

          this.indices[numIndices++] = seg.p0.i;
          this.indices[numIndices++] = seg.p1.i;
          this.indices[numIndices++] = p.i;

          resolvedIntersections = true;
          if (breakCond) {
            break;
          }
        }

        s0 = list.getPrevItem();
        s1 = list.nextItem();
      } while (s0 !== start);
      return resolvedIntersections;
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @return {boolean} The polygon is simple.
     */
    WebGLPolygonReplay.prototype.isSimple_ = function isSimple_ (list, rtree) {
      var start = list.firstItem();
      var seg = start;
      do {
        if (this.getIntersections_(seg, rtree).length) {
          return false;
        }
        seg = list.nextItem();
      } while (seg !== start);
      return true;
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @return {boolean} Orientation is clockwise.
     */
    WebGLPolygonReplay.prototype.isClockwise_ = function isClockwise_ (list) {
      var length = list.getLength() * 2;
      var flatCoordinates = new Array(length);
      var start = list.firstItem();
      var seg = start;
      var i = 0;
      do {
        flatCoordinates[i++] = seg.p0.x;
        flatCoordinates[i++] = seg.p0.y;
        seg = list.nextItem();
      } while (seg !== start);
      return linearRingIsClockwise(flatCoordinates, 0, length, 2);
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     */
    WebGLPolygonReplay.prototype.splitPolygon_ = function splitPolygon_ (list, rtree) {
      var start = list.firstItem();
      var s0 = start;
      do {
        var intersections = this.getIntersections_(s0, rtree);
        if (intersections.length) {
          var s1 = intersections[0];
          var n = this.vertices.length / 2;
          var intersection = this.calculateIntersection_(s0.p0,
            s0.p1, s1.p0, s1.p1);
          var p = this.createPoint_(intersection[0], intersection[1], n);
          var newPolygon = new LinkedList();
          var newRtree = new RBush();
          this.insertItem_(p, s0.p1, newPolygon, newRtree);
          s0.p1 = p;
          rtree.update([Math.min(s0.p0.x, p.x), Math.min(s0.p0.y, p.y),
            Math.max(s0.p0.x, p.x), Math.max(s0.p0.y, p.y)], s0);
          var currItem = list.nextItem();
          while (currItem !== s1) {
            this.insertItem_(currItem.p0, currItem.p1, newPolygon, newRtree);
            rtree.remove(currItem);
            list.removeItem();
            currItem = list.getCurrItem();
          }
          this.insertItem_(s1.p0, p, newPolygon, newRtree);
          s1.p0 = p;
          rtree.update([Math.min(s1.p1.x, p.x), Math.min(s1.p1.y, p.y),
            Math.max(s1.p1.x, p.x), Math.max(s1.p1.y, p.y)], s1);
          this.classifyPoints_(list, rtree, false);
          this.triangulate_(list, rtree);
          this.classifyPoints_(newPolygon, newRtree, false);
          this.triangulate_(newPolygon, newRtree);
          break;
        }
        s0 = list.nextItem();
      } while (s0 !== start);
    };

    /**
     * @private
     * @param {number} x X coordinate.
     * @param {number} y Y coordinate.
     * @param {number} i Index.
     * @return {PolygonVertex} List item.
     */
    WebGLPolygonReplay.prototype.createPoint_ = function createPoint_ (x, y, i) {
      var numVertices = this.vertices.length;
      this.vertices[numVertices++] = x;
      this.vertices[numVertices++] = y;
      /** @type {PolygonVertex} */
      var p = {
        x: x,
        y: y,
        i: i,
        reflex: undefined
      };
      return p;
    };

    /**
     * @private
     * @param {PolygonVertex} p0 First point of segment.
     * @param {PolygonVertex} p1 Second point of segment.
     * @param {import("../../structs/LinkedList.js").default} list Polygon ring.
     * @param {import("../../structs/RBush.js").default=} opt_rtree Insert the segment into the R-Tree.
     * @return {PolygonSegment} segment.
     */
    WebGLPolygonReplay.prototype.insertItem_ = function insertItem_ (p0, p1, list, opt_rtree) {
      var seg = {
        p0: p0,
        p1: p1
      };
      list.insertItem(seg);
      if (opt_rtree) {
        opt_rtree.insert([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y),
          Math.max(p0.x, p1.x), Math.max(p0.y, p1.y)], seg);
      }
      return seg;
    };

    /**
      * @private
      * @param {PolygonSegment} s0 Segment before the remove candidate.
      * @param {PolygonSegment} s1 Remove candidate segment.
      * @param {import("../../structs/LinkedList.js").default} list Polygon ring.
      * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
      */
    WebGLPolygonReplay.prototype.removeItem_ = function removeItem_ (s0, s1, list, rtree) {
      if (list.getCurrItem() === s1) {
        list.removeItem();
        s0.p1 = s1.p1;
        rtree.remove(s1);
        rtree.update([Math.min(s0.p0.x, s0.p1.x), Math.min(s0.p0.y, s0.p1.y),
          Math.max(s0.p0.x, s0.p1.x), Math.max(s0.p0.y, s0.p1.y)], s0);
      }
    };

    /**
     * @private
     * @param {PolygonVertex} p0 First point.
     * @param {PolygonVertex} p1 Second point.
     * @param {PolygonVertex} p2 Third point.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean=} opt_reflex Only include reflex points.
     * @return {Array<PolygonVertex>} Points in the triangle.
     */
    WebGLPolygonReplay.prototype.getPointsInTriangle_ = function getPointsInTriangle_ (p0, p1, p2, rtree, opt_reflex) {
      var result = [];
      var segmentsInExtent = rtree.getInExtent([Math.min(p0.x, p1.x, p2.x),
        Math.min(p0.y, p1.y, p2.y), Math.max(p0.x, p1.x, p2.x), Math.max(p0.y,
          p1.y, p2.y)]);
      for (var i = 0, ii = segmentsInExtent.length; i < ii; ++i) {
        for (var j in segmentsInExtent[i]) {
          var p = segmentsInExtent[i][j];
          if (typeof p === 'object' && (!opt_reflex || p.reflex)) {
            if ((p.x !== p0.x || p.y !== p0.y) && (p.x !== p1.x || p.y !== p1.y) &&
                (p.x !== p2.x || p.y !== p2.y) && result.indexOf(p) === -1 &&
                linearRingContainsXY([p0.x, p0.y, p1.x, p1.y, p2.x, p2.y], 0, 6, 2, p.x, p.y)) {
              result.push(p);
            }
          }
        }
      }
      return result;
    };

    /**
     * @private
     * @param {PolygonSegment} segment Segment.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean=} opt_touch Touching segments should be considered an intersection.
     * @return {Array<PolygonSegment>} Intersecting segments.
     */
    WebGLPolygonReplay.prototype.getIntersections_ = function getIntersections_ (segment, rtree, opt_touch) {
      var p0 = segment.p0;
      var p1 = segment.p1;
      var segmentsInExtent = rtree.getInExtent([Math.min(p0.x, p1.x),
        Math.min(p0.y, p1.y), Math.max(p0.x, p1.x), Math.max(p0.y, p1.y)]);
      var result = [];
      for (var i = 0, ii = segmentsInExtent.length; i < ii; ++i) {
        var currSeg = segmentsInExtent[i];
        if (segment !== currSeg && (opt_touch || currSeg.p0 !== p1 || currSeg.p1 !== p0) &&
            this.calculateIntersection_(p0, p1, currSeg.p0, currSeg.p1, opt_touch)) {
          result.push(currSeg);
        }
      }
      return result;
    };

    /**
     * Line intersection algorithm by Paul Bourke.
     * See http://paulbourke.net/geometry/pointlineplane/.
     *
     * @private
     * @param {PolygonVertex} p0 First point.
     * @param {PolygonVertex} p1 Second point.
     * @param {PolygonVertex} p2 Third point.
     * @param {PolygonVertex} p3 Fourth point.
     * @param {boolean=} opt_touch Touching segments should be considered an intersection.
     * @return {Array<number>|undefined} Intersection coordinates.
     */
    WebGLPolygonReplay.prototype.calculateIntersection_ = function calculateIntersection_ (p0, p1, p2, p3, opt_touch) {
      var denom = (p3.y - p2.y) * (p1.x - p0.x) - (p3.x - p2.x) * (p1.y - p0.y);
      if (denom !== 0) {
        var ua = ((p3.x - p2.x) * (p0.y - p2.y) - (p3.y - p2.y) * (p0.x - p2.x)) / denom;
        var ub = ((p1.x - p0.x) * (p0.y - p2.y) - (p1.y - p0.y) * (p0.x - p2.x)) / denom;
        if ((!opt_touch && ua > EPSILON && ua < 1 - EPSILON &&
            ub > EPSILON && ub < 1 - EPSILON) || (opt_touch &&
            ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1)) {
          return [p0.x + ua * (p1.x - p0.x), p0.y + ua * (p1.y - p0.y)];
        }
      }
      return undefined;
    };

    /**
     * @private
     * @param {PolygonVertex} p0 Point before the start of the diagonal.
     * @param {PolygonVertex} p1 Start point of the diagonal.
     * @param {PolygonVertex} p2 Ear candidate.
     * @param {PolygonVertex} p3 End point of the diagonal.
     * @param {PolygonVertex} p4 Point after the end of the diagonal.
     * @return {boolean} Diagonal is inside the polygon.
     */
    WebGLPolygonReplay.prototype.diagonalIsInside_ = function diagonalIsInside_ (p0, p1, p2, p3, p4) {
      if (p1.reflex === undefined || p3.reflex === undefined) {
        return false;
      }
      var p1IsLeftOf = (p2.x - p3.x) * (p1.y - p3.y) > (p2.y - p3.y) * (p1.x - p3.x);
      var p1IsRightOf = (p4.x - p3.x) * (p1.y - p3.y) < (p4.y - p3.y) * (p1.x - p3.x);
      var p3IsLeftOf = (p0.x - p1.x) * (p3.y - p1.y) > (p0.y - p1.y) * (p3.x - p1.x);
      var p3IsRightOf = (p2.x - p1.x) * (p3.y - p1.y) < (p2.y - p1.y) * (p3.x - p1.x);
      var p1InCone = p3.reflex ? p1IsRightOf || p1IsLeftOf : p1IsRightOf && p1IsLeftOf;
      var p3InCone = p1.reflex ? p3IsRightOf || p3IsLeftOf : p3IsRightOf && p3IsLeftOf;
      return p1InCone && p3InCone;
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.drawMultiPolygon = function drawMultiPolygon (multiPolygonGeometry, feature) {
      var endss = multiPolygonGeometry.getEndss();
      var stride = multiPolygonGeometry.getStride();
      var currIndex = this.indices.length;
      var currLineIndex = this.lineStringReplay.getCurrentIndex();
      var flatCoordinates = multiPolygonGeometry.getFlatCoordinates();
      var i, ii, j, jj;
      var start = 0;
      for (i = 0, ii = endss.length; i < ii; ++i) {
        var ends = endss[i];
        if (ends.length > 0) {
          var outerRing = translate(flatCoordinates, start, ends[0],
            stride, -this.origin[0], -this.origin[1]);
          if (outerRing.length) {
            var holes = [];
            var holeFlatCoords = (void 0);
            for (j = 1, jj = ends.length; j < jj; ++j) {
              if (ends[j] !== ends[j - 1]) {
                holeFlatCoords = translate(flatCoordinates, ends[j - 1],
                  ends[j], stride, -this.origin[0], -this.origin[1]);
                holes.push(holeFlatCoords);
              }
            }
            this.lineStringReplay.drawPolygonCoordinates(outerRing, holes, stride);
            this.drawCoordinates_(outerRing, holes, stride);
          }
        }
        start = ends[ends.length - 1];
      }
      if (this.indices.length > currIndex) {
        this.startIndices.push(currIndex);
        this.startIndicesFeature.push(feature);
        if (this.state_.changed) {
          this.styleIndices_.push(currIndex);
          this.state_.changed = false;
        }
      }
      if (this.lineStringReplay.getCurrentIndex() > currLineIndex) {
        this.lineStringReplay.setPolygonStyle(feature, currLineIndex);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.drawPolygon = function drawPolygon (polygonGeometry, feature) {
      var ends = polygonGeometry.getEnds();
      var stride = polygonGeometry.getStride();
      if (ends.length > 0) {
        var flatCoordinates = polygonGeometry.getFlatCoordinates().map(Number);
        var outerRing = translate(flatCoordinates, 0, ends[0],
          stride, -this.origin[0], -this.origin[1]);
        if (outerRing.length) {
          var holes = [];
          var i, ii, holeFlatCoords;
          for (i = 1, ii = ends.length; i < ii; ++i) {
            if (ends[i] !== ends[i - 1]) {
              holeFlatCoords = translate(flatCoordinates, ends[i - 1],
                ends[i], stride, -this.origin[0], -this.origin[1]);
              holes.push(holeFlatCoords);
            }
          }

          this.startIndices.push(this.indices.length);
          this.startIndicesFeature.push(feature);
          if (this.state_.changed) {
            this.styleIndices_.push(this.indices.length);
            this.state_.changed = false;
          }
          this.lineStringReplay.setPolygonStyle(feature);

          this.lineStringReplay.drawPolygonCoordinates(outerRing, holes, stride);
          this.drawCoordinates_(outerRing, holes, stride);
        }
      }
    };

    /**
     * @inheritDoc
     **/
    WebGLPolygonReplay.prototype.finish = function finish (context) {
      // create, bind, and populate the vertices buffer
      this.verticesBuffer = new WebGLBuffer(this.vertices);

      // create, bind, and populate the indices buffer
      this.indicesBuffer = new WebGLBuffer(this.indices);

      this.startIndices.push(this.indices.length);

      this.lineStringReplay.finish(context);

      //Clean up, if there is nothing to draw
      if (this.styleIndices_.length === 0 && this.styles_.length > 0) {
        this.styles_ = [];
      }

      this.vertices = null;
      this.indices = null;
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      var verticesBuffer = this.verticesBuffer;
      var indicesBuffer = this.indicesBuffer;
      var lineDeleter = this.lineStringReplay.getDeleteResourcesFunction(context);
      return function() {
        context.deleteBuffer(verticesBuffer);
        context.deleteBuffer(indicesBuffer);
        lineDeleter();
      };
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.setUpProgram = function setUpProgram (gl, context, size$$1, pixelRatio) {
      // get the program
      var program = context.getProgram(fragment$3, vertex$3);

      // get the locations
      var locations;
      if (!this.defaultLocations_) {
        locations = new Locations$3(gl, program);
        this.defaultLocations_ = locations;
      } else {
        locations = this.defaultLocations_;
      }

      context.useProgram(program);

      // enable the vertex attrib arrays
      gl.enableVertexAttribArray(locations.a_position);
      gl.vertexAttribPointer(locations.a_position, 2, FLOAT,
        false, 8, 0);

      return locations;
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.shutDownProgram = function shutDownProgram (gl, locations) {
      gl.disableVertexAttribArray(locations.a_position);
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.drawReplay = function drawReplay (gl, context, skippedFeaturesHash, hitDetection) {
      //Save GL parameters.
      var tmpDepthFunc = /** @type {number} */ (gl.getParameter(gl.DEPTH_FUNC));
      var tmpDepthMask = /** @type {boolean} */ (gl.getParameter(gl.DEPTH_WRITEMASK));

      if (!hitDetection) {
        gl.enable(gl.DEPTH_TEST);
        gl.depthMask(true);
        gl.depthFunc(gl.NOTEQUAL);
      }

      if (!isEmpty$1(skippedFeaturesHash)) {
        this.drawReplaySkipping_(gl, context, skippedFeaturesHash);
      } else {
        //Draw by style groups to minimize drawElements() calls.
        var i, start, end, nextStyle;
        end = this.startIndices[this.startIndices.length - 1];
        for (i = this.styleIndices_.length - 1; i >= 0; --i) {
          start = this.styleIndices_[i];
          nextStyle = this.styles_[i];
          this.setFillStyle_(gl, nextStyle);
          this.drawElements(gl, context, start, end);
          end = start;
        }
      }
      if (!hitDetection) {
        gl.disable(gl.DEPTH_TEST);
        gl.clear(gl.DEPTH_BUFFER_BIT);
        //Restore GL parameters.
        gl.depthMask(tmpDepthMask);
        gl.depthFunc(tmpDepthFunc);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.drawHitDetectionReplayOneByOne = function drawHitDetectionReplayOneByOne (gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex;
      featureIndex = this.startIndices.length - 2;
      end = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setFillStyle_(gl, nextStyle);
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          start = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)] === undefined &&
              feature.getGeometry() &&
              (opt_hitExtent === undefined || intersects(
                /** @type {Array<number>} */ (opt_hitExtent),
                feature.getGeometry().getExtent()))) {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            this.drawElements(gl, context, start, end);

            var result = featureCallback(feature);

            if (result) {
              return result;
            }

          }
          featureIndex--;
          end = start;
        }
      }
      return undefined;
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object} skippedFeaturesHash Ids of features to skip.
     */
    WebGLPolygonReplay.prototype.drawReplaySkipping_ = function drawReplaySkipping_ (gl, context, skippedFeaturesHash) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex, featureStart;
      featureIndex = this.startIndices.length - 2;
      end = start = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setFillStyle_(gl, nextStyle);
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          featureStart = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)]) {
            if (start !== end) {
              this.drawElements(gl, context, start, end);
              gl.clear(gl.DEPTH_BUFFER_BIT);
            }
            end = featureStart;
          }
          featureIndex--;
          start = featureStart;
        }
        if (start !== end) {
          this.drawElements(gl, context, start, end);
          gl.clear(gl.DEPTH_BUFFER_BIT);
        }
        start = end = groupStart;
      }
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {Array<number>} color Color.
     */
    WebGLPolygonReplay.prototype.setFillStyle_ = function setFillStyle_ (gl, color) {
      gl.uniform4fv(this.defaultLocations_.u_color, color);
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      var fillStyleColor = fillStyle ? fillStyle.getColor() : [0, 0, 0, 0];
      if (!(fillStyleColor instanceof CanvasGradient) &&
          !(fillStyleColor instanceof CanvasPattern)) {
        fillStyleColor = asArray(fillStyleColor).map(function(c, i) {
          return i != 3 ? c / 255 : c;
        }) || DEFAULT_FILLSTYLE;
      } else {
        fillStyleColor = DEFAULT_FILLSTYLE;
      }
      if (!this.state_.fillColor || !equals(fillStyleColor, this.state_.fillColor)) {
        this.state_.fillColor = fillStyleColor;
        this.state_.changed = true;
        this.styles_.push(fillStyleColor);
      }
      //Provide a null stroke style, if no strokeStyle is provided. Required for the draw interaction to work.
      if (strokeStyle) {
        this.lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      } else {
        var nullStrokeStyle = new Stroke$1({
          color: [0, 0, 0, 0],
          width: 0
        });
        this.lineStringReplay.setFillStrokeStyle(null, nullStrokeStyle);
      }
    };

    return WebGLPolygonReplay;
  }(WebGLReplay));

  /**
   * @module ol/style/Atlas
   */


  /**
   * @typedef {Object} AtlasBlock
   * @property {number} x
   * @property {number} y
   * @property {number} width
   * @property {number} height
   */

  /**
   * Provides information for an image inside an atlas.
   * `offsetX` and `offsetY` are the position of the image inside the atlas image `image`.
   * @typedef {Object} AtlasInfo
   * @property {number} offsetX
   * @property {number} offsetY
   * @property {HTMLCanvasElement} image
   */


  /**
   * @classesc
   * This class facilitates the creation of image atlases.
   *
   * Images added to an atlas will be rendered onto a single
   * atlas canvas. The distribution of images on the canvas is
   * managed with the bin packing algorithm described in:
   * http://www.blackpawn.com/texts/lightmaps/
   *
   * @param {number} size The size in pixels of the sprite image.
   * @param {number} space The space in pixels between images.
   *    Because texture coordinates are float values, the edges of
   *    images might not be completely correct (in a way that the
   *    edges overlap when being rendered). To avoid this we add a
   *    padding around each image.
   */
  var Atlas = function Atlas(size$$1, space) {

    /**
     * @private
     * @type {number}
     */
    this.space_ = space;

    /**
     * @private
     * @type {Array<AtlasBlock>}
     */
    this.emptyBlocks_ = [{x: 0, y: 0, width: size$$1, height: size$$1}];

    /**
     * @private
     * @type {Object<string, AtlasInfo>}
     */
    this.entries_ = {};

    /**
     * @private
     * @type {CanvasRenderingContext2D}
     */
    this.context_ = createCanvasContext2D(size$$1, size$$1);

    /**
     * @private
     * @type {HTMLCanvasElement}
     */
    this.canvas_ = this.context_.canvas;
  };

  /**
   * @param {string} id The identifier of the entry to check.
   * @return {?AtlasInfo} The atlas info.
   */
  Atlas.prototype.get = function get (id) {
    return this.entries_[id] || null;
  };

  /**
   * @param {string} id The identifier of the entry to add.
   * @param {number} width The width.
   * @param {number} height The height.
   * @param {function(CanvasRenderingContext2D, number, number)} renderCallback
   *  Called to render the new image onto an atlas image.
   * @param {Object=} opt_this Value to use as `this` when executing
   *  `renderCallback`.
   * @return {?AtlasInfo} The position and atlas image for the entry.
   */
  Atlas.prototype.add = function add (id, width, height, renderCallback, opt_this) {
    for (var i = 0, ii = this.emptyBlocks_.length; i < ii; ++i) {
      var block = this.emptyBlocks_[i];
      if (block.width >= width + this.space_ &&
          block.height >= height + this.space_) {
        // we found a block that is big enough for our entry
        var entry = {
          offsetX: block.x + this.space_,
          offsetY: block.y + this.space_,
          image: this.canvas_
        };
        this.entries_[id] = entry;

        // render the image on the atlas image
        renderCallback.call(opt_this, this.context_,
          block.x + this.space_, block.y + this.space_);

        // split the block after the insertion, either horizontally or vertically
        this.split_(i, block, width + this.space_, height + this.space_);

        return entry;
      }
    }

    // there is no space for the new entry in this atlas
    return null;
  };

  /**
   * @private
   * @param {number} index The index of the block.
   * @param {AtlasBlock} block The block to split.
   * @param {number} width The width of the entry to insert.
   * @param {number} height The height of the entry to insert.
   */
  Atlas.prototype.split_ = function split_ (index, block, width, height) {
    var deltaWidth = block.width - width;
    var deltaHeight = block.height - height;

    /** @type {AtlasBlock} */
    var newBlock1;
    /** @type {AtlasBlock} */
    var newBlock2;

    if (deltaWidth > deltaHeight) {
      // split vertically
      // block right of the inserted entry
      newBlock1 = {
        x: block.x + width,
        y: block.y,
        width: block.width - width,
        height: block.height
      };

      // block below the inserted entry
      newBlock2 = {
        x: block.x,
        y: block.y + height,
        width: width,
        height: block.height - height
      };
      this.updateBlocks_(index, newBlock1, newBlock2);
    } else {
      // split horizontally
      // block right of the inserted entry
      newBlock1 = {
        x: block.x + width,
        y: block.y,
        width: block.width - width,
        height: height
      };

      // block below the inserted entry
      newBlock2 = {
        x: block.x,
        y: block.y + height,
        width: block.width,
        height: block.height - height
      };
      this.updateBlocks_(index, newBlock1, newBlock2);
    }
  };

  /**
   * Remove the old block and insert new blocks at the same array position.
   * The new blocks are inserted at the same position, so that splitted
   * blocks (that are potentially smaller) are filled first.
   * @private
   * @param {number} index The index of the block to remove.
   * @param {AtlasBlock} newBlock1 The 1st block to add.
   * @param {AtlasBlock} newBlock2 The 2nd block to add.
   */
  Atlas.prototype.updateBlocks_ = function updateBlocks_ (index, newBlock1, newBlock2) {
    var args = /** @type {Array<*>} */ ([index, 1]);
    if (newBlock1.width > 0 && newBlock1.height > 0) {
      args.push(newBlock1);
    }
    if (newBlock2.width > 0 && newBlock2.height > 0) {
      args.push(newBlock2);
    }
    this.emptyBlocks_.splice.apply(this.emptyBlocks_, args);
  };

  /**
   * @module ol/style/AtlasManager
   */


  /**
   * @typedef {Object} Options
   * @property {number} [initialSize=256] The size in pixels of the first atlas image.
   * @property {number} [maxSize] The maximum size in pixels of atlas images. Default is
   * `webgl/MAX_TEXTURE_SIZE` or 2048 if WebGL is not supported.
   * @property {number} [space=1] The space in pixels between images.
   */


  /**
   * Provides information for an image inside an atlas manager.
   * `offsetX` and `offsetY` is the position of the image inside
   * the atlas image `image` and the position of the hit-detection image
   * inside the hit-detection atlas image `hitImage`.
   * @typedef {Object} AtlasManagerInfo
   * @property {number} offsetX
   * @property {number} offsetY
   * @property {HTMLCanvasElement} image
   * @property {HTMLCanvasElement} hitImage
   */


  /**
   * The size in pixels of the first atlas image.
   * @type {number}
   */
  var INITIAL_ATLAS_SIZE = 256;


  /**
   * @classdesc
   * Manages the creation of image atlases.
   *
   * Images added to this manager will be inserted into an atlas, which
   * will be used for rendering.
   * The `size` given in the constructor is the size for the first
   * atlas. After that, when new atlases are created, they will have
   * twice the size as the latest atlas (until `maxSize` is reached).
   *
   * If an application uses many images or very large images, it is recommended
   * to set a higher `size` value to avoid the creation of too many atlases.
   * @api
   */
  var AtlasManager = function AtlasManager(opt_options) {

    var options = opt_options || {};

    /**
     * The size in pixels of the latest atlas image.
     * @private
     * @type {number}
     */
    this.currentSize_ = options.initialSize !== undefined ?
      options.initialSize : INITIAL_ATLAS_SIZE;

    /**
     * The maximum size in pixels of atlas images.
     * @private
     * @type {number}
     */
    this.maxSize_ = options.maxSize !== undefined ?
      options.maxSize : MAX_TEXTURE_SIZE !== undefined ?
          MAX_TEXTURE_SIZE : 2048;

    /**
     * The size in pixels between images.
     * @private
     * @type {number}
     */
    this.space_ = options.space !== undefined ? options.space : 1;

    /**
     * @private
     * @type {Array<import("./Atlas.js").default>}
     */
    this.atlases_ = [new Atlas(this.currentSize_, this.space_)];

    /**
     * The size in pixels of the latest atlas image for hit-detection images.
     * @private
     * @type {number}
     */
    this.currentHitSize_ = this.currentSize_;

    /**
     * @private
     * @type {Array<import("./Atlas.js").default>}
     */
    this.hitAtlases_ = [new Atlas(this.currentHitSize_, this.space_)];
  };

  /**
   * @param {string} id The identifier of the entry to check.
   * @return {?AtlasManagerInfo} The position and atlas image for the
   *  entry, or `null` if the entry is not part of the atlas manager.
   */
  AtlasManager.prototype.getInfo = function getInfo (id) {
    /** @type {?import("./Atlas.js").AtlasInfo} */
    var info = this.getInfo_(this.atlases_, id);

    if (!info) {
      return null;
    }
    var hitInfo = /** @type {import("./Atlas.js").AtlasInfo} */ (this.getInfo_(this.hitAtlases_, id));

    return this.mergeInfos_(info, hitInfo);
  };

  /**
   * @private
   * @param {Array<import("./Atlas.js").default>} atlases The atlases to search.
   * @param {string} id The identifier of the entry to check.
   * @return {?import("./Atlas.js").AtlasInfo} The position and atlas image for the entry,
   *  or `null` if the entry is not part of the atlases.
   */
  AtlasManager.prototype.getInfo_ = function getInfo_ (atlases, id) {
    for (var i = 0, ii = atlases.length; i < ii; ++i) {
      var atlas = atlases[i];
      var info = atlas.get(id);
      if (info) {
        return info;
      }
    }
    return null;
  };

  /**
   * @private
   * @param {import("./Atlas.js").AtlasInfo} info The info for the real image.
   * @param {import("./Atlas.js").AtlasInfo} hitInfo The info for the hit-detection
   *  image.
   * @return {?AtlasManagerInfo} The position and atlas image for the
   *  entry, or `null` if the entry is not part of the atlases.
   */
  AtlasManager.prototype.mergeInfos_ = function mergeInfos_ (info, hitInfo) {
    return (
      /** @type {AtlasManagerInfo} */ ({
        offsetX: info.offsetX,
        offsetY: info.offsetY,
        image: info.image,
        hitImage: hitInfo.image
      })
    );
  };

  /**
   * Add an image to the atlas manager.
   *
   * If an entry for the given id already exists, the entry will
   * be overridden (but the space on the atlas graphic will not be freed).
   *
   * If `renderHitCallback` is provided, the image (or the hit-detection version
   * of the image) will be rendered into a separate hit-detection atlas image.
   *
   * @param {string} id The identifier of the entry to add.
   * @param {number} width The width.
   * @param {number} height The height.
   * @param {function(CanvasRenderingContext2D, number, number)} renderCallback
   *  Called to render the new image onto an atlas image.
   * @param {function(CanvasRenderingContext2D, number, number)=} opt_renderHitCallback Called to render a hit-detection image onto a hit
   *  detection atlas image.
   * @param {Object=} opt_this Value to use as `this` when executing
   *  `renderCallback` and `renderHitCallback`.
   * @return {?AtlasManagerInfo}The position and atlas image for the
   *  entry, or `null` if the image is too big.
   */
  AtlasManager.prototype.add = function add (id, width, height, renderCallback, opt_renderHitCallback, opt_this) {
    if (width + this.space_ > this.maxSize_ ||
        height + this.space_ > this.maxSize_) {
      return null;
    }

    /** @type {?import("./Atlas.js").AtlasInfo} */
    var info = this.add_(false, id, width, height, renderCallback, opt_this);
    if (!info) {
      return null;
    }

    // even if no hit-detection entry is requested, we insert a fake entry into
    // the hit-detection atlas, to make sure that the offset is the same for
    // the original image and the hit-detection image.
    var renderHitCallback = opt_renderHitCallback !== undefined ?
      opt_renderHitCallback : VOID;

    var hitInfo = /** @type {import("./Atlas.js").AtlasInfo} */ (this.add_(true,
      id, width, height, renderHitCallback, opt_this));

    return this.mergeInfos_(info, hitInfo);
  };

  /**
   * @private
   * @param {boolean} isHitAtlas If the hit-detection atlases are used.
   * @param {string} id The identifier of the entry to add.
   * @param {number} width The width.
   * @param {number} height The height.
   * @param {function(CanvasRenderingContext2D, number, number)} renderCallback
   *  Called to render the new image onto an atlas image.
   * @param {Object=} opt_this Value to use as `this` when executing
   *  `renderCallback` and `renderHitCallback`.
   * @return {?import("./Atlas.js").AtlasInfo}The position and atlas image for the entry,
   *  or `null` if the image is too big.
   */
  AtlasManager.prototype.add_ = function add_ (isHitAtlas, id, width, height, renderCallback, opt_this) {
    var atlases = (isHitAtlas) ? this.hitAtlases_ : this.atlases_;
    var atlas, info, i, ii;
    for (i = 0, ii = atlases.length; i < ii; ++i) {
      atlas = atlases[i];
      info = atlas.add(id, width, height, renderCallback, opt_this);
      if (info) {
        return info;
      } else if (!info && i === ii - 1) {
        // the entry could not be added to one of the existing atlases,
        // create a new atlas that is twice as big and try to add to this one.
        var size$$1 = (void 0);
        if (isHitAtlas) {
          size$$1 = Math.min(this.currentHitSize_ * 2, this.maxSize_);
          this.currentHitSize_ = size$$1;
        } else {
          size$$1 = Math.min(this.currentSize_ * 2, this.maxSize_);
          this.currentSize_ = size$$1;
        }
        atlas = new Atlas(size$$1, this.space_);
        atlases.push(atlas);
        // run the loop another time
        ++ii;
      }
    }
    return null;
  };

  /**
   * @module ol/render/webgl/TextReplay
   */

  /**
   * @typedef {Object} GlyphAtlas
   * @property {import("../../style/AtlasManager.js").default} atlas
   * @property {Object<string, number>} width
   * @property {number} height
   */


  var WebGLTextReplay = /*@__PURE__*/(function (WebGLTextureReplay$$1) {
    function WebGLTextReplay(tolerance, maxExtent) {
      WebGLTextureReplay$$1.call(this, tolerance, maxExtent);

      /**
       * @private
       * @type {Array<HTMLCanvasElement>}
       */
      this.images_ = [];

      /**
       * @private
       * @type {Array<WebGLTexture>}
       */
      this.textures_ = [];

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.measureCanvas_ = createCanvasContext2D(0, 0).canvas;

      /**
       * @private
       * @type {{strokeColor: (import("../../colorlike.js").ColorLike|null),
       *         lineCap: (string|undefined),
       *         lineDash: Array<number>,
       *         lineDashOffset: (number|undefined),
       *         lineJoin: (string|undefined),
       *         lineWidth: number,
       *         miterLimit: (number|undefined),
       *         fillColor: (import("../../colorlike.js").ColorLike|null),
       *         font: (string|undefined),
       *         scale: (number|undefined)}}
       */
      this.state_ = {
        strokeColor: null,
        lineCap: undefined,
        lineDash: null,
        lineDashOffset: undefined,
        lineJoin: undefined,
        lineWidth: 0,
        miterLimit: undefined,
        fillColor: null,
        font: undefined,
        scale: undefined
      };

      /**
       * @private
       * @type {string}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number|undefined}
       */
      this.textAlign_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.textBaseline_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.offsetX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.offsetY_ = undefined;

      /**
       * @private
       * @type {Object<string, GlyphAtlas>}
       */
      this.atlases_ = {};

      /**
       * @private
       * @type {GlyphAtlas|undefined}
       */
      this.currAtlas_ = undefined;

      this.scale = 1;

      this.opacity = 1;

    }

    if ( WebGLTextureReplay$$1 ) WebGLTextReplay.__proto__ = WebGLTextureReplay$$1;
    WebGLTextReplay.prototype = Object.create( WebGLTextureReplay$$1 && WebGLTextureReplay$$1.prototype );
    WebGLTextReplay.prototype.constructor = WebGLTextReplay;

    /**
     * @inheritDoc
     */
    WebGLTextReplay.prototype.drawText = function drawText (geometry, feature) {
      if (this.text_) {
        var flatCoordinates = null;
        var offset = 0;
        var end = 2;
        var stride = 2;
        switch (geometry.getType()) {
          case GeometryType.POINT:
          case GeometryType.MULTI_POINT:
            flatCoordinates = geometry.getFlatCoordinates();
            end = flatCoordinates.length;
            stride = geometry.getStride();
            break;
          case GeometryType.CIRCLE:
            flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ (geometry).getCenter();
            break;
          case GeometryType.LINE_STRING:
            flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ (geometry).getFlatMidpoint();
            break;
          case GeometryType.MULTI_LINE_STRING:
            flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getFlatMidpoints();
            end = flatCoordinates.length;
            break;
          case GeometryType.POLYGON:
            flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ (geometry).getFlatInteriorPoint();
            break;
          case GeometryType.MULTI_POLYGON:
            flatCoordinates = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getFlatInteriorPoints();
            end = flatCoordinates.length;
            break;
          default:
        }
        this.startIndices.push(this.indices.length);
        this.startIndicesFeature.push(feature);

        var glyphAtlas = this.currAtlas_;
        var lines = this.text_.split('\n');
        var textSize = this.getTextSize_(lines);
        var i, ii, j, jj, currX, currY, charArr, charInfo;
        var anchorX = Math.round(textSize[0] * this.textAlign_ - this.offsetX_);
        var anchorY = Math.round(textSize[1] * this.textBaseline_ - this.offsetY_);
        var lineWidth = (this.state_.lineWidth / 2) * this.state_.scale;

        for (i = 0, ii = lines.length; i < ii; ++i) {
          currX = 0;
          currY = glyphAtlas.height * i;
          charArr = lines[i].split('');

          for (j = 0, jj = charArr.length; j < jj; ++j) {
            charInfo = glyphAtlas.atlas.getInfo(charArr[j]);

            if (charInfo) {
              var image = charInfo.image;

              this.anchorX = anchorX - currX;
              this.anchorY = anchorY - currY;
              this.originX = j === 0 ? charInfo.offsetX - lineWidth : charInfo.offsetX;
              this.originY = charInfo.offsetY;
              this.height = glyphAtlas.height;
              this.width = j === 0 || j === charArr.length - 1 ?
                glyphAtlas.width[charArr[j]] + lineWidth : glyphAtlas.width[charArr[j]];
              this.imageHeight = image.height;
              this.imageWidth = image.width;

              if (this.images_.length === 0) {
                this.images_.push(image);
              } else {
                var currentImage = this.images_[this.images_.length - 1];
                if (getUid(currentImage) != getUid(image)) {
                  this.groupIndices.push(this.indices.length);
                  this.images_.push(image);
                }
              }

              this.drawText_(flatCoordinates, offset, end, stride);
            }
            currX += this.width;
          }
        }
      }
    };

    /**
     * @private
     * @param {Array<string>} lines Label to draw split to lines.
     * @return {Array<number>} Size of the label in pixels.
     */
    WebGLTextReplay.prototype.getTextSize_ = function getTextSize_ (lines) {
      var self = this;
      var glyphAtlas = this.currAtlas_;
      var textHeight = lines.length * glyphAtlas.height;
      //Split every line to an array of chars, sum up their width, and select the longest.
      var textWidth = lines.map(function(str) {
        var sum = 0;
        for (var i = 0, ii = str.length; i < ii; ++i) {
          var curr = str[i];
          if (!glyphAtlas.width[curr]) {
            self.addCharToAtlas_(curr);
          }
          sum += glyphAtlas.width[curr] ? glyphAtlas.width[curr] : 0;
        }
        return sum;
      }).reduce(function(max, curr) {
        return Math.max(max, curr);
      });

      return [textWidth, textHeight];
    };

    /**
     * @private
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     */
    WebGLTextReplay.prototype.drawText_ = function drawText_ (flatCoordinates, offset, end, stride) {
      for (var i = offset, ii = end; i < ii; i += stride) {
        this.drawCoordinates(flatCoordinates, offset, end, stride);
      }
    };

    /**
     * @private
     * @param {string} char Character.
     */
    WebGLTextReplay.prototype.addCharToAtlas_ = function addCharToAtlas_ (char) {
      if (char.length === 1) {
        var glyphAtlas = this.currAtlas_;
        var state = this.state_;
        var mCtx = this.measureCanvas_.getContext('2d');
        mCtx.font = state.font;
        var width = Math.ceil(mCtx.measureText(char).width * state.scale);

        var info = glyphAtlas.atlas.add(char, width, glyphAtlas.height,
          function(ctx, x, y) {
            //Parameterize the canvas
            ctx.font = /** @type {string} */ (state.font);
            ctx.fillStyle = state.fillColor;
            ctx.strokeStyle = state.strokeColor;
            ctx.lineWidth = state.lineWidth;
            ctx.lineCap = /** @type {CanvasLineCap} */ (state.lineCap);
            ctx.lineJoin = /** @type {CanvasLineJoin} */ (state.lineJoin);
            ctx.miterLimit = /** @type {number} */ (state.miterLimit);
            ctx.textAlign = 'left';
            ctx.textBaseline = 'top';
            if (CANVAS_LINE_DASH && state.lineDash) {
              //FIXME: use pixelRatio
              ctx.setLineDash(state.lineDash);
              ctx.lineDashOffset = /** @type {number} */ (state.lineDashOffset);
            }
            if (state.scale !== 1) {
              //FIXME: use pixelRatio
              ctx.setTransform(/** @type {number} */ (state.scale), 0, 0,
                /** @type {number} */ (state.scale), 0, 0);
            }

            //Draw the character on the canvas
            if (state.strokeColor) {
              ctx.strokeText(char, x, y);
            }
            if (state.fillColor) {
              ctx.fillText(char, x, y);
            }
          });

        if (info) {
          glyphAtlas.width[char] = width;
        }
      }
    };

    /**
     * @inheritDoc
     */
    WebGLTextReplay.prototype.finish = function finish (context) {
      var gl = context.getGL();

      this.groupIndices.push(this.indices.length);
      this.hitDetectionGroupIndices = this.groupIndices;

      // create, bind, and populate the vertices buffer
      this.verticesBuffer = new WebGLBuffer(this.vertices);

      // create, bind, and populate the indices buffer
      this.indicesBuffer = new WebGLBuffer(this.indices);

      // create textures
      /** @type {Object<string, WebGLTexture>} */
      var texturePerImage = {};

      this.createTextures(this.textures_, this.images_, texturePerImage, gl);

      this.state_ = {
        strokeColor: null,
        lineCap: undefined,
        lineDash: null,
        lineDashOffset: undefined,
        lineJoin: undefined,
        lineWidth: 0,
        miterLimit: undefined,
        fillColor: null,
        font: undefined,
        scale: undefined
      };
      this.text_ = '';
      this.textAlign_ = undefined;
      this.textBaseline_ = undefined;
      this.offsetX_ = undefined;
      this.offsetY_ = undefined;
      this.images_ = null;
      this.atlases_ = {};
      this.currAtlas_ = undefined;
      WebGLTextureReplay$$1.prototype.finish.call(this, context);
    };

    /**
     * @inheritDoc
     */
    WebGLTextReplay.prototype.setTextStyle = function setTextStyle (textStyle) {
      var state = this.state_;
      var textFillStyle = textStyle.getFill();
      var textStrokeStyle = textStyle.getStroke();
      if (!textStyle || !textStyle.getText() || (!textFillStyle && !textStrokeStyle)) {
        this.text_ = '';
      } else {
        if (!textFillStyle) {
          state.fillColor = null;
        } else {
          var textFillStyleColor = textFillStyle.getColor();
          state.fillColor = asColorLike(textFillStyleColor ?
            textFillStyleColor : DEFAULT_FILLSTYLE);
        }
        if (!textStrokeStyle) {
          state.strokeColor = null;
          state.lineWidth = 0;
        } else {
          var textStrokeStyleColor = textStrokeStyle.getColor();
          state.strokeColor = asColorLike(textStrokeStyleColor ?
            textStrokeStyleColor : DEFAULT_STROKESTYLE);
          state.lineWidth = textStrokeStyle.getWidth() || DEFAULT_LINEWIDTH;
          state.lineCap = textStrokeStyle.getLineCap() || DEFAULT_LINECAP;
          state.lineDashOffset = textStrokeStyle.getLineDashOffset() || DEFAULT_LINEDASHOFFSET;
          state.lineJoin = textStrokeStyle.getLineJoin() || DEFAULT_LINEJOIN;
          state.miterLimit = textStrokeStyle.getMiterLimit() || DEFAULT_MITERLIMIT;
          var lineDash = textStrokeStyle.getLineDash();
          state.lineDash = lineDash ? lineDash.slice() : DEFAULT_LINEDASH;
        }
        state.font = textStyle.getFont() || DEFAULT_FONT;
        state.scale = textStyle.getScale() || 1;
        this.text_ = /** @type {string} */ (textStyle.getText());
        var textAlign = TEXT_ALIGN[textStyle.getTextAlign()];
        var textBaseline = TEXT_ALIGN[textStyle.getTextBaseline()];
        this.textAlign_ = textAlign === undefined ?
          DEFAULT_TEXTALIGN : textAlign;
        this.textBaseline_ = textBaseline === undefined ?
          DEFAULT_TEXTBASELINE : textBaseline;
        this.offsetX_ = textStyle.getOffsetX() || 0;
        this.offsetY_ = textStyle.getOffsetY() || 0;
        this.rotateWithView = !!textStyle.getRotateWithView();
        this.rotation = textStyle.getRotation() || 0;

        this.currAtlas_ = this.getAtlas_(state);
      }
    };

    /**
     * @private
     * @param {Object} state Font attributes.
     * @return {GlyphAtlas} Glyph atlas.
     */
    WebGLTextReplay.prototype.getAtlas_ = function getAtlas_ (state) {
      var params = [];
      for (var i in state) {
        if (state[i] || state[i] === 0) {
          if (Array.isArray(state[i])) {
            params = params.concat(state[i]);
          } else {
            params.push(state[i]);
          }
        }
      }
      var hash = this.calculateHash_(params);
      if (!this.atlases_[hash]) {
        var mCtx = this.measureCanvas_.getContext('2d');
        mCtx.font = state.font;
        var height = Math.ceil((mCtx.measureText('M').width * 1.5 +
            state.lineWidth / 2) * state.scale);

        this.atlases_[hash] = {
          atlas: new AtlasManager({
            space: state.lineWidth + 1
          }),
          width: {},
          height: height
        };
      }
      return this.atlases_[hash];
    };

    /**
     * @private
     * @param {Array<string|number>} params Array of parameters.
     * @return {string} Hash string.
     */
    WebGLTextReplay.prototype.calculateHash_ = function calculateHash_ (params) {
      //TODO: Create a more performant, reliable, general hash function.
      var hash = '';
      for (var i = 0, ii = params.length; i < ii; ++i) {
        hash += params[i];
      }
      return hash;
    };

    /**
     * @inheritDoc
     */
    WebGLTextReplay.prototype.getTextures = function getTextures (opt_all) {
      return this.textures_;
    };

    /**
     * @inheritDoc
     */
    WebGLTextReplay.prototype.getHitDetectionTextures = function getHitDetectionTextures () {
      return this.textures_;
    };

    return WebGLTextReplay;
  }(WebGLTextureReplay));

  /**
   * @module ol/render/webgl/ReplayGroup
   */

  /**
   * @type {Array<number>}
   */
  var HIT_DETECTION_SIZE = [1, 1];

  /**
   * @type {Object<import("../ReplayType.js").default, typeof import("./Replay.js").default>}
   */
  var BATCH_CONSTRUCTORS$1 = {
    'Circle': WebGLCircleReplay,
    'Image': WebGLImageReplay,
    'LineString': WebGLLineStringReplay,
    'Polygon': WebGLPolygonReplay,
    'Text': WebGLTextReplay
  };


  var WebGLReplayGroup = /*@__PURE__*/(function (ReplayGroup$$1) {
    function WebGLReplayGroup(tolerance, maxExtent, opt_renderBuffer) {
      ReplayGroup$$1.call(this);

      /**
       * @type {import("../../extent.js").Extent}
       * @private
       */
      this.maxExtent_ = maxExtent;

      /**
       * @type {number}
       * @private
       */
      this.tolerance_ = tolerance;

      /**
       * @type {number|undefined}
       * @private
       */
      this.renderBuffer_ = opt_renderBuffer;

      /**
       * @private
       * @type {!Object<string,
       *        Object<import("../ReplayType.js").default, import("./Replay.js").default>>}
       */
      this.replaysByZIndex_ = {};

    }

    if ( ReplayGroup$$1 ) WebGLReplayGroup.__proto__ = ReplayGroup$$1;
    WebGLReplayGroup.prototype = Object.create( ReplayGroup$$1 && ReplayGroup$$1.prototype );
    WebGLReplayGroup.prototype.constructor = WebGLReplayGroup;

    /**
     * @inheritDoc
     */
    WebGLReplayGroup.prototype.addDeclutter = function addDeclutter (group) {
      return [];
    };

    /**
     * @param {import("../../webgl/Context.js").default} context WebGL context.
     * @return {function()} Delete resources function.
     */
    WebGLReplayGroup.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      var functions = [];
      var zKey;
      for (zKey in this.replaysByZIndex_) {
        var replays = this.replaysByZIndex_[zKey];
        for (var replayKey in replays) {
          functions.push(
            replays[replayKey].getDeleteResourcesFunction(context));
        }
      }
      return function() {
        var arguments$1 = arguments;

        var length = functions.length;
        var result;
        for (var i = 0; i < length; i++) {
          result = functions[i].apply(this, arguments$1);
        }
        return result;
      };
    };

    /**
     * @param {import("../../webgl/Context.js").default} context Context.
     */
    WebGLReplayGroup.prototype.finish = function finish (context) {
      var zKey;
      for (zKey in this.replaysByZIndex_) {
        var replays = this.replaysByZIndex_[zKey];
        for (var replayKey in replays) {
          replays[replayKey].finish(context);
        }
      }
    };

    /**
     * @inheritDoc
     */
    WebGLReplayGroup.prototype.getReplay = function getReplay (zIndex, replayType) {
      var zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
      var replays = this.replaysByZIndex_[zIndexKey];
      if (replays === undefined) {
        replays = {};
        this.replaysByZIndex_[zIndexKey] = replays;
      }
      var replay = replays[replayType];
      if (replay === undefined) {
        var Constructor = BATCH_CONSTRUCTORS$1[replayType];
        replay = new Constructor(this.tolerance_, this.maxExtent_);
        replays[replayType] = replay;
      }
      return replay;
    };

    /**
     * @inheritDoc
     */
    WebGLReplayGroup.prototype.isEmpty = function isEmpty$1$$1 () {
      return isEmpty$1(this.replaysByZIndex_);
    };

    /**
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} opacity Global opacity.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     */
    WebGLReplayGroup.prototype.replay = function replay (
      context,
      center,
      resolution,
      rotation,
      size$$1,
      pixelRatio,
      opacity,
      skippedFeaturesHash
    ) {
      /** @type {Array<number>} */
      var zs = Object.keys(this.replaysByZIndex_).map(Number);
      zs.sort(numberSafeCompareFunction);

      var i, ii, j, jj, replays, replay;
      for (i = 0, ii = zs.length; i < ii; ++i) {
        replays = this.replaysByZIndex_[zs[i].toString()];
        for (j = 0, jj = ORDER.length; j < jj; ++j) {
          replay = replays[ORDER[j]];
          if (replay !== undefined) {
            replay.replay(context,
              center, resolution, rotation, size$$1, pixelRatio,
              opacity, skippedFeaturesHash,
              undefined, false);
          }
        }
      }
    };

    /**
     * @private
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} opacity Global opacity.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @param {boolean} oneByOne Draw features one-by-one for the hit-detecion.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Hit extent: Only features intersecting
     *  this extent are checked.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplayGroup.prototype.replayHitDetection_ = function replayHitDetection_ (
      context,
      center,
      resolution,
      rotation,
      size$$1,
      pixelRatio,
      opacity,
      skippedFeaturesHash,
      featureCallback,
      oneByOne,
      opt_hitExtent
    ) {
      /** @type {Array<number>} */
      var zs = Object.keys(this.replaysByZIndex_).map(Number);
      zs.sort(function(a, b) {
        return b - a;
      });

      var i, ii, j, replays, replay, result;
      for (i = 0, ii = zs.length; i < ii; ++i) {
        replays = this.replaysByZIndex_[zs[i].toString()];
        for (j = ORDER.length - 1; j >= 0; --j) {
          replay = replays[ORDER[j]];
          if (replay !== undefined) {
            result = replay.replay(context,
              center, resolution, rotation, size$$1, pixelRatio, opacity,
              skippedFeaturesHash, featureCallback, oneByOne, opt_hitExtent);
            if (result) {
              return result;
            }
          }
        }
      }
      return undefined;
    };

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} opacity Global opacity.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} callback Feature callback.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplayGroup.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (
      coordinate,
      context,
      center,
      resolution,
      rotation,
      size$$1,
      pixelRatio,
      opacity,
      skippedFeaturesHash,
      callback
    ) {
      var gl = context.getGL();
      gl.bindFramebuffer(
        gl.FRAMEBUFFER, context.getHitDetectionFramebuffer());


      /**
       * @type {import("../../extent.js").Extent}
       */
      var hitExtent;
      if (this.renderBuffer_ !== undefined) {
        // build an extent around the coordinate, so that only features that
        // intersect this extent are checked
        hitExtent = buffer(createOrUpdateFromCoordinate(coordinate), resolution * this.renderBuffer_);
      }

      return this.replayHitDetection_(context,
        coordinate, resolution, rotation, HIT_DETECTION_SIZE,
        pixelRatio, opacity, skippedFeaturesHash,
        /**
         * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
         * @return {?} Callback result.
         */
        function(feature) {
          var imageData = new Uint8Array(4);
          gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, imageData);

          if (imageData[3] > 0) {
            var result = callback(feature);
            if (result) {
              return result;
            }
          }
        }, true, hitExtent);
    };

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} opacity Global opacity.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @return {boolean} Is there a feature at the given coordinate?
     */
    WebGLReplayGroup.prototype.hasFeatureAtCoordinate = function hasFeatureAtCoordinate (
      coordinate,
      context,
      center,
      resolution,
      rotation,
      size$$1,
      pixelRatio,
      opacity,
      skippedFeaturesHash
    ) {
      var gl = context.getGL();
      gl.bindFramebuffer(
        gl.FRAMEBUFFER, context.getHitDetectionFramebuffer());

      var hasFeature = this.replayHitDetection_(context,
        coordinate, resolution, rotation, HIT_DETECTION_SIZE,
        pixelRatio, opacity, skippedFeaturesHash,
        /**
         * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
         * @return {boolean} Is there a feature?
         */
        function(feature) {
          var imageData = new Uint8Array(4);
          gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, imageData);
          return imageData[3] > 0;
        }, false);

      return hasFeature !== undefined;
    };

    return WebGLReplayGroup;
  }(ReplayGroup));

  /**
   * @module ol/render/webgl/Immediate
   */

  var WebGLImmediateRenderer = /*@__PURE__*/(function (VectorContext$$1) {
    function WebGLImmediateRenderer(context, center, resolution, rotation, size$$1, extent$$1, pixelRatio) {
      VectorContext$$1.call(this);

      /**
       * @private
       */
      this.context_ = context;

      /**
       * @private
       */
      this.center_ = center;

      /**
       * @private
       */
      this.extent_ = extent$$1;

      /**
       * @private
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       */
      this.size_ = size$$1;

      /**
       * @private
       */
      this.rotation_ = rotation;

      /**
       * @private
       */
      this.resolution_ = resolution;

      /**
       * @private
       * @type {import("../../style/Image.js").default}
       */
      this.imageStyle_ = null;

      /**
       * @private
       * @type {import("../../style/Fill.js").default}
       */
      this.fillStyle_ = null;

      /**
       * @private
       * @type {import("../../style/Stroke.js").default}
       */
      this.strokeStyle_ = null;

      /**
       * @private
       * @type {import("../../style/Text.js").default}
       */
      this.textStyle_ = null;

    }

    if ( VectorContext$$1 ) WebGLImmediateRenderer.__proto__ = VectorContext$$1;
    WebGLImmediateRenderer.prototype = Object.create( VectorContext$$1 && VectorContext$$1.prototype );
    WebGLImmediateRenderer.prototype.constructor = WebGLImmediateRenderer;

    /**
     * @param {import("./ReplayGroup.js").default} replayGroup Replay group.
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @private
     */
    WebGLImmediateRenderer.prototype.drawText_ = function drawText_ (replayGroup, geometry) {
      var context = this.context_;
      var replay = /** @type {import("./TextReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.TEXT));
      replay.setTextStyle(this.textStyle_);
      replay.drawText(geometry, null);
      replay.finish(context);
      // default colors
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();
    };

    /**
     * Set the rendering style.  Note that since this is an immediate rendering API,
     * any `zIndex` on the provided style will be ignored.
     *
     * @param {import("../../style/Style.js").default} style The rendering style.
     * @override
     * @api
     */
    WebGLImmediateRenderer.prototype.setStyle = function setStyle (style) {
      this.setFillStrokeStyle(style.getFill(), style.getStroke());
      this.setImageStyle(style.getImage());
      this.setTextStyle(style.getText());
    };

    /**
     * Render a geometry into the canvas.  Call
     * {@link ol/render/webgl/Immediate#setStyle} first to set the rendering style.
     *
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
     * @override
     * @api
     */
    WebGLImmediateRenderer.prototype.drawGeometry = function drawGeometry (geometry) {
      var type = geometry.getType();
      switch (type) {
        case GeometryType.POINT:
          this.drawPoint(/** @type {import("../../geom/Point.js").default} */ (geometry), null);
          break;
        case GeometryType.LINE_STRING:
          this.drawLineString(/** @type {import("../../geom/LineString.js").default} */ (geometry), null);
          break;
        case GeometryType.POLYGON:
          this.drawPolygon(/** @type {import("../../geom/Polygon.js").default} */ (geometry), null);
          break;
        case GeometryType.MULTI_POINT:
          this.drawMultiPoint(/** @type {import("../../geom/MultiPoint.js").default} */ (geometry), null);
          break;
        case GeometryType.MULTI_LINE_STRING:
          this.drawMultiLineString(/** @type {import("../../geom/MultiLineString.js").default} */ (geometry), null);
          break;
        case GeometryType.MULTI_POLYGON:
          this.drawMultiPolygon(/** @type {import("../../geom/MultiPolygon.js").default} */ (geometry), null);
          break;
        case GeometryType.GEOMETRY_COLLECTION:
          this.drawGeometryCollection(/** @type {import("../../geom/GeometryCollection.js").default} */ (geometry), null);
          break;
        case GeometryType.CIRCLE:
          this.drawCircle(/** @type {import("../../geom/Circle.js").default} */ (geometry), null);
          break;
        default:
          // pass
      }
    };

    /**
     * @inheritDoc
     * @api
     */
    WebGLImmediateRenderer.prototype.drawFeature = function drawFeature (feature, style) {
      var geometry = style.getGeometryFunction()(feature);
      if (!geometry || !intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      this.setStyle(style);
      this.drawGeometry(geometry);
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawGeometryCollection = function drawGeometryCollection (geometry, data) {
      var geometries = geometry.getGeometriesArray();
      var i, ii;
      for (i = 0, ii = geometries.length; i < ii; ++i) {
        this.drawGeometry(geometries[i]);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawPoint = function drawPoint (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./ImageReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.IMAGE));
      replay.setImageStyle(this.imageStyle_);
      replay.drawPoint(geometry, data);
      replay.finish(context);
      // default colors
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawMultiPoint = function drawMultiPoint (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./ImageReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.IMAGE));
      replay.setImageStyle(this.imageStyle_);
      replay.drawMultiPoint(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawLineString = function drawLineString (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./LineStringReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.LINE_STRING));
      replay.setFillStrokeStyle(null, this.strokeStyle_);
      replay.drawLineString(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawMultiLineString = function drawMultiLineString (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./LineStringReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.LINE_STRING));
      replay.setFillStrokeStyle(null, this.strokeStyle_);
      replay.drawMultiLineString(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawPolygon = function drawPolygon (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./PolygonReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.POLYGON));
      replay.setFillStrokeStyle(this.fillStyle_, this.strokeStyle_);
      replay.drawPolygon(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawMultiPolygon = function drawMultiPolygon (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./PolygonReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.POLYGON));
      replay.setFillStrokeStyle(this.fillStyle_, this.strokeStyle_);
      replay.drawMultiPolygon(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawCircle = function drawCircle (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./CircleReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.CIRCLE));
      replay.setFillStrokeStyle(this.fillStyle_, this.strokeStyle_);
      replay.drawCircle(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.setImageStyle = function setImageStyle (imageStyle) {
      this.imageStyle_ = imageStyle;
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      this.fillStyle_ = fillStyle;
      this.strokeStyle_ = strokeStyle;
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.setTextStyle = function setTextStyle (textStyle) {
      this.textStyle_ = textStyle;
    };

    return WebGLImmediateRenderer;
  }(VectorContext));

  /**
   * @module ol/renderer/webgl/defaultmapshader
   */

  var fragment$4 = new WebGLFragment('precision mediump float;\nvarying vec2 v_texCoord;\n\n\nuniform float u_opacity;\nuniform sampler2D u_texture;\n\nvoid main(void) {\n  vec4 texColor = texture2D(u_texture, v_texCoord);\n  gl_FragColor.rgb = texColor.rgb;\n  gl_FragColor.a = texColor.a * u_opacity;\n}\n');

  var vertex$4 = new WebGLVertex('varying vec2 v_texCoord;\n\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\n\nuniform mat4 u_texCoordMatrix;\nuniform mat4 u_projectionMatrix;\n\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, 0., 1.);\n  v_texCoord = (u_texCoordMatrix * vec4(a_texCoord, 0., 1.)).st;\n}\n\n\n');

  /**
   * @module ol/renderer/webgl/defaultmapshader/Locations
   */

  var Locations$4 = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_texCoordMatrix = gl.getUniformLocation(
      program, 'u_texCoordMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_projectionMatrix = gl.getUniformLocation(
      program, 'u_projectionMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_opacity = gl.getUniformLocation(
      program, 'u_opacity');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_texture = gl.getUniformLocation(
      program, 'u_texture');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

    /**
     * @type {number}
     */
    this.a_texCoord = gl.getAttribLocation(
      program, 'a_texCoord');

  };

  /**
   * @module ol/renderer/webgl/Layer
   */

  /**
   * @abstract
   */
  var WebGLLayerRenderer = /*@__PURE__*/(function (LayerRenderer$$1) {
    function WebGLLayerRenderer(mapRenderer, layer) {

      LayerRenderer$$1.call(this, layer);

      /**
       * @protected
       * @type {import("./Map.js").default}
       */
      this.mapRenderer = mapRenderer;

      /**
       * @private
       * @type {import("../../webgl/Buffer.js").default}
       */
      this.arrayBuffer_ = new WebGLBuffer([
        -1, -1, 0, 0,
        1, -1, 1, 0,
        -1, 1, 0, 1,
        1, 1, 1, 1
      ]);

      /**
       * @protected
       * @type {WebGLTexture}
       */
      this.texture = null;

      /**
       * @protected
       * @type {WebGLFramebuffer}
       */
      this.framebuffer = null;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.framebufferDimension = undefined;

      /**
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.texCoordMatrix = create();

      /**
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.projectionMatrix = create();

      /**
       * @type {Array<number>}
       * @private
       */
      this.tmpMat4_ = create$1();

      /**
       * @private
       * @type {import("./defaultmapshader/Locations.js").default}
       */
      this.defaultLocations_ = null;

    }

    if ( LayerRenderer$$1 ) WebGLLayerRenderer.__proto__ = LayerRenderer$$1;
    WebGLLayerRenderer.prototype = Object.create( LayerRenderer$$1 && LayerRenderer$$1.prototype );
    WebGLLayerRenderer.prototype.constructor = WebGLLayerRenderer;

    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} framebufferDimension Framebuffer dimension.
     * @protected
     */
    WebGLLayerRenderer.prototype.bindFramebuffer = function bindFramebuffer (frameState, framebufferDimension) {

      var gl = this.mapRenderer.getGL();

      if (this.framebufferDimension === undefined ||
          this.framebufferDimension != framebufferDimension) {
        /**
         * @param {WebGLRenderingContext} gl GL.
         * @param {WebGLFramebuffer} framebuffer Framebuffer.
         * @param {WebGLTexture} texture Texture.
         */
        var postRenderFunction = function(gl, framebuffer, texture) {
          if (!gl.isContextLost()) {
            gl.deleteFramebuffer(framebuffer);
            gl.deleteTexture(texture);
          }
        }.bind(null, gl, this.framebuffer, this.texture);

        frameState.postRenderFunctions.push(
          /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (postRenderFunction)
        );

        var texture = createEmptyTexture(
          gl, framebufferDimension, framebufferDimension);

        var framebuffer = gl.createFramebuffer();
        gl.bindFramebuffer(FRAMEBUFFER, framebuffer);
        gl.framebufferTexture2D(FRAMEBUFFER,
          COLOR_ATTACHMENT0, TEXTURE_2D, texture, 0);

        this.texture = texture;
        this.framebuffer = framebuffer;
        this.framebufferDimension = framebufferDimension;

      } else {
        gl.bindFramebuffer(FRAMEBUFFER, this.framebuffer);
      }

    };

    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @param {import("../../webgl/Context.js").default} context Context.
     */
    WebGLLayerRenderer.prototype.composeFrame = function composeFrame (frameState, layerState, context) {

      this.dispatchComposeEvent_(RenderEventType.PRECOMPOSE, context, frameState);

      context.bindBuffer(ARRAY_BUFFER, this.arrayBuffer_);

      var gl = context.getGL();

      var program = context.getProgram(fragment$4, vertex$4);

      var locations;
      if (!this.defaultLocations_) {
        locations = new Locations$4(gl, program);
        this.defaultLocations_ = locations;
      } else {
        locations = this.defaultLocations_;
      }

      if (context.useProgram(program)) {
        gl.enableVertexAttribArray(locations.a_position);
        gl.vertexAttribPointer(
          locations.a_position, 2, FLOAT, false, 16, 0);
        gl.enableVertexAttribArray(locations.a_texCoord);
        gl.vertexAttribPointer(
          locations.a_texCoord, 2, FLOAT, false, 16, 8);
        gl.uniform1i(locations.u_texture, 0);
      }

      gl.uniformMatrix4fv(locations.u_texCoordMatrix, false,
        fromTransform(this.tmpMat4_, this.getTexCoordMatrix()));
      gl.uniformMatrix4fv(locations.u_projectionMatrix, false,
        fromTransform(this.tmpMat4_, this.getProjectionMatrix()));
      gl.uniform1f(locations.u_opacity, layerState.opacity);
      gl.bindTexture(TEXTURE_2D, this.getTexture());
      gl.drawArrays(TRIANGLE_STRIP, 0, 4);

      this.dispatchComposeEvent_(RenderEventType.POSTCOMPOSE, context, frameState);
    };

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {import("../../webgl/Context.js").default} context WebGL context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */
    WebGLLayerRenderer.prototype.dispatchComposeEvent_ = function dispatchComposeEvent_ (type, context, frameState) {
      var layer = this.getLayer();
      if (layer.hasListener(type)) {
        var viewState = frameState.viewState;
        var resolution = viewState.resolution;
        var pixelRatio = frameState.pixelRatio;
        var extent$$1 = frameState.extent;
        var center = viewState.center;
        var rotation = viewState.rotation;
        var size$$1 = frameState.size;

        var render = new WebGLImmediateRenderer(
          context, center, resolution, rotation, size$$1, extent$$1, pixelRatio);
        var composeEvent = new RenderEvent(
          type, render, frameState, null, context);
        layer.dispatchEvent(composeEvent);
      }
    };

    /**
     * @return {!import("../../transform.js").Transform} Matrix.
     */
    WebGLLayerRenderer.prototype.getTexCoordMatrix = function getTexCoordMatrix () {
      return this.texCoordMatrix;
    };

    /**
     * @return {WebGLTexture} Texture.
     */
    WebGLLayerRenderer.prototype.getTexture = function getTexture () {
      return this.texture;
    };

    /**
     * @return {!import("../../transform.js").Transform} Matrix.
     */
    WebGLLayerRenderer.prototype.getProjectionMatrix = function getProjectionMatrix () {
      return this.projectionMatrix;
    };

    /**
     * Handle webglcontextlost.
     */
    WebGLLayerRenderer.prototype.handleWebGLContextLost = function handleWebGLContextLost () {
      this.texture = null;
      this.framebuffer = null;
      this.framebufferDimension = undefined;
    };

    /**
     * @abstract
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @return {boolean} whether composeFrame should be called.
     */
    WebGLLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState, context) {
      return abstract();
    };

    /**
     * @abstract
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
     * @param {function(this: S, import("../../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
     *     callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    WebGLLayerRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, callback, thisArg) {
      return abstract();
    };

    return WebGLLayerRenderer;
  }(LayerRenderer));

  /**
   * @module ol/renderer/webgl/ImageLayer
   */

  /**
   * @classdesc
   * WebGL renderer for image layers.
   * @api
   */
  var WebGLImageLayerRenderer = /*@__PURE__*/(function (WebGLLayerRenderer$$1) {
    function WebGLImageLayerRenderer(mapRenderer, imageLayer) {

      WebGLLayerRenderer$$1.call(this, mapRenderer, imageLayer);

      /**
       * The last rendered image.
       * @private
       * @type {?import("../../ImageBase.js").default}
       */
      this.image_ = null;

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.hitCanvasContext_ = null;

      /**
       * @private
       * @type {?import("../../transform.js").Transform}
       */
      this.hitTransformationMatrix_ = null;

    }

    if ( WebGLLayerRenderer$$1 ) WebGLImageLayerRenderer.__proto__ = WebGLLayerRenderer$$1;
    WebGLImageLayerRenderer.prototype = Object.create( WebGLLayerRenderer$$1 && WebGLLayerRenderer$$1.prototype );
    WebGLImageLayerRenderer.prototype.constructor = WebGLImageLayerRenderer;

    /**
     * @param {import("../../ImageBase.js").default} image Image.
     * @private
     * @return {WebGLTexture} Texture.
     */
    WebGLImageLayerRenderer.prototype.createTexture_ = function createTexture_ (image) {

      // We meet the conditions to work with non-power of two textures.
      // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences#Non-Power_of_Two_Texture_Support
      // http://learningwebgl.com/blog/?p=2101

      var imageElement = image.getImage();
      var gl = this.mapRenderer.getGL();

      return createTexture(
        gl, imageElement, CLAMP_TO_EDGE, CLAMP_TO_EDGE);
    };

    /**
     * @inheritDoc
     */
    WebGLImageLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState, context) {

      var gl = this.mapRenderer.getGL();

      var pixelRatio = frameState.pixelRatio;
      var viewState = frameState.viewState;
      var viewCenter = viewState.center;
      var viewResolution = viewState.resolution;
      var viewRotation = viewState.rotation;

      var image = this.image_;
      var texture = this.texture;
      var imageLayer = /** @type {import("../../layer/Image.js").default} */ (this.getLayer());
      var imageSource = /** @type {import("../../source/Image.js").default} */ (imageLayer.getSource());

      var hints = frameState.viewHints;

      var renderedExtent = frameState.extent;
      if (layerState.extent !== undefined) {
        renderedExtent = getIntersection(renderedExtent, layerState.extent);
      }
      if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] &&
          !isEmpty$2(renderedExtent)) {
        var projection = viewState.projection;
        var image_ = imageSource.getImage(renderedExtent, viewResolution,
          pixelRatio, projection);
        if (image_) {
          var loaded = this.loadImage(image_);
          if (loaded) {
            image = image_;
            texture = this.createTexture_(image_);
            if (this.texture) {
              /**
               * @param {WebGLRenderingContext} gl GL.
               * @param {WebGLTexture} texture Texture.
               */
              var postRenderFunction = function(gl, texture) {
                if (!gl.isContextLost()) {
                  gl.deleteTexture(texture);
                }
              }.bind(null, gl, this.texture);
              frameState.postRenderFunctions.push(
                /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (postRenderFunction)
              );
            }
          }
        }
      }

      if (image) {
        var canvas = this.mapRenderer.getContext().getCanvas();

        this.updateProjectionMatrix_(canvas.width, canvas.height,
          pixelRatio, viewCenter, viewResolution, viewRotation,
          image.getExtent());
        this.hitTransformationMatrix_ = null;

        // Translate and scale to flip the Y coord.
        var texCoordMatrix = this.texCoordMatrix;
        reset(texCoordMatrix);
        scale$1(texCoordMatrix, 1, -1);
        translate$1(texCoordMatrix, 0, -1);

        this.image_ = image;
        this.texture = texture;
      }

      return !!image;
    };

    /**
     * @param {number} canvasWidth Canvas width.
     * @param {number} canvasHeight Canvas height.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../coordinate.js").Coordinate} viewCenter View center.
     * @param {number} viewResolution View resolution.
     * @param {number} viewRotation View rotation.
     * @param {import("../../extent.js").Extent} imageExtent Image extent.
     * @private
     */
    WebGLImageLayerRenderer.prototype.updateProjectionMatrix_ = function updateProjectionMatrix_ (
      canvasWidth,
      canvasHeight,
      pixelRatio,
      viewCenter,
      viewResolution,
      viewRotation,
      imageExtent
    ) {

      var canvasExtentWidth = canvasWidth * viewResolution;
      var canvasExtentHeight = canvasHeight * viewResolution;

      var projectionMatrix = this.projectionMatrix;
      reset(projectionMatrix);
      scale$1(projectionMatrix,
        pixelRatio * 2 / canvasExtentWidth,
        pixelRatio * 2 / canvasExtentHeight);
      rotate$1(projectionMatrix, -viewRotation);
      translate$1(projectionMatrix,
        imageExtent[0] - viewCenter[0],
        imageExtent[1] - viewCenter[1]);
      scale$1(projectionMatrix,
        (imageExtent[2] - imageExtent[0]) / 2,
        (imageExtent[3] - imageExtent[1]) / 2);
      translate$1(projectionMatrix, 1, 1);

    };

    /**
     * @inheritDoc
     */
    WebGLImageLayerRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, callback, thisArg) {
      if (!this.image_ || !this.image_.getImage()) {
        return undefined;
      }

      var imageSize =
          [this.image_.getImage().width, this.image_.getImage().height];

      if (!this.hitTransformationMatrix_) {
        this.hitTransformationMatrix_ = this.getHitTransformationMatrix_(
          frameState.size, imageSize);
      }

      var pixelOnFrameBuffer = apply(
        this.hitTransformationMatrix_, pixel.slice());

      if (pixelOnFrameBuffer[0] < 0 || pixelOnFrameBuffer[0] > imageSize[0] ||
          pixelOnFrameBuffer[1] < 0 || pixelOnFrameBuffer[1] > imageSize[1]) {
        // outside the image, no need to check
        return undefined;
      }

      if (!this.hitCanvasContext_) {
        this.hitCanvasContext_ = createCanvasContext2D(1, 1);
      }

      this.hitCanvasContext_.clearRect(0, 0, 1, 1);
      this.hitCanvasContext_.drawImage(this.image_.getImage(),
        pixelOnFrameBuffer[0], pixelOnFrameBuffer[1], 1, 1, 0, 0, 1, 1);

      var imageData = this.hitCanvasContext_.getImageData(0, 0, 1, 1).data;
      if (imageData[3] > 0) {
        return callback.call(thisArg, this.getLayer(), imageData);
      } else {
        return undefined;
      }
    };

    /**
     * The transformation matrix to get the pixel on the image for a
     * pixel on the map.
     * @param {import("../../size.js").Size} mapSize The map size.
     * @param {import("../../size.js").Size} imageSize The image size.
     * @return {import("../../transform.js").Transform} The transformation matrix.
     * @private
     */
    WebGLImageLayerRenderer.prototype.getHitTransformationMatrix_ = function getHitTransformationMatrix_ (mapSize, imageSize) {
      // the first matrix takes a map pixel, flips the y-axis and scales to
      // a range between -1 ... 1
      var mapCoordTransform = create();
      translate$1(mapCoordTransform, -1, -1);
      scale$1(mapCoordTransform, 2 / mapSize[0], 2 / mapSize[1]);
      translate$1(mapCoordTransform, 0, mapSize[1]);
      scale$1(mapCoordTransform, 1, -1);

      // the second matrix is the inverse of the projection matrix used in the
      // shader for drawing
      var projectionMatrixInv = invert(this.projectionMatrix.slice());

      // the third matrix scales to the image dimensions and flips the y-axis again
      var transform = create();
      translate$1(transform, 0, imageSize[1]);
      scale$1(transform, 1, -1);
      scale$1(transform, imageSize[0] / 2, imageSize[1] / 2);
      translate$1(transform, 1, 1);

      multiply(transform, projectionMatrixInv);
      multiply(transform, mapCoordTransform);

      return transform;
    };

    return WebGLImageLayerRenderer;
  }(WebGLLayerRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  WebGLImageLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.IMAGE;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {WebGLImageLayerRenderer} The layer renderer.
   */
  WebGLImageLayerRenderer['create'] = function(mapRenderer, layer) {
    return new WebGLImageLayerRenderer(
      /** @type {import("./Map.js").default} */ (mapRenderer),
      /** @type {import("../../layer/Image.js").default} */ (layer)
    );
  };

  /**
   * @module ol/renderer/webgl/Map
   */


  /**
   * @typedef {Object} TextureCacheEntry
   * @property {number} magFilter
   * @property {number} minFilter
   * @property {WebGLTexture} texture
   */


  /**
   * Texture cache high water mark.
   * @type {number}
   */
  var WEBGL_TEXTURE_CACHE_HIGH_WATER_MARK = 1024;


  /**
   * @classdesc
   * WebGL map renderer.
   * @api
   */
  var WebGLMapRenderer = /*@__PURE__*/(function (MapRenderer$$1) {
    function WebGLMapRenderer(map) {
      MapRenderer$$1.call(this, map);

      var container = map.getViewport();

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = /** @type {HTMLCanvasElement} */
        (document.createElement('canvas'));
      this.canvas_.style.width = '100%';
      this.canvas_.style.height = '100%';
      this.canvas_.style.display = 'block';
      this.canvas_.className = CLASS_UNSELECTABLE;
      container.insertBefore(this.canvas_, container.childNodes[0] || null);

      /**
       * @private
       * @type {number}
       */
      this.clipTileCanvasWidth_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.clipTileCanvasHeight_ = 0;

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.clipTileContext_ = createCanvasContext2D();

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;

      /**
       * @private
       * @type {WebGLRenderingContext}
       */
      this.gl_ = getContext(this.canvas_, {
        antialias: true,
        depth: true,
        failIfMajorPerformanceCaveat: true,
        preserveDrawingBuffer: false,
        stencil: true
      });

      /**
       * @private
       * @type {import("../../webgl/Context.js").default}
       */
      this.context_ = new WebGLContext(this.canvas_, this.gl_);

      listen(this.canvas_, ContextEventType.LOST,
        this.handleWebGLContextLost, this);
      listen(this.canvas_, ContextEventType.RESTORED,
        this.handleWebGLContextRestored, this);

      /**
       * @private
       * @type {import("../../structs/LRUCache.js").default<TextureCacheEntry|null>}
       */
      this.textureCache_ = new LRUCache();

      /**
       * @private
       * @type {import("../../coordinate.js").Coordinate}
       */
      this.focus_ = null;

      /**
       * @private
       * @type {import("../../structs/PriorityQueue.js").default<Array>}
       */
      this.tileTextureQueue_ = new PriorityQueue(
        /**
         * @param {Array<*>} element Element.
         * @return {number} Priority.
         * @this {WebGLMapRenderer}
         */
        (function(element) {
          var tileCenter = /** @type {import("../../coordinate.js").Coordinate} */ (element[1]);
          var tileResolution = /** @type {number} */ (element[2]);
          var deltaX = tileCenter[0] - this.focus_[0];
          var deltaY = tileCenter[1] - this.focus_[1];
          return 65536 * Math.log(tileResolution) +
                Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
        }).bind(this),
        /**
         * @param {Array<*>} element Element.
         * @return {string} Key.
         */
        function(element) {
          return (
            /** @type {import("../../Tile.js").default} */ (element[0]).getKey()
          );
        });


      /**
       * @param {import("../../PluggableMap.js").default} map Map.
       * @param {?import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @return {boolean} false.
       * @this {WebGLMapRenderer}
       */
      this.loadNextTileTexture_ =
          function(map, frameState) {
            if (!this.tileTextureQueue_.isEmpty()) {
              this.tileTextureQueue_.reprioritize();
              var element = this.tileTextureQueue_.dequeue();
              var tile = /** @type {import("../../Tile.js").default} */ (element[0]);
              var tileSize = /** @type {import("../../size.js").Size} */ (element[3]);
              var tileGutter = /** @type {number} */ (element[4]);
              this.bindTileTexture(
                tile, tileSize, tileGutter, LINEAR, LINEAR);
            }
            return false;
          }.bind(this);


      /**
       * @private
       * @type {number}
       */
      this.textureCacheFrameMarkerCount_ = 0;

      this.initializeGL_();
    }

    if ( MapRenderer$$1 ) WebGLMapRenderer.__proto__ = MapRenderer$$1;
    WebGLMapRenderer.prototype = Object.create( MapRenderer$$1 && MapRenderer$$1.prototype );
    WebGLMapRenderer.prototype.constructor = WebGLMapRenderer;

    /**
     * @param {import("../../Tile.js").default} tile Tile.
     * @param {import("../../size.js").Size} tileSize Tile size.
     * @param {number} tileGutter Tile gutter.
     * @param {number} magFilter Mag filter.
     * @param {number} minFilter Min filter.
     */
    WebGLMapRenderer.prototype.bindTileTexture = function bindTileTexture (tile, tileSize, tileGutter, magFilter, minFilter) {
      var gl = this.getGL();
      var tileKey = tile.getKey();
      if (this.textureCache_.containsKey(tileKey)) {
        var textureCacheEntry = this.textureCache_.get(tileKey);
        gl.bindTexture(TEXTURE_2D, textureCacheEntry.texture);
        if (textureCacheEntry.magFilter != magFilter) {
          gl.texParameteri(
            TEXTURE_2D, TEXTURE_MAG_FILTER, magFilter);
          textureCacheEntry.magFilter = magFilter;
        }
        if (textureCacheEntry.minFilter != minFilter) {
          gl.texParameteri(
            TEXTURE_2D, TEXTURE_MIN_FILTER, minFilter);
          textureCacheEntry.minFilter = minFilter;
        }
      } else {
        var texture = gl.createTexture();
        var imageTile = /** @type {import("../../ImageTile.js").default} */ (tile);
        gl.bindTexture(TEXTURE_2D, texture);
        if (tileGutter > 0) {
          var clipTileCanvas = this.clipTileContext_.canvas;
          var clipTileContext = this.clipTileContext_;
          if (this.clipTileCanvasWidth_ !== tileSize[0] ||
              this.clipTileCanvasHeight_ !== tileSize[1]) {
            clipTileCanvas.width = tileSize[0];
            clipTileCanvas.height = tileSize[1];
            this.clipTileCanvasWidth_ = tileSize[0];
            this.clipTileCanvasHeight_ = tileSize[1];
          } else {
            clipTileContext.clearRect(0, 0, tileSize[0], tileSize[1]);
          }
          clipTileContext.drawImage(imageTile.getImage(), tileGutter, tileGutter,
            tileSize[0], tileSize[1], 0, 0, tileSize[0], tileSize[1]);
          gl.texImage2D(TEXTURE_2D, 0,
            RGBA, RGBA,
            UNSIGNED_BYTE, clipTileCanvas);
        } else {
          gl.texImage2D(TEXTURE_2D, 0,
            RGBA, RGBA,
            UNSIGNED_BYTE, imageTile.getImage());
        }
        gl.texParameteri(
          TEXTURE_2D, TEXTURE_MAG_FILTER, magFilter);
        gl.texParameteri(
          TEXTURE_2D, TEXTURE_MIN_FILTER, minFilter);
        gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S,
          CLAMP_TO_EDGE);
        gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T,
          CLAMP_TO_EDGE);
        this.textureCache_.set(tileKey, {
          texture: texture,
          magFilter: magFilter,
          minFilter: minFilter
        });
      }
    };

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     */
    WebGLMapRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent (type, frameState) {
      var map = this.getMap();
      if (map.hasListener(type)) {
        var context = this.context_;

        var extent$$1 = frameState.extent;
        var size$$1 = frameState.size;
        var viewState = frameState.viewState;
        var pixelRatio = frameState.pixelRatio;

        var resolution = viewState.resolution;
        var center = viewState.center;
        var rotation = viewState.rotation;

        var vectorContext = new WebGLImmediateRenderer(context,
          center, resolution, rotation, size$$1, extent$$1, pixelRatio);
        var composeEvent = new RenderEvent(type, vectorContext,
          frameState, null, context);
        map.dispatchEvent(composeEvent);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLMapRenderer.prototype.disposeInternal = function disposeInternal () {
      var gl = this.getGL();
      if (!gl.isContextLost()) {
        this.textureCache_.forEach(
          /**
           * @param {?TextureCacheEntry} textureCacheEntry
           *     Texture cache entry.
           */
          function(textureCacheEntry) {
            if (textureCacheEntry) {
              gl.deleteTexture(textureCacheEntry.texture);
            }
          });
      }
      this.context_.dispose();
      MapRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @param {import("../../PluggableMap.js").default} map Map.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */
    WebGLMapRenderer.prototype.expireCache_ = function expireCache_ (map, frameState) {
      var gl = this.getGL();
      var textureCacheEntry;
      while (this.textureCache_.getCount() - this.textureCacheFrameMarkerCount_ >
          WEBGL_TEXTURE_CACHE_HIGH_WATER_MARK) {
        textureCacheEntry = this.textureCache_.peekLast();
        if (!textureCacheEntry) {
          if (+this.textureCache_.peekLastKey() == frameState.index) {
            break;
          } else {
            --this.textureCacheFrameMarkerCount_;
          }
        } else {
          gl.deleteTexture(textureCacheEntry.texture);
        }
        this.textureCache_.pop();
      }
    };

    /**
     * @return {import("../../webgl/Context.js").default} The context.
     */
    WebGLMapRenderer.prototype.getContext = function getContext$$1 () {
      return this.context_;
    };

    /**
     * @return {WebGLRenderingContext} GL.
     */
    WebGLMapRenderer.prototype.getGL = function getGL () {
      return this.gl_;
    };

    /**
     * @return {import("../../structs/PriorityQueue.js").default<Array>} Tile texture queue.
     */
    WebGLMapRenderer.prototype.getTileTextureQueue = function getTileTextureQueue () {
      return this.tileTextureQueue_;
    };

    /**
     * @param {import("../../events/Event.js").default} event Event.
     * @protected
     */
    WebGLMapRenderer.prototype.handleWebGLContextLost = function handleWebGLContextLost (event) {
      event.preventDefault();
      this.textureCache_.clear();
      this.textureCacheFrameMarkerCount_ = 0;

      var renderers = this.getLayerRenderers();
      for (var id in renderers) {
        var renderer = /** @type {import("./Layer.js").default} */ (renderers[id]);
        renderer.handleWebGLContextLost();
      }
    };

    /**
     * @protected
     */
    WebGLMapRenderer.prototype.handleWebGLContextRestored = function handleWebGLContextRestored () {
      this.initializeGL_();
      this.getMap().render();
    };

    /**
     * @private
     */
    WebGLMapRenderer.prototype.initializeGL_ = function initializeGL_ () {
      var gl = this.gl_;
      gl.activeTexture(TEXTURE0);
      gl.blendFuncSeparate(
        SRC_ALPHA, ONE_MINUS_SRC_ALPHA,
        ONE, ONE_MINUS_SRC_ALPHA);
      gl.disable(CULL_FACE);
      gl.disable(DEPTH_TEST);
      gl.disable(SCISSOR_TEST);
      gl.disable(STENCIL_TEST);
    };

    /**
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {boolean} Is tile texture loaded.
     */
    WebGLMapRenderer.prototype.isTileTextureLoaded = function isTileTextureLoaded (tile) {
      return this.textureCache_.containsKey(tile.getKey());
    };

    /**
     * @inheritDoc
     */
    WebGLMapRenderer.prototype.renderFrame = function renderFrame (frameState) {

      var context = this.getContext();
      var gl = this.getGL();

      if (gl.isContextLost()) {
        return false;
      }

      if (!frameState) {
        if (this.renderedVisible_) {
          this.canvas_.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return false;
      }

      this.focus_ = frameState.focus;

      this.textureCache_.set((-frameState.index).toString(), null);
      ++this.textureCacheFrameMarkerCount_;

      this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);

      /** @type {Array<import("../../layer/Layer.js").State>} */
      var layerStatesToDraw = [];
      var layerStatesArray = frameState.layerStatesArray;
      stableSort(layerStatesArray, sortByZIndex);

      var viewResolution = frameState.viewState.resolution;
      var i, ii;
      for (i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        var layerState = layerStatesArray[i];
        if (visibleAtResolution(layerState, viewResolution) &&
            layerState.sourceState == SourceState.READY) {
          var layerRenderer = /** @type {import("./Layer.js").default} */ (this.getLayerRenderer(layerState.layer));
          if (layerRenderer.prepareFrame(frameState, layerState, context)) {
            layerStatesToDraw.push(layerState);
          }
        }
      }

      var width = frameState.size[0] * frameState.pixelRatio;
      var height = frameState.size[1] * frameState.pixelRatio;
      if (this.canvas_.width != width || this.canvas_.height != height) {
        this.canvas_.width = width;
        this.canvas_.height = height;
      }

      gl.bindFramebuffer(FRAMEBUFFER, null);

      gl.clearColor(0, 0, 0, 0);
      gl.clear(COLOR_BUFFER_BIT);
      gl.enable(BLEND);
      gl.viewport(0, 0, this.canvas_.width, this.canvas_.height);

      for (i = 0, ii = layerStatesToDraw.length; i < ii; ++i) {
        var layerState$1 = layerStatesToDraw[i];
        var layerRenderer$1 = /** @type {import("./Layer.js").default} */ (this.getLayerRenderer(layerState$1.layer));
        layerRenderer$1.composeFrame(frameState, layerState$1, context);
      }

      if (!this.renderedVisible_) {
        this.canvas_.style.display = '';
        this.renderedVisible_ = true;
      }

      this.calculateMatrices2D(frameState);

      if (this.textureCache_.getCount() - this.textureCacheFrameMarkerCount_ >
          WEBGL_TEXTURE_CACHE_HIGH_WATER_MARK) {
        frameState.postRenderFunctions.push(
          /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (this.expireCache_.bind(this))
        );
      }

      if (!this.tileTextureQueue_.isEmpty()) {
        frameState.postRenderFunctions.push(this.loadNextTileTexture_);
        frameState.animate = true;
      }

      this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);

      this.scheduleRemoveUnusedLayerRenderers(frameState);
      this.scheduleExpireIconCache(frameState);

    };

    /**
     * @inheritDoc
     */
    WebGLMapRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (
      coordinate,
      frameState,
      hitTolerance,
      callback,
      thisArg,
      layerFilter,
      thisArg2
    ) {
      var result;

      if (this.getGL().isContextLost()) {
        return false;
      }

      var viewState = frameState.viewState;

      var layerStates = frameState.layerStatesArray;
      var numLayers = layerStates.length;
      var i;
      for (i = numLayers - 1; i >= 0; --i) {
        var layerState = layerStates[i];
        var layer = layerState.layer;
        if (visibleAtResolution(layerState, viewState.resolution) &&
            layerFilter.call(thisArg2, layer)) {
          var layerRenderer = this.getLayerRenderer(layer);
          result = layerRenderer.forEachFeatureAtCoordinate(
            coordinate, frameState, hitTolerance, callback);
          if (result) {
            return result;
          }
        }
      }
      return undefined;
    };

    /**
     * @inheritDoc
     */
    WebGLMapRenderer.prototype.hasFeatureAtCoordinate = function hasFeatureAtCoordinate (coordinate, frameState, hitTolerance, layerFilter, thisArg) {
      var hasFeature = false;

      if (this.getGL().isContextLost()) {
        return false;
      }

      var viewState = frameState.viewState;

      var layerStates = frameState.layerStatesArray;
      var numLayers = layerStates.length;
      var i;
      for (i = numLayers - 1; i >= 0; --i) {
        var layerState = layerStates[i];
        var layer = layerState.layer;
        if (visibleAtResolution(layerState, viewState.resolution) &&
            layerFilter.call(thisArg, layer)) {
          var layerRenderer = this.getLayerRenderer(layer);
          hasFeature =
              layerRenderer.hasFeatureAtCoordinate(coordinate, frameState);
          if (hasFeature) {
            return true;
          }
        }
      }
      return hasFeature;
    };

    /**
     * @inheritDoc
     */
    WebGLMapRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, hitTolerance, callback, thisArg, layerFilter, thisArg2) {
      if (this.getGL().isContextLost()) {
        return false;
      }

      var viewState = frameState.viewState;
      var result;

      var layerStates = frameState.layerStatesArray;
      var numLayers = layerStates.length;
      var i;
      for (i = numLayers - 1; i >= 0; --i) {
        var layerState = layerStates[i];
        var layer = layerState.layer;
        if (visibleAtResolution(layerState, viewState.resolution) &&
            layerFilter.call(thisArg, layer)) {
          var layerRenderer = /** @type {import("./Layer.js").default} */ (this.getLayerRenderer(layer));
          result = layerRenderer.forEachLayerAtPixel(
            pixel, frameState, callback, thisArg);
          if (result) {
            return result;
          }
        }
      }
      return undefined;
    };

    return WebGLMapRenderer;
  }(MapRenderer));

  /**
   * @module ol/tilegrid/TileGrid
   */


  /**
   * @private
   * @type {import("../tilecoord.js").TileCoord}
   */
  var tmpTileCoord = [0, 0, 0];


  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
   * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or
   * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
   * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and upwards. If not
   * specified, `extent` or `origins` must be provided.
   * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
   * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * origin. Tile coordinates increase left to right and upwards. If not specified, `extent` or
   * `origin` must be provided.
   * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
   * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
   * array will have a length of `maxZoom + 1`.
   * @property {Array<import("../size.js").Size>} [sizes] Sizes.
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * Default is `[256, 256]`.
   * @property {Array<import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * tile size.
   */


  /**
   * @classdesc
   * Base class for setting the grid pattern for sources accessing tiled-image
   * servers.
   * @api
   */
  var TileGrid$1 = function TileGrid$$1(options) {

    /**
     * @protected
     * @type {number}
     */
    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;

    /**
     * @private
     * @type {!Array<number>}
     */
    this.resolutions_ = options.resolutions;
    assert(isSorted(this.resolutions_, function(a, b) {
      return b - a;
    }, true), 17); // `resolutions` must be sorted in descending order


    // check if we've got a consistent zoom factor and origin
    var zoomFactor;
    if (!options.origins) {
      for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
        if (!zoomFactor) {
          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
        } else {
          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
            zoomFactor = undefined;
            break;
          }
        }
      }
    }


    /**
     * @private
     * @type {number|undefined}
     */
    this.zoomFactor_ = zoomFactor;


    /**
     * @protected
     * @type {number}
     */
    this.maxZoom = this.resolutions_.length - 1;

    /**
     * @private
     * @type {import("../coordinate.js").Coordinate}
     */
    this.origin_ = options.origin !== undefined ? options.origin : null;

    /**
     * @private
     * @type {Array<import("../coordinate.js").Coordinate>}
     */
    this.origins_ = null;
    if (options.origins !== undefined) {
      this.origins_ = options.origins;
      assert(this.origins_.length == this.resolutions_.length,
        20); // Number of `origins` and `resolutions` must be equal
    }

    var extent$$1 = options.extent;

    if (extent$$1 !== undefined &&
        !this.origin_ && !this.origins_) {
      this.origin_ = getTopLeft(extent$$1);
    }

    assert(
      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),
      18); // Either `origin` or `origins` must be configured, never both

    /**
     * @private
     * @type {Array<number|import("../size.js").Size>}
     */
    this.tileSizes_ = null;
    if (options.tileSizes !== undefined) {
      this.tileSizes_ = options.tileSizes;
      assert(this.tileSizes_.length == this.resolutions_.length,
        19); // Number of `tileSizes` and `resolutions` must be equal
    }

    /**
     * @private
     * @type {number|import("../size.js").Size}
     */
    this.tileSize_ = options.tileSize !== undefined ?
      options.tileSize :
      !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;
    assert(
      (!this.tileSize_ && this.tileSizes_) ||
        (this.tileSize_ && !this.tileSizes_),
      22); // Either `tileSize` or `tileSizes` must be configured, never both

    /**
     * @private
     * @type {import("../extent.js").Extent}
     */
    this.extent_ = extent$$1 !== undefined ? extent$$1 : null;


    /**
     * @private
     * @type {Array<import("../TileRange.js").default>}
     */
    this.fullTileRanges_ = null;

    /**
     * @private
     * @type {import("../size.js").Size}
     */
    this.tmpSize_ = [0, 0];

    if (options.sizes !== undefined) {
      this.fullTileRanges_ = options.sizes.map(function(size$$1, z) {
        var tileRange = new TileRange(
          Math.min(0, size$$1[0]), Math.max(size$$1[0] - 1, -1),
          Math.min(0, size$$1[1]), Math.max(size$$1[1] - 1, -1));
        return tileRange;
      }, this);
    } else if (extent$$1) {
      this.calculateTileRanges_(extent$$1);
    }

  };

  /**
   * Call a function with each tile coordinate for a given extent and zoom level.
   *
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} zoom Integer zoom level.
   * @param {function(import("../tilecoord.js").TileCoord)} callback Function called with each tile coordinate.
   * @api
   */
  TileGrid$1.prototype.forEachTileCoord = function forEachTileCoord (extent$$1, zoom, callback) {
    var tileRange = this.getTileRangeForExtentAndZ(extent$$1, zoom);
    for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
      for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
        callback([zoom, i, j]);
      }
    }
  };

  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {function(this: T, number, import("../TileRange.js").default): boolean} callback Callback.
   * @param {T=} opt_this The object to use as `this` in `callback`.
   * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
   * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
   * @return {boolean} Callback succeeded.
   * @template T
   */
  TileGrid$1.prototype.forEachTileCoordParentTileRange = function forEachTileCoordParentTileRange (tileCoord, callback, opt_this, opt_tileRange, opt_extent) {
    var tileRange, x, y;
    var tileCoordExtent = null;
    var z = tileCoord[0] - 1;
    if (this.zoomFactor_ === 2) {
      x = tileCoord[1];
      y = tileCoord[2];
    } else {
      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
    }
    while (z >= this.minZoom) {
      if (this.zoomFactor_ === 2) {
        x = Math.floor(x / 2);
        y = Math.floor(y / 2);
        tileRange = createOrUpdate$1(x, x, y, y, opt_tileRange);
      } else {
        tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
      }
      if (callback.call(opt_this, z, tileRange)) {
        return true;
      }
      --z;
    }
    return false;
  };

  /**
   * Get the extent for this tile grid, if it was configured.
   * @return {import("../extent.js").Extent} Extent.
   */
  TileGrid$1.prototype.getExtent = function getExtent () {
    return this.extent_;
  };

  /**
   * Get the maximum zoom level for the grid.
   * @return {number} Max zoom.
   * @api
   */
  TileGrid$1.prototype.getMaxZoom = function getMaxZoom () {
    return this.maxZoom;
  };

  /**
   * Get the minimum zoom level for the grid.
   * @return {number} Min zoom.
   * @api
   */
  TileGrid$1.prototype.getMinZoom = function getMinZoom () {
    return this.minZoom;
  };

  /**
   * Get the origin for the grid at the given zoom level.
   * @param {number} z Integer zoom level.
   * @return {import("../coordinate.js").Coordinate} Origin.
   * @api
   */
  TileGrid$1.prototype.getOrigin = function getOrigin (z) {
    if (this.origin_) {
      return this.origin_;
    } else {
      return this.origins_[z];
    }
  };

  /**
   * Get the resolution for the given zoom level.
   * @param {number} z Integer zoom level.
   * @return {number} Resolution.
   * @api
   */
  TileGrid$1.prototype.getResolution = function getResolution (z) {
    return this.resolutions_[z];
  };

  /**
   * Get the list of resolutions for the tile grid.
   * @return {Array<number>} Resolutions.
   * @api
   */
  TileGrid$1.prototype.getResolutions = function getResolutions () {
    return this.resolutions_;
  };

  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
   * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
   * @return {import("../TileRange.js").default} Tile range.
   */
  TileGrid$1.prototype.getTileCoordChildTileRange = function getTileCoordChildTileRange (tileCoord, opt_tileRange, opt_extent) {
    if (tileCoord[0] < this.maxZoom) {
      if (this.zoomFactor_ === 2) {
        var minX = tileCoord[1] * 2;
        var minY = tileCoord[2] * 2;
        return createOrUpdate$1(minX, minX + 1, minY, minY + 1, opt_tileRange);
      }
      var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
      return this.getTileRangeForExtentAndZ(
        tileCoordExtent, tileCoord[0] + 1, opt_tileRange);
    }
    return null;
  };

  /**
   * Get the extent for a tile range.
   * @param {number} z Integer zoom level.
   * @param {import("../TileRange.js").default} tileRange Tile range.
   * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
   * @return {import("../extent.js").Extent} Extent.
   */
  TileGrid$1.prototype.getTileRangeExtent = function getTileRangeExtent (z, tileRange, opt_extent) {
    var origin = this.getOrigin(z);
    var resolution = this.getResolution(z);
    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
    var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
    var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
    var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
    var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
  };

  /**
   * Get a tile range for the given extent and integer zoom level.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} z Integer zoom level.
   * @param {import("../TileRange.js").default=} opt_tileRange Temporary tile range object.
   * @return {import("../TileRange.js").default} Tile range.
   */
  TileGrid$1.prototype.getTileRangeForExtentAndZ = function getTileRangeForExtentAndZ (extent$$1, z, opt_tileRange) {
    var tileCoord = tmpTileCoord;
    this.getTileCoordForXYAndZ_(extent$$1[0], extent$$1[1], z, false, tileCoord);
    var minX = tileCoord[1];
    var minY = tileCoord[2];
    this.getTileCoordForXYAndZ_(extent$$1[2], extent$$1[3], z, true, tileCoord);
    return createOrUpdate$1(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);
  };

  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {import("../coordinate.js").Coordinate} Tile center.
   */
  TileGrid$1.prototype.getTileCoordCenter = function getTileCoordCenter (tileCoord) {
    var origin = this.getOrigin(tileCoord[0]);
    var resolution = this.getResolution(tileCoord[0]);
    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
    return [
      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
      origin[1] + (tileCoord[2] + 0.5) * tileSize[1] * resolution
    ];
  };

  /**
   * Get the extent of a tile coordinate.
   *
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("../extent.js").Extent=} opt_extent Temporary extent object.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  TileGrid$1.prototype.getTileCoordExtent = function getTileCoordExtent (tileCoord, opt_extent) {
    var origin = this.getOrigin(tileCoord[0]);
    var resolution = this.getResolution(tileCoord[0]);
    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
    var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
    var minY = origin[1] + tileCoord[2] * tileSize[1] * resolution;
    var maxX = minX + tileSize[0] * resolution;
    var maxY = minY + tileSize[1] * resolution;
    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
  };

  /**
   * Get the tile coordinate for the given map coordinate and resolution.This
   * method considers that coordinates that intersect tile boundaries should be
   * assigned the higher tile coordinate.
   *
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} resolution Resolution.
   * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @api
   */
  TileGrid$1.prototype.getTileCoordForCoordAndResolution = function getTileCoordForCoordAndResolution (coordinate, resolution, opt_tileCoord) {
    return this.getTileCoordForXYAndResolution_(
      coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
  };

  /**
   * Note that this method should not be called for resolutions that correspond
   * to an integer zoom level.Instead call the `getTileCoordForXYAndZ_` method.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} resolution Resolution (for a non-integer zoom level).
   * @param {boolean} reverseIntersectionPolicy Instead of letting edge
   *   intersections go to the higher tile coordinate, let edge intersections
   *   go to the lower tile coordinate.
   * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @private
   */
  TileGrid$1.prototype.getTileCoordForXYAndResolution_ = function getTileCoordForXYAndResolution_ (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
    var z = this.getZForResolution(resolution);
    var scale = resolution / this.getResolution(z);
    var origin = this.getOrigin(z);
    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);

    var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
    var adjustY = reverseIntersectionPolicy ? 0 : 0.5;
    var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
    var yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);
    var tileCoordX = scale * xFromOrigin / tileSize[0];
    var tileCoordY = scale * yFromOrigin / tileSize[1];

    if (reverseIntersectionPolicy) {
      tileCoordX = Math.ceil(tileCoordX) - 1;
      tileCoordY = Math.ceil(tileCoordY) - 1;
    } else {
      tileCoordX = Math.floor(tileCoordX);
      tileCoordY = Math.floor(tileCoordY);
    }

    return createOrUpdate$2(z, tileCoordX, tileCoordY, opt_tileCoord);
  };

  /**
   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
   * they should have separate implementations.This method is for integer zoom
   * levels.The other method should only be called for resolutions corresponding
   * to non-integer zoom levels.
   * @param {number} x Map x coordinate.
   * @param {number} y Map y coordinate.
   * @param {number} z Integer zoom level.
   * @param {boolean} reverseIntersectionPolicy Instead of letting edge
   *   intersections go to the higher tile coordinate, let edge intersections
   *   go to the lower tile coordinate.
   * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @private
   */
  TileGrid$1.prototype.getTileCoordForXYAndZ_ = function getTileCoordForXYAndZ_ (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
    var origin = this.getOrigin(z);
    var resolution = this.getResolution(z);
    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);

    var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
    var adjustY = reverseIntersectionPolicy ? 0 : 0.5;
    var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
    var yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);
    var tileCoordX = xFromOrigin / tileSize[0];
    var tileCoordY = yFromOrigin / tileSize[1];

    if (reverseIntersectionPolicy) {
      tileCoordX = Math.ceil(tileCoordX) - 1;
      tileCoordY = Math.ceil(tileCoordY) - 1;
    } else {
      tileCoordX = Math.floor(tileCoordX);
      tileCoordY = Math.floor(tileCoordY);
    }

    return createOrUpdate$2(z, tileCoordX, tileCoordY, opt_tileCoord);
  };

  /**
   * Get a tile coordinate given a map coordinate and zoom level.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} z Zoom level.
   * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @api
   */
  TileGrid$1.prototype.getTileCoordForCoordAndZ = function getTileCoordForCoordAndZ (coordinate, z, opt_tileCoord) {
    return this.getTileCoordForXYAndZ_(
      coordinate[0], coordinate[1], z, false, opt_tileCoord);
  };

  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {number} Tile resolution.
   */
  TileGrid$1.prototype.getTileCoordResolution = function getTileCoordResolution (tileCoord) {
    return this.resolutions_[tileCoord[0]];
  };

  /**
   * Get the tile size for a zoom level. The type of the return value matches the
   * `tileSize` or `tileSizes` that the tile grid was configured with. To always
   * get an `import("../size.js").Size`, run the result through `import("../size.js").Size.toSize()`.
   * @param {number} z Z.
   * @return {number|import("../size.js").Size} Tile size.
   * @api
   */
  TileGrid$1.prototype.getTileSize = function getTileSize (z) {
    if (this.tileSize_) {
      return this.tileSize_;
    } else {
      return this.tileSizes_[z];
    }
  };

  /**
   * @param {number} z Zoom level.
   * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
   */
  TileGrid$1.prototype.getFullTileRange = function getFullTileRange (z) {
    if (!this.fullTileRanges_) {
      return null;
    } else {
      return this.fullTileRanges_[z];
    }
  };

  /**
   * @param {number} resolution Resolution.
   * @param {number=} opt_direction If 0, the nearest resolution will be used.
   *   If 1, the nearest lower resolution will be used. If -1, the nearest
   *   higher resolution will be used. Default is 0.
   * @return {number} Z.
   * @api
   */
  TileGrid$1.prototype.getZForResolution = function getZForResolution (resolution, opt_direction) {
    var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);
    return clamp(z, this.minZoom, this.maxZoom);
  };

  /**
   * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
   * @private
   */
  TileGrid$1.prototype.calculateTileRanges_ = function calculateTileRanges_ (extent$$1) {
    var length = this.resolutions_.length;
    var fullTileRanges = new Array(length);
    for (var z = this.minZoom; z < length; ++z) {
      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent$$1, z);
    }
    this.fullTileRanges_ = fullTileRanges;
  };

  /**
   * @module ol/tilegrid
   */


  /**
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {!TileGrid} Default tile grid for the
   * passed projection.
   */
  function getForProjection(projection) {
    var tileGrid = projection.getDefaultTileGrid();
    if (!tileGrid) {
      tileGrid = createForProjection(projection);
      projection.setDefaultTileGrid(tileGrid);
    }
    return tileGrid;
  }


  /**
   * @param {TileGrid} tileGrid Tile grid.
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
   */
  function wrapX(tileGrid, tileCoord, projection) {
    var z = tileCoord[0];
    var center = tileGrid.getTileCoordCenter(tileCoord);
    var projectionExtent = extentFromProjection(projection);
    if (!containsCoordinate(projectionExtent, center)) {
      var worldWidth = getWidth(projectionExtent);
      var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
      center[0] += worldWidth * worldsAway;
      return tileGrid.getTileCoordForCoordAndZ(center, z);
    } else {
      return tileCoord;
    }
  }


  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForExtent(extent$$1, opt_maxZoom, opt_tileSize, opt_corner) {
    var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;

    var resolutions = resolutionsFromExtent(extent$$1, opt_maxZoom, opt_tileSize);

    return new TileGrid$1({
      extent: extent$$1,
      origin: getCorner(extent$$1, corner),
      resolutions: resolutions,
      tileSize: opt_tileSize
    });
  }


  /**
   * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @return {!Array<number>} Resolutions array.
   */
  function resolutionsFromExtent(extent$$1, opt_maxZoom, opt_tileSize) {
    var maxZoom = opt_maxZoom !== undefined ?
      opt_maxZoom : DEFAULT_MAX_ZOOM;

    var height = getHeight(extent$$1);
    var width = getWidth(extent$$1);

    var tileSize = toSize(opt_tileSize !== undefined ?
      opt_tileSize : DEFAULT_TILE_SIZE);
    var maxResolution = Math.max(
      width / tileSize[0], height / tileSize[1]);

    var length = maxZoom + 1;
    var resolutions = new Array(length);
    for (var z = 0; z < length; ++z) {
      resolutions[z] = maxResolution / Math.pow(2, z);
    }
    return resolutions;
  }


  /**
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
    var extent$$1 = extentFromProjection(projection);
    return createForExtent(extent$$1, opt_maxZoom, opt_tileSize, opt_corner);
  }


  /**
   * Generate a tile grid extent from a projection.  If the projection has an
   * extent, it is used.  If not, a global extent is assumed.
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @return {import("./extent.js").Extent} Extent.
   */
  function extentFromProjection(projection) {
    projection = get$3(projection);
    var extent$$1 = projection.getExtent();
    if (!extent$$1) {
      var half = 180 * METERS_PER_UNIT[Units$1.DEGREES] / projection.getMetersPerUnit();
      extent$$1 = createOrUpdate(-half, -half, half, half);
    }
    return extent$$1;
  }

  /**
   * @module ol/source/Tile
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize]
   * @property {boolean} [opaque]
   * @property {number} [tilePixelRatio]
   * @property {import("../proj.js").ProjectionLike} [projection]
   * @property {import("./State.js").default} [state]
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
   * @property {boolean} [wrapX=true]
   * @property {number} [transition]
   * @property {string} [key]
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for sources providing images divided into a tile grid.
   * @abstract
   * @api
   */
  var TileSource = /*@__PURE__*/(function (Source$$1) {
    function TileSource(options) {

      Source$$1.call(this, {
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        projection: options.projection,
        state: options.state,
        wrapX: options.wrapX
      });

      /**
       * @private
       * @type {boolean}
       */
      this.opaque_ = options.opaque !== undefined ? options.opaque : false;

      /**
       * @private
       * @type {number}
       */
      this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?
        options.tilePixelRatio : 1;

      /**
       * @protected
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;

      /**
       * @protected
       * @type {import("../TileCache.js").default}
       */
      this.tileCache = new TileCache(options.cacheSize);

      /**
       * @protected
       * @type {import("../size.js").Size}
       */
      this.tmpSize = [0, 0];

      /**
       * @private
       * @type {string}
       */
      this.key_ = options.key || '';

      /**
       * @protected
       * @type {import("../Tile.js").Options}
       */
      this.tileOptions = {transition: options.transition};

    }

    if ( Source$$1 ) TileSource.__proto__ = Source$$1;
    TileSource.prototype = Object.create( Source$$1 && Source$$1.prototype );
    TileSource.prototype.constructor = TileSource;

    /**
     * @return {boolean} Can expire cache.
     */
    TileSource.prototype.canExpireCache = function canExpireCache () {
      return this.tileCache.canExpireCache();
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {!Object<string, import("../TileRange.js").default>} usedTiles Used tiles.
     */
    TileSource.prototype.expireCache = function expireCache (projection, usedTiles) {
      var tileCache = this.getTileCacheForProjection(projection);
      if (tileCache) {
        tileCache.expireCache(usedTiles);
      }
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {number} z Zoom level.
     * @param {import("../TileRange.js").default} tileRange Tile range.
     * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
     *     loaded tile.  If the callback returns `false`, the tile will not be
     *     considered loaded.
     * @return {boolean} The tile range is fully covered with loaded tiles.
     */
    TileSource.prototype.forEachLoadedTile = function forEachLoadedTile (projection, z, tileRange, callback) {
      var tileCache = this.getTileCacheForProjection(projection);
      if (!tileCache) {
        return false;
      }

      var covered = true;
      var tile, tileCoordKey, loaded;
      for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
        for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
          tileCoordKey = getKeyZXY(z, x, y);
          loaded = false;
          if (tileCache.containsKey(tileCoordKey)) {
            tile = /** @type {!import("../Tile.js").default} */ (tileCache.get(tileCoordKey));
            loaded = tile.getState() === TileState.LOADED;
            if (loaded) {
              loaded = (callback(tile) !== false);
            }
          }
          if (!loaded) {
            covered = false;
          }
        }
      }
      return covered;
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {number} Gutter.
     */
    TileSource.prototype.getGutterForProjection = function getGutterForProjection (projection) {
      return 0;
    };

    /**
     * Return the key to be used for all tiles in the source.
     * @return {string} The key for all tiles.
     * @protected
     */
    TileSource.prototype.getKey = function getKey () {
      return this.key_;
    };

    /**
     * Set the value to be used as the key for all tiles in the source.
     * @param {string} key The key for tiles.
     * @protected
     */
    TileSource.prototype.setKey = function setKey (key) {
      if (this.key_ !== key) {
        this.key_ = key;
        this.changed();
      }
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {boolean} Opaque.
     */
    TileSource.prototype.getOpaque = function getOpaque (projection) {
      return this.opaque_;
    };

    /**
     * @inheritDoc
     */
    TileSource.prototype.getResolutions = function getResolutions () {
      return this.tileGrid.getResolutions();
    };

    /**
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../Tile.js").default} Tile.
     */
    TileSource.prototype.getTile = function getTile (z, x, y, pixelRatio, projection) {
      return abstract();
    };

    /**
     * Return the tile grid of the tile source.
     * @return {import("../tilegrid/TileGrid.js").default} Tile grid.
     * @api
     */
    TileSource.prototype.getTileGrid = function getTileGrid () {
      return this.tileGrid;
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     */
    TileSource.prototype.getTileGridForProjection = function getTileGridForProjection$1 (projection) {
      if (!this.tileGrid) {
        return getForProjection(projection);
      } else {
        return this.tileGrid;
      }
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../TileCache.js").default} Tile cache.
     * @protected
     */
    TileSource.prototype.getTileCacheForProjection = function getTileCacheForProjection (projection) {
      var thisProj = this.getProjection();
      if (thisProj && !equivalent(thisProj, projection)) {
        return null;
      } else {
        return this.tileCache;
      }
    };

    /**
     * Get the tile pixel ratio for this source. Subclasses may override this
     * method, which is meant to return a supported pixel ratio that matches the
     * provided `pixelRatio` as close as possible.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Tile pixel ratio.
     */
    TileSource.prototype.getTilePixelRatio = function getTilePixelRatio (pixelRatio) {
      return this.tilePixelRatio_;
    };

    /**
     * @param {number} z Z.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../size.js").Size} Tile size.
     */
    TileSource.prototype.getTilePixelSize = function getTilePixelSize (z, pixelRatio, projection) {
      var tileGrid = this.getTileGridForProjection(projection);
      var tilePixelRatio = this.getTilePixelRatio(pixelRatio);
      var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
      if (tilePixelRatio == 1) {
        return tileSize;
      } else {
        return scale$3(tileSize, tilePixelRatio, this.tmpSize);
      }
    };

    /**
     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
     * is outside the resolution and extent range of the tile grid, `null` will be
     * returned.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../proj/Projection.js").default=} opt_projection Projection.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
     *     null if no tile URL should be created for the passed `tileCoord`.
     */
    TileSource.prototype.getTileCoordForTileUrlFunction = function getTileCoordForTileUrlFunction (tileCoord, opt_projection) {
      var projection = opt_projection !== undefined ?
        opt_projection : this.getProjection();
      var tileGrid = this.getTileGridForProjection(projection);
      if (this.getWrapX() && projection.isGlobal()) {
        tileCoord = wrapX(tileGrid, tileCoord, projection);
      }
      return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
    };

    /**
     * @inheritDoc
     */
    TileSource.prototype.refresh = function refresh () {
      this.tileCache.clear();
      this.changed();
    };

    /**
     * Marks a tile coord as being used, without triggering a load.
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    TileSource.prototype.useTile = function useTile (z, x, y, projection) {};

    return TileSource;
  }(Source));


  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
   * type.
   */
  var TileSourceEvent = /*@__PURE__*/(function (Event$$1) {
    function TileSourceEvent(type, tile) {

      Event$$1.call(this, type);

      /**
       * The tile related to the event.
       * @type {import("../Tile.js").default}
       * @api
       */
      this.tile = tile;

    }

    if ( Event$$1 ) TileSourceEvent.__proto__ = Event$$1;
    TileSourceEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    TileSourceEvent.prototype.constructor = TileSourceEvent;

    return TileSourceEvent;
  }(Event));

  /**
   * @module ol/renderer/webgl/tilelayershader
   */

  var fragment$5 = new WebGLFragment('precision mediump float;\nvarying vec2 v_texCoord;\n\n\nuniform sampler2D u_texture;\n\nvoid main(void) {\n  gl_FragColor = texture2D(u_texture, v_texCoord);\n}\n');

  var vertex$5 = new WebGLVertex('varying vec2 v_texCoord;\n\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nuniform vec4 u_tileOffset;\n\nvoid main(void) {\n  gl_Position = vec4(a_position * u_tileOffset.xy + u_tileOffset.zw, 0., 1.);\n  v_texCoord = a_texCoord;\n}\n\n\n');

  /**
   * @module ol/renderer/webgl/tilelayershader/Locations
   */

  var Locations$5 = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_tileOffset = gl.getUniformLocation(
      program, 'u_tileOffset');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_texture = gl.getUniformLocation(
      program, 'u_texture');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

    /**
     * @type {number}
     */
    this.a_texCoord = gl.getAttribLocation(
      program, 'a_texCoord');

  };

  /**
   * @module ol/renderer/webgl/TileLayer
   */

  /**
   * @classdesc
   * WebGL renderer for tile layers.
   * @api
   */
  var WebGLTileLayerRenderer = /*@__PURE__*/(function (WebGLLayerRenderer$$1) {
    function WebGLTileLayerRenderer(mapRenderer, tileLayer) {

      WebGLLayerRenderer$$1.call(this, mapRenderer, tileLayer);

      /**
       * @private
       * @type {import("../../webgl/Fragment.js").default}
       */
      this.fragmentShader_ = fragment$5;

      /**
       * @private
       * @type {import("../../webgl/Vertex.js").default}
       */
      this.vertexShader_ = vertex$5;

      /**
       * @private
       * @type {import("./tilelayershader/Locations.js").default}
       */
      this.locations_ = null;

      /**
       * @private
       * @type {import("../../webgl/Buffer.js").default}
       */
      this.renderArrayBuffer_ = new WebGLBuffer([
        0, 0, 0, 1,
        1, 0, 1, 1,
        0, 1, 0, 0,
        1, 1, 1, 0
      ]);

      /**
       * @private
       * @type {import("../../TileRange.js").default}
       */
      this.renderedTileRange_ = null;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedFramebufferExtent_ = null;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = -1;

      /**
       * @private
       * @type {import("../../size.js").Size}
       */
      this.tmpSize_ = [0, 0];

    }

    if ( WebGLLayerRenderer$$1 ) WebGLTileLayerRenderer.__proto__ = WebGLLayerRenderer$$1;
    WebGLTileLayerRenderer.prototype = Object.create( WebGLLayerRenderer$$1 && WebGLLayerRenderer$$1.prototype );
    WebGLTileLayerRenderer.prototype.constructor = WebGLTileLayerRenderer;

    /**
     * @inheritDoc
     */
    WebGLTileLayerRenderer.prototype.disposeInternal = function disposeInternal () {
      var context = this.mapRenderer.getContext();
      context.deleteBuffer(this.renderArrayBuffer_);
      WebGLLayerRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @inheritDoc
     */
    WebGLTileLayerRenderer.prototype.createLoadedTileFinder = function createLoadedTileFinder (source, projection, tiles) {
      var mapRenderer = this.mapRenderer;

      return (
        /**
         * @param {number} zoom Zoom level.
         * @param {import("../../TileRange.js").default} tileRange Tile range.
         * @return {boolean} The tile range is fully loaded.
         */
        function(zoom, tileRange) {
          function callback(tile) {
            var loaded = mapRenderer.isTileTextureLoaded(tile);
            if (loaded) {
              if (!tiles[zoom]) {
                tiles[zoom] = {};
              }
              tiles[zoom][tile.tileCoord.toString()] = tile;
            }
            return loaded;
          }
          return source.forEachLoadedTile(projection, zoom, tileRange, callback);
        }
      );
    };

    /**
     * @inheritDoc
     */
    WebGLTileLayerRenderer.prototype.handleWebGLContextLost = function handleWebGLContextLost () {
      WebGLLayerRenderer$$1.prototype.handleWebGLContextLost.call(this);
      this.locations_ = null;
    };

    /**
     * @inheritDoc
     */
    WebGLTileLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState, context) {

      var mapRenderer = this.mapRenderer;
      var gl = context.getGL();

      var viewState = frameState.viewState;
      var projection = viewState.projection;

      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      var tileSource = tileLayer.getSource();
      if (!(tileSource instanceof TileSource)) {
        return true;
      }

      var tileGrid = tileSource.getTileGridForProjection(projection);
      var z = tileGrid.getZForResolution(viewState.resolution);
      var tileResolution = tileGrid.getResolution(z);

      var tilePixelSize =
          tileSource.getTilePixelSize(z, frameState.pixelRatio, projection);
      var pixelRatio = tilePixelSize[0] /
          toSize(tileGrid.getTileSize(z), this.tmpSize_)[0];
      var tilePixelResolution = tileResolution / pixelRatio;
      var tileGutter = tileSource.getTilePixelRatio(pixelRatio) * tileSource.getGutterForProjection(projection);

      var center = viewState.center;
      var extent$$1 = frameState.extent;
      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent$$1, z);

      var framebufferExtent;
      if (this.renderedTileRange_ &&
          this.renderedTileRange_.equals(tileRange) &&
          this.renderedRevision_ == tileSource.getRevision()) {
        framebufferExtent = this.renderedFramebufferExtent_;
      } else {

        var tileRangeSize = tileRange.getSize();

        var maxDimension = Math.max(
          tileRangeSize[0] * tilePixelSize[0],
          tileRangeSize[1] * tilePixelSize[1]);
        var framebufferDimension = roundUpToPowerOfTwo(maxDimension);
        var framebufferExtentDimension = tilePixelResolution * framebufferDimension;
        var origin = tileGrid.getOrigin(z);
        var minX = origin[0] +
            tileRange.minX * tilePixelSize[0] * tilePixelResolution;
        var minY = origin[1] +
            tileRange.minY * tilePixelSize[1] * tilePixelResolution;
        framebufferExtent = [
          minX, minY,
          minX + framebufferExtentDimension, minY + framebufferExtentDimension
        ];

        this.bindFramebuffer(frameState, framebufferDimension);
        gl.viewport(0, 0, framebufferDimension, framebufferDimension);

        gl.clearColor(0, 0, 0, 0);
        gl.clear(COLOR_BUFFER_BIT);
        gl.disable(BLEND);

        var program = context.getProgram(this.fragmentShader_, this.vertexShader_);
        context.useProgram(program);
        if (!this.locations_) {
          this.locations_ = new Locations$5(gl, program);
        }

        context.bindBuffer(ARRAY_BUFFER, this.renderArrayBuffer_);
        gl.enableVertexAttribArray(this.locations_.a_position);
        gl.vertexAttribPointer(
          this.locations_.a_position, 2, FLOAT, false, 16, 0);
        gl.enableVertexAttribArray(this.locations_.a_texCoord);
        gl.vertexAttribPointer(
          this.locations_.a_texCoord, 2, FLOAT, false, 16, 8);
        gl.uniform1i(this.locations_.u_texture, 0);

        /**
         * @type {Object<number, Object<string, import("../../Tile.js").default>>}
         */
        var tilesToDrawByZ = {};
        tilesToDrawByZ[z] = {};

        var findLoadedTiles = this.createLoadedTileFinder(
          tileSource, projection, tilesToDrawByZ);

        var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
        var allTilesLoaded = true;
        var tmpExtent = createEmpty();
        var tmpTileRange = new TileRange(0, 0, 0, 0);
        var childTileRange, drawable, fullyLoaded, tile, tileState;
        var x, y, tileExtent;
        for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
          for (y = tileRange.minY; y <= tileRange.maxY; ++y) {

            tile = tileSource.getTile(z, x, y, pixelRatio, projection);
            if (layerState.extent !== undefined) {
              // ignore tiles outside layer extent
              tileExtent = tileGrid.getTileCoordExtent(tile.tileCoord, tmpExtent);
              if (!intersects(tileExtent, layerState.extent)) {
                continue;
              }
            }
            tileState = tile.getState();
            drawable = tileState == TileState.LOADED ||
                tileState == TileState.EMPTY ||
                tileState == TileState.ERROR && !useInterimTilesOnError;
            if (!drawable) {
              tile = tile.getInterimTile();
            }
            tileState = tile.getState();
            if (tileState == TileState.LOADED) {
              if (mapRenderer.isTileTextureLoaded(tile)) {
                tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
                continue;
              }
            } else if (tileState == TileState.EMPTY ||
                       (tileState == TileState.ERROR &&
                        !useInterimTilesOnError)) {
              continue;
            }

            allTilesLoaded = false;
            fullyLoaded = tileGrid.forEachTileCoordParentTileRange(
              tile.tileCoord, findLoadedTiles, null, tmpTileRange, tmpExtent);
            if (!fullyLoaded) {
              childTileRange = tileGrid.getTileCoordChildTileRange(
                tile.tileCoord, tmpTileRange, tmpExtent);
              if (childTileRange) {
                findLoadedTiles(z + 1, childTileRange);
              }
            }

          }

        }

        /** @type {Array<number>} */
        var zs = Object.keys(tilesToDrawByZ).map(Number);
        zs.sort(numberSafeCompareFunction);
        var u_tileOffset = new Float32Array(4);
        for (var i = 0, ii = zs.length; i < ii; ++i) {
          var tilesToDraw = tilesToDrawByZ[zs[i]];
          for (var tileKey in tilesToDraw) {
            tile = tilesToDraw[tileKey];

            if (!(tile instanceof ImageTile)) {
              continue;
            }

            tileExtent = tileGrid.getTileCoordExtent(tile.tileCoord, tmpExtent);
            u_tileOffset[0] = 2 * (tileExtent[2] - tileExtent[0]) /
                framebufferExtentDimension;
            u_tileOffset[1] = 2 * (tileExtent[3] - tileExtent[1]) /
                framebufferExtentDimension;
            u_tileOffset[2] = 2 * (tileExtent[0] - framebufferExtent[0]) /
                framebufferExtentDimension - 1;
            u_tileOffset[3] = 2 * (tileExtent[1] - framebufferExtent[1]) /
                framebufferExtentDimension - 1;
            gl.uniform4fv(this.locations_.u_tileOffset, u_tileOffset);
            mapRenderer.bindTileTexture(tile, tilePixelSize,
              tileGutter * pixelRatio, LINEAR, LINEAR);
            gl.drawArrays(TRIANGLE_STRIP, 0, 4);
          }
        }

        if (allTilesLoaded) {
          this.renderedTileRange_ = tileRange;
          this.renderedFramebufferExtent_ = framebufferExtent;
          this.renderedRevision_ = tileSource.getRevision();
        } else {
          this.renderedTileRange_ = null;
          this.renderedFramebufferExtent_ = null;
          this.renderedRevision_ = -1;
          frameState.animate = true;
        }

      }

      this.updateUsedTiles(frameState.usedTiles, tileSource, z, tileRange);
      var tileTextureQueue = mapRenderer.getTileTextureQueue();
      this.manageTilePyramid(
        frameState, tileSource, tileGrid, pixelRatio, projection, extent$$1, z,
        tileLayer.getPreload(),
        /**
         * @param {import("../../Tile.js").default} tile Tile.
         */
        function(tile) {
          if (tile.getState() == TileState.LOADED &&
                !mapRenderer.isTileTextureLoaded(tile) &&
                !tileTextureQueue.isKeyQueued(tile.getKey())) {
            tileTextureQueue.enqueue([
              tile,
              tileGrid.getTileCoordCenter(tile.tileCoord),
              tileGrid.getResolution(tile.tileCoord[0]),
              tilePixelSize, tileGutter * pixelRatio
            ]);
          }
        }, this);
      this.scheduleExpireCache(frameState, tileSource);

      var texCoordMatrix = this.texCoordMatrix;
      reset(texCoordMatrix);
      translate$1(texCoordMatrix,
        (Math.round(center[0] / tileResolution) * tileResolution - framebufferExtent[0]) /
              (framebufferExtent[2] - framebufferExtent[0]),
        (Math.round(center[1] / tileResolution) * tileResolution - framebufferExtent[1]) /
              (framebufferExtent[3] - framebufferExtent[1]));
      if (viewState.rotation !== 0) {
        rotate$1(texCoordMatrix, viewState.rotation);
      }
      scale$1(texCoordMatrix,
        frameState.size[0] * viewState.resolution /
              (framebufferExtent[2] - framebufferExtent[0]),
        frameState.size[1] * viewState.resolution /
              (framebufferExtent[3] - framebufferExtent[1]));
      translate$1(texCoordMatrix, -0.5, -0.5);

      return true;
    };

    /**
     * @inheritDoc
     */
    WebGLTileLayerRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, callback, thisArg) {
      if (!this.framebuffer) {
        return undefined;
      }

      var pixelOnMapScaled = [
        pixel[0] / frameState.size[0],
        (frameState.size[1] - pixel[1]) / frameState.size[1]];

      var pixelOnFrameBufferScaled = apply(
        this.texCoordMatrix, pixelOnMapScaled.slice());
      var pixelOnFrameBuffer = [
        pixelOnFrameBufferScaled[0] * this.framebufferDimension,
        pixelOnFrameBufferScaled[1] * this.framebufferDimension];

      var gl = this.mapRenderer.getContext().getGL();
      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
      var imageData = new Uint8Array(4);
      gl.readPixels(pixelOnFrameBuffer[0], pixelOnFrameBuffer[1], 1, 1,
        gl.RGBA, gl.UNSIGNED_BYTE, imageData);

      if (imageData[3] > 0) {
        return callback.call(thisArg, this.getLayer(), imageData);
      } else {
        return undefined;
      }
    };

    return WebGLTileLayerRenderer;
  }(WebGLLayerRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  WebGLTileLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.TILE;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {WebGLTileLayerRenderer} The layer renderer.
   */
  WebGLTileLayerRenderer['create'] = function(mapRenderer, layer) {
    return new WebGLTileLayerRenderer(
      /** @type {import("./Map.js").default} */ (mapRenderer),
      /** @type {import("../../layer/Tile.js").default} */ (layer)
    );
  };

  /**
   * @module ol/renderer/webgl/VectorLayer
   */


  /**
   * @classdesc
   * WebGL renderer for vector layers.
   * @api
   */
  var WebGLVectorLayerRenderer = /*@__PURE__*/(function (WebGLLayerRenderer$$1) {
    function WebGLVectorLayerRenderer(mapRenderer, vectorLayer) {

      WebGLLayerRenderer$$1.call(this, mapRenderer, vectorLayer);

      /**
       * @private
       * @type {boolean}
       */
      this.dirty_ = false;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.renderedResolution_ = NaN;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedExtent_ = createEmpty();

      /**
       * @private
       * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
       */
      this.renderedRenderOrder_ = null;

      /**
       * @private
       * @type {import("../../render/webgl/ReplayGroup.js").default}
       */
      this.replayGroup_ = null;

      /**
       * The last layer state.
       * @private
       * @type {?import("../../layer/Layer.js").State}
       */
      this.layerState_ = null;

    }

    if ( WebGLLayerRenderer$$1 ) WebGLVectorLayerRenderer.__proto__ = WebGLLayerRenderer$$1;
    WebGLVectorLayerRenderer.prototype = Object.create( WebGLLayerRenderer$$1 && WebGLLayerRenderer$$1.prototype );
    WebGLVectorLayerRenderer.prototype.constructor = WebGLVectorLayerRenderer;

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.composeFrame = function composeFrame (frameState, layerState, context) {
      this.layerState_ = layerState;
      var viewState = frameState.viewState;
      var replayGroup = this.replayGroup_;
      var size$$1 = frameState.size;
      var pixelRatio = frameState.pixelRatio;
      var gl = this.mapRenderer.getGL();
      if (replayGroup && !replayGroup.isEmpty()) {
        gl.enable(gl.SCISSOR_TEST);
        gl.scissor(0, 0, size$$1[0] * pixelRatio, size$$1[1] * pixelRatio);
        replayGroup.replay(context,
          viewState.center, viewState.resolution, viewState.rotation,
          size$$1, pixelRatio, layerState.opacity,
          layerState.managed ? frameState.skippedFeatureUids : {});
        gl.disable(gl.SCISSOR_TEST);
      }

    };

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.disposeInternal = function disposeInternal () {
      var replayGroup = this.replayGroup_;
      if (replayGroup) {
        var context = this.mapRenderer.getContext();
        replayGroup.getDeleteResourcesFunction(context)();
        this.replayGroup_ = null;
      }
      WebGLLayerRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {
      if (!this.replayGroup_ || !this.layerState_) {
        return undefined;
      } else {
        var context = this.mapRenderer.getContext();
        var viewState = frameState.viewState;
        var layer = this.getLayer();
        var layerState = this.layerState_;
        /** @type {!Object<string, boolean>} */
        var features = {};
        return this.replayGroup_.forEachFeatureAtCoordinate(coordinate,
          context, viewState.center, viewState.resolution, viewState.rotation,
          frameState.size, frameState.pixelRatio, layerState.opacity,
          {},
          /**
           * @param {import("../../Feature.js").FeatureLike} feature Feature.
           * @return {?} Callback result.
           */
          function(feature) {
            var key = getUid(feature);
            if (!(key in features)) {
              features[key] = true;
              return callback.call(thisArg, feature, layer);
            }
          });
      }
    };

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.hasFeatureAtCoordinate = function hasFeatureAtCoordinate (coordinate, frameState) {
      if (!this.replayGroup_ || !this.layerState_) {
        return false;
      } else {
        var context = this.mapRenderer.getContext();
        var viewState = frameState.viewState;
        var layerState = this.layerState_;
        return this.replayGroup_.hasFeatureAtCoordinate(coordinate,
          context, viewState.center, viewState.resolution, viewState.rotation,
          frameState.size, frameState.pixelRatio, layerState.opacity,
          frameState.skippedFeatureUids);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, callback, thisArg) {
      var coordinate = apply(
        frameState.pixelToCoordinateTransform, pixel.slice());
      var hasFeature = this.hasFeatureAtCoordinate(coordinate, frameState);

      if (hasFeature) {
        return callback.call(thisArg, this.getLayer(), null);
      } else {
        return undefined;
      }
    };

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    WebGLVectorLayerRenderer.prototype.handleStyleImageChange_ = function handleStyleImageChange_ (event) {
      this.renderIfReadyAndVisible();
    };

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState, context) {
      var vectorLayer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var vectorSource = /** @type {import("../../source/Vector.js").default} */ (vectorLayer.getSource());

      var animating = frameState.viewHints[ViewHint.ANIMATING];
      var interacting = frameState.viewHints[ViewHint.INTERACTING];
      var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
      var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();

      if (!this.dirty_ && (!updateWhileAnimating && animating) ||
          (!updateWhileInteracting && interacting)) {
        return true;
      }

      var frameStateExtent = frameState.extent;
      var viewState = frameState.viewState;
      var projection = viewState.projection;
      var resolution = viewState.resolution;
      var pixelRatio = frameState.pixelRatio;
      var vectorLayerRevision = vectorLayer.getRevision();
      var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
      var vectorLayerRenderOrder = vectorLayer.getRenderOrder();

      if (vectorLayerRenderOrder === undefined) {
        vectorLayerRenderOrder = defaultOrder;
      }

      var extent$$1 = buffer(frameStateExtent,
        vectorLayerRenderBuffer * resolution);

      if (!this.dirty_ &&
          this.renderedResolution_ == resolution &&
          this.renderedRevision_ == vectorLayerRevision &&
          this.renderedRenderOrder_ == vectorLayerRenderOrder &&
          containsExtent(this.renderedExtent_, extent$$1)) {
        return true;
      }

      if (this.replayGroup_) {
        frameState.postRenderFunctions.push(
          this.replayGroup_.getDeleteResourcesFunction(context));
      }

      this.dirty_ = false;

      var replayGroup = new WebGLReplayGroup(
        getTolerance(resolution, pixelRatio),
        extent$$1, vectorLayer.getRenderBuffer());
      vectorSource.loadFeatures(extent$$1, resolution, projection);
      /**
       * @param {import("../../Feature.js").default} feature Feature.
       * @this {WebGLVectorLayerRenderer}
       */
      var render = function(feature) {
        var styles;
        var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
        if (styleFunction) {
          styles = styleFunction(feature, resolution);
        }
        if (styles) {
          var dirty = this.renderFeature(
            feature, resolution, pixelRatio, styles, replayGroup);
          this.dirty_ = this.dirty_ || dirty;
        }
      }.bind(this);
      if (vectorLayerRenderOrder) {
        /** @type {Array<import("../../Feature.js").default>} */
        var features = [];
        vectorSource.forEachFeatureInExtent(extent$$1,
          /**
           * @param {import("../../Feature.js").default} feature Feature.
           */
          function(feature) {
            features.push(feature);
          });
        features.sort(vectorLayerRenderOrder);
        features.forEach(render.bind(this));
      } else {
        vectorSource.forEachFeatureInExtent(extent$$1, render);
      }
      replayGroup.finish(context);

      this.renderedResolution_ = resolution;
      this.renderedRevision_ = vectorLayerRevision;
      this.renderedRenderOrder_ = vectorLayerRenderOrder;
      this.renderedExtent_ = extent$$1;
      this.replayGroup_ = replayGroup;

      return true;
    };

    /**
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of
     *     styles.
     * @param {import("../../render/webgl/ReplayGroup.js").default} replayGroup Replay group.
     * @return {boolean} `true` if an image is loading.
     */
    WebGLVectorLayerRenderer.prototype.renderFeature = function renderFeature$1 (feature, resolution, pixelRatio, styles, replayGroup) {
      if (!styles) {
        return false;
      }
      var loading = false;
      if (Array.isArray(styles)) {
        for (var i = styles.length - 1, ii = 0; i >= ii; --i) {
          loading = renderFeature(
            replayGroup, feature, styles[i],
            getSquaredTolerance(resolution, pixelRatio),
            this.handleStyleImageChange_, this) || loading;
        }
      } else {
        loading = renderFeature(
          replayGroup, feature, styles,
          getSquaredTolerance(resolution, pixelRatio),
          this.handleStyleImageChange_, this) || loading;
      }
      return loading;
    };

    return WebGLVectorLayerRenderer;
  }(WebGLLayerRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  WebGLVectorLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.VECTOR;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {WebGLVectorLayerRenderer} The layer renderer.
   */
  WebGLVectorLayerRenderer['create'] = function(mapRenderer, layer) {
    return new WebGLVectorLayerRenderer(
      /** @type {import("./Map.js").default} */ (mapRenderer),
      /** @type {import("../../layer/Vector.js").default} */ (layer)
    );
  };

  /**
   * @module ol/WebGLMap
   */


  /**
   * @classdesc
   * The WebGLMap uses WebGL for rendering map layers.  This renderer has limited
   * support for vector data and no support for vector tiles.
   *
   *     import WebGLMap from 'ol/WebGLMap';
   *     import TileLayer from 'ol/layer/Tile';
   *     import OSM from 'ol/source/OSM';
   *     import View from 'ol/View';
   *
   *     var map = new WebGLMap({
   *       view: new View({
   *         center: [0, 0],
   *         zoom: 1
   *       }),
   *       layers: [
   *         new TileLayer({
   *           source: new OSM()
   *         })
   *       ],
   *       target: 'map'
   *     });
   *
   * The above snippet creates a map using a {@link module:ol/layer/Tile~Tile} to
   * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
   * element with the id `map`.
   *
   * The constructor places a viewport container (with CSS class name
   * `ol-viewport`) in the target element (see `getViewport()`), and then two
   * further elements within the viewport: one with CSS class name
   * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
   * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
   * option of {@link module:ol/Overlay~Overlay} for the difference). The map
   * itself is placed in a further element within the viewport.
   *
   * Layers are stored as a {@link module:ol/Collection~Collection} in
   * layerGroups. A top-level group is provided by the library. This is what is
   * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
   * options are added to this group, and `addLayer` and `removeLayer` change the
   * layer collection in the group. `getLayers` is a convenience function for
   * `getLayerGroup().getLayers()`.
   * Note that {@link module:ol/layer/Group~Group} is a subclass of
   * {@link module:ol/layer/Base}, so layers entered in the options or added
   * with `addLayer` can be groups, which can contain further groups, and so on.
   *
   * @fires import("./MapBrowserEvent.js").MapBrowserEvent
   * @fires import("./MapEvent.js").MapEvent
   * @fires module:ol/render/Event~RenderEvent#postcompose
   * @fires module:ol/render/Event~RenderEvent#precompose
   * @api
   */
  var WebGLMap = /*@__PURE__*/(function (PluggableMap$$1) {
    function WebGLMap(options) {
      options = assign({}, options);
      if (!options.controls) {
        options.controls = defaults();
      }
      if (!options.interactions) {
        options.interactions = defaults$1();
      }

      PluggableMap$$1.call(this, options);
    }

    if ( PluggableMap$$1 ) WebGLMap.__proto__ = PluggableMap$$1;
    WebGLMap.prototype = Object.create( PluggableMap$$1 && PluggableMap$$1.prototype );
    WebGLMap.prototype.constructor = WebGLMap;

    WebGLMap.prototype.createRenderer = function createRenderer () {
      var renderer = new WebGLMapRenderer(this);
      renderer.registerLayerRenderers([
        WebGLImageLayerRenderer,
        WebGLTileLayerRenderer,
        WebGLVectorLayerRenderer
      ]);
      return renderer;
    };

    return WebGLMap;
  }(PluggableMap$1));

  /**
   * @module ol
   */

  function getObjectUid(object) {
    return getUid(object);
  }
  /**
   * heuristic check that value is ol collection
   * @param value
   * @return {boolean}
   */

  function isCollection(value) {
    return value && isFunction(value.getArray);
  }
  /**
   * heuristic check that value is ol vector source
   * @param value
   * @return {*}
   */

  function isVectorSource(value) {
    return value && isFunction(value.getAttributions) && isFunction(value.getFeatureById);
  }
  /**
   * @param value
   * @return {*}
   */

  function isCircle(value) {
    return isFunction(value.getCenter) && isFunction(value.getRadius);
  }
  function cleanSourceExtraParams(params, filterKeys) {
    return reduce(params, function (params, value, key) {
      key = key.toUpperCase();

      if (filterKeys.includes(key)) {
        return params;
      }

      params[key] = value;
      return params;
    }, {});
  }

  /**
   * @param {Object} [options]
   * @return {GeoJSON}
   */

  function createGeoJsonFmt(options) {
    return new GeoJSON(options);
  }
  /**
   * @param {Object} [options]
   * @return {TopoJSON}
   */

  function createTopoJsonFmt(options) {
    return new TopoJSON(options);
  }
  /**
   * @param [options]
   * @return {MVT}
   */

  function createMvtFmt(options) {
    return new MVT(options);
  }

  var GeoJSON =
  /*#__PURE__*/
  function (_BaseGeoJSON) {
    _inherits(GeoJSON, _BaseGeoJSON);

    function GeoJSON() {
      _classCallCheck(this, GeoJSON);

      return _possibleConstructorReturn(this, _getPrototypeOf(GeoJSON).apply(this, arguments));
    }

    _createClass(GeoJSON, [{
      key: "writeGeometryObject",
      value: function writeGeometryObject(geometry, options) {
        if (isCircle(geometry)) {
          var start = geometry.getCenter();
          var end = [start[0] + geometry.getRadius(), start[1]];
          var radius = sphere.getLength(new LineString([start, end]), options.featureProjection || this.defaultFeatureProjection);
          geometry = createCircularPolygon(transformPoint(geometry.getCenter(), options.featureProjection || this.defaultFeatureProjection, EPSG_4326), radius);
          options.featureProjection = EPSG_4326;
        }

        return _get(_getPrototypeOf(GeoJSON.prototype), "writeGeometryObject", this).call(this, geometry, options);
      }
    }, {
      key: "writeFeatureObject",
      value: function writeFeatureObject(feature, options) {
        var object =
        /** @type {Object} */
        {
          'type': 'Feature'
        };
        var id = feature.getId();

        if (id !== undefined) {
          object.id = id;
        }

        var geometry = feature.getGeometry();

        if (geometry) {
          object.geometry = this.writeGeometryObject(geometry, options);
        } else {
          object.geometry = null;
        }

        var properties = feature.getProperties();
        delete properties[feature.getGeometryName()];

        if (!isEmpty(properties)) {
          object.properties = properties;
        } else {
          object.properties = null;
        }

        return object;
      }
    }]);

    return GeoJSON;
  }(BaseGeoJSON);

  var geoJsonFmt = createGeoJsonFmt();
  /**
   * @param {Feature} feature
   * @param {ProjectionLike|undefined} [featureProjection]
   * @param {ProjectionLike|undefined} [dataProjection]
   * @return {Object}
   */

  function writeGeoJsonFeature(feature, featureProjection, dataProjection) {
    var geoJsonFeature = geoJsonFmt.writeFeatureObject(feature, {
      featureProjection: featureProjection,
      dataProjection: dataProjection
    });

    if (Array.isArray(get(geoJsonFeature, 'properties.features'))) {
      geoJsonFeature.properties.features = geoJsonFeature.properties.features.map(function (feature) {
        if (feature instanceof Feature) {
          return writeGeoJsonFeature(feature, featureProjection, dataProjection);
        }

        return feature;
      });
    }

    return geoJsonFeature;
  }
  /**
   * @param {Object} geoJsonFeature
   * @param {ProjectionLike|undefined} [featureProjection]
   * @param {ProjectionLike|undefined} [dataProjection]
   * @return {Feature}
   */

  function readGeoJsonFeature(geoJsonFeature, featureProjection, dataProjection) {
    var feature = geoJsonFmt.readFeature(geoJsonFeature, {
      featureProjection: featureProjection,
      dataProjection: dataProjection
    });

    if (Array.isArray(feature.get('features'))) {
      feature.set('features', feature.get('features').map(function (feature) {
        if (isPlainObject(feature)) {
          return readGeoJsonFeature(feature, featureProjection, dataProjection);
        }

        return feature;
      }));
    }

    return feature;
  }
  /**
   * @param {Geometry} geometry
   * @param {ProjectionLike|undefined} [geometryProjection]
   * @param {ProjectionLike|undefined} [dataProjection]
   * @return {Object}
   */

  function writeGeoJsonGeometry(geometry, geometryProjection, dataProjection) {
    return geoJsonFmt.writeGeometryObject(geometry, {
      featureProjection: geometryProjection,
      dataProjection: dataProjection
    });
  }
  /**
   * @param {Object|Object} geoJsonGeometry
   * @param {ProjectionLike|undefined} [geometryProjection]
   * @param {ProjectionLike|undefined} [dataProjection]
   * @return {Geometry}
   */

  function readGeoJsonGeometry(geoJsonGeometry, geometryProjection, dataProjection) {
    dataProjection = readProjection(geoJsonGeometry, dataProjection);
    return geoJsonFmt.readGeometry(geoJsonGeometry, {
      featureProjection: geometryProjection,
      dataProjection: dataProjection
    });
  }
  function readProjection(geoJsonObj, defaultProjection) {
    return geoJsonFmt.readProjection(geoJsonObj) || defaultProjection;
  }

  /**
   * @param {Interaction|Vue} interaction
   * @returns {string|null}
   */

  function getInteractionId(interaction$$1) {
    if (interaction$$1 instanceof Vue) {
      return interaction$$1.id;
    } else if (interaction$$1 instanceof Interaction) {
      return interaction$$1.get('id');
    }

    throw new Error('Illegal interaction argument');
  }
  /**
   * @param {Interaction|Vue} interaction
   * @param {string} interactionId
   * @returns {Vue|Interaction}
   */

  function setInteractionId(interaction$$1, interactionId) {
    if (interaction$$1 instanceof Vue) {
      interaction$$1.id = interactionId;
      return interaction$$1;
    } else if (interaction$$1 instanceof Interaction) {
      interaction$$1.set('id', interactionId);
      return interaction$$1;
    }

    throw new Error('Illegal interaction argument');
  }
  function getInteractionPriority(interaction$$1) {
    if (interaction$$1 instanceof Vue) {
      return interaction$$1.priority;
    } else if (interaction$$1 instanceof Interaction) {
      return interaction$$1.get('priority');
    }

    throw new Error('Illegal interaction argument');
  }
  function setInteractionPriority(interaction$$1, priority) {
    if (interaction$$1 instanceof Vue) {
      interaction$$1.id = priority;
      return interaction$$1;
    } else if (interaction$$1 instanceof Interaction) {
      interaction$$1.set('priority', priority);
      return interaction$$1;
    }

    throw new Error('Illegal interaction argument');
  }
  function initializeInteraction(interaction$$1, defaultInteractionId, defaultPriority) {
    if (getInteractionId(interaction$$1) == null) {
      setInteractionId(interaction$$1, defaultInteractionId || v4_1());
    }

    if (getInteractionPriority(interaction$$1) == null) {
      setInteractionPriority(interaction$$1, defaultPriority || 0);
    }

    return interaction$$1;
  }

  function getLayerId(layer) {
    if (layer instanceof Vue) {
      return layer.id;
    } else if (layer instanceof BaseLayer) {
      return layer.get('id');
    }

    throw new Error('Illegal layer argument');
  }
  function setLayerId(layer, layerId) {
    if (layer instanceof Vue) {
      layer.id = layerId;
      return layer;
    } else if (layer instanceof BaseLayer) {
      layer.set('id', layerId);
      return layer;
    }

    throw new Error('Illegal layer argument');
  }
  function initializeLayer(layer, defaultLayerId) {
    if (getLayerId(layer) == null) {
      setLayerId(layer, defaultLayerId || v4_1());
    }

    return layer;
  }

  function getMapDataProjection(map) {
    if (map instanceof Vue) {
      return map.dataProjection;
    } else if (map instanceof PluggableMap) {
      return map.get('dataProjection');
    }

    throw new Error('Illegal map argument');
  }
  function setMapDataProjection(map, dataProjection) {
    if (map instanceof Vue) {
      map.dataProjection = dataProjection;
      return map;
    } else if (map instanceof PluggableMap) {
      map.set('dataProjection', dataProjection);
      return map;
    }

    throw new Error('Illegal map argument');
  }

  function getOverlayId(overlay) {
    if (overlay instanceof Vue) {
      return overlay.id;
    } else if (overlay instanceof Overlay) {
      return overlay.get('id');
    }

    throw new Error('Illegal overlay argument');
  }
  function setOverlayId(overlay, overlayId) {
    if (overlay instanceof Vue && overlay) {
      overlay.id = overlayId;
      return overlay;
    } else if (overlay instanceof Overlay) {
      overlay.set('id', overlayId);
      return overlay;
    }

    throw new Error('Illegal overlay argument');
  }
  function initializeOverlay(overlay, defaultOverlay) {
    if (getOverlayId(overlay) == null) {
      setOverlayId(overlay, defaultOverlay || v4_1());
    }

    return overlay;
  }

  /* MIT license */

  var conversions = {
    rgb2hsl: rgb2hsl,
    rgb2hsv: rgb2hsv,
    rgb2hwb: rgb2hwb,
    rgb2cmyk: rgb2cmyk,
    rgb2keyword: rgb2keyword,
    rgb2xyz: rgb2xyz,
    rgb2lab: rgb2lab,
    rgb2lch: rgb2lch,

    hsl2rgb: hsl2rgb,
    hsl2hsv: hsl2hsv,
    hsl2hwb: hsl2hwb,
    hsl2cmyk: hsl2cmyk,
    hsl2keyword: hsl2keyword,

    hsv2rgb: hsv2rgb,
    hsv2hsl: hsv2hsl,
    hsv2hwb: hsv2hwb,
    hsv2cmyk: hsv2cmyk,
    hsv2keyword: hsv2keyword,

    hwb2rgb: hwb2rgb,
    hwb2hsl: hwb2hsl,
    hwb2hsv: hwb2hsv,
    hwb2cmyk: hwb2cmyk,
    hwb2keyword: hwb2keyword,

    cmyk2rgb: cmyk2rgb,
    cmyk2hsl: cmyk2hsl,
    cmyk2hsv: cmyk2hsv,
    cmyk2hwb: cmyk2hwb,
    cmyk2keyword: cmyk2keyword,

    keyword2rgb: keyword2rgb,
    keyword2hsl: keyword2hsl,
    keyword2hsv: keyword2hsv,
    keyword2hwb: keyword2hwb,
    keyword2cmyk: keyword2cmyk,
    keyword2lab: keyword2lab,
    keyword2xyz: keyword2xyz,

    xyz2rgb: xyz2rgb,
    xyz2lab: xyz2lab,
    xyz2lch: xyz2lch,

    lab2xyz: lab2xyz,
    lab2rgb: lab2rgb,
    lab2lch: lab2lch,

    lch2lab: lch2lab,
    lch2xyz: lch2xyz,
    lch2rgb: lch2rgb
  };


  function rgb2hsl(rgb) {
    var r = rgb[0]/255,
        g = rgb[1]/255,
        b = rgb[2]/255,
        min = Math.min(r, g, b),
        max = Math.max(r, g, b),
        delta = max - min,
        h, s, l;

    if (max == min)
      h = 0;
    else if (r == max)
      h = (g - b) / delta;
    else if (g == max)
      h = 2 + (b - r) / delta;
    else if (b == max)
      h = 4 + (r - g)/ delta;

    h = Math.min(h * 60, 360);

    if (h < 0)
      h += 360;

    l = (min + max) / 2;

    if (max == min)
      s = 0;
    else if (l <= 0.5)
      s = delta / (max + min);
    else
      s = delta / (2 - max - min);

    return [h, s * 100, l * 100];
  }

  function rgb2hsv(rgb) {
    var r = rgb[0],
        g = rgb[1],
        b = rgb[2],
        min = Math.min(r, g, b),
        max = Math.max(r, g, b),
        delta = max - min,
        h, s, v;

    if (max == 0)
      s = 0;
    else
      s = (delta/max * 1000)/10;

    if (max == min)
      h = 0;
    else if (r == max)
      h = (g - b) / delta;
    else if (g == max)
      h = 2 + (b - r) / delta;
    else if (b == max)
      h = 4 + (r - g) / delta;

    h = Math.min(h * 60, 360);

    if (h < 0)
      h += 360;

    v = ((max / 255) * 1000) / 10;

    return [h, s, v];
  }

  function rgb2hwb(rgb) {
    var r = rgb[0],
        g = rgb[1],
        b = rgb[2],
        h = rgb2hsl(rgb)[0],
        w = 1/255 * Math.min(r, Math.min(g, b)),
        b = 1 - 1/255 * Math.max(r, Math.max(g, b));

    return [h, w * 100, b * 100];
  }

  function rgb2cmyk(rgb) {
    var r = rgb[0] / 255,
        g = rgb[1] / 255,
        b = rgb[2] / 255,
        c, m, y, k;

    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  }

  function rgb2keyword(rgb) {
    return reverseKeywords[JSON.stringify(rgb)];
  }

  function rgb2xyz(rgb) {
    var r = rgb[0] / 255,
        g = rgb[1] / 255,
        b = rgb[2] / 255;

    // assume sRGB
    r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
    g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
    b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

    var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
    var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
    var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

    return [x * 100, y *100, z * 100];
  }

  function rgb2lab(rgb) {
    var xyz = rgb2xyz(rgb),
          x = xyz[0],
          y = xyz[1],
          z = xyz[2],
          l, a, b;

    x /= 95.047;
    y /= 100;
    z /= 108.883;

    x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
    y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
    z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

    l = (116 * y) - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);

    return [l, a, b];
  }

  function rgb2lch(args) {
    return lab2lch(rgb2lab(args));
  }

  function hsl2rgb(hsl) {
    var h = hsl[0] / 360,
        s = hsl[1] / 100,
        l = hsl[2] / 100,
        t1, t2, t3, rgb, val;

    if (s == 0) {
      val = l * 255;
      return [val, val, val];
    }

    if (l < 0.5)
      t2 = l * (1 + s);
    else
      t2 = l + s - l * s;
    t1 = 2 * l - t2;

    rgb = [0, 0, 0];
    for (var i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * - (i - 1);
      t3 < 0 && t3++;
      t3 > 1 && t3--;

      if (6 * t3 < 1)
        val = t1 + (t2 - t1) * 6 * t3;
      else if (2 * t3 < 1)
        val = t2;
      else if (3 * t3 < 2)
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      else
        val = t1;

      rgb[i] = val * 255;
    }

    return rgb;
  }

  function hsl2hsv(hsl) {
    var h = hsl[0],
        s = hsl[1] / 100,
        l = hsl[2] / 100,
        sv, v;

    if(l === 0) {
        // no need to do calc on black
        // also avoids divide by 0 error
        return [0, 0, 0];
    }

    l *= 2;
    s *= (l <= 1) ? l : 2 - l;
    v = (l + s) / 2;
    sv = (2 * s) / (l + s);
    return [h, sv * 100, v * 100];
  }

  function hsl2hwb(args) {
    return rgb2hwb(hsl2rgb(args));
  }

  function hsl2cmyk(args) {
    return rgb2cmyk(hsl2rgb(args));
  }

  function hsl2keyword(args) {
    return rgb2keyword(hsl2rgb(args));
  }


  function hsv2rgb(hsv) {
    var h = hsv[0] / 60,
        s = hsv[1] / 100,
        v = hsv[2] / 100,
        hi = Math.floor(h) % 6;

    var f = h - Math.floor(h),
        p = 255 * v * (1 - s),
        q = 255 * v * (1 - (s * f)),
        t = 255 * v * (1 - (s * (1 - f))),
        v = 255 * v;

    switch(hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  }

  function hsv2hsl(hsv) {
    var h = hsv[0],
        s = hsv[1] / 100,
        v = hsv[2] / 100,
        sl, l;

    l = (2 - s) * v;
    sl = s * v;
    sl /= (l <= 1) ? l : 2 - l;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  }

  function hsv2hwb(args) {
    return rgb2hwb(hsv2rgb(args))
  }

  function hsv2cmyk(args) {
    return rgb2cmyk(hsv2rgb(args));
  }

  function hsv2keyword(args) {
    return rgb2keyword(hsv2rgb(args));
  }

  // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
  function hwb2rgb(hwb) {
    var h = hwb[0] / 360,
        wh = hwb[1] / 100,
        bl = hwb[2] / 100,
        ratio = wh + bl,
        i, v, f, n;

    // wh + bl cant be > 1
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }

    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 0x01) != 0) {
      f = 1 - f;
    }
    n = wh + f * (v - wh);  // linear interpolation

    switch (i) {
      default:
      case 6:
      case 0: r = v; g = n; b = wh; break;
      case 1: r = n; g = v; b = wh; break;
      case 2: r = wh; g = v; b = n; break;
      case 3: r = wh; g = n; b = v; break;
      case 4: r = n; g = wh; b = v; break;
      case 5: r = v; g = wh; b = n; break;
    }

    return [r * 255, g * 255, b * 255];
  }

  function hwb2hsl(args) {
    return rgb2hsl(hwb2rgb(args));
  }

  function hwb2hsv(args) {
    return rgb2hsv(hwb2rgb(args));
  }

  function hwb2cmyk(args) {
    return rgb2cmyk(hwb2rgb(args));
  }

  function hwb2keyword(args) {
    return rgb2keyword(hwb2rgb(args));
  }

  function cmyk2rgb(cmyk) {
    var c = cmyk[0] / 100,
        m = cmyk[1] / 100,
        y = cmyk[2] / 100,
        k = cmyk[3] / 100,
        r, g, b;

    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  }

  function cmyk2hsl(args) {
    return rgb2hsl(cmyk2rgb(args));
  }

  function cmyk2hsv(args) {
    return rgb2hsv(cmyk2rgb(args));
  }

  function cmyk2hwb(args) {
    return rgb2hwb(cmyk2rgb(args));
  }

  function cmyk2keyword(args) {
    return rgb2keyword(cmyk2rgb(args));
  }


  function xyz2rgb(xyz) {
    var x = xyz[0] / 100,
        y = xyz[1] / 100,
        z = xyz[2] / 100,
        r, g, b;

    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

    // assume sRGB
    r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
      : r = (r * 12.92);

    g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
      : g = (g * 12.92);

    b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
      : b = (b * 12.92);

    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);

    return [r * 255, g * 255, b * 255];
  }

  function xyz2lab(xyz) {
    var x = xyz[0],
        y = xyz[1],
        z = xyz[2],
        l, a, b;

    x /= 95.047;
    y /= 100;
    z /= 108.883;

    x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
    y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
    z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

    l = (116 * y) - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);

    return [l, a, b];
  }

  function xyz2lch(args) {
    return lab2lch(xyz2lab(args));
  }

  function lab2xyz(lab) {
    var l = lab[0],
        a = lab[1],
        b = lab[2],
        x, y, z, y2;

    if (l <= 8) {
      y = (l * 100) / 903.3;
      y2 = (7.787 * (y / 100)) + (16 / 116);
    } else {
      y = 100 * Math.pow((l + 16) / 116, 3);
      y2 = Math.pow(y / 100, 1/3);
    }

    x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);

    z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);

    return [x, y, z];
  }

  function lab2lch(lab) {
    var l = lab[0],
        a = lab[1],
        b = lab[2],
        hr, h, c;

    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  }

  function lab2rgb(args) {
    return xyz2rgb(lab2xyz(args));
  }

  function lch2lab(lch) {
    var l = lch[0],
        c = lch[1],
        h = lch[2],
        a, b, hr;

    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [l, a, b];
  }

  function lch2xyz(args) {
    return lab2xyz(lch2lab(args));
  }

  function lch2rgb(args) {
    return lab2rgb(lch2lab(args));
  }

  function keyword2rgb(keyword) {
    return cssKeywords[keyword];
  }

  function keyword2hsl(args) {
    return rgb2hsl(keyword2rgb(args));
  }

  function keyword2hsv(args) {
    return rgb2hsv(keyword2rgb(args));
  }

  function keyword2hwb(args) {
    return rgb2hwb(keyword2rgb(args));
  }

  function keyword2cmyk(args) {
    return rgb2cmyk(keyword2rgb(args));
  }

  function keyword2lab(args) {
    return rgb2lab(keyword2rgb(args));
  }

  function keyword2xyz(args) {
    return rgb2xyz(keyword2rgb(args));
  }

  var cssKeywords = {
    aliceblue:  [240,248,255],
    antiquewhite: [250,235,215],
    aqua: [0,255,255],
    aquamarine: [127,255,212],
    azure:  [240,255,255],
    beige:  [245,245,220],
    bisque: [255,228,196],
    black:  [0,0,0],
    blanchedalmond: [255,235,205],
    blue: [0,0,255],
    blueviolet: [138,43,226],
    brown:  [165,42,42],
    burlywood:  [222,184,135],
    cadetblue:  [95,158,160],
    chartreuse: [127,255,0],
    chocolate:  [210,105,30],
    coral:  [255,127,80],
    cornflowerblue: [100,149,237],
    cornsilk: [255,248,220],
    crimson:  [220,20,60],
    cyan: [0,255,255],
    darkblue: [0,0,139],
    darkcyan: [0,139,139],
    darkgoldenrod:  [184,134,11],
    darkgray: [169,169,169],
    darkgreen:  [0,100,0],
    darkgrey: [169,169,169],
    darkkhaki:  [189,183,107],
    darkmagenta:  [139,0,139],
    darkolivegreen: [85,107,47],
    darkorange: [255,140,0],
    darkorchid: [153,50,204],
    darkred:  [139,0,0],
    darksalmon: [233,150,122],
    darkseagreen: [143,188,143],
    darkslateblue:  [72,61,139],
    darkslategray:  [47,79,79],
    darkslategrey:  [47,79,79],
    darkturquoise:  [0,206,209],
    darkviolet: [148,0,211],
    deeppink: [255,20,147],
    deepskyblue:  [0,191,255],
    dimgray:  [105,105,105],
    dimgrey:  [105,105,105],
    dodgerblue: [30,144,255],
    firebrick:  [178,34,34],
    floralwhite:  [255,250,240],
    forestgreen:  [34,139,34],
    fuchsia:  [255,0,255],
    gainsboro:  [220,220,220],
    ghostwhite: [248,248,255],
    gold: [255,215,0],
    goldenrod:  [218,165,32],
    gray: [128,128,128],
    green:  [0,128,0],
    greenyellow:  [173,255,47],
    grey: [128,128,128],
    honeydew: [240,255,240],
    hotpink:  [255,105,180],
    indianred:  [205,92,92],
    indigo: [75,0,130],
    ivory:  [255,255,240],
    khaki:  [240,230,140],
    lavender: [230,230,250],
    lavenderblush:  [255,240,245],
    lawngreen:  [124,252,0],
    lemonchiffon: [255,250,205],
    lightblue:  [173,216,230],
    lightcoral: [240,128,128],
    lightcyan:  [224,255,255],
    lightgoldenrodyellow: [250,250,210],
    lightgray:  [211,211,211],
    lightgreen: [144,238,144],
    lightgrey:  [211,211,211],
    lightpink:  [255,182,193],
    lightsalmon:  [255,160,122],
    lightseagreen:  [32,178,170],
    lightskyblue: [135,206,250],
    lightslategray: [119,136,153],
    lightslategrey: [119,136,153],
    lightsteelblue: [176,196,222],
    lightyellow:  [255,255,224],
    lime: [0,255,0],
    limegreen:  [50,205,50],
    linen:  [250,240,230],
    magenta:  [255,0,255],
    maroon: [128,0,0],
    mediumaquamarine: [102,205,170],
    mediumblue: [0,0,205],
    mediumorchid: [186,85,211],
    mediumpurple: [147,112,219],
    mediumseagreen: [60,179,113],
    mediumslateblue:  [123,104,238],
    mediumspringgreen:  [0,250,154],
    mediumturquoise:  [72,209,204],
    mediumvioletred:  [199,21,133],
    midnightblue: [25,25,112],
    mintcream:  [245,255,250],
    mistyrose:  [255,228,225],
    moccasin: [255,228,181],
    navajowhite:  [255,222,173],
    navy: [0,0,128],
    oldlace:  [253,245,230],
    olive:  [128,128,0],
    olivedrab:  [107,142,35],
    orange: [255,165,0],
    orangered:  [255,69,0],
    orchid: [218,112,214],
    palegoldenrod:  [238,232,170],
    palegreen:  [152,251,152],
    paleturquoise:  [175,238,238],
    palevioletred:  [219,112,147],
    papayawhip: [255,239,213],
    peachpuff:  [255,218,185],
    peru: [205,133,63],
    pink: [255,192,203],
    plum: [221,160,221],
    powderblue: [176,224,230],
    purple: [128,0,128],
    rebeccapurple: [102, 51, 153],
    red:  [255,0,0],
    rosybrown:  [188,143,143],
    royalblue:  [65,105,225],
    saddlebrown:  [139,69,19],
    salmon: [250,128,114],
    sandybrown: [244,164,96],
    seagreen: [46,139,87],
    seashell: [255,245,238],
    sienna: [160,82,45],
    silver: [192,192,192],
    skyblue:  [135,206,235],
    slateblue:  [106,90,205],
    slategray:  [112,128,144],
    slategrey:  [112,128,144],
    snow: [255,250,250],
    springgreen:  [0,255,127],
    steelblue:  [70,130,180],
    tan:  [210,180,140],
    teal: [0,128,128],
    thistle:  [216,191,216],
    tomato: [255,99,71],
    turquoise:  [64,224,208],
    violet: [238,130,238],
    wheat:  [245,222,179],
    white:  [255,255,255],
    whitesmoke: [245,245,245],
    yellow: [255,255,0],
    yellowgreen:  [154,205,50]
  };

  var reverseKeywords = {};
  for (var key in cssKeywords) {
    reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
  }

  var convert = function() {
     return new Converter();
  };

  for (var func in conversions) {
    // export Raw versions
    convert[func + "Raw"] =  (function(func) {
      // accept array or plain args
      return function(arg) {
        if (typeof arg == "number")
          arg = Array.prototype.slice.call(arguments);
        return conversions[func](arg);
      }
    })(func);

    var pair = /(\w+)2(\w+)/.exec(func),
        from = pair[1],
        to = pair[2];

    // export rgb2hsl and ["rgb"]["hsl"]
    convert[from] = convert[from] || {};

    convert[from][to] = convert[func] = (function(func) { 
      return function(arg) {
        if (typeof arg == "number")
          arg = Array.prototype.slice.call(arguments);
        
        var val = conversions[func](arg);
        if (typeof val == "string" || val === undefined)
          return val; // keyword

        for (var i = 0; i < val.length; i++)
          val[i] = Math.round(val[i]);
        return val;
      }
    })(func);
  }


  /* Converter does lazy conversion and caching */
  var Converter = function() {
     this.convs = {};
  };

  /* Either get the values for a space or
    set the values for a space, depending on args */
  Converter.prototype.routeSpace = function(space, args) {
     var values = args[0];
     if (values === undefined) {
        // color.rgb()
        return this.getValues(space);
     }
     // color.rgb(10, 10, 10)
     if (typeof values == "number") {
        values = Array.prototype.slice.call(args);        
     }

     return this.setValues(space, values);
  };
    
  /* Set the values for a space, invalidating cache */
  Converter.prototype.setValues = function(space, values) {
     this.space = space;
     this.convs = {};
     this.convs[space] = values;
     return this;
  };

  /* Get the values for a space. If there's already
    a conversion for the space, fetch it, otherwise
    compute it */
  Converter.prototype.getValues = function(space) {
     var vals = this.convs[space];
     if (!vals) {
        var fspace = this.space,
            from = this.convs[fspace];
        vals = convert[fspace][space](from);

        this.convs[space] = vals;
     }
    return vals;
  };

  ["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
     Converter.prototype[space] = function(vals) {
        return this.routeSpace(space, arguments);
     };
  });

  var colorConvert = convert;

  var parseColor = function (cstr) {
      var m, conv, parts, alpha;
      if (m = /^((?:rgb|hs[lv]|cmyk|xyz|lab)a?)\s*\(([^\)]*)\)/.exec(cstr)) {
          var name = m[1];
          var base = name.replace(/a$/, '');
          var size$$1 = base === 'cmyk' ? 4 : 3;
          conv = colorConvert[base];
          
          parts = m[2].replace(/^\s+|\s+$/g, '')
              .split(/\s*,\s*/)
              .map(function (x, i) {
                  if (/%$/.test(x) && i === size$$1) {
                      return parseFloat(x) / 100;
                  }
                  else if (/%$/.test(x)) {
                      return parseFloat(x);
                  }
                  return parseFloat(x);
              })
          ;
          if (name === base) parts.push(1);
          alpha = parts[size$$1] === undefined ? 1 : parts[size$$1];
          parts = parts.slice(0, size$$1);
          
          conv[base] = function () { return parts };
      }
      else if (/^#[A-Fa-f0-9]+$/.test(cstr)) {
          var base = cstr.replace(/^#/,'');
          var size$$1 = base.length;
          conv = colorConvert.rgb;
          parts = base.split(size$$1 === 3 ? /(.)/ : /(..)/);
          parts = parts.filter(Boolean)
              .map(function (x) {
                  if (size$$1 === 3) {
                      return parseInt(x + x, 16);
                  }
                  else {
                      return parseInt(x, 16)
                  }
              })
          ;
          alpha = 1;
          conv.rgb = function () { return parts };
          if (!parts[0]) parts[0] = 0;
          if (!parts[1]) parts[1] = 0;
          if (!parts[2]) parts[2] = 0;
      }
      else {
          conv = colorConvert.keyword;
          conv.keyword = function () { return cstr };
          parts = cstr;
          alpha = 1;
      }
      
      var res = {
          rgb: undefined,
          hsl: undefined,
          hsv: undefined,
          cmyk: undefined,
          keyword: undefined,
          hex: undefined
      };
      try { res.rgb = conv.rgb(parts); } catch (e) {}
      try { res.hsl = conv.hsl(parts); } catch (e) {}
      try { res.hsv = conv.hsv(parts); } catch (e) {}
      try { res.cmyk = conv.cmyk(parts); } catch (e) {}
      try { res.keyword = conv.keyword(parts); } catch (e) {}
      
      if (res.rgb) res.hex = '#' + res.rgb.map(function (x) {
          var s = x.toString(16);
          if (s.length === 1) return '0' + s;
          return s;
      }).join('');
      
      if (res.rgb) res.rgba = res.rgb.concat(alpha);
      if (res.hsl) res.hsla = res.hsl.concat(alpha);
      if (res.hsv) res.hsva = res.hsv.concat(alpha);
      if (res.cmyk) res.cmyka = res.cmyk.concat(alpha);
      
      return res;
  };

  /**
   * @return {VlStyle[]}
   */

  function defaultStyle() {
    return [{
      fillColor: [255, 255, 255, 0.4],
      strokeColor: '#3399CC',
      strokeWidth: 1.25,
      imageRadius: 5
    }];
  }
  /**
   * @return {Object<GEOMETRY_TYPE, VlStyle[]>}
   */

  function defaultEditStyle() {
    /** @type {Object<GEOMETRY_TYPE, VlStyle[]>} */
    var styles = {};
    var white = [255, 255, 255, 1];
    var blue = [0, 153, 255, 1];
    var width = 3;
    styles[GEOMETRY_TYPE.LINE_STRING] = [{
      strokeColor: white,
      strokeWidth: width + 2
    }, {
      strokeColor: blue,
      strokeWidth: width
    }];
    styles[GEOMETRY_TYPE.MULTI_LINE_STRING] = styles[GEOMETRY_TYPE.LINE_STRING];
    styles[GEOMETRY_TYPE.POLYGON] = [{
      fillColor: [255, 255, 255, 0.5]
    }].concat(styles[GEOMETRY_TYPE.LINE_STRING]);
    styles[GEOMETRY_TYPE.MULTI_POLYGON] = styles[GEOMETRY_TYPE.POLYGON];
    styles[GEOMETRY_TYPE.CIRCLE] = styles[GEOMETRY_TYPE.POLYGON].concat(styles[GEOMETRY_TYPE.LINE_STRING]);
    styles[GEOMETRY_TYPE.POINT] = [{
      imageRadius: width * 2,
      fillColor: blue,
      strokeColor: white,
      strokeWidth: width / 2,
      zIndex: Infinity
    }];
    styles[GEOMETRY_TYPE.MULTI_POINT] = styles[GEOMETRY_TYPE.POINT];
    styles[GEOMETRY_TYPE.GEOMETRY_COLLECTION] = styles[GEOMETRY_TYPE.POLYGON].concat(styles[GEOMETRY_TYPE.LINE_STRING], styles[GEOMETRY_TYPE.POINT]);
    return styles;
  }

  var isEmpty$3 = function isEmpty$$1(x) {
    if (x == null) return true;
    if (typeof x === 'number') return false;
    return (typeof x === 'string' || Array.isArray(x)) && !x.length || !Object.keys(x).length;
  };
  /**
   * @param {VlStyle} vlStyle
   * @return {Style|undefined}
   */


  function createStyle(vlStyle) {
    if (isEmpty$3(vlStyle)) return;
    var olStyle = {
      text: createTextStyle(vlStyle),
      fill: createFillStyle(vlStyle),
      stroke: createStrokeStyle(vlStyle),
      image: createImageStyle(vlStyle),
      geometry: createGeomStyle(vlStyle),
      zIndex: vlStyle.zIndex
    };

    if (!isEmpty$3(olStyle)) {
      return new Style(olStyle);
    }
  }

  var addPrefix = function addPrefix(prefix) {
    return function (str) {
      return prefix + (prefix ? upperFirst(str) : str);
    };
  };
  /**
   * @param {*} color
   * @returns {*}
   */


  function normalizeColor(color) {
    var c = color;

    if (typeof color === 'string') {
      c = parseColor(color).rgba;
    }

    return c;
  }
  /**
   * @param {VlStyle} vlStyle
   * @param {string} [prefix]
   * @returns {Fill|undefined}
   */

  function createFillStyle(vlStyle) {
    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var prefixKey = addPrefix(prefix);
    var keys = ['fillColor'].map(prefixKey);
    var compiledKey = prefixKey('fill'); // check on already compiled style existence

    if (vlStyle[compiledKey] instanceof Fill) return vlStyle[compiledKey];
    var fillStyle = reduce(vlStyle, function (style, value, name) {
      if (keys.includes(name) === false) {
        return style;
      }

      name = lowerFirst(name.replace(new RegExp(prefixKey('fill')), ''));

      if (name === 'color') {
        value = normalizeColor(value);
      }

      style[name] = value;
      return style;
    }, {});

    if (!isEmpty$3(fillStyle)) {
      return new Fill(fillStyle);
    }
  }
  /**
   * @param {VlStyle} vlStyle
   * @param {string} [prefix]
   * @returns {Stroke|undefined}
   */

  function createStrokeStyle(vlStyle) {
    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var prefixKey = addPrefix(prefix);
    var keys = ['strokeColor', 'strokeWidth', 'strokeDash', 'strokeCap', 'strokeJoin'].map(prefixKey);
    var compiledKey = prefixKey('stroke');
    if (vlStyle[compiledKey] instanceof Stroke) return vlStyle[compiledKey];
    var strokeStyle = reduce(vlStyle, function (style, value, name) {
      if (keys.includes(name) === false) {
        return style;
      }

      switch (name) {
        case prefixKey('strokeColor'):
        case prefixKey('strokeWidth'):
          name = lowerFirst(name.replace(new RegExp(prefixKey('stroke')), ''));
          break;

        case prefixKey('strokeDash'):
        case prefixKey('strokeCap'):
        case prefixKey('strokeJoin'):
          name = 'line' + name.replace(new RegExp(prefixKey('stroke')), '');
          break;
      }

      if (name === 'color') {
        value = normalizeColor(value);
      }

      style[name] = value;
      return style;
    }, {});

    if (!isEmpty$3(strokeStyle)) {
      return new Stroke(strokeStyle);
    }
  }
  /**
   * @param {VlStyle} vlStyle
   * @returns {Image|undefined}
   * @todo split to separate circle, regShape, Icon
   */

  function createImageStyle(vlStyle) {
    if (isEmpty$3(vlStyle.imageSrc) && isEmpty$3(vlStyle.image) && isEmpty$3(vlStyle.imagePoints) && !isNumeric(vlStyle.imageRadius)) {
      return;
    }

    if (vlStyle.image instanceof ImageStyle) return vlStyle.image;
    var imageStyle, Ctor;

    if (!isEmpty$3(vlStyle.imageSrc) || !isEmpty$3(vlStyle.image)) {
      // icon construction
      Ctor = Icon; // then create Icon options

      imageStyle = _objectSpread({}, vlStyle, {
        anchor: vlStyle.imageAnchor,
        anchorOrigin: vlStyle.imageAnchorOrigin,
        color: vlStyle.imageColor,
        offset: vlStyle.imageOffset,
        offsetOrigin: vlStyle.imageOffsetOrigin,
        opacity: vlStyle.imageOpacity,
        scale: vlStyle.imageScale,
        rotation: vlStyle.imageRotation,
        size: vlStyle.imageSize,
        img: vlStyle.image,
        imgSize: vlStyle.imageImgSize,
        src: vlStyle.imageSrc,
        crossOrigin: vlStyle.imageCrossOrigin
      });
    } else if (vlStyle.imagePoints != null) {
      // regular shape construction
      Ctor = RegularShape; // create RegularShape options

      imageStyle = _objectSpread({}, vlStyle, {
        points: vlStyle.imagePoints,
        radius: vlStyle.imageRadius,
        radius1: vlStyle.imageRadius1,
        radius2: vlStyle.imageRadius2,
        angle: vlStyle.imageAngle,
        rotation: vlStyle.imageRotation
      });
    } else {
      // circle construction
      Ctor = Circle$1; // create Circle options

      imageStyle = _objectSpread({}, vlStyle, {
        radius: vlStyle.imageRadius
      });
    }

    imageStyle = _objectSpread({}, imageStyle, {
      fill: createFillStyle(vlStyle, 'image') || createFillStyle(vlStyle),
      stroke: createStrokeStyle(vlStyle, 'image') || createStrokeStyle(vlStyle),
      snapToPixel: true
    });

    if (!isEmpty$3(imageStyle)) {
      return new Ctor(imageStyle);
    }
  }
  /**
   * @param {VlStyle} vlStyle
   * @returns {Text|undefined}
   */

  function createTextStyle(vlStyle) {
    // noinspection JSValidateTypes
    if (vlStyle.text == null) return;
    if (vlStyle.text instanceof Text) return vlStyle.text;
    var textStyle = {
      text: vlStyle.text
    };
    var fontSize = vlStyle.textFontSize ? vlStyle.textFontSize + 'px' : undefined;
    var font = ['normal', fontSize, vlStyle.textFont].filter(function (x) {
      return !!x;
    }).join(' ');
    Object.assign(textStyle, pick(['textAlign', 'textBaseline'], vlStyle), {
      font: font,
      fill: createFillStyle(vlStyle, 'text') || createFillStyle(vlStyle),
      stroke: createStrokeStyle(vlStyle, 'text') || createStrokeStyle(vlStyle),
      scale: vlStyle.textScale,
      rotation: vlStyle.textRotation,
      offsetX: vlStyle.textOffsetX,
      offsetY: vlStyle.textOffsetY,
      rotateWithView: vlStyle.textRotateWithView,
      padding: vlStyle.textPadding,
      maxAngle: vlStyle.textMaxAngle,
      overflow: vlStyle.textOverflow,
      placement: vlStyle.textPlacement,
      backgroundFill: createFillStyle(vlStyle, 'textBackground'),
      backgroundStroke: createStrokeStyle(vlStyle, 'textBackground')
    });

    if (!isEmpty$3(textStyle)) {
      return new Text(textStyle);
    }
  }
  /**
   * @param {VlStyle} vlStyle
   * @return {Geometry|function|undefined}
   */

  function createGeomStyle(vlStyle) {
    if (isFunction(vlStyle.geom)) {
      return function __styleGeomFunc(feature) {
        return vlStyle.geom(feature, geomHelper);
      };
    }

    return vlStyle.geom;
  }
  /**
   * @typedef {Style|Image|Fill|Stroke|Text|StyleFunction} OlStyle
   */

  /**
   * @typedef {Object} VlStyle
   *
   * Shared
   * @property {string|number[]|undefined} fillColor
   * @property {string|number[]|undefined} strokeColor
   * @property {number|undefined} strokeWidth
   * @property {number[]|undefined} strokeDash
   * @property {string|undefined} strokeCap
   * @property {string|undefined} strokeJoin
   * @property {number|undefined} zIndex
   * @property {Fill|undefined} fill
   * @property {Stroke|undefined} stroke
   *
   * Text only
   * @property {string|Text|undefined} text
   * @property {string|undefined} textFont
   * @property {number|undefined} textFontSize
   * @property {string|number[]|undefined} textFillColor
   * @property {string|number[]|undefined} textStrokeColor
   * @property {number|undefined} textStrokeWidth
   * @property {number[]|undefined} textStrokeDash
   * @property {string|undefined} textStrokeCap
   * @property {string|undefined} textStrokeJoin
   * @property {number|undefined} textScale
   * @property {string|undefined} textAlign
   * @property {number|undefined} textRotation
   * @property {number|undefined} textOffsetX
   * @property {number|undefined} textOffsetY
   * @property {Stroke|undefined} textStroke
   * @property {Fill|undefined} textFill
   * @property {boolean|undefined} textRotateWithView
   * @property {number[]|undefined} textPadding
   * @property {number|undefined} textMaxAngle
   * @property {boolean|undefined} textOverflow
   * @property {string|undefined} textPlacement
   * @property {string|undefined} textBaseline
   * @property {Fill|undefined} textBackgroundFillColor
   * @property {Stroke|undefined} textBackgroundStrokeColor
   * @property {Stroke|undefined} textBackgroundStrokeWidth
   * @property {Stroke|undefined} textBackgroundStrokeDash
   * @property {Stroke|undefined} textBackgroundStrokeCap
   * @property {Stroke|undefined} textBackgroundStrokeJoin
   *
   * Image only
   * @property {Image|undefined} image
   * @property {string|undefined} imageSrc
   * @property {number[]|undefined} imageSize
   * @property {number[]|undefined} imageImgSize
   * @property {number|undefined} imageOffset
   * @property {number[]|undefined} imageAnchor
   * @property {number|undefined} imageScale
   * @property {number|undefined} imageRotation
   * @property {number|undefined} imageRadius
   * @property {number|undefined} imageRadius1
   * @property {number|undefined} imageRadius2
   * @property {number|undefined} imagePoints
   * @property {number|undefined} imageAngle
   * @property {number|undefined} imageOpacity
   * @property {string|number[]|undefined} imageFillColor
   * @property {string|number[]|undefined} imageStrokeColor
   * @property {number|undefined} imageStrokeWidth
   * @property {number[]|undefined} imageStrokeDash
   * @property {string|undefined} imageStrokeCap
   * @property {string|undefined} imageStrokeJoin
   * @property {IconOrigin|undefined} imageAnchorOrigin
   * @property {ColorLike|undefined} imageColor
   * @property {IconOrigin|undefined} imageOffsetOrigin
   * @property {Stroke|undefined} imageStroke
   * @property {Fill|undefined} imageFill
   * @property {string|undefined} imageCrossOrigin
   *
   * @property {Geometry|function|undefined} geom Coordinates should be in map projection
   */

  /**
   * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
   * @param {Extent} extent Extent.
   * @param {number=} maxZoom Maximum zoom level (default is
   *     ol.DEFAULT_MAX_ZOOM).
   * @param {number|Size=} tileSize Tile size (default uses
   *     ol.DEFAULT_TILE_SIZE).
   * @return {!Array.<number>} Resolutions array.
   * @see https://github.com/openlayers/openlayers/blob/master/src/ol/tilegrid.js#L104
   */

  function resolutionsFromExtent$1(extent$$1) {
    var maxZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_ZOOM;
    var tileSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TILE_SIZE;
    tileSize = size.toSize(tileSize);
    var height = extent.getHeight(extent$$1);
    var width = extent.getWidth(extent$$1);
    var maxResolution = Math.max(width / tileSize[0], height / tileSize[1]);
    var length = maxZoom + 1;
    var resolutions = new Array(length);

    for (var z = 0; z < length; ++z) {
      resolutions[z] = maxResolution / Math.pow(2, z);
    }

    return resolutions;
  }
  /**
   * @param {Extent} extent Extent.
   * @param {number=} maxZoom Maximum zoom level (default is MAX_ZOOM).
   * @param {number|Size=} tileSize Tile size (default uses TILE_SIZE).
   * @param {string} [corner] Extent corner (default is EXTENT_CORNER.TOP_LEFT).
   * @return {TileGrid} TileGrid instance.
   * @see https://github.com/openlayers/openlayers/blob/master/src/ol/tilegrid.js#L58
   */

  function createGridForExtent(extent$$1) {
    var maxZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_ZOOM;
    var tileSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TILE_SIZE;
    var corner = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : EXTENT_CORNER.TOP_LEFT;
    var resolutions = resolutionsFromExtent$1(extent$$1, maxZoom, tileSize);
    return new TileGrid({
      extent: extent$$1,
      origin: getExtentCorner(extent$$1, corner),
      resolutions: resolutions,
      tileSize: tileSize
    });
  }
  /**
   * @param {ProjectionLike} projection Projection.
   * @param {number=} maxZoom Maximum zoom level (default is
   *     ol.DEFAULT_MAX_ZOOM).
   * @param {number|Size=} tileSize Tile size (default uses ol.DEFAULT_TILE_SIZE).
   * @param {string} corner Extent corner (default is
   *     ol.extent.Corner.BOTTOM_LEFT).
   * @return {TileGrid} TileGrid instance.
   * @see https://github.com/openlayers/openlayers/blob/master/src/ol/tilegrid.js#L135
   */

  function createGridForProjection(projection) {
    var maxZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_ZOOM;
    var tileSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TILE_SIZE;
    var corner = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : EXTENT_CORNER.BOTTOM_LEFT;
    return createGridForExtent(createExtentFromProjection(projection), maxZoom, tileSize, corner);
  }



  var olExt = /*#__PURE__*/Object.freeze({
    EPSG_4326: EPSG_4326,
    EPSG_3857: EPSG_3857,
    MAX_ZOOM: MAX_ZOOM,
    MIN_ZOOM: MIN_ZOOM,
    TILE_SIZE: TILE_SIZE,
    TILE_FORMAT: TILE_FORMAT,
    ZOOM_FACTOR: ZOOM_FACTOR,
    CACHE_SIZE: CACHE_SIZE,
    PIXEL_RATIO: PIXEL_RATIO,
    CROSS_ORIGIN: CROSS_ORIGIN,
    REPROJ_ERR_THRESHOLD: REPROJ_ERR_THRESHOLD,
    EARTH_RADIUS: EARTH_RADIUS,
    RENDERER_TYPE: RENDERER_TYPE,
    GEOMETRY_TYPE: GEOMETRY_TYPE,
    EXTENT_CORNER: EXTENT_CORNER,
    PROJ_UNIT: PROJ_UNIT,
    OVERLAY_POSITIONING: OVERLAY_POSITIONING,
    WMS_VERSION: WMS_VERSION,
    WMTS_VERSION: WMTS_VERSION,
    WMTS_REQUEST_ENCODING: WMTS_REQUEST_ENCODING,
    WMTS_FORMAT: WMTS_FORMAT,
    LAYER_PROP: LAYER_PROP,
    ARCGIS_EXTRA_PARAMS: ARCGIS_EXTRA_PARAMS,
    getExtentCenter: extent.getCenter,
    getExtentWidth: extent.getWidth,
    getExtentHeight: extent.getHeight,
    boundingExtent: extent.boundingExtent,
    createOrUpdateExtent: createOrUpdateExtent,
    getExtentCorner: getExtentCorner,
    createExtentFromProjection: createExtentFromProjection,
    getFeatureId: getFeatureId,
    setFeatureId: setFeatureId,
    initializeFeature: initializeFeature,
    mergeFeatures: mergeFeatures,
    createGeoJsonFmt: createGeoJsonFmt,
    createTopoJsonFmt: createTopoJsonFmt,
    createMvtFmt: createMvtFmt,
    writeGeoJsonFeature: writeGeoJsonFeature,
    readGeoJsonFeature: readGeoJsonFeature,
    writeGeoJsonGeometry: writeGeoJsonGeometry,
    readGeoJsonGeometry: readGeoJsonGeometry,
    readProjection: readProjection,
    createPointGeom: createPointGeom,
    createLineGeom: createLineGeom,
    createPolygonGeom: createPolygonGeom,
    createMultiPointGeom: createMultiPointGeom,
    createMultiLineGeom: createMultiLineGeom,
    createMultiPolygonGeom: createMultiPolygonGeom,
    createGeomCollection: createGeomCollection,
    createCircularPolygon: createCircularPolygon,
    isMultiGeom: isMultiGeom,
    toSimpleGeom: toSimpleGeom,
    findPointOnSurface: findPointOnSurface,
    getInteractionId: getInteractionId,
    setInteractionId: setInteractionId,
    getInteractionPriority: getInteractionPriority,
    setInteractionPriority: setInteractionPriority,
    initializeInteraction: initializeInteraction,
    getLayerId: getLayerId,
    setLayerId: setLayerId,
    initializeLayer: initializeLayer,
    loadingAll: loadingstrategy.all,
    loadingBBox: loadingstrategy.bbox,
    loadingTile: loadingstrategy.tile,
    getMapDataProjection: getMapDataProjection,
    setMapDataProjection: setMapDataProjection,
    getOverlayId: getOverlayId,
    setOverlayId: setOverlayId,
    initializeOverlay: initializeOverlay,
    transform: proj.transform,
    transformExtent: proj.transformExtent,
    getProj: proj.get,
    addProj: proj.addProjection,
    createProj: createProj,
    pointToLonLat: pointToLonLat,
    pointFromLonLat: pointFromLonLat,
    transformPoint: transformPoint,
    lineToLonLat: lineToLonLat,
    lineFromLonLat: lineFromLonLat,
    transformLine: transformLine,
    polygonToLonLat: polygonToLonLat,
    polygonFromLonLat: polygonFromLonLat,
    transformPolygon: transformPolygon,
    multiPointToLonLat: multiPointToLonLat,
    multiPointFromLonLat: multiPointFromLonLat,
    transformMultiPoint: transformMultiPoint,
    multiLineToLonLat: multiLineToLonLat,
    multiLineFromLonLat: multiLineFromLonLat,
    transformMultiLine: transformMultiLine,
    multiPolygonToLonLat: multiPolygonToLonLat,
    multiPolygonFromLonLat: multiPolygonFromLonLat,
    transformMultiPolygon: transformMultiPolygon,
    transforms: transforms,
    extentFromLonLat: extentFromLonLat,
    extentToLonLat: extentToLonLat,
    defaultStyle: defaultStyle,
    defaultEditStyle: defaultEditStyle,
    createStyle: createStyle,
    normalizeColor: normalizeColor,
    createFillStyle: createFillStyle,
    createStrokeStyle: createStrokeStyle,
    createImageStyle: createImageStyle,
    createTextStyle: createTextStyle,
    createGeomStyle: createGeomStyle,
    createXyzGrid: tilegrid.createXYZ,
    resolutionsFromExtent: resolutionsFromExtent$1,
    createGridForExtent: createGridForExtent,
    createGridForProjection: createGridForProjection,
    getObjectUid: getObjectUid,
    isCollection: isCollection,
    isVectorSource: isVectorSource,
    isCircle: isCircle,
    cleanSourceExtraParams: cleanSourceExtraParams
  });

  /**
   * Constructs watch hash for multiple properties.
   * @param {string[]} props
   * @param {function|Object} watcherFactory
   */
  function makeWatchers(props, watcherFactory) {
    return props.reduce(function (hash, prop) {
      hash[prop] = watcherFactory(prop);
      return hash;
    }, {});
  }
  function extractChildren(slots) {
    var slotNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return Object.keys(slots).reduce(function (all, name) {
      if (!slotNames.length || slotNames.includes(name)) {
        all = all.concat(slots[name]);
      }

      return all;
    }, []);
  }

  var serialize = function serialize(value) {
    if (value == null) return value;
    return _typeof(value) === 'object' ? JSON.stringify(value) : value;
  };

  var arcgisSource = {
    props: {
      /**
       * Extra ArcGIS request parameters
       * todo rename to extraParams
       */
      extParams: Object,
      format: {
        type: String,
        default: 'PNG32'
      },
      layers: String,
      layerDefs: [Object, String],
      dynamicLayers: [Object, String],
      dpi: Number,
      transparent: {
        type: Boolean,
        default: true
      },
      time: String,
      layerTimeOptions: [Object, String],
      gdbVersion: String,
      mapScale: String,
      rotation: Number,
      datumTransformations: [Array, String],
      mapRangeValues: [Array, String],
      layerRangeValues: [Array, String],
      layerParameterValues: [Array, String],
      historicMoment: Number
    },
    computed: {
      // todo rename to cleanExtraParams
      cleanExtParams: function cleanExtParams() {
        return this.extParams ? cleanSourceExtraParams(this.extParams, ARCGIS_EXTRA_PARAMS) : undefined;
      },
      allParams: function allParams() {
        return _objectSpread({}, this.cleanExtParams, {
          LAYERS: this.layers,
          FORMAT: this.format,
          LAYERDEFS: serialize(this.layerDefs),
          DYNAMICLAYERS: serialize(this.dynamicLayers),
          DPI: this.dpi,
          TRANSPARENT: this.transparent,
          TIME: serialize(this.time),
          LAYERTIMEOPTIONS: serialize(this.layerTimeOptions),
          GDBVERSION: this.gdbVersion,
          MAPSCALE: this.mapScale,
          ROTATION: this.rotation,
          DATUMTRANSFORMATIONS: serialize(this.datumTransformations),
          MAPRANGEVALUES: serialize(this.mapRangeValues),
          LAYERRANGEVALUES: serialize(this.layerRangeValues),
          LAYERPARAMETERVALUES: serialize(this.layerParameterValues),
          HISTORICMOMENT: serialize(this.historicMoment)
        });
      }
    },
    watch: _objectSpread({}, makeWatchers(['layers', 'format', 'dpi', 'transparent', 'gdbVersion', 'mapScale', 'rotation', 'historicMoment'], function (prop) {
      return function (value) {
        if (!this.$source) return;
        prop = prop.toUpperCase();
        var params = this.$source.getParams() || {};
        if (isEqual(value, params[value])) return;
        this.$source.updateParams(_defineProperty({}, prop, value));
      };
    }), makeWatchers(['layerDefs', 'dynamicLayers', 'time', 'layerTimeOptions', 'datumTransformations', 'mapRangeValues', 'layerRangeValues', 'layerParameterValues'], function (prop) {
      return function (value) {
        if (!this.$source) return;
        prop = prop.toUpperCase();
        value = serialize(value);
        var params = this.$source.getParams() || {};
        if (isEqual(value, params[value])) return;
        this.$source.updateParams(_defineProperty({}, prop, value));
      };
    }), {
      extParams: function extParams(value) {
        if (!this.$source) return;
        var params = pick(this.$source.getParams() || {}, Object.keys(value));
        if (isEqual(value, params)) return;
        this.$source.updateParams(value ? cleanSourceExtraParams(value) : undefined);
      }
    })
  };

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isFunction$1(x) {
      return typeof x === 'function';
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var _enable_super_gross_mode_that_will_cause_bad_things = false;
  var config = {
      Promise: undefined,
      set useDeprecatedSynchronousErrorHandling(value) {
          if (value) {
              var error = /*@__PURE__*/ new Error();
              /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
          }
          else if (_enable_super_gross_mode_that_will_cause_bad_things) {
              /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
          }
          _enable_super_gross_mode_that_will_cause_bad_things = value;
      },
      get useDeprecatedSynchronousErrorHandling() {
          return _enable_super_gross_mode_that_will_cause_bad_things;
      },
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function hostReportError(err) {
      setTimeout(function () { throw err; });
  }

  /** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
  var empty = {
      closed: true,
      next: function (value) { },
      error: function (err) {
          if (config.useDeprecatedSynchronousErrorHandling) {
              throw err;
          }
          else {
              hostReportError(err);
          }
      },
      complete: function () { }
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var isArray$1 = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isObject$1(x) {
      return x != null && typeof x === 'object';
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var errorObject = { e: {} };

  /** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */
  var tryCatchTarget;
  function tryCatcher() {
      try {
          return tryCatchTarget.apply(this, arguments);
      }
      catch (e) {
          errorObject.e = e;
          return errorObject;
      }
  }
  function tryCatch(fn) {
      tryCatchTarget = fn;
      return tryCatcher;
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function UnsubscriptionErrorImpl(errors) {
      Error.call(this);
      this.message = errors ?
          errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
      this.name = 'UnsubscriptionError';
      this.errors = errors;
      return this;
  }
  UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
  var UnsubscriptionError = UnsubscriptionErrorImpl;

  /** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */
  var Subscription = /*@__PURE__*/ (function () {
      function Subscription(unsubscribe) {
          this.closed = false;
          this._parent = null;
          this._parents = null;
          this._subscriptions = null;
          if (unsubscribe) {
              this._unsubscribe = unsubscribe;
          }
      }
      Subscription.prototype.unsubscribe = function () {
          var hasErrors = false;
          var errors;
          if (this.closed) {
              return;
          }
          var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
          this.closed = true;
          this._parent = null;
          this._parents = null;
          this._subscriptions = null;
          var index = -1;
          var len = _parents ? _parents.length : 0;
          while (_parent) {
              _parent.remove(this);
              _parent = ++index < len && _parents[index] || null;
          }
          if (isFunction$1(_unsubscribe)) {
              var trial = tryCatch(_unsubscribe).call(this);
              if (trial === errorObject) {
                  hasErrors = true;
                  errors = errors || (errorObject.e instanceof UnsubscriptionError ?
                      flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);
              }
          }
          if (isArray$1(_subscriptions)) {
              index = -1;
              len = _subscriptions.length;
              while (++index < len) {
                  var sub = _subscriptions[index];
                  if (isObject$1(sub)) {
                      var trial = tryCatch(sub.unsubscribe).call(sub);
                      if (trial === errorObject) {
                          hasErrors = true;
                          errors = errors || [];
                          var err = errorObject.e;
                          if (err instanceof UnsubscriptionError) {
                              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                          }
                          else {
                              errors.push(err);
                          }
                      }
                  }
              }
          }
          if (hasErrors) {
              throw new UnsubscriptionError(errors);
          }
      };
      Subscription.prototype.add = function (teardown) {
          if (!teardown || (teardown === Subscription.EMPTY)) {
              return Subscription.EMPTY;
          }
          if (teardown === this) {
              return this;
          }
          var subscription = teardown;
          switch (typeof teardown) {
              case 'function':
                  subscription = new Subscription(teardown);
              case 'object':
                  if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                      return subscription;
                  }
                  else if (this.closed) {
                      subscription.unsubscribe();
                      return subscription;
                  }
                  else if (typeof subscription._addParent !== 'function') {
                      var tmp = subscription;
                      subscription = new Subscription();
                      subscription._subscriptions = [tmp];
                  }
                  break;
              default:
                  throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
          }
          var subscriptions = this._subscriptions || (this._subscriptions = []);
          subscriptions.push(subscription);
          subscription._addParent(this);
          return subscription;
      };
      Subscription.prototype.remove = function (subscription) {
          var subscriptions = this._subscriptions;
          if (subscriptions) {
              var subscriptionIndex = subscriptions.indexOf(subscription);
              if (subscriptionIndex !== -1) {
                  subscriptions.splice(subscriptionIndex, 1);
              }
          }
      };
      Subscription.prototype._addParent = function (parent) {
          var _a = this, _parent = _a._parent, _parents = _a._parents;
          if (!_parent || _parent === parent) {
              this._parent = parent;
          }
          else if (!_parents) {
              this._parents = [parent];
          }
          else if (_parents.indexOf(parent) === -1) {
              _parents.push(parent);
          }
      };
      Subscription.EMPTY = (function (empty) {
          empty.closed = true;
          return empty;
      }(new Subscription()));
      return Subscription;
  }());
  function flattenUnsubscriptionErrors(errors) {
      return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var rxSubscriber = typeof Symbol === 'function'
      ? /*@__PURE__*/ Symbol('rxSubscriber')
      : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();

  /** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
  var Subscriber = /*@__PURE__*/ (function (_super) {
      __extends(Subscriber, _super);
      function Subscriber(destinationOrNext, error, complete) {
          var _this = _super.call(this) || this;
          _this.syncErrorValue = null;
          _this.syncErrorThrown = false;
          _this.syncErrorThrowable = false;
          _this.isStopped = false;
          _this._parentSubscription = null;
          switch (arguments.length) {
              case 0:
                  _this.destination = empty;
                  break;
              case 1:
                  if (!destinationOrNext) {
                      _this.destination = empty;
                      break;
                  }
                  if (typeof destinationOrNext === 'object') {
                      if (destinationOrNext instanceof Subscriber) {
                          _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                          _this.destination = destinationOrNext;
                          destinationOrNext.add(_this);
                      }
                      else {
                          _this.syncErrorThrowable = true;
                          _this.destination = new SafeSubscriber(_this, destinationOrNext);
                      }
                      break;
                  }
              default:
                  _this.syncErrorThrowable = true;
                  _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                  break;
          }
          return _this;
      }
      Subscriber.prototype[rxSubscriber] = function () { return this; };
      Subscriber.create = function (next, error, complete) {
          var subscriber = new Subscriber(next, error, complete);
          subscriber.syncErrorThrowable = false;
          return subscriber;
      };
      Subscriber.prototype.next = function (value) {
          if (!this.isStopped) {
              this._next(value);
          }
      };
      Subscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              this.isStopped = true;
              this._error(err);
          }
      };
      Subscriber.prototype.complete = function () {
          if (!this.isStopped) {
              this.isStopped = true;
              this._complete();
          }
      };
      Subscriber.prototype.unsubscribe = function () {
          if (this.closed) {
              return;
          }
          this.isStopped = true;
          _super.prototype.unsubscribe.call(this);
      };
      Subscriber.prototype._next = function (value) {
          this.destination.next(value);
      };
      Subscriber.prototype._error = function (err) {
          this.destination.error(err);
          this.unsubscribe();
      };
      Subscriber.prototype._complete = function () {
          this.destination.complete();
          this.unsubscribe();
      };
      Subscriber.prototype._unsubscribeAndRecycle = function () {
          var _a = this, _parent = _a._parent, _parents = _a._parents;
          this._parent = null;
          this._parents = null;
          this.unsubscribe();
          this.closed = false;
          this.isStopped = false;
          this._parent = _parent;
          this._parents = _parents;
          this._parentSubscription = null;
          return this;
      };
      return Subscriber;
  }(Subscription));
  var SafeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SafeSubscriber, _super);
      function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
          var _this = _super.call(this) || this;
          _this._parentSubscriber = _parentSubscriber;
          var next;
          var context = _this;
          if (isFunction$1(observerOrNext)) {
              next = observerOrNext;
          }
          else if (observerOrNext) {
              next = observerOrNext.next;
              error = observerOrNext.error;
              complete = observerOrNext.complete;
              if (observerOrNext !== empty) {
                  context = Object.create(observerOrNext);
                  if (isFunction$1(context.unsubscribe)) {
                      _this.add(context.unsubscribe.bind(context));
                  }
                  context.unsubscribe = _this.unsubscribe.bind(_this);
              }
          }
          _this._context = context;
          _this._next = next;
          _this._error = error;
          _this._complete = complete;
          return _this;
      }
      SafeSubscriber.prototype.next = function (value) {
          if (!this.isStopped && this._next) {
              var _parentSubscriber = this._parentSubscriber;
              if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                  this.__tryOrUnsub(this._next, value);
              }
              else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              var _parentSubscriber = this._parentSubscriber;
              var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
              if (this._error) {
                  if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                      this.__tryOrUnsub(this._error, err);
                      this.unsubscribe();
                  }
                  else {
                      this.__tryOrSetError(_parentSubscriber, this._error, err);
                      this.unsubscribe();
                  }
              }
              else if (!_parentSubscriber.syncErrorThrowable) {
                  this.unsubscribe();
                  if (useDeprecatedSynchronousErrorHandling) {
                      throw err;
                  }
                  hostReportError(err);
              }
              else {
                  if (useDeprecatedSynchronousErrorHandling) {
                      _parentSubscriber.syncErrorValue = err;
                      _parentSubscriber.syncErrorThrown = true;
                  }
                  else {
                      hostReportError(err);
                  }
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.complete = function () {
          var _this = this;
          if (!this.isStopped) {
              var _parentSubscriber = this._parentSubscriber;
              if (this._complete) {
                  var wrappedComplete = function () { return _this._complete.call(_this._context); };
                  if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                      this.__tryOrUnsub(wrappedComplete);
                      this.unsubscribe();
                  }
                  else {
                      this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                      this.unsubscribe();
                  }
              }
              else {
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
          try {
              fn.call(this._context, value);
          }
          catch (err) {
              this.unsubscribe();
              if (config.useDeprecatedSynchronousErrorHandling) {
                  throw err;
              }
              else {
                  hostReportError(err);
              }
          }
      };
      SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
          if (!config.useDeprecatedSynchronousErrorHandling) {
              throw new Error('bad call');
          }
          try {
              fn.call(this._context, value);
          }
          catch (err) {
              if (config.useDeprecatedSynchronousErrorHandling) {
                  parent.syncErrorValue = err;
                  parent.syncErrorThrown = true;
                  return true;
              }
              else {
                  hostReportError(err);
                  return true;
              }
          }
          return false;
      };
      SafeSubscriber.prototype._unsubscribe = function () {
          var _parentSubscriber = this._parentSubscriber;
          this._context = null;
          this._parentSubscriber = null;
          _parentSubscriber.unsubscribe();
      };
      return SafeSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
  function canReportError(observer) {
      while (observer) {
          var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
          if (closed_1 || isStopped) {
              return false;
          }
          else if (destination && destination instanceof Subscriber) {
              observer = destination;
          }
          else {
              observer = null;
          }
      }
      return true;
  }

  /** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
  function toSubscriber(nextOrObserver, error, complete) {
      if (nextOrObserver) {
          if (nextOrObserver instanceof Subscriber) {
              return nextOrObserver;
          }
          if (nextOrObserver[rxSubscriber]) {
              return nextOrObserver[rxSubscriber]();
          }
      }
      if (!nextOrObserver && !error && !complete) {
          return new Subscriber(empty);
      }
      return new Subscriber(nextOrObserver, error, complete);
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function noop$1() { }

  /** PURE_IMPORTS_START _noop PURE_IMPORTS_END */
  function pipeFromArray(fns) {
      if (!fns) {
          return noop$1;
      }
      if (fns.length === 1) {
          return fns[0];
      }
      return function piped(input) {
          return fns.reduce(function (prev, fn) { return fn(prev); }, input);
      };
  }

  /** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
  var Observable$1 = /*@__PURE__*/ (function () {
      function Observable(subscribe) {
          this._isScalar = false;
          if (subscribe) {
              this._subscribe = subscribe;
          }
      }
      Observable.prototype.lift = function (operator) {
          var observable$$1 = new Observable();
          observable$$1.source = this;
          observable$$1.operator = operator;
          return observable$$1;
      };
      Observable.prototype.subscribe = function (observerOrNext, error, complete) {
          var operator = this.operator;
          var sink = toSubscriber(observerOrNext, error, complete);
          if (operator) {
              operator.call(sink, this.source);
          }
          else {
              sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                  this._subscribe(sink) :
                  this._trySubscribe(sink));
          }
          if (config.useDeprecatedSynchronousErrorHandling) {
              if (sink.syncErrorThrowable) {
                  sink.syncErrorThrowable = false;
                  if (sink.syncErrorThrown) {
                      throw sink.syncErrorValue;
                  }
              }
          }
          return sink;
      };
      Observable.prototype._trySubscribe = function (sink) {
          try {
              return this._subscribe(sink);
          }
          catch (err) {
              if (config.useDeprecatedSynchronousErrorHandling) {
                  sink.syncErrorThrown = true;
                  sink.syncErrorValue = err;
              }
              if (canReportError(sink)) {
                  sink.error(err);
              }
              else {
                  console.warn(err);
              }
          }
      };
      Observable.prototype.forEach = function (next, promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var subscription;
              subscription = _this.subscribe(function (value) {
                  try {
                      next(value);
                  }
                  catch (err) {
                      reject(err);
                      if (subscription) {
                          subscription.unsubscribe();
                      }
                  }
              }, reject, resolve);
          });
      };
      Observable.prototype._subscribe = function (subscriber) {
          var source = this.source;
          return source && source.subscribe(subscriber);
      };
      Observable.prototype[observable] = function () {
          return this;
      };
      Observable.prototype.pipe = function () {
          var operations = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              operations[_i] = arguments[_i];
          }
          if (operations.length === 0) {
              return this;
          }
          return pipeFromArray(operations)(this);
      };
      Observable.prototype.toPromise = function (promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var value;
              _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
          });
      };
      Observable.create = function (subscribe) {
          return new Observable(subscribe);
      };
      return Observable;
  }());
  function getPromiseCtor(promiseCtor) {
      if (!promiseCtor) {
          promiseCtor = config.Promise || Promise;
      }
      if (!promiseCtor) {
          throw new Error('no Promise impl found');
      }
      return promiseCtor;
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isScheduler(value) {
      return value && typeof value.schedule === 'function';
  }

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var InnerSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(InnerSubscriber, _super);
      function InnerSubscriber(parent, outerValue, outerIndex) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          _this.outerValue = outerValue;
          _this.outerIndex = outerIndex;
          _this.index = 0;
          return _this;
      }
      InnerSubscriber.prototype._next = function (value) {
          this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
      };
      InnerSubscriber.prototype._error = function (error) {
          this.parent.notifyError(error, this);
          this.unsubscribe();
      };
      InnerSubscriber.prototype._complete = function () {
          this.parent.notifyComplete(this);
          this.unsubscribe();
      };
      return InnerSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var subscribeToArray = function (array) {
      return function (subscriber) {
          for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
              subscriber.next(array[i]);
          }
          if (!subscriber.closed) {
              subscriber.complete();
          }
      };
  };

  /** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
  var subscribeToPromise = function (promise) {
      return function (subscriber) {
          promise.then(function (value) {
              if (!subscriber.closed) {
                  subscriber.next(value);
                  subscriber.complete();
              }
          }, function (err) { return subscriber.error(err); })
              .then(null, hostReportError);
          return subscriber;
      };
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function getSymbolIterator() {
      if (typeof Symbol !== 'function' || !Symbol.iterator) {
          return '@@iterator';
      }
      return Symbol.iterator;
  }
  var iterator = /*@__PURE__*/ getSymbolIterator();

  /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
  var subscribeToIterable = function (iterable) {
      return function (subscriber) {
          var iterator$$1 = iterable[iterator]();
          do {
              var item = iterator$$1.next();
              if (item.done) {
                  subscriber.complete();
                  break;
              }
              subscriber.next(item.value);
              if (subscriber.closed) {
                  break;
              }
          } while (true);
          if (typeof iterator$$1.return === 'function') {
              subscriber.add(function () {
                  if (iterator$$1.return) {
                      iterator$$1.return();
                  }
              });
          }
          return subscriber;
      };
  };

  /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
  var subscribeToObservable = function (obj) {
      return function (subscriber) {
          var obs = obj[observable]();
          if (typeof obs.subscribe !== 'function') {
              throw new TypeError('Provided object does not correctly implement Symbol.observable');
          }
          else {
              return obs.subscribe(subscriber);
          }
      };
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var isArrayLike$1 = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isPromise(value) {
      return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
  }

  /** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
  var subscribeTo = function (result) {
      if (result instanceof Observable$1) {
          return function (subscriber) {
              if (result._isScalar) {
                  subscriber.next(result.value);
                  subscriber.complete();
                  return undefined;
              }
              else {
                  return result.subscribe(subscriber);
              }
          };
      }
      else if (result && typeof result[observable] === 'function') {
          return subscribeToObservable(result);
      }
      else if (isArrayLike$1(result)) {
          return subscribeToArray(result);
      }
      else if (isPromise(result)) {
          return subscribeToPromise(result);
      }
      else if (result && typeof result[iterator] === 'function') {
          return subscribeToIterable(result);
      }
      else {
          var value = isObject$1(result) ? 'an invalid object' : "'" + result + "'";
          var msg = "You provided " + value + " where a stream was expected."
              + ' You can provide an Observable, Promise, Array, or Iterable.';
          throw new TypeError(msg);
      }
  };

  /** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */
  function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination) {
      if (destination === void 0) {
          destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
      }
      if (destination.closed) {
          return;
      }
      return subscribeTo(result)(destination);
  }

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var OuterSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(OuterSubscriber, _super);
      function OuterSubscriber() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
      };
      OuterSubscriber.prototype.notifyError = function (error, innerSub) {
          this.destination.error(error);
      };
      OuterSubscriber.prototype.notifyComplete = function (innerSub) {
          this.destination.complete();
      };
      return OuterSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function map$1(project, thisArg) {
      return function mapOperation(source) {
          if (typeof project !== 'function') {
              throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
          }
          return source.lift(new MapOperator(project, thisArg));
      };
  }
  var MapOperator = /*@__PURE__*/ (function () {
      function MapOperator(project, thisArg) {
          this.project = project;
          this.thisArg = thisArg;
      }
      MapOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
      };
      return MapOperator;
  }());
  var MapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(MapSubscriber, _super);
      function MapSubscriber(destination, project, thisArg) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.count = 0;
          _this.thisArg = thisArg || _this;
          return _this;
      }
      MapSubscriber.prototype._next = function (value) {
          var result;
          try {
              result = this.project.call(this.thisArg, value, this.count++);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.next(result);
      };
      return MapSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
  function isInteropObservable(input) {
      return input && typeof input[observable] === 'function';
  }

  /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
  function isIterable(input) {
      return input && typeof input[iterator] === 'function';
  }

  /** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */
  function fromArray(input, scheduler) {
      if (!scheduler) {
          return new Observable$1(subscribeToArray(input));
      }
      else {
          return new Observable$1(function (subscriber) {
              var sub = new Subscription();
              var i = 0;
              sub.add(scheduler.schedule(function () {
                  if (i === input.length) {
                      subscriber.complete();
                      return;
                  }
                  subscriber.next(input[i++]);
                  if (!subscriber.closed) {
                      sub.add(this.schedule());
                  }
              }));
              return sub;
          });
      }
  }

  /** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */
  function fromPromise(input, scheduler) {
      if (!scheduler) {
          return new Observable$1(subscribeToPromise(input));
      }
      else {
          return new Observable$1(function (subscriber) {
              var sub = new Subscription();
              sub.add(scheduler.schedule(function () {
                  return input.then(function (value) {
                      sub.add(scheduler.schedule(function () {
                          subscriber.next(value);
                          sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                      }));
                  }, function (err) {
                      sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
                  });
              }));
              return sub;
          });
      }
  }

  /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */
  function fromIterable(input, scheduler) {
      if (!input) {
          throw new Error('Iterable cannot be null');
      }
      if (!scheduler) {
          return new Observable$1(subscribeToIterable(input));
      }
      else {
          return new Observable$1(function (subscriber) {
              var sub = new Subscription();
              var iterator$$1;
              sub.add(function () {
                  if (iterator$$1 && typeof iterator$$1.return === 'function') {
                      iterator$$1.return();
                  }
              });
              sub.add(scheduler.schedule(function () {
                  iterator$$1 = input[iterator]();
                  sub.add(scheduler.schedule(function () {
                      if (subscriber.closed) {
                          return;
                      }
                      var value;
                      var done;
                      try {
                          var result = iterator$$1.next();
                          value = result.value;
                          done = result.done;
                      }
                      catch (err) {
                          subscriber.error(err);
                          return;
                      }
                      if (done) {
                          subscriber.complete();
                      }
                      else {
                          subscriber.next(value);
                          this.schedule();
                      }
                  }));
              }));
              return sub;
          });
      }
  }

  /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */
  function fromObservable(input, scheduler) {
      if (!scheduler) {
          return new Observable$1(subscribeToObservable(input));
      }
      else {
          return new Observable$1(function (subscriber) {
              var sub = new Subscription();
              sub.add(scheduler.schedule(function () {
                  var observable$$1 = input[observable]();
                  sub.add(observable$$1.subscribe({
                      next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                      error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                      complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                  }));
              }));
              return sub;
          });
      }
  }

  /** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */
  function from$1(input, scheduler) {
      if (!scheduler) {
          if (input instanceof Observable$1) {
              return input;
          }
          return new Observable$1(subscribeTo(input));
      }
      if (input != null) {
          if (isInteropObservable(input)) {
              return fromObservable(input, scheduler);
          }
          else if (isPromise(input)) {
              return fromPromise(input, scheduler);
          }
          else if (isArrayLike$1(input)) {
              return fromArray(input, scheduler);
          }
          else if (isIterable(input) || typeof input === 'string') {
              return fromIterable(input, scheduler);
          }
      }
      throw new TypeError((input !== null && typeof input || input) + ' is not observable');
  }

  /** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */
  function mergeMap(project, resultSelector, concurrent) {
      if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
      }
      if (typeof resultSelector === 'function') {
          return function (source) { return source.pipe(mergeMap(function (a, i) { return from$1(project(a, i)).pipe(map$1(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
      }
      else if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
      }
      return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
  }
  var MergeMapOperator = /*@__PURE__*/ (function () {
      function MergeMapOperator(project, concurrent) {
          if (concurrent === void 0) {
              concurrent = Number.POSITIVE_INFINITY;
          }
          this.project = project;
          this.concurrent = concurrent;
      }
      MergeMapOperator.prototype.call = function (observer, source) {
          return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
      };
      return MergeMapOperator;
  }());
  var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(MergeMapSubscriber, _super);
      function MergeMapSubscriber(destination, project, concurrent) {
          if (concurrent === void 0) {
              concurrent = Number.POSITIVE_INFINITY;
          }
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.concurrent = concurrent;
          _this.hasCompleted = false;
          _this.buffer = [];
          _this.active = 0;
          _this.index = 0;
          return _this;
      }
      MergeMapSubscriber.prototype._next = function (value) {
          if (this.active < this.concurrent) {
              this._tryNext(value);
          }
          else {
              this.buffer.push(value);
          }
      };
      MergeMapSubscriber.prototype._tryNext = function (value) {
          var result;
          var index = this.index++;
          try {
              result = this.project(value, index);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.active++;
          this._innerSub(result, value, index);
      };
      MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
          var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
          var destination = this.destination;
          destination.add(innerSubscriber);
          subscribeToResult(this, ish, value, index, innerSubscriber);
      };
      MergeMapSubscriber.prototype._complete = function () {
          this.hasCompleted = true;
          if (this.active === 0 && this.buffer.length === 0) {
              this.destination.complete();
          }
          this.unsubscribe();
      };
      MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
      };
      MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
          var buffer = this.buffer;
          this.remove(innerSub);
          this.active--;
          if (buffer.length > 0) {
              this._next(buffer.shift());
          }
          else if (this.active === 0 && this.hasCompleted) {
              this.destination.complete();
          }
      };
      return MergeMapSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function identity$1(x) {
      return x;
  }

  /** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
  function mergeAll(concurrent) {
      if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
      }
      return mergeMap(identity$1, concurrent);
  }

  /** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */
  function merge() {
      var observables = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
      }
      var concurrent = Number.POSITIVE_INFINITY;
      var scheduler = null;
      var last = observables[observables.length - 1];
      if (isScheduler(last)) {
          scheduler = observables.pop();
          if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
              concurrent = observables.pop();
          }
      }
      else if (typeof last === 'number') {
          concurrent = observables.pop();
      }
      if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable$1) {
          return observables[0];
      }
      return mergeAll(concurrent)(fromArray(observables, scheduler));
  }

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
  function tap(nextOrObserver, error, complete) {
      return function tapOperatorFunction(source) {
          return source.lift(new DoOperator(nextOrObserver, error, complete));
      };
  }
  var DoOperator = /*@__PURE__*/ (function () {
      function DoOperator(nextOrObserver, error, complete) {
          this.nextOrObserver = nextOrObserver;
          this.error = error;
          this.complete = complete;
      }
      DoOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
      };
      return DoOperator;
  }());
  var TapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TapSubscriber, _super);
      function TapSubscriber(destination, observerOrNext, error, complete) {
          var _this = _super.call(this, destination) || this;
          _this._tapNext = noop$1;
          _this._tapError = noop$1;
          _this._tapComplete = noop$1;
          _this._tapError = error || noop$1;
          _this._tapComplete = complete || noop$1;
          if (isFunction$1(observerOrNext)) {
              _this._context = _this;
              _this._tapNext = observerOrNext;
          }
          else if (observerOrNext) {
              _this._context = observerOrNext;
              _this._tapNext = observerOrNext.next || noop$1;
              _this._tapError = observerOrNext.error || noop$1;
              _this._tapComplete = observerOrNext.complete || noop$1;
          }
          return _this;
      }
      TapSubscriber.prototype._next = function (value) {
          try {
              this._tapNext.call(this._context, value);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.next(value);
      };
      TapSubscriber.prototype._error = function (err) {
          try {
              this._tapError.call(this._context, err);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.error(err);
      };
      TapSubscriber.prototype._complete = function () {
          try {
              this._tapComplete.call(this._context);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          return this.destination.complete();
      };
      return TapSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
  var Action = /*@__PURE__*/ (function (_super) {
      __extends(Action, _super);
      function Action(scheduler, work) {
          return _super.call(this) || this;
      }
      Action.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          return this;
      };
      return Action;
  }(Subscription));

  /** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
  var AsyncAction = /*@__PURE__*/ (function (_super) {
      __extends(AsyncAction, _super);
      function AsyncAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.pending = false;
          return _this;
      }
      AsyncAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (this.closed) {
              return this;
          }
          this.state = state;
          var id = this.id;
          var scheduler = this.scheduler;
          if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, delay);
          }
          this.pending = true;
          this.delay = delay;
          this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
          return this;
      };
      AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          return setInterval(scheduler.flush.bind(scheduler, this), delay);
      };
      AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (delay !== null && this.delay === delay && this.pending === false) {
              return id;
          }
          clearInterval(id);
      };
      AsyncAction.prototype.execute = function (state, delay) {
          if (this.closed) {
              return new Error('executing a cancelled action');
          }
          this.pending = false;
          var error = this._execute(state, delay);
          if (error) {
              return error;
          }
          else if (this.pending === false && this.id != null) {
              this.id = this.recycleAsyncId(this.scheduler, this.id, null);
          }
      };
      AsyncAction.prototype._execute = function (state, delay) {
          var errored = false;
          var errorValue = undefined;
          try {
              this.work(state);
          }
          catch (e) {
              errored = true;
              errorValue = !!e && e || new Error(e);
          }
          if (errored) {
              this.unsubscribe();
              return errorValue;
          }
      };
      AsyncAction.prototype._unsubscribe = function () {
          var id = this.id;
          var scheduler = this.scheduler;
          var actions = scheduler.actions;
          var index = actions.indexOf(this);
          this.work = null;
          this.state = null;
          this.pending = false;
          this.scheduler = null;
          if (index !== -1) {
              actions.splice(index, 1);
          }
          if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, null);
          }
          this.delay = null;
      };
      return AsyncAction;
  }(Action));

  var Scheduler = /*@__PURE__*/ (function () {
      function Scheduler(SchedulerAction, now) {
          if (now === void 0) {
              now = Scheduler.now;
          }
          this.SchedulerAction = SchedulerAction;
          this.now = now;
      }
      Scheduler.prototype.schedule = function (work, delay, state) {
          if (delay === void 0) {
              delay = 0;
          }
          return new this.SchedulerAction(this, work).schedule(state, delay);
      };
      Scheduler.now = function () { return Date.now(); };
      return Scheduler;
  }());

  /** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
  var AsyncScheduler = /*@__PURE__*/ (function (_super) {
      __extends(AsyncScheduler, _super);
      function AsyncScheduler(SchedulerAction, now) {
          if (now === void 0) {
              now = Scheduler.now;
          }
          var _this = _super.call(this, SchedulerAction, function () {
              if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                  return AsyncScheduler.delegate.now();
              }
              else {
                  return now();
              }
          }) || this;
          _this.actions = [];
          _this.active = false;
          _this.scheduled = undefined;
          return _this;
      }
      AsyncScheduler.prototype.schedule = function (work, delay, state) {
          if (delay === void 0) {
              delay = 0;
          }
          if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
              return AsyncScheduler.delegate.schedule(work, delay, state);
          }
          else {
              return _super.prototype.schedule.call(this, work, delay, state);
          }
      };
      AsyncScheduler.prototype.flush = function (action) {
          var actions = this.actions;
          if (this.active) {
              actions.push(action);
              return;
          }
          var error;
          this.active = true;
          do {
              if (error = action.execute(action.state, action.delay)) {
                  break;
              }
          } while (action = actions.shift());
          this.active = false;
          if (error) {
              while (action = actions.shift()) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AsyncScheduler;
  }(Scheduler));

  /** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
  var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);

  /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
  function debounceTime(dueTime, scheduler) {
      if (scheduler === void 0) {
          scheduler = async;
      }
      return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
  }
  var DebounceTimeOperator = /*@__PURE__*/ (function () {
      function DebounceTimeOperator(dueTime, scheduler) {
          this.dueTime = dueTime;
          this.scheduler = scheduler;
      }
      DebounceTimeOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
      };
      return DebounceTimeOperator;
  }());
  var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DebounceTimeSubscriber, _super);
      function DebounceTimeSubscriber(destination, dueTime, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.dueTime = dueTime;
          _this.scheduler = scheduler;
          _this.debouncedSubscription = null;
          _this.lastValue = null;
          _this.hasValue = false;
          return _this;
      }
      DebounceTimeSubscriber.prototype._next = function (value) {
          this.clearDebounce();
          this.lastValue = value;
          this.hasValue = true;
          this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
      };
      DebounceTimeSubscriber.prototype._complete = function () {
          this.debouncedNext();
          this.destination.complete();
      };
      DebounceTimeSubscriber.prototype.debouncedNext = function () {
          this.clearDebounce();
          if (this.hasValue) {
              var lastValue = this.lastValue;
              this.lastValue = null;
              this.hasValue = false;
              this.destination.next(lastValue);
          }
      };
      DebounceTimeSubscriber.prototype.clearDebounce = function () {
          var debouncedSubscription = this.debouncedSubscription;
          if (debouncedSubscription !== null) {
              this.remove(debouncedSubscription);
              debouncedSubscription.unsubscribe();
              this.debouncedSubscription = null;
          }
      };
      return DebounceTimeSubscriber;
  }(Subscriber));
  function dispatchNext(subscriber) {
      subscriber.debouncedNext();
  }

  var AssertionError$1 =
  /*#__PURE__*/
  function (_Error) {
    _inherits(AssertionError, _Error);

    function AssertionError(message) {
      var _this;

      _classCallCheck(this, AssertionError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, message));
      _this.name = _this.constructor.name;

      if (typeof Error.captureStackTrace === 'function') {
        Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this)), _this.constructor);
      } else {
        _this.stack = new Error(message).stack;
      }

      return _this;
    }

    return AssertionError;
  }(_wrapNativeSuper(Error));
  /**
   * @param {*} value
   * @param {string} message
   * @throws AssertionError
   */

  function assert$1(value, message) {
    if (!value) {
      throw new AssertionError$1(message || "Assertion failed");
    }
  }
  /**
   * Alias of `assert` function.
   * @param value
   * @param message
   */

  function ok(value, message) {
    return assert$1(value, message);
  }
  /**
   * @param {*} value
   * @param {Function} Ctor
   * @throws {AssertionError}
   */

  function instanceOf(value, Ctor) {
    assert$1(value instanceof Ctor, "value is an instance of ".concat(Ctor.name));
  }
  /**
   * @param {Object} vm
   * @return {void}
   * @throws {AssertionError}
   */

  function hasMap(vm) {
    assert$1(vm.$map, 'component has "$map" property');
  }
  /**
   * @param {Object} vm
   * @return {void}
   * @throws {AssertionError}
   */

  function hasView(vm) {
    assert$1(vm.$view, 'component has "$view" property');
  }
  /**
   * @param {Object} vm
   * @return {void}
   * @throws {AssertionError}
   */

  function hasGeolocation(vm) {
    assert$1(vm.$geolocation, 'component has "$geolocation" property');
  }
  /**
   * @param {Object} vm
   * @return {void}
   * @throws {AssertionError}
   */

  function hasFeature(vm) {
    assert$1(vm.$feature, 'component has "$feature" property');
  }
  /**
   * @param {Object} vm
   * @return {void}
   * @throws {AssertionError}
   */

  function hasLayer(vm) {
    assert$1(vm.$layer, 'component has "$layer" property');
  }
  /**
   * @param {Object} vm
   * @return {void}
   * @throws {AssertionError}
   */

  function hasSource(vm) {
    assert$1(vm.$source, 'component has "$source" property');
  }
  /**
   * @param {Object} vm
   * @return {void}
   * @throws {AssertionError}
   */

  function hasGeometry(vm) {
    assert$1(vm.$geometry, 'component has "$geometry" property');
  }
  /**
   * @param {Object} vm
   * @return {void}
   * @throws {AssertionError}
   */

  function hasInteraction(vm) {
    assert$1(vm.$interaction, 'component has "$interaction" property');
  }
  /**
   * @param {Object} vm
   * @return {void}
   * @throws {AssertionError}
   */

  function hasOverlay(vm) {
    assert$1(vm.$overlay, 'component has "$overlay" property');
  }
  function hasGraticule(vm) {
    assert$1(vm.$graticule, 'component has "$graticule" property');
  }

  /**
   * Mixin with helpers for projection transforms between current view projection and global defined projection.
   */

  var projTransforms = {
    computed: {
      /**
       * @return {module:ol/proj~ProjectionLike}
       */
      viewProjection: function viewProjection() {
        if (this.rev && this.$view) {
          return this.$view.getProjection().getCode();
        }

        return this.projection || EPSG_3857;
      },

      /**
       * @return {module:ol/proj~ProjectionLike}
       */
      resolvedDataProjection: function resolvedDataProjection() {
        return coalesce(this.dataProjection, // may or may not be present
        this.projection, // may or may not be present
        this.$map && getMapDataProjection(this.$map), this.$options.dataProjection, this.viewProjection);
      }
    },
    methods: {
      pointToViewProj: function pointToViewProj(point) {
        return transformPoint(point, this.resolvedDataProjection, this.viewProjection);
      },
      pointToDataProj: function pointToDataProj(point) {
        return transformPoint(point, this.viewProjection, this.resolvedDataProjection);
      },
      lineToViewProj: function lineToViewProj(line) {
        return transformLine(line, this.resolvedDataProjection, this.viewProjection);
      },
      lineToDataProj: function lineToDataProj(line) {
        return transformLine(line, this.viewProjection, this.resolvedDataProjection);
      },
      polygonToViewProj: function polygonToViewProj(polygon) {
        return transformPolygon(polygon, this.resolvedDataProjection, this.viewProjection);
      },
      polygonToDataProj: function polygonToDataProj(polygon) {
        return transformPolygon(polygon, this.viewProjection, this.resolvedDataProjection);
      },
      multiPointToViewProj: function multiPointToViewProj(multiPoint) {
        return transformMultiPoint(multiPoint, this.resolvedDataProjection, this.viewProjection);
      },
      multiPointToDataProj: function multiPointToDataProj(multiPoint) {
        return transformMultiPoint(multiPoint, this.viewProjection, this.resolvedDataProjection);
      },
      multiLineToViewProj: function multiLineToViewProj(multiLine) {
        return transformMultiLine(multiLine, this.resolvedDataProjection, this.viewProjection);
      },
      multiLineToDataProj: function multiLineToDataProj(multiLine) {
        return transformMultiLine(multiLine, this.viewProjection, this.resolvedDataProjection);
      },
      multiPolygonToViewProj: function multiPolygonToViewProj(multiPolygon) {
        return transformMultiPolygon(multiPolygon, this.resolvedDataProjection, this.viewProjection);
      },
      multiPolygonToDataProj: function multiPolygonToDataProj(multiPolygon) {
        return transformMultiPolygon(multiPolygon, this.viewProjection, this.resolvedDataProjection);
      },
      extentToViewProj: function extentToViewProj(extent$$1) {
        return proj.transformExtent(extent$$1, this.resolvedDataProjection, this.viewProjection);
      },
      extentToDataProj: function extentToDataProj(extent$$1) {
        return proj.transformExtent(extent$$1, this.viewProjection, this.resolvedDataProjection);
      },
      writeGeometryInDataProj: function writeGeometryInDataProj(geometry) {
        return writeGeoJsonGeometry(geometry, this.viewProjection, this.resolvedDataProjection);
      },
      writeGeometryInViewProj: function writeGeometryInViewProj(geometry) {
        return writeGeoJsonGeometry(geometry);
      },
      readGeometryInDataProj: function readGeometryInDataProj(geometry) {
        return readGeoJsonGeometry(geometry, this.viewProjection, this.resolvedDataProjection);
      },
      writeFeatureInDataProj: function writeFeatureInDataProj(feature) {
        return writeGeoJsonFeature(feature, this.viewProjection, this.resolvedDataProjection);
      },
      writeFeatureInViewProj: function writeFeatureInViewProj(feature) {
        return writeGeoJsonFeature(feature);
      },
      readFeatureInDataProj: function readFeatureInDataProj(feature) {
        return readGeoJsonFeature(feature, this.viewProjection, this.resolvedDataProjection);
      }
    }
  };

  /**
   * RxJS subscriptions manager.
   */

  var rxSubs = {
    methods: {
      /**
       * @return {void}
       * @protected
       */
      subscribeAll: function subscribeAll() {},

      /**
       * @return {void}
       * @protected
       */
      unsubscribeAll: function unsubscribeAll() {
        this._rxSubs.forEach(function (x) {
          return x.unsubscribe();
        });

        this._rxSubs = [];
      },

      /**
       * @param {Observable<T>} observable
       * @param {function} [next] Next handler or Observer object.
       * @param {function} [error] Error handler.
       * @param {function} [complete] Complete handler.
       * @return {Subscription}
       * @protected
       */
      subscribeTo: function subscribeTo(observable) {
        var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

        var _error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;

        var complete = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;

        _error = function error$$1(err) {

          _error(err);
        };

        var subs = observable.subscribe(next, _error, complete);

        this._rxSubs.push(subs);

        return subs;
      },
      unsubscribe: function unsubscribe(subs) {
        var idx = this._rxSubs.indexOf(subs);

        if (idx === -1) return;
        subs.unsubscribe();

        this._rxSubs.splice(idx, 1);
      }
    },
    beforeCreate: function beforeCreate() {
      /**
       * @type {Subscription[]}
       * @private
       */
      this._rxSubs = [];
    },
    destroyed: function destroyed() {
      this.unsubscribeAll();
    }
  };

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */
  function distinctUntilChanged(compare, keySelector) {
      return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
  }
  var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
      function DistinctUntilChangedOperator(compare, keySelector) {
          this.compare = compare;
          this.keySelector = keySelector;
      }
      DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
      };
      return DistinctUntilChangedOperator;
  }());
  var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DistinctUntilChangedSubscriber, _super);
      function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
          var _this = _super.call(this, destination) || this;
          _this.keySelector = keySelector;
          _this.hasKey = false;
          if (typeof compare === 'function') {
              _this.compare = compare;
          }
          return _this;
      }
      DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
          return x === y;
      };
      DistinctUntilChangedSubscriber.prototype._next = function (value) {
          var keySelector = this.keySelector;
          var key = value;
          if (keySelector) {
              key = tryCatch(this.keySelector)(value);
              if (key === errorObject) {
                  return this.destination.error(errorObject.e);
              }
          }
          var result = false;
          if (this.hasKey) {
              result = tryCatch(this.compare)(this.key, key);
              if (result === errorObject) {
                  return this.destination.error(errorObject.e);
              }
          }
          else {
              this.hasKey = true;
          }
          if (Boolean(result) === false) {
              this.key = key;
              this.destination.next(value);
          }
      };
      return DistinctUntilChangedSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
  function fromEventPattern(addHandler, removeHandler, resultSelector) {
      if (resultSelector) {
          return fromEventPattern(addHandler, removeHandler).pipe(map$1(function (args) { return isArray$1(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
      }
      return new Observable$1(function (subscriber) {
          var handler = function () {
              var e = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                  e[_i] = arguments[_i];
              }
              return subscriber.next(e.length === 1 ? e[0] : e);
          };
          var retValue;
          try {
              retValue = addHandler(handler);
          }
          catch (err) {
              subscriber.error(err);
              return undefined;
          }
          if (!isFunction$1(removeHandler)) {
              return undefined;
          }
          return function () { return removeHandler(handler, retValue); };
      });
  }

  /**
   * Creates an Observable using OpenLayers event pattern that emits events coming from the given event target.
   *
   * @example **Subscribe on view center change events**
   * const map = ol.Map({ ... })
   * const changes = Observable.fromOlEvent(map.getView(), 'change:center')
   *
   * changes.subscribe(({ coordinate }) => console.log(coordinate))
   *
   * @param {module:ol/Observable~Observable} target OpenLayers event target.
   * @param {string|Object[]} eventName The event name of interest, being emitted by the `target`
   *                          or an array of events/selectors like `[{ event: 'event1', selector?: x => x }, ...]`.
   * @param {function(...*): *} [selector] An optional function to post-process results. It takes the arguments
   *    from the event handler and should return a single value.
   * @return {Observable<T>}
   * @memberOf {Observable}
   */

  function fromOlEvent(target, eventName, selector) {
    if (Array.isArray(eventName)) {
      return merge.apply(void 0, _toConsumableArray(eventName.map(function (elem) {
        var eventName, selector;

        if (_typeof(elem) === 'object') {
          eventName = elem.event;
          selector = elem.selector;
        } else {
          eventName = elem;
        }

        return fromOlEvent(target, eventName, selector);
      })));
    }

    return fromEventPattern(function (handler) {
      return target.on(eventName, handler);
    }, function (handler) {
      return target.un(eventName, handler);
    }, selector);
  }

  /**
   * Creates Observable from OpenLayers change:* event
   * @param {module:ol/Observable~Observable} target
   * @param {string|string[]} [prop]
   * @param {boolean|function(a, b):boolean|undefined} [distinct] Distinct values by isEqual fn or by custom comparator
   * @param {number|undefined} [debounce] Debounce values by passed amount of ms.
   * @param {function|undefined} [selector] Custom selector
   * @return {Observable<{prop: string, value: *}>}
   */

  function fromOlChangeEvent(target, prop, distinct, debounce, selector) {
    if (Array.isArray(prop)) {
      return merge.apply(void 0, _toConsumableArray(prop.map(function (p) {
        return fromOlChangeEvent(target, p);
      })));
    }

    selector = selector || function (target, prop) {
      return target.get(prop);
    };

    var event = "change:".concat(prop);
    var observable = fromOlEvent(target, event, function () {
      return selector(target, prop);
    });
    var operations = [];

    if (debounce != null) {
      operations.push(debounceTime(debounce));
    }

    if (distinct) {
      isFunction(distinct) || (distinct = isEqual);
      operations.push(distinctUntilChanged(distinct));
    }

    operations.push(map$1(function (value) {
      return {
        prop: prop,
        value: value
      };
    }));
    return observable.pipe.apply(observable, operations);
  }



  var rxExt = /*#__PURE__*/Object.freeze({
    observableFromOlChangeEvent: fromOlChangeEvent,
    observableFromOlEvent: fromOlEvent
  });

  var featuresContainer = {
    mixins: [rxSubs, projTransforms],
    computed: {
      featureIds: function featureIds() {
        if (!this.rev) return [];
        return this.getFeatures().map(getFeatureId);
      },
      featuresViewProj: function featuresViewProj() {
        if (!this.rev) return [];
        return this.getFeatures().map(this.writeFeatureInViewProj.bind(this));
      },
      featuresDataProj: function featuresDataProj() {
        if (!this.rev) return [];
        return this.getFeatures().map(this.writeFeatureInDataProj.bind(this));
      }
    },
    methods: {
      /**
       * @param {Array<(Feature|Vue|Object)>} features
       * @return {void}
       */
      addFeatures: function addFeatures(features) {
        forEach(features, this.addFeature.bind(this));
      },

      /**
       * @param {Feature|Vue|Object} feature
       * @return {void}
       */
      addFeature: function addFeature(feature) {
        if (feature instanceof Vue) {
          feature = feature.$feature;
        } else if (isPlainObject(feature)) {
          feature = this.readFeatureInDataProj(feature);
        }

        instanceOf(feature, Feature);
        initializeFeature(feature);
        var foundFeature = this.getFeatureById(getFeatureId(feature));

        if (foundFeature == null) {
          this._featuresCollection.push(feature);
        } else {
          mergeFeatures(foundFeature, feature);
        }
      },

      /**
       * @param {Array<(Feature|Vue|Object)>} features
       * @return {void}
       */
      removeFeatures: function removeFeatures(features) {
        forEach(features, this.removeFeature.bind(this));
      },

      /**
       * @param {Feature|Vue|Object} feature
       * @return {void}
       */
      removeFeature: function removeFeature(feature) {
        feature = this.getFeatureById(getFeatureId(feature));
        if (!feature) return;
        initializeFeature(feature);

        this._featuresCollection.remove(feature);
      },

      /**
       * @return {void}
       */
      clearFeatures: function clearFeatures() {
        this._featuresCollection.clear();
      },

      /**
       * @param {string|number} featureId
       * @return {Feature|undefined}
       */
      getFeatureById: function getFeatureById(featureId) {
        // todo add hash {featureId => featureIdx, ....}
        return this._featuresCollection.getArray().find(function (feature) {
          return getFeatureId(feature) === featureId;
        });
      },

      /**
       * @return {Feature[]}
       */
      getFeatures: function getFeatures() {
        return this._featuresCollection.getArray();
      },

      /**
       * @return {Collection<Feature>>}
       */
      getFeaturesCollection: function getFeaturesCollection() {
        return this._featuresCollection;
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return {
          get featuresContainer() {
            return vm;
          }

        };
      }
    },
    created: function created() {
      var _this = this;

      /**
       * @type {Collection<Feature>>}
       * @private
       */
      this._featuresCollection = new Collection();
      this._featureSubs = {};
      var add = fromOlEvent(this._featuresCollection, 'add').pipe(tap(function (_ref) {
        var element = _ref.element;
        var elementUid = getObjectUid(element);
        var propChanges = fromOlEvent(element, 'propertychange');
        var otherChanges = fromOlEvent(element, 'change');
        var featureChanges = merge(propChanges, otherChanges).pipe(debounceTime(1000 / 60));
        _this._featureSubs[elementUid] = _this.subscribeTo(featureChanges, function () {
          ++_this.rev;
        });
      }));
      var remove = fromOlEvent(this._featuresCollection, 'remove').pipe(tap(function (_ref2) {
        var element = _ref2.element;
        var elementUid = getObjectUid(element);

        if (!_this._featureSubs[elementUid]) {
          return;
        }

        _this.unsubscribe(_this._featureSubs[elementUid]);

        delete _this._featureSubs[elementUid];
      }));
      var events = merge(add, remove);
      this.subscribeTo(events, function (_ref3) {
        var type = _ref3.type,
            element = _ref3.element;
        ++_this.rev;

        _this.$emit(type + ':feature', element);
      });
    }
  };

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  var defaultThrottleConfig = {
      leading: true,
      trailing: false
  };
  var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ThrottleSubscriber, _super);
      function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.durationSelector = durationSelector;
          _this._leading = _leading;
          _this._trailing = _trailing;
          _this._hasValue = false;
          return _this;
      }
      ThrottleSubscriber.prototype._next = function (value) {
          this._hasValue = true;
          this._sendValue = value;
          if (!this._throttled) {
              if (this._leading) {
                  this.send();
              }
              else {
                  this.throttle(value);
              }
          }
      };
      ThrottleSubscriber.prototype.send = function () {
          var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
          if (_hasValue) {
              this.destination.next(_sendValue);
              this.throttle(_sendValue);
          }
          this._hasValue = false;
          this._sendValue = null;
      };
      ThrottleSubscriber.prototype.throttle = function (value) {
          var duration = this.tryDurationSelector(value);
          if (duration) {
              this.add(this._throttled = subscribeToResult(this, duration));
          }
      };
      ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
          try {
              return this.durationSelector(value);
          }
          catch (err) {
              this.destination.error(err);
              return null;
          }
      };
      ThrottleSubscriber.prototype.throttlingDone = function () {
          var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
          if (_throttled) {
              _throttled.unsubscribe();
          }
          this._throttled = null;
          if (_trailing) {
              this.send();
          }
      };
      ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.throttlingDone();
      };
      ThrottleSubscriber.prototype.notifyComplete = function () {
          this.throttlingDone();
      };
      return ThrottleSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */
  function throttleTime(duration, scheduler, config) {
      if (scheduler === void 0) {
          scheduler = async;
      }
      if (config === void 0) {
          config = defaultThrottleConfig;
      }
      return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
  }
  var ThrottleTimeOperator = /*@__PURE__*/ (function () {
      function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
          this.duration = duration;
          this.scheduler = scheduler;
          this.leading = leading;
          this.trailing = trailing;
      }
      ThrottleTimeOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
      };
      return ThrottleTimeOperator;
  }());
  var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ThrottleTimeSubscriber, _super);
      function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
          var _this = _super.call(this, destination) || this;
          _this.duration = duration;
          _this.scheduler = scheduler;
          _this.leading = leading;
          _this.trailing = trailing;
          _this._hasTrailingValue = false;
          _this._trailingValue = null;
          return _this;
      }
      ThrottleTimeSubscriber.prototype._next = function (value) {
          if (this.throttled) {
              if (this.trailing) {
                  this._trailingValue = value;
                  this._hasTrailingValue = true;
              }
          }
          else {
              this.add(this.throttled = this.scheduler.schedule(dispatchNext$1, this.duration, { subscriber: this }));
              if (this.leading) {
                  this.destination.next(value);
              }
          }
      };
      ThrottleTimeSubscriber.prototype._complete = function () {
          if (this._hasTrailingValue) {
              this.destination.next(this._trailingValue);
              this.destination.complete();
          }
          else {
              this.destination.complete();
          }
      };
      ThrottleTimeSubscriber.prototype.clearThrottle = function () {
          var throttled = this.throttled;
          if (throttled) {
              if (this.trailing && this._hasTrailingValue) {
                  this.destination.next(this._trailingValue);
                  this._trailingValue = null;
                  this._hasTrailingValue = false;
              }
              throttled.unsubscribe();
              this.remove(throttled);
              this.throttled = null;
          }
      };
      return ThrottleTimeSubscriber;
  }(Subscriber));
  function dispatchNext$1(arg) {
      var subscriber = arg.subscriber;
      subscriber.clearThrottle();
  }

  /*!
   * merge-descriptors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var mergeDescriptors = merge$1;

  /**
   * Module variables.
   * @private
   */

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  /**
   * Merge the property descriptors of `src` into `dest`
   *
   * @param {object} dest Object to add descriptors to
   * @param {object} src Object to clone descriptors from
   * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties
   * @returns {object} Reference to dest
   * @public
   */

  function merge$1(dest, src, redefine) {
    if (!dest) {
      throw new TypeError('argument dest is required')
    }

    if (!src) {
      throw new TypeError('argument src is required')
    }

    if (redefine === undefined) {
      // Default to true
      redefine = true;
    }

    Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
      if (!redefine && hasOwnProperty.call(dest, name)) {
        // Skip desriptor
        return
      }

      // Copy descriptor
      var descriptor = Object.getOwnPropertyDescriptor(src, name);
      Object.defineProperty(dest, name, descriptor);
    });

    return dest
  }

  /**
   * @param {...Object} args
   * @returns {Object}
   */

  function multiMergeDescriptors() {
    var redefine;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (_typeof(args[args.length - 1]) !== 'object') {
      redefine = args.pop();
    }

    return args.slice(1).reduce(function (dest, src, i) {
      return mergeDescriptors(dest, src, redefine);
    }, args[0]);
  }

  var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  /* global setTimeout, clearTimeout */

  var dist = function debounce(fn) {
    var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var lastCallAt = void 0;
    var deferred = void 0;
    var timer = void 0;
    var pendingArgs = [];
    return function debounced() {
      var currentWait = getWait(wait);
      var currentTime = new Date().getTime();

      var isCold = !lastCallAt || currentTime - lastCallAt > currentWait;

      lastCallAt = currentTime;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (isCold && options.leading) {
        return options.accumulate ? Promise.resolve(fn.call(this, [args])).then(function (result) {
          return result[0];
        }) : Promise.resolve(fn.call.apply(fn, [this].concat(args)));
      }

      if (deferred) {
        clearTimeout(timer);
      } else {
        deferred = defer();
      }

      pendingArgs.push(args);
      timer = setTimeout(flush.bind(this), currentWait);

      if (options.accumulate) {
        var _ret = function () {
          var argsIndex = pendingArgs.length - 1;
          return {
            v: deferred.promise.then(function (results) {
              return results[argsIndex];
            })
          };
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof$1(_ret)) === "object") return _ret.v;
      }

      return deferred.promise;
    };

    function flush() {
      var thisDeferred = deferred;
      clearTimeout(timer);

      Promise.resolve(options.accumulate ? fn.call(this, pendingArgs) : fn.apply(this, pendingArgs[pendingArgs.length - 1])).then(thisDeferred.resolve, thisDeferred.reject);

      pendingArgs = [];
      deferred = null;
    }
  };

  function getWait(wait) {
    return typeof wait === 'function' ? wait() : wait;
  }

  function defer() {
    var deferred = {};
    deferred.promise = new Promise(function (resolve, reject) {
      deferred.resolve = resolve;
      deferred.reject = reject;
    });
    return deferred;
  }

  /** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */
  function isNumeric$1(val) {
      return !isArray$1(val) && (val - parseFloat(val) + 1) >= 0;
  }

  /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */
  function interval(period, scheduler) {
      if (period === void 0) {
          period = 0;
      }
      if (scheduler === void 0) {
          scheduler = async;
      }
      if (!isNumeric$1(period) || period < 0) {
          period = 0;
      }
      if (!scheduler || typeof scheduler.schedule !== 'function') {
          scheduler = async;
      }
      return new Observable$1(function (subscriber) {
          subscriber.add(scheduler.schedule(dispatch, period, { subscriber: subscriber, counter: 0, period: period }));
          return subscriber;
      });
  }
  function dispatch(state) {
      var subscriber = state.subscriber, counter = state.counter, period = state.period;
      subscriber.next(counter);
      this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function EmptyErrorImpl() {
      Error.call(this);
      this.message = 'no elements in sequence';
      this.name = 'EmptyError';
      return this;
  }
  EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
  var EmptyError = EmptyErrorImpl;

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function filter$1(predicate, thisArg) {
      return function filterOperatorFunction(source) {
          return source.lift(new FilterOperator(predicate, thisArg));
      };
  }
  var FilterOperator = /*@__PURE__*/ (function () {
      function FilterOperator(predicate, thisArg) {
          this.predicate = predicate;
          this.thisArg = thisArg;
      }
      FilterOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
      };
      return FilterOperator;
  }());
  var FilterSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(FilterSubscriber, _super);
      function FilterSubscriber(destination, predicate, thisArg) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.thisArg = thisArg;
          _this.count = 0;
          return _this;
      }
      FilterSubscriber.prototype._next = function (value) {
          var result;
          try {
              result = this.predicate.call(this.thisArg, value, this.count++);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          if (result) {
              this.destination.next(value);
          }
      };
      return FilterSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function ArgumentOutOfRangeErrorImpl() {
      Error.call(this);
      this.message = 'argument out of range';
      this.name = 'ArgumentOutOfRangeError';
      return this;
  }
  ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
  var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
  var EMPTY = /*@__PURE__*/ new Observable$1(function (subscriber) { return subscriber.complete(); });
  function empty$1(scheduler) {
      return scheduler ? emptyScheduled(scheduler) : EMPTY;
  }
  function emptyScheduled(scheduler) {
      return new Observable$1(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
  }

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
  function take(count) {
      return function (source) {
          if (count === 0) {
              return empty$1();
          }
          else {
              return source.lift(new TakeOperator(count));
          }
      };
  }
  var TakeOperator = /*@__PURE__*/ (function () {
      function TakeOperator(total) {
          this.total = total;
          if (this.total < 0) {
              throw new ArgumentOutOfRangeError;
          }
      }
      TakeOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new TakeSubscriber(subscriber, this.total));
      };
      return TakeOperator;
  }());
  var TakeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TakeSubscriber, _super);
      function TakeSubscriber(destination, total) {
          var _this = _super.call(this, destination) || this;
          _this.total = total;
          _this.count = 0;
          return _this;
      }
      TakeSubscriber.prototype._next = function (value) {
          var total = this.total;
          var count = ++this.count;
          if (count <= total) {
              this.destination.next(value);
              if (count === total) {
                  this.destination.complete();
                  this.unsubscribe();
              }
          }
      };
      return TakeSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function defaultIfEmpty(defaultValue) {
      if (defaultValue === void 0) {
          defaultValue = null;
      }
      return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
  }
  var DefaultIfEmptyOperator = /*@__PURE__*/ (function () {
      function DefaultIfEmptyOperator(defaultValue) {
          this.defaultValue = defaultValue;
      }
      DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
      };
      return DefaultIfEmptyOperator;
  }());
  var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DefaultIfEmptySubscriber, _super);
      function DefaultIfEmptySubscriber(destination, defaultValue) {
          var _this = _super.call(this, destination) || this;
          _this.defaultValue = defaultValue;
          _this.isEmpty = true;
          return _this;
      }
      DefaultIfEmptySubscriber.prototype._next = function (value) {
          this.isEmpty = false;
          this.destination.next(value);
      };
      DefaultIfEmptySubscriber.prototype._complete = function () {
          if (this.isEmpty) {
              this.destination.next(this.defaultValue);
          }
          this.destination.complete();
      };
      return DefaultIfEmptySubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _tap,_util_EmptyError PURE_IMPORTS_END */
  var throwIfEmpty = function (errorFactory) {
      if (errorFactory === void 0) {
          errorFactory = defaultErrorFactory;
      }
      return tap({
          hasValue: false,
          next: function () { this.hasValue = true; },
          complete: function () {
              if (!this.hasValue) {
                  throw errorFactory();
              }
          }
      });
  };
  function defaultErrorFactory() {
      return new EmptyError();
  }

  /** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */
  function first(predicate, defaultValue) {
      var hasDefaultValue = arguments.length >= 2;
      return function (source) { return source.pipe(predicate ? filter$1(function (v, i) { return predicate(v, i, source); }) : identity$1, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); })); };
  }

  /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
  function skipUntil(notifier) {
      return function (source) { return source.lift(new SkipUntilOperator(notifier)); };
  }
  var SkipUntilOperator = /*@__PURE__*/ (function () {
      function SkipUntilOperator(notifier) {
          this.notifier = notifier;
      }
      SkipUntilOperator.prototype.call = function (destination, source) {
          return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
      };
      return SkipUntilOperator;
  }());
  var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SkipUntilSubscriber, _super);
      function SkipUntilSubscriber(destination, notifier) {
          var _this = _super.call(this, destination) || this;
          _this.hasValue = false;
          var innerSubscriber = new InnerSubscriber(_this, undefined, undefined);
          _this.add(innerSubscriber);
          _this.innerSubscription = innerSubscriber;
          subscribeToResult(_this, notifier, undefined, undefined, innerSubscriber);
          return _this;
      }
      SkipUntilSubscriber.prototype._next = function (value) {
          if (this.hasValue) {
              _super.prototype._next.call(this, value);
          }
      };
      SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.hasValue = true;
          if (this.innerSubscription) {
              this.innerSubscription.unsubscribe();
          }
      };
      SkipUntilSubscriber.prototype.notifyComplete = function () {
      };
      return SkipUntilSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function skipWhile(predicate) {
      return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
  }
  var SkipWhileOperator = /*@__PURE__*/ (function () {
      function SkipWhileOperator(predicate) {
          this.predicate = predicate;
      }
      SkipWhileOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
      };
      return SkipWhileOperator;
  }());
  var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SkipWhileSubscriber, _super);
      function SkipWhileSubscriber(destination, predicate) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.skipping = true;
          _this.index = 0;
          return _this;
      }
      SkipWhileSubscriber.prototype._next = function (value) {
          var destination = this.destination;
          if (this.skipping) {
              this.tryCallPredicate(value);
          }
          if (!this.skipping) {
              destination.next(value);
          }
      };
      SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
          try {
              var result = this.predicate(value, this.index++);
              this.skipping = Boolean(result);
          }
          catch (err) {
              this.destination.error(err);
          }
      };
      return SkipWhileSubscriber;
  }(Subscriber));

  /**
   * Simple Identity map with refs count
   */
  var IdentityMap =
  /*#__PURE__*/
  function () {
    function IdentityMap() {
      _classCallCheck(this, IdentityMap);

      _defineProperty(this, "pools", Object.create(null));
    }

    _createClass(IdentityMap, [{
      key: "_preparePool",

      /**
       * @param {string} pool
       * @private
       */
      value: function _preparePool(pool) {
        this.pools[pool] || (this.pools[pool] = Object.create(null));
      }
      /**
       * @param {string} id
       * @param {*} value
       * @param {string} pool
       */

    }, {
      key: "set",
      value: function set(id, value) {
        var pool = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
        if (value == null) return;

        this._preparePool(pool);

        this.pools[pool][id] = {
          value: value,
          refs: 1
        };
      }
      /**
       * @param {string} id
       * @param {string} pool
       */

    }, {
      key: "get",
      value: function get(id) {
        var pool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

        this._preparePool(pool);

        var rec = this.pools[pool][id];
        if (!rec || rec.value == null) return;
        rec.refs++;
        this.pools[pool][id] = rec;
        return rec.value;
      }
      /**
       * @param {string} id
       * @param {string} pool
       */

    }, {
      key: "unset",
      value: function unset(id) {
        var pool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

        this._preparePool(pool);

        var rec = this.pools[pool][id];
        if (!rec || rec.value == null) return;
        rec.refs--;

        if (rec.refs === 0) {
          delete this.pools[pool][id];
        } else {
          this.pools[pool][id] = rec;
        }
      }
      /**
       * @param {string} id
       * @param {string} pool
       * @return {boolean}
       */

    }, {
      key: "has",
      value: function has(id) {
        var pool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

        this._preparePool(pool);

        return !!this.pools[pool][id];
      }
      /**
       * @param {string} pool
       * @return {string[]}
       */

    }, {
      key: "ids",
      value: function ids() {
        var pool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

        this._preparePool(pool);

        return Object.keys(this.pools[pool]);
      }
      /**
       * @param {string} id
       * @param {string} pool
       * @return {*}
       */

    }, {
      key: "refs",
      value: function refs(id) {
        var pool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

        this._preparePool(pool);

        return this.has(id, pool) ? this.pools[pool][id].refs : undefined;
      }
    }]);

    return IdentityMap;
  }();

  // const IDENTITY_MAP_PROP = Symbol('identityMap')

  var IDENTITY_MAP_PROP = 'identityMap';
  var identMap = {
    IDENTITY_MAP_PROP: IDENTITY_MAP_PROP,
    props: {
      /**
       * Unique key for saving to identity map
       * @type {string|number}
       * @experimental
       */
      ident: [String, Number]
    },
    methods: {
      /**
       * @param parts
       * @return {string|undefined}
       * @protected
       */
      makeSelfIdent: function makeSelfIdent() {
        if (!this.ident) return;

        for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {
          parts[_key] = arguments[_key];
        }

        return this.makeIdent.apply(this, [this.ident].concat(parts));
      },

      /**
       * @param parts
       * @return {string}
       */
      makeIdent: function makeIdent() {
        for (var _len2 = arguments.length, parts = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          parts[_key2] = arguments[_key2];
        }

        return parts.filter(identity).join('.');
      }
    },
    created: function created() {
      initIdentityMap.call(this);
    }
  };
  /**
   * @private
   */

  function initIdentityMap() {
    var _this = this;

    if (!this[IDENTITY_MAP_PROP]) {
      Vue[IDENTITY_MAP_PROP] = Vue.prototype[IDENTITY_MAP_PROP] = new IdentityMap();
    }

    Object.defineProperties(this, {
      $identityMap: {
        enumerable: true,
        get: function get$$1() {
          return _this[IDENTITY_MAP_PROP];
        }
      }
    });
  }

  // const SERVICES_PROP = Symbol('services')

  var SERVICES_PROP = 'services';
  /**
   * Service container mixin
   */

  var services = {
    inject: {
      $services: SERVICES_PROP // todo works only in Vue 2.5.x
      // $services: {from: SERVICES_PROP, default: Object.create(null)},

    },
    provide: function provide() {
      return _defineProperty({}, SERVICES_PROP, this.getServices());
    },
    methods: {
      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        return multiMergeDescriptors({}, this.$services || {});
      }
    },
    beforeCreate: function beforeCreate() {
      var source = this.$parent;

      while (source) {
        if (source._provided != null && source._provided[SERVICES_PROP] != null) {
          break;
        }

        source = source.$parent;
      }

      if (source == null || source._provided[SERVICES_PROP] == null) {
        delete this.$options.inject.$services;
      }
    }
  };

  var VM_PROP = 'vm';
  var INSTANCE_PROMISE_POOL = 'instance_promise';
  /**
   * Basic ol component mixin.
   * todo try to subscribe to generic change event here and update rev according to internal ol counter
   */

  var cmp = {
    VM_PROP: VM_PROP,
    INSTANCE_PROMISE_POOL: INSTANCE_PROMISE_POOL,
    mixins: [identMap, rxSubs, services],
    data: function data() {
      return {
        rev: 0
      };
    },
    computed: {
      name: function name() {
        return [this.$options.name, this.id].filter(identity).join(' ');
      }
    },
    methods: {
      /**
       * @return {Promise<void>}
       * @protected
       */
      beforeInit: function beforeInit() {},

      /**
       * @return {Promise<void>} Resolves when initialization completes
       * @protected
       */
      init: function () {
        var _init = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee() {
          var createPromise, ident;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  ident = this.makeSelfIdent();

                  if (ident && this.$identityMap.has(ident, INSTANCE_PROMISE_POOL)) {
                    createPromise = this.$identityMap.get(ident, INSTANCE_PROMISE_POOL);
                  } else {
                    createPromise = this.createOlObject();

                    if (ident) {
                      this.$identityMap.set(ident, createPromise, INSTANCE_PROMISE_POOL);
                    }
                  }

                  _context.next = 4;
                  return createPromise;

                case 4:
                  this._olObject = _context.sent;
                  this._olObject[VM_PROP] || (this._olObject[VM_PROP] = []);

                  if (!this._olObject[VM_PROP].includes(this)) {
                    // for loaded from IdentityMap
                    this._olObject[VM_PROP].push(this);
                  }

                  ++this.rev;

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function init() {
          return _init.apply(this, arguments);
        };
      }(),

      /**
       * @return {module:ol/Object~BaseObject|Promise<module:ol/Object~BaseObject>}
       * @protected
       * @abstract
       */
      createOlObject: function createOlObject() {
        throw new Error('Not implemented method');
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      deinit: function deinit() {
        var _this = this;

        var ident = this.makeSelfIdent();

        if (ident) {
          this.$identityMap.unset(ident, INSTANCE_PROMISE_POOL);
        }

        if (this._olObject) {
          this._olObject[VM_PROP] = this._olObject[VM_PROP].filter(function (vm) {
            return vm !== _this;
          });
          this._olObject = undefined;
        }
      },

      /**
       * Redefine for easy call in child components
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        return services.methods.getServices.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      mount: function mount() {
        this.subscribeAll();
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      unmount: function unmount() {
        this.unsubscribeAll();
      },

      /**
       * Refresh internal ol objects
       * @return {Promise<void>}
       */
      refresh: function refresh() {
        var _this2 = this;

        if (this.$olObject == null) return Promise.resolve();
        return new Promise(function (resolve) {
          if (_this2.$olObject && isFunction(_this2.$olObject.changed)) {
            _this2.$olObject.once('change', function () {
              return resolve();
            });

            _this2.$olObject.changed();
          } else {
            resolve();
          }
        });
      },

      /**
       * Internal usage only in components that doesn't support refreshing.
       * @return {Promise<void>}
       * @protected
       */
      remount: function () {
        var _remount = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(this.$olObject == null)) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  _context2.next = 4;
                  return this.unmount();

                case 4:
                  _context2.next = 6;
                  return this.mount();

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        return function remount() {
          return _remount.apply(this, arguments);
        };
      }(),

      /**
       * Only for internal purpose to support watching for properties
       * for which OpenLayers doesn't provide setters.
       * @return {Promise}
       * @protected
       */
      recreate: function () {
        var _recreate = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!(this.$olObject == null)) {
                    _context3.next = 2;
                    break;
                  }

                  return _context3.abrupt("return");

                case 2:
                  _context3.next = 4;
                  return this.unmount();

                case 4:
                  _context3.next = 6;
                  return this.deinit();

                case 6:
                  _context3.next = 8;
                  return this.init();

                case 8:
                  _context3.next = 10;
                  return this.mount();

                case 10:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        return function recreate() {
          return _recreate.apply(this, arguments);
        };
      }(),
      subscribeAll: function subscribeAll() {}
    },
    created: function created() {
      var _this3 = this;

      /**
       * @type {module:ol/Object~BaseObject}
       * @private
       */
      this._olObject = undefined;
      Object.defineProperties(this, {
        $olObject: {
          enumerable: true,
          get: function get$$1() {
            return _this3._olObject;
          }
        }
      });
      defineLifeCyclePromises.call(this);
      defineDebouncedHelpers.call(this);
    },
    mounted: function () {
      var _mounted = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.$createPromise;

              case 2:
                this._mounted = true;

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function mounted() {
        return _mounted.apply(this, arguments);
      };
    }(),
    beforeDestroy: function () {
      var _beforeDestroy = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.$mountPromise;

              case 2:
                this._mounted = false;

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function beforeDestroy() {
        return _beforeDestroy.apply(this, arguments);
      };
    }(),
    destroyed: function () {
      var _destroyed = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.$unmountPromise;

              case 2:
                this._destroyed = true;

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function destroyed() {
        return _destroyed.apply(this, arguments);
      };
    }()
  };

  function defineLifeCyclePromises() {
    var _this4 = this;

    var makeEventEmitter = function makeEventEmitter(event) {
      return function () {
        _this4.$emit(event, _this4);

        return _this4;
      };
    }; // create


    this._createPromise = Promise.resolve(this.beforeInit()).then(function () {
      return _this4.init();
    }).then(makeEventEmitter('created')); // mount

    var mountObs = interval(1000 / 60).pipe(skipWhile(function () {
      return !_this4._mounted;
    }), first());
    this._mountPromise = mountObs.toPromise(Promise).then(function () {
      return _this4.mount();
    }).then(makeEventEmitter('mounted')); // unmount

    var unmountObs = interval(1000 / 60).pipe(skipUntil(mountObs), skipWhile(function () {
      return _this4._mounted;
    }), first());
    this._unmountPromise = unmountObs.toPromise(Promise).then(function () {
      return _this4.unmount();
    }).then(makeEventEmitter('unmounted')); // destroy

    var destroyObs = interval(1000 / 60).pipe(skipWhile(function () {
      return !_this4._destroyed;
    }), first());
    this._destroyPromise = destroyObs.toPromise(Promise).then(function () {
      return _this4.deinit();
    }).then(makeEventEmitter('destroyed'));
    Object.defineProperties(this, {
      $createPromise: {
        enumerable: true,
        get: function get$$1() {
          return _this4._createPromise;
        }
      },
      $mountPromise: {
        enumerable: true,
        get: function get$$1() {
          return _this4._mountPromise;
        }
      },
      $unmountPromise: {
        enumerable: true,
        get: function get$$1() {
          return _this4._unmountPromise;
        }
      },
      $destroyPromise: {
        enumerable: true,
        get: function get$$1() {
          return _this4._destroyPromise;
        }
      }
    });
  }

  function defineDebouncedHelpers() {
    var t = 1000 / 10; // bind debounced functions at runtime
    // for each instance to avoid interfering between
    // different instances

    this.scheduleRefresh = dist(function () {
      return this.refresh();
    }, t);
    this.scheduleRemount = dist(function () {
      return this.remount();
    }, t);
    this.scheduleRecreate = dist(function () {
      return this.recreate();
    }, t);
  }

  /**
   * Renders stub VNode for component.
   */

  var stubVNode = {
    /**
     * @param {function} h
     * @returns {VNode}
     */
    render: function render(h) {
      var options = this.$options.stubVNode || {}; // render as HTML comment

      if (options.empty) {
        var vnode = h();

        if (typeof options.empty === 'string') {
          vnode.text = options.empty;
        } else if (typeof options.empty === 'function') {
          vnode.text = options.empty.call(this);
        }

        return vnode;
      }

      var children;

      if (options.slots === false) {
        children = undefined;
      } else {
        children = extractChildren(this.$slots, options.slots);
      }

      var attrs = typeof options.attrs === 'function' ? options.attrs.call(this) : options.attrs;
      var data = {
        attrs: attrs,
        style: {
          display: 'none !important'
        }
      };
      return h(options.tag || 'i', data, children);
    }
  };

  /**
   * Basic ol component with stub VNode, i.e. virtual component
   */

  var cmp$1 = {
    mixins: [stubVNode, cmp],
    methods: {
      /**
       * @return {Promise}
       * @protected
       */
      init: function init() {
        return cmp.methods.init.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      deinit: function deinit() {
        return cmp.methods.deinit.call(this);
      },

      /**
       * @return {*}
       * @protected
       * @abstract
       */
      createOlObject: function createOlObject() {
        throw new Error('Not implemented method');
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      mount: function mount() {
        return cmp.methods.mount.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      unmount: function unmount() {
        return cmp.methods.unmount.call(this);
      },

      /**
       * Redefine for easy call in child components
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        return cmp.methods.getServices.call(this);
      },

      /**
       * Refresh internal ol objects
       * @return {Promise}
       */
      refresh: function refresh() {
        return cmp.methods.refresh.call(this);
      },

      /**
       * Internal usage only in components that doesn't support refreshing.
       * @return {Promise<void>}
       * @protected
       */
      remount: function remount() {
        return cmp.methods.remount.call(this);
      },

      /**
       * Internal usage only in components that doesn't support refreshing.
       * @return {Promise<void>}
       * @protected
       */
      recreate: function recreate() {
        return cmp.methods.recreate.call(this);
      },

      /**
       * @protected
       */
      subscribeAll: function subscribeAll() {
        cmp.methods.subscribeAll.call(this);
      }
    }
  };

  /**
   * Basic mixin for ol components that depends on map instance
   */

  var useMapCmp = {
    methods: {
      /**
       * @return {Promise<void>}
       * @protected
       */
      beforeInit: function beforeInit() {
        var _this = this;

        // waits while $map service will be injected
        return interval(100).pipe(skipWhile(function () {
          return !_this.$map;
        }), first(), map$1(function () {
          return _this;
        })).toPromise(Promise);
      }
    }
  };

  var geometry$1 = {
    mixins: [cmp$1, useMapCmp, projTransforms],
    props: {
      /**
       * Coordinates in the map view projection.
       * @type {number[]}
       */
      coordinates: {
        type: Array,
        required: true,
        validator: function validator(val) {
          return val.length;
        }
      }
    },
    computed: {
      /**
       * @type {string}
       * @abstract
       * @readonly
       */
      type: function type() {
        throw new Error('Not implemented computed property');
      },

      /**
       * @type {number[]|undefined}
       */
      extent: function extent$$1() {
        if (this.extentViewProj && this.resolvedDataProjection) {
          return this.extentToDataProj(this.extentViewProj);
        }
      },

      /**
       * @type {number[]|undefined}
       */
      extentViewProj: function extentViewProj() {
        if (this.rev && this.$geometry) {
          return this.$geometry.getExtent();
        }
      },

      /**
       * @type {number[]|undefined}
       */
      point: function point() {
        if (this.pointViewProj && this.resolvedDataProjection) {
          return this.pointToDataProj(this.pointViewProj);
        }
      },

      /**
       * @type {number[]}
       */
      pointViewProj: function pointViewProj() {
        if (this.rev && this.$geometry) {
          return findPointOnSurface(this.$geometry);
        }
      },

      /**
       * @type {number[]|undefined}
       */
      coordinatesViewProj: function coordinatesViewProj() {
        if (this.rev && this.$geometry) {
          return this.$geometry.getCoordinates();
        }
      }
    },
    methods: {
      /**
       * @return {module:ol/geom/Geometry~Geometry|Promise<module:ol/geom/Geometry~Geometry>}
       * @protected
       */
      createOlObject: function createOlObject() {
        return this.createGeometry();
      },

      /**
       * @return {module:ol/geom/Geometry~Geometry|Promise<module:ol/geom/Geometry~Geometry>}
       * @protected
       * @abstract
       */
      createGeometry: function createGeometry() {
        throw new Error('Not implemented method');
      },

      /**
       * @return {number[]}
       */
      getCoordinates: function getCoordinates() {
        hasGeometry(this);
        return this.toDataProj(this.$geometry.getCoordinates());
      },

      /**
       * @param {number[]} coordinates
       */
      setCoordinates: function setCoordinates(coordinates) {
        hasGeometry(this);
        this.$geometry.setCoordinates(this.toViewProj(coordinates));
      },

      /**
       * @return {Promise}
       * @throws {AssertionError}
       * @protected
       */
      init: function init() {
        this.setupTransformFunctions();
        return cmp$1.methods.init.call(this);
      },

      /**
       * @protected
       */
      setupTransformFunctions: function setupTransformFunctions() {
        var _this = this;

        // define helper methods based on geometry type
        var transform = transforms[this.type].transform;
        /**
         * @method
         * @param {number[]} coordinates
         * @return {number[]}
         * @protected
         */

        this.toDataProj = function (coordinates) {
          return transform(coordinates, _this.viewProjection, _this.resolvedDataProjection);
        };
        /**
         * @method
         * @param {number[]} coordinates
         * @return {number[]}
         * @protected
         */


        this.toViewProj = function (coordinates) {
          return transform(coordinates, _this.resolvedDataProjection, _this.viewProjection);
        };
      },

      /**
       * @return {void|Promise}
       * @protected
       */
      deinit: function deinit() {
        return cmp$1.methods.deinit.call(this);
      },

      /**
       * @return {Promise}
       */
      refresh: function refresh() {
        return cmp$1.methods.refresh.call(this);
      },

      /**
       * @return {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return multiMergeDescriptors(cmp$1.methods.getServices.call(this), {
          get geometry() {
            return vm.$geometry;
          }

        });
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        this.$geometryContainer && this.$geometryContainer.setGeometry(this);
        this.subscribeAll();
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        this.unsubscribeAll();
        this.$geometryContainer && this.$geometryContainer.setGeometry(undefined);
      },

      /**
       * @return {void}
       * @protected
       */
      subscribeAll: function subscribeAll() {
        subscribeToGeomChanges.call(this);
      }
    },
    watch: {
      coordinates: function coordinates(value) {
        if (!this.$geometry || !this.$view) return; // compares in data projection

        var isEq = isEqualGeom({
          coordinates: value,
          extent: extent.boundingExtent(value)
        }, {
          coordinates: this.getCoordinates(),
          extent: this.extent
        });
        if (isEq) return;
        this.setCoordinates(value);
      },
      resolvedDataProjection: function resolvedDataProjection() {
        if (!this.$geometry) return;
        this.setupTransformFunctions();
        this.setCoordinates(this.coordinates);
      }
    },
    stubVNode: {
      empty: function empty() {
        return this.$options.name;
      }
    },
    created: function created() {
      defineServices.call(this);
    }
  };

  function defineServices() {
    var _this2 = this;

    Object.defineProperties(this, {
      /**
       * @type {module:ol/geom/Geometry~Geometry|undefined}
       */
      $geometry: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$olObject;
        }
      },

      /**
       * @type {module:ol/PluggableMap~PluggableMap|undefined}
       */
      $map: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.map;
        }
      },

      /**
       * @type {module:ol/View~View|undefined}
       */
      $view: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.view;
        }
      },

      /**
       * @type {Object|undefined}
       */
      $geometryContainer: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.geometryContainer;
        }
      }
    });
  }
  /**
   * @return {void}
   * @private
   */


  function subscribeToGeomChanges() {
    var _this3 = this;

    hasGeometry(this);
    var ft = 100;
    var changes = fromOlEvent(this.$geometry, 'change', function () {
      return {
        coordinates: _this3.getCoordinates(),
        extent: _this3.extent
      };
    }).pipe(throttleTime(ft), distinctUntilChanged(isEqualGeom), map$1(function (_ref) {
      var coordinates = _ref.coordinates;
      return {
        prop: 'coordinates',
        value: coordinates
      };
    }));
    this.subscribeTo(changes, function (_ref2) {
      var prop = _ref2.prop,
          value = _ref2.value;
      ++_this3.rev;

      _this3.$emit("update:".concat(prop), value);
    });
  }
  /**
   * @param {{coordinates: number[], extent: number[]}} a
   * @param {{coordinates: number[], extent: number[]}} b
   * @returns {boolean}
   */


  function isEqualGeom(a, b) {
    return isEqual(a.extent, b.extent) ? isEqual(a.coordinates, b.coordinates) : false;
  }

  var geometryContainer = {
    mixins: [projTransforms],
    methods: {
      /**
       * @return {{
       *     getGeometry: function(): module:ol/geom/Geometry~Geometry|undefined,
       *     setGeometry: function(module:ol/geom/Geometry~Geometry|undefined)
       *   }|undefined}
       * @protected
       */
      getGeometryTarget: function getGeometryTarget() {
        throw new Error('Not implemented method');
      },

      /**
       * @return {module:ol/geom/Geometry~Geometry|undefined}
       */
      getGeometry: function getGeometry() {
        return this._geometry;
      },

      /**
       * @return {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return {
          get geometryContainer() {
            return vm;
          }

        };
      },

      /**
       * @param {module:ol/geom/Geometry~Geometry|Vue|Object|undefined} geom
       * @return {void}
       * @throws {AssertionError}
       */
      setGeometry: function setGeometry(geom) {
        if (geom instanceof Vue) {
          geom = geom.$geometry;
        } else if (isPlainObject(geom)) {
          geom = this.readGeometryInDataProj(geom);
        }

        if (geom !== this._geometry) {
          this._geometry = geom;
        }

        var geomTarget = this.getGeometryTarget();

        if (geomTarget && geom !== geomTarget.getGeometry()) {
          geomTarget.setGeometry(geom);
        }
      }
    },
    created: function created() {
      /**
       * @type {module:ol/geom/Geometry~Geometry|undefined}
       * @private
       */
      this._geometry = undefined;
      Object.defineProperties(this, {
        $geometry: {
          enumerable: true,
          get: this.getGeometry
        }
      });
    }
  };

  var source = {
    mixins: [cmp$1, useMapCmp],
    props: {
      attributions: {
        type: [String, Array],
        validator: function validator(value) {
          return isString(value) || isArray(value) && value.every(isString);
        }
      },
      attributionsCollapsible: {
        type: Boolean,
        default: true
      },
      projection: String,
      wrapX: {
        type: Boolean,
        default: true
      }
    },
    computed: {
      state: function state() {
        if (!this.rev || !this.$source) {
          return;
        }

        return this.$source.getState();
      }
    },
    methods: {
      /**
       * @return {module:ol/source/Source~Source|Promise<module:ol/source/Source~Source>}
       * @protected
       */
      createOlObject: function createOlObject() {
        return this.createSource();
      },

      /**
       * @return {module:ol/source/Source~Source|Promise<module:ol/source/Source~Source>}
       * @protected
       * @abstract
       */
      createSource: function createSource() {
        throw new Error('Not implemented method');
      },

      /**
       * @return {Promise|void}
       * @protected
       */
      init: function init() {
        return cmp$1.methods.init.call(this);
      },

      /**
       * @return {Promise|void}
       * @protected
       */
      deinit: function deinit() {
        return cmp$1.methods.deinit.call(this);
      },

      /**
       * @return {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return multiMergeDescriptors(cmp$1.methods.getServices.call(this), {
          get source() {
            return vm.$source;
          }

        });
      },

      /**
       * @return {Promise|void}
       * @protected
       */
      mount: function mount() {
        this.$sourceContainer && this.$sourceContainer.setSource(this);
        return cmp$1.methods.mount.call(this);
      },

      /**
       * @return {Promise|void}
       * @protected
       */
      unmount: function unmount() {
        this.$sourceContainer && this.$sourceContainer.setSource(undefined);
        return cmp$1.methods.unmount.call(this);
      },

      /**
       * @return {Promise}
       */
      refresh: function refresh() {
        var _this = this;

        if (!this.$source) return Promise.resolve();
        return new Promise(function (resolve) {
          if (_this.$source) {
            _this.$source.once('change', function () {
              return resolve;
            });

            _this.$source.refresh();
          } else {
            resolve();
          }
        });
      },

      /**
       * Internal usage only in components that doesn't support refreshing.
       * @return {Promise}
       * @protected
       */
      remount: function remount() {
        return cmp$1.methods.remount.call(this);
      },

      /**
       * Internal usage only in components that doesn't support refreshing.
       * @return {Promise}
       * @protected
       */
      recreate: function recreate() {
        return cmp$1.methods.recreate.call(this);
      },

      /**
       * @protected
       */
      subscribeAll: function subscribeAll() {
        cmp$1.methods.subscribeAll.call(this);
      }
    },
    watch: {
      attributions: function attributions(value) {
        if (!this.$source || isEqual(value, this.$source.getAttributions())) {
          return;
        }

        this.$source.setAttributions(value);
      },
      attributionsCollapsible: function attributionsCollapsible(value) {
        if (!this.$source || value === this.$source.getAttributionsCollapsible()) {
          return;
        }

        this.scheduleRecreate();
      },
      projection: function projection(value) {
        if (!this.$source || this.$source.getProjection() && value === this.$source.getProjection().getCode()) {
          return;
        }

        this.scheduleRecreate();
      },
      wrapX: function wrapX(value) {
        if (!this.$source || value === this.$source.getWrapX()) {
          return;
        }

        this.scheduleRecreate();
      }
    },
    stubVNode: {
      empty: function empty() {
        return this.$options.name;
      }
    },
    created: function created() {
      defineServices$1.call(this);
    }
  };

  function defineServices$1() {
    var _this2 = this;

    Object.defineProperties(this, {
      /**
       * @type {module:ol/source/Source~Source|undefined}
       */
      $source: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$olObject;
        }
      },
      $map: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.map;
        }
      },
      $view: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.view;
        }
      },
      $sourceContainer: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.sourceContainer;
        }
      }
    });
  }

  var imageSource = {
    mixins: [source],
    props: {
      crossOrigin: String,
      projection: {
        type: String,
        default: EPSG_3857
      }
    },
    methods: {
      /**
       * @return {Promise}
       * @protected
       */
      init: function init() {
        return source.methods.init.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      deinit: function deinit() {
        return source.methods.deinit.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        source.methods.mount.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        source.methods.unmount.call(this);
      },
      subscribeAll: function subscribeAll() {
        source.methods.subscribeAll.call(this);
        subscribeToSourceEvents.call(this);
      }
    },
    watch: _objectSpread({}, makeWatchers(['crossOrigin'], function () {
      return function (value, prevValue) {
        if (isEqual(value, prevValue)) return;
        this.scheduleRecreate();
      };
    }))
  };

  function subscribeToSourceEvents() {
    var _this = this;

    hasSource(this);
    var events = fromOlEvent(this.$source, ['imageloadend', 'imageloaderror', 'imageloadstart']);
    this.subscribeTo(events, function (evt) {
      return _this.$emit(evt.type, evt);
    });
  }

  /**
   * Basic style mixin.
   */

  var style = {
    mixins: [cmp$1, useMapCmp],
    methods: {
      /**
       * @return {OlStyle|Promise<OlStyle>}
       * @protected
       */
      createOlObject: function createOlObject() {
        return this.createStyle();
      },

      /**
       * @return {OlStyle|Promise<OlStyle>}
       * @protected
       * @abstract
       */
      createStyle: function createStyle() {
        throw new Error('Not implemented method');
      },

      /**
       * @return {Promise}
       * @protected
       */
      init: function init() {
        return cmp$1.methods.init.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      deinit: function deinit() {
        return cmp$1.methods.deinit.call(this);
      },

      /**
       * @return {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return multiMergeDescriptors(cmp$1.methods.getServices.call(this), {
          get style() {
            return vm.$style;
          }

        });
      },

      /**
       * @return {Promise}
       */
      refresh: function refresh() {
        var _this = this;

        if (this.$olObject == null) return Promise.resolve();
        return this.remount().then(function () {
          if (!_this.$map) {
            return;
          }

          _this.$map.render();

          return fromOlEvent(_this.$map, 'postcompose').pipe(first()).toPromise();
        });
      }
    },
    stubVNode: {
      empty: function empty() {
        return this.$options.name;
      }
    },
    created: function created() {
      defineServices$2.call(this);
    }
  };

  function defineServices$2() {
    var _this2 = this;

    Object.defineProperties(this, {
      $style: {
        enumerable: true,
        get: function get() {
          return _this2.$olObject;
        }
      },
      $map: {
        enumerable: true,
        get: function get() {
          return _this2.$services && _this2.$services.map;
        }
      },
      $view: {
        enumerable: true,
        get: function get() {
          return _this2.$services && _this2.$services.view;
        }
      },
      $stylesContainer: {
        enumerable: true,
        get: function get() {
          return _this2.$services && _this2.$services.stylesContainer;
        }
      }
    });
  }

  var imageStyle = {
    mixins: [style],
    methods: {
      /**
       * @return {Promise}
       * @protected
       */
      init: function init() {
        return style.methods.init.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      deinit: function deinit() {
        return style.methods.deinit.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        this.$stylesContainer && this.$stylesContainer.setImage(this);
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        this.$stylesContainer && this.$stylesContainer.setImage(undefined);
      },

      /**
       * @return {Object}
       * @protected
       */
      getServices: function getServices() {
        return style.methods.getServices.call(this);
      },

      /**
       * @return {Promise}
       */
      refresh: function refresh() {
        // recreate style
        return this.recreate();
      }
    },
    stubVNode: {
      empty: false,
      attrs: function attrs() {
        return {
          class: this.$options.name
        };
      }
    }
  };

  var interaction$1 = {
    mixins: [cmp$1, useMapCmp],
    props: {
      id: {
        type: [String, Number],
        default: function _default() {
          return v4_1();
        }
      },
      active: {
        type: Boolean,
        default: true
      },

      /**
       * Priority of interactions in the event handling stream.
       * The higher the value, the sooner it will handle map event.
       * @type {number}
       */
      priority: {
        type: Number,
        default: 0
      }
    },
    methods: {
      /**
       * @return {Promise<module:ol/interaction/Interaction~Interaction>}
       * @protected
       */
      createOlObject: function () {
        var _createOlObject = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee() {
          var interaction$$1;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.createInteraction();

                case 2:
                  interaction$$1 = _context.sent;
                  initializeInteraction(interaction$$1, this.id, this.priority);
                  interaction$$1.setActive(this.active);
                  return _context.abrupt("return", interaction$$1);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function createOlObject() {
          return _createOlObject.apply(this, arguments);
        };
      }(),

      /**
       * @return {module:ol/interaction/Interaction~Interaction|Promise<module:ol/interaction/Interaction~Interaction>}
       * @protected
       * @abstract
       */
      createInteraction: function createInteraction() {
        throw new Error('Not implemented method');
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return multiMergeDescriptors(cmp$1.methods.getServices.call(this), {
          get interaction() {
            return vm.$interaction;
          }

        });
      },

      /**
       * @return {Promise} Resolves when initialization completes
       * @protected
       */
      init: function init() {
        return cmp$1.methods.init.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      deinit: function deinit() {
        return cmp$1.methods.deinit.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        this.$interactionsContainer && this.$interactionsContainer.addInteraction(this);
        this.subscribeAll();
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        this.unsubscribeAll();
        this.$interactionsContainer && this.$interactionsContainer.removeInteraction(this);
      },

      /**
       * @return {Promise}
       */
      refresh: function refresh() {
        return cmp$1.methods.refresh.call(this);
      },

      /**
       * @return {Promise}
       */
      recreate: function recreate() {
        return cmp$1.methods.recreate.call(this);
      },

      /**
       * @return {Promise}
       */
      remount: function remount() {
        return cmp$1.methods.remount.call(this);
      },

      /**
       * @protected
       */
      subscribeAll: function subscribeAll() {}
    },
    watch: {
      id: function id(value) {
        if (!this.$interaction || isEqual(value, getInteractionId(value))) {
          return;
        }

        setInteractionId(this.$interaction, value);
      },
      active: function active(value) {
        if (!this.$interaction || value === this.$interaction.getActive()) {
          return;
        }

        this.$interaction.setActive(value);
      },
      priority: function priority(value) {
        if (!this.$interaction || !this.$interactionsContainer || value === getInteractionPriority(this.$interaction)) {
          return;
        }

        setInteractionPriority(this.$interaction, value); // todo replace with event

        this.$interactionsContainer.sortInteractions();
      }
    },
    stubVNode: {
      empty: function empty() {
        return this.$options.name;
      }
    },
    created: function created() {
      defineServices$3.call(this);
    }
  };

  function defineServices$3() {
    var _this = this;

    Object.defineProperties(this, {
      /**
       * @type {module:ol/interaction/Interaction~Interaction|undefined}
       */
      $interaction: {
        enumerable: true,
        get: function get$$1() {
          return _this.$olObject;
        }
      },
      $map: {
        enumerable: true,
        get: function get$$1() {
          return _this.$services && _this.$services.map;
        }
      },
      $view: {
        enumerable: true,
        get: function get$$1() {
          return _this.$services && _this.$services.view;
        }
      },
      $interactionsContainer: {
        enumerable: true,
        get: function get$$1() {
          return _this.$services && _this.$services.interactionsContainer;
        }
      }
    });
  }

  var interactionsContainer = {
    mixins: [rxSubs],
    computed: {
      interactionIds: function interactionIds() {
        if (!this.rev) return [];
        return this.getInteractions().map(getInteractionId);
      }
    },
    methods: {
      /**
       * @param {Interaction|Vue} interaction
       * @return {void}
       */
      addInteraction: function addInteraction(interaction$$1) {
        interaction$$1 = interaction$$1 instanceof Vue ? interaction$$1.$interaction : interaction$$1;
        instanceOf(interaction$$1, Interaction);

        if (this.getInteractionById(getInteractionId(interaction$$1)) == null) {
          initializeInteraction(interaction$$1);

          this._interactionsCollection.push(interaction$$1);

          this.sortInteractions();
        }
      },

      /**
       * @param {Interaction|Vue} interaction
       * @return {void}
       */
      removeInteraction: function removeInteraction(interaction$$1) {
        interaction$$1 = this.getInteractionById(getInteractionId(interaction$$1));
        if (!interaction$$1) return;

        this._interactionsCollection.remove(interaction$$1);

        this.sortInteractions();
      },

      /**
       * @return {Interaction[]}
       */
      getInteractions: function getInteractions() {
        return this._interactionsCollection.getArray();
      },

      /**
       * @return {Collection<Interaction>>}
       */
      getInteractionsCollection: function getInteractionsCollection() {
        return this._interactionsCollection;
      },

      /**
       * @param {string|number} interactionId
       * @return {Interaction|undefined}
       */
      getInteractionById: function getInteractionById(interactionId) {
        return this._interactionsCollection.getArray().find(function (interaction$$1) {
          return getInteractionId(interaction$$1) === interactionId;
        });
      },

      /**
       * @return {void}
       */
      sortInteractions: function sortInteractions(sorter) {
        sorter || (sorter = this.getDefaultInteractionsSorter());

        this._interactionsCollection.getArray().sort(sorter);
      },

      /**
       * @return {function}
       * @protected
       */
      getDefaultInteractionsSorter: function getDefaultInteractionsSorter() {
        // sort interactions by priority in asc order
        // the higher the priority, the earlier the interaction handles the event
        return function (a, b) {
          var ap = getInteractionPriority(a) || 0;
          var bp = getInteractionPriority(b) || 0;
          return ap === bp ? 0 : ap - bp;
        };
      },

      /**
       * @return {void}
       */
      clearInteractions: function clearInteractions() {
        this._interactionsCollection.clear();
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return {
          get interactionsContainer() {
            return vm;
          }

        };
      }
    },
    created: function created() {
      var _this = this;

      /**
       * @type {Collection<Interaction>>}
       * @private
       */
      this._interactionsCollection = new Collection();
      var add = fromOlEvent(this._interactionsCollection, 'add');
      var remove = fromOlEvent(this._interactionsCollection, 'remove');
      var events = merge(add, remove);
      this.subscribeTo(events, function (_ref) {
        var type = _ref.type,
            element = _ref.element;
        ++_this.rev;

        _this.$emit(type + ':interaction', element);
      });
    }
  };

  var sourceContainer = {
    methods: {
      /**
       * @return {{
       *     setSource: function(module:ol/source/Source~Source): void,
       *     getSource: function(): module:ol/source/Source~Source
       *   }|undefined}
       * @protected
       */
      getSourceTarget: function getSourceTarget() {
        throw new Error('Not implemented method');
      },

      /**
       * @return {module:ol/source/Source~Source|undefined}
       */
      getSource: function getSource() {
        return this._source;
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return {
          get sourceContainer() {
            return vm;
          }

        };
      },

      /**
       * @param {module:ol/source/Source~Source|Vue|undefined} source
       * @return {void}
       */
      setSource: function setSource(source) {
        source = source instanceof Vue ? source.$source : source;

        if (source !== this._source) {
          this._source = source;
        }
        /**
         * @type {module:ol/layer/Layer~Layer|Builder}
         */


        var sourceTarget = this.getSourceTarget();

        if (sourceTarget && source !== sourceTarget.getSource()) {
          sourceTarget.setSource(source);
        }
      }
    }
  };

  var layer = {
    mixins: [cmp$1, useMapCmp, sourceContainer],
    props: {
      id: {
        type: [String, Number],
        default: function _default() {
          return v4_1();
        }
      },

      /**
       * The bounding extent for layer rendering defined in the map view projection.
       * The layer will not be rendered outside of this extent.
       * @default undefined
       * @type {number[]|undefined}
       */
      extent: {
        type: Array,
        validator: function validator(value) {
          return value.length === 4;
        }
      },
      minResolution: Number,
      maxResolution: Number,
      opacity: {
        type: Number,
        default: 1
      },
      overlay: {
        type: Boolean,
        default: false
      },
      visible: {
        type: Boolean,
        default: true
      },
      zIndex: Number
    },
    methods: {
      /**
       * @return {Promise<module:ol/layer/BaseLayer~BaseLayer>}
       * @protected
       */
      createOlObject: function () {
        var _createOlObject = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee() {
          var layer;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.createLayer();

                case 2:
                  layer = _context.sent;
                  initializeLayer(layer, this.id);
                  return _context.abrupt("return", layer);

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function createOlObject() {
          return _createOlObject.apply(this, arguments);
        };
      }(),

      /**
       * @return {module:ol/layer/BaseLayer~BaseLayer|Promise<module:ol/layer/BaseLayer~BaseLayer>}
       * @protected
       * @abstract
       */
      createLayer: function createLayer() {
        throw new Error('Not implemented method');
      },

      /**
       * @return {Promise<Vue<module:ol/layer/BaseLayer~BaseLayer>>}
       * @protected
       */
      init: function init() {
        return cmp$1.methods.init.call(this);
      },

      /**
       * @return {void|Promise}
       * @protected
       */
      deinit: function deinit() {
        return cmp$1.methods.deinit.call(this);
      },

      /**
       * @param {number[]} pixel
       * @return {boolean}
       */
      isAtPixel: function isAtPixel(pixel) {
        var _this = this;

        hasMap(this);
        return this.$map.forEachLayerAtPixel(pixel, function (layer) {
          return layer === _this.$layer;
        });
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return multiMergeDescriptors(cmp$1.methods.getServices.call(this), sourceContainer.methods.getServices.call(this), {
          get layer() {
            return vm.$layer;
          }

        });
      },

      /**
       * @return {{
       *     setSource: function(module:ol/source/Source~Source): void,
       *     getSource: function(): module:ol/source/Source~Source
       *   }|undefined}
       * @protected
       */
      getSourceTarget: function getSourceTarget() {
        return this.$layer;
      },

      /**
       * @return {Promise}
       * @protected
       */
      mount: function mount() {
        if (this.overlay && this.$map) {
          this.setMap(this.$map);
        } else if (this.$layersContainer) {
          this.$layersContainer.addLayer(this);
        }

        return cmp$1.methods.mount.call(this);
      },

      /**
       * @return {Promise}
       * @protected
       */
      unmount: function unmount() {
        if (this.overlay) {
          this.setMap(undefined);
        } else if (this.$layersContainer) {
          this.$layersContainer.removeLayer(this);
        }

        return cmp$1.methods.unmount.call(this);
      },

      /**
       * Updates layer state
       * @return {Promise}
       */
      refresh: function refresh() {
        return cmp$1.methods.refresh.call(this);
      },

      /**
       * Internal usage only in components that doesn't support refreshing.
       * @return {Promise}
       * @protected
       */
      remount: function remount() {
        return cmp$1.methods.remount.call(this);
      },

      /**
       * Internal usage only in components that doesn't support refreshing.
       * @return {Promise}
       * @protected
       */
      recreate: function recreate() {
        return cmp$1.methods.remount.call(this);
      },

      /**
       * @protected
       */
      subscribeAll: function subscribeAll() {
        cmp$1.methods.subscribeAll.call(this);
        subscribeToLayerEvents.call(this);
      },

      /**
       * @param {module:ol/Map~Map|Vue|undefined} map
       */
      setMap: function setMap(map$$1) {
        hasLayer(this);
        map$$1 = map$$1 instanceof Vue ? map$$1.$map : map$$1;
        this.$layer.setMap(map$$1);
      }
    },
    watch: _objectSpread({
      id: function id(value) {
        if (!this.$layer || value === getLayerId(this.$layer)) {
          return;
        }

        setLayerId(this.$layer, value);
      },
      maxResolution: function maxResolution(value) {
        if (!this.$layer || value === this.$layer.getMaxResolution()) {
          return;
        }

        this.$layer.setMaxResolution(value);
      },
      minResolution: function minResolution(value) {
        if (!this.$layer || value === this.$layer.getMinResolution()) {
          return;
        }

        this.$layer.setMinResolution(value);
      },
      opacity: function opacity(value) {
        if (!this.$layer || value === this.$layer.getOpacity()) {
          return;
        }

        this.$layer.setOpacity(value);
      },
      visible: function visible(value) {
        if (!this.$layer || value === this.$layer.getVisible()) {
          return;
        }

        this.$layer.setVisible(value);
      },
      zIndex: function zIndex(value) {
        if (!this.$layer || value === this.$layer.getZIndex()) {
          return;
        }

        this.$layer.setZIndex(value);
      },
      extent: function extent$$1(value) {
        if (!this.$layer || isEqual(value, this.$layer.getExtent())) {
          return;
        }

        this.$layer.setExtent(value);
      }
    }, makeWatchers(['overlay'], function () {
      return function (value, prevValue) {
        if (isEqual(value, prevValue)) return;
        this.scheduleRecreate();
      };
    })),
    stubVNode: {
      attrs: function attrs() {
        return {
          id: [this.$options.name, this.id].join('-'),
          class: this.$options.name
        };
      }
    },
    created: function created() {
      defineServices$4.call(this);
    }
  };

  function defineServices$4() {
    var _this2 = this;

    Object.defineProperties(this, {
      $layer: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$olObject;
        }
      },
      $map: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.map;
        }
      },
      $view: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.view;
        }
      },
      $layersContainer: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.layersContainer;
        }
      }
    });
  }

  function subscribeToLayerEvents() {
    var _this3 = this;

    hasLayer(this);
    var events = fromOlEvent(this.$layer, ['postcompose', 'precompose', 'render']);
    this.subscribeTo(events, function (evt) {
      return _this3.$emit(evt.type, evt);
    });
  }

  var layersContainer = {
    mixins: [rxSubs],
    computed: {
      layerIds: function layerIds() {
        if (!this.rev) return [];
        return this.getLayers().map(getLayerId);
      }
    },
    methods: {
      /**
       * @param {BaseLayer|Vue} layer
       * @return {void}
       */
      addLayer: function addLayer(layer) {
        layer = layer instanceof Vue ? layer.$layer : layer;
        instanceOf(layer, BaseLayer);

        if (this.getLayerById(getLayerId(layer)) == null) {
          initializeLayer(layer);

          this._layersCollection.push(layer);
        }
      },

      /**
       * @param {BaseLayer|Vue} layer
       * @return {void}
       */
      removeLayer: function removeLayer(layer) {
        layer = this.getLayerById(getLayerId(layer));
        if (!layer) return;

        this._layersCollection.remove(layer);
      },

      /**
       * @return {BaseLayer[]}
       */
      getLayers: function getLayers() {
        return this._layersCollection.getArray();
      },

      /**
       * @return {module:ol/Collection~Collection<BaseLayer>}
       */
      getLayersCollection: function getLayersCollection() {
        return this._layersCollection;
      },

      /**
       * @param {string|number} layerId
       * @return {BaseLayer|undefined}
       */
      getLayerById: function getLayerById(layerId) {
        return this._layersCollection.getArray().find(function (layer) {
          return getLayerId(layer) === layerId;
        });
      },

      /**
       * @return {void}
       */
      clearLayers: function clearLayers() {
        this._layersCollection.clear();
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return {
          get layersContainer() {
            return vm;
          }

        };
      }
    },
    created: function created() {
      var _this = this;

      /**
       * @type {Collection<BaseLayer>}
       * @private
       */
      this._layersCollection = new Collection();
      var add = fromOlEvent(this._layersCollection, 'add');
      var remove = fromOlEvent(this._layersCollection, 'remove');
      var events = merge(add, remove);
      this.subscribeTo(events, function (_ref) {
        var type = _ref.type,
            element = _ref.element;
        ++_this.rev;

        _this.$emit(type + ':layer', element);
      });
    }
  };

  var overlaysContainer = {
    mixins: [rxSubs],
    computed: {
      overlayIds: function overlayIds() {
        if (!this.rev) return [];
        return this.getOverlays().map(getOverlayId);
      }
    },
    methods: {
      /**
       * @param {Overlay|Vue} overlay
       * @return {void}
       */
      addOverlay: function addOverlay(overlay) {
        overlay = overlay instanceof Vue ? overlay.$overlay : overlay;
        instanceOf(overlay, Overlay);

        if (this.getOverlayById(getOverlayId(overlay)) == null) {
          initializeOverlay(overlay);

          this._overlaysCollection.push(overlay);
        }
      },

      /**
       * @param {Overlay|Vue} overlay
       * @return {void}
       */
      removeOverlay: function removeOverlay(overlay) {
        overlay = this.getOverlayById(getOverlayId(overlay));
        if (!overlay) return;

        this._overlaysCollection.remove(overlay);
      },

      /**
       * @return {Overlay[]}
       */
      getOverlays: function getOverlays() {
        return this._overlaysCollection.getArray();
      },

      /**
       * @return {Collection<Overlay>}
       */
      getOverlaysCollection: function getOverlaysCollection() {
        return this._overlaysCollection;
      },

      /**
       * @param {string|number} overlayId
       * @return {Overlay|undefined}
       */
      getOverlayById: function getOverlayById(overlayId) {
        return this._overlaysCollection.getArray().find(function (overlay) {
          return getOverlayId(overlay) === overlayId;
        });
      },

      /**
       * @return {void}
       */
      clearOverlays: function clearOverlays() {
        this._overlaysCollection.clear();
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return {
          get overlaysContainer() {
            return vm;
          }

        };
      }
    },
    created: function created() {
      var _this = this;

      /**
       * @type {Collection<Overlay>}
       * @private
       */
      this._overlaysCollection = new Collection();
      var add = fromOlEvent(this._overlaysCollection, 'add');
      var remove = fromOlEvent(this._overlaysCollection, 'remove');
      var events = merge(add, remove);
      this.subscribeTo(events, function (_ref) {
        var type = _ref.type,
            element = _ref.element;
        ++_this.rev;

        _this.$emit(type + ':overlay', element);
      });
    }
  };

  var stylesContainer = {
    created: function created() {
      /**
       * @type {module:ol/style/Style~Style[]|module:ol/style/Style~StyleFunction|Vue|undefined}
       * @private
       */
      this._styles = undefined;
    },
    methods: {
      /**
       * Default style factory
       * @return {module:ol/style/Style~Style[]|module:ol/style/Style~StyleFunction|undefined}
       * @protected
       */
      getDefaultStyles: function getDefaultStyles() {},

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return {
          get stylesContainer() {
            return vm;
          }

        };
      },

      /**
       * @return {module:ol/style/Style~Style[]|module:ol/style/Style~StyleFunction|Vue|undefined}
       */
      getStyles: function getStyles() {
        return this._styles;
      },

      /**
       * @param {module:ol/style/Style~Style|module:ol/style/Style~StyleFunction|Vue|undefined} style
       * @return {void}
       */
      addStyle: function addStyle(style) {
        var currentStyles = this.getStyles();
        var olStyle = style instanceof Vue ? style.$style : style;

        if (isFunction(olStyle)) {

          currentStyles = style;
        } else {
          if (!Array.isArray(currentStyles)) {

            currentStyles = [];
          }

          style = style instanceof Vue ? style : {
            $style: style,
            condition: true
          };

          if (!currentStyles.includes(style)) {
            currentStyles.push(style);
          }
        }

        this.setStyle(currentStyles);
      },

      /**
       * @param {Array<{style: module:ol/style/Style~Style, condition: (function|boolean|undefined)}>|module:ol/style/Style~StyleFunction|Vue|undefined} styles
       * @return {void}
       */
      setStyle: function setStyle(styles) {
        if (styles === this._styles) return;
        this._styles = styles;
        var styleTarget = this.getStyleTarget();
        if (!styleTarget) return;

        if (this._styles === null || this._styles) {
          styleTarget.setStyle(this.createStyleFunc());
        } else {
          styleTarget.setStyle(undefined);
        }
      },

      /**
       * @param {module:ol/style/Style~Style|module:ol/style/Style~StyleFunction|Vue|undefined} style
       * @return {void}
       */
      removeStyle: function removeStyle(style) {
        var currentStyles = this.getStyles();

        if (currentStyles === style) {
          currentStyles = undefined;
        } else if (Array.isArray(currentStyles)) {
          currentStyles = currentStyles.filter(function (s) {
            return style instanceof Vue ? s !== style : s.$style !== style;
          });
          currentStyles.length || (currentStyles = undefined);
        }

        this.setStyle(currentStyles);
      },

      /**
       * Returns OL object that can be styled (i.e. has setStyle/getStyle methods) or undefined
       * @return {*}
       * @protected
       * @abstract
       */
      getStyleTarget: function getStyleTarget() {
        throw new Error('Not implemented method');
      },

      /**
       * Style function factory
       * @returns {module:ol/style/Style~StyleFunction}
       * @protected
       */
      createStyleFunc: function createStyleFunc() {
        var vm = this;
        var defaultStyles = this.getDefaultStyles();
        return function __styleTargetStyleFunc(feature, resolution) {
          if (!feature.getGeometry()) return;
          var styles = vm.getStyles();
          /* eslint-disable brace-style */
          // handle provided styles
          // styles - StyleFunction or vl-style-func

          if (styles && (isFunction(styles) || isFunction(styles.$style))) {
            var styleFunc = isFunction(styles) ? styles : styles.$style;
            styles = styleFunc(feature, resolution);
          } // styles is array of { $style: Style, condition: (bool|function():bool) }
          else if (Array.isArray(styles)) {
              styles = reduce(styles, function (newStyles, _ref) {
                var $style = _ref.$style,
                    condition$$1 = _ref.condition;

                if (condition$$1 == null || condition$$1 === true || isFunction(condition$$1) && condition$$1(feature, resolution)) {
                  newStyles.push($style);
                }

                return newStyles;
              }, []);
            }
          /* eslint-enable brace-style */
          // not empty or null style


          if (styles === null || Array.isArray(styles) && styles.length) {
            return styles;
          } // fallback to default style


          styles = defaultStyles;

          if (styles) {
            return isFunction(styles) ? styles(feature, resolution) : styles;
          }
        };
      }
    }
  };

  /*!
  OpenLayers tile url function to load tile seeded with TileCache url scheme

  @package ol-tilecache
  @author Vladimir Vershinin <ghettovoice@gmail.com>
  @version 3.0.1
  @licence MIT
  @copyright (c) 2016-2018, Vladimir Vershinin <ghettovoice@gmail.com>
  */
  /**
   * This file is part of ol-tilecache package.
   * @module ol-tilecache
   * @license MIT
   * @author Vladimir Vershinin
   */

  /**
   * Left zero pad.
   *
   * @param {string | number} num
   * @param {number} places
   * @returns {string}
   */

  function zeroPad(num, places) {
    var zero = places - num.toString().length + 1;
    return (new Array(parseInt(zero > 0 && zero, 10)).join("0") + num).toString().slice(-places);
  }
  /**
   * The % operator in JavaScript returns the remainder of a / b, but differs from
   * some other languages in that the result will have the same sign as the
   * dividend. For example, -1 % 8 == -1, whereas in some other languages
   * (such as Python) the result would be 7. This function emulates the more
   * correct modulo behavior, which is useful for certain applications such as
   * calculating an offset index in a circular list.
   *
   * @param {number} a The dividend.
   * @param {number} b The divisor.
   * @return {number} a % b where the result is between 0 and b (either 0 <= x < b
   *     or b < x <= 0, depending on the sign of b).
   * @link https://closure-library.googlecode.com/git-history/docs/local_closure_goog_math_math.js.source.html#line73
   */


  function modulo$1(a, b) {
    var m = a % b;
    return m * b < 0 ? m + b : m;
  }

  function isArray$2(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  }

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();
  /**
   * This file is part of ol-tilecache package.
   * @module ol-tilecache
   * @license MIT
   * @author Vladimir Vershinin
   */

  /**
   * @param {TileGrid} tileGrid
   * @param {number[]} extent
   * @param {number} z
   * @return {{minX, minY, maxX, maxY}}
   */


  function calculateTileRangeForZ(tileGrid, extent$$1, z) {
    var resolution = tileGrid.getResolution(z);

    var _getTileCoordForXYAnd = getTileCoordForXYAndResolution(tileGrid, extent$$1[0], extent$$1[1], resolution, false),
        _getTileCoordForXYAnd2 = slicedToArray(_getTileCoordForXYAnd, 2),
        minX = _getTileCoordForXYAnd2[0],
        minY = _getTileCoordForXYAnd2[1];

    var _getTileCoordForXYAnd3 = getTileCoordForXYAndResolution(tileGrid, extent$$1[2], extent$$1[3], resolution, true),
        _getTileCoordForXYAnd4 = slicedToArray(_getTileCoordForXYAnd3, 2),
        maxX = _getTileCoordForXYAnd4[0],
        maxY = _getTileCoordForXYAnd4[1];

    return {
      minX: minX,
      minY: minY,
      maxX: maxX,
      maxY: maxY
    };
  }
  /**
   * @param {TileGrid} tileGrid
   * @param {number} x
   * @param {number} y
   * @param {number} resolution
   * @param {boolean} reverseIntersectionPolicy
   * @return {number[]}
   */


  function getTileCoordForXYAndResolution(tileGrid, x, y, resolution, reverseIntersectionPolicy) {
    var z = tileGrid.getZForResolution(resolution);
    var scale = resolution / tileGrid.getResolution(z);
    var origin = tileGrid.getOrigin(z);
    var tileSize = tileGrid.getTileSize(z);

    if (!isArray$2(tileSize)) {
      tileSize = [tileSize, tileSize];
    }

    var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
    var adjustY = reverseIntersectionPolicy ? 0 : 0.5;
    var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
    var yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);
    var tileCoordX = scale * xFromOrigin / tileSize[0];
    var tileCoordY = scale * yFromOrigin / tileSize[1];

    if (reverseIntersectionPolicy) {
      tileCoordX = Math.ceil(tileCoordX) - 1;
      tileCoordY = Math.ceil(tileCoordY) - 1;
    } else {
      tileCoordX = Math.floor(tileCoordX);
      tileCoordY = Math.floor(tileCoordY);
    }

    return [tileCoordX, tileCoordY];
  }
  /**
   * @param {{minX, minY, maxX, maxY}} tileRange
   * @return {number}
   */


  function getTileRangeHeight(tileRange) {
    return tileRange.maxY - tileRange.minY + 1;
  }
  /**
   * This file is part of ol-tilecache package.
   * @module ol-tilecache
   * @license MIT
   * @author Vladimir Vershinin
   */


  var zRegEx = /{z}/g;
  var zPadRegEx = /{0z}/g;
  var xRegEx = /{x\d?}/g;
  var yRegEx = /{y\d?}/g;
  var dashYRegEx = /{-y\d?}/g;
  var EPSG3857_EXTENT = [-20037508.342789244, -20037508.342789244, 20037508.342789244, 20037508.342789244];
  /**
   * Basic create factory.
   *
   * @param {string} url Url template
   * @param {TileGrid} [tileGrid] Tile grid.
   * @param {Extent|number[]} [extent] Tile grid extent.
   * @returns {function(tileCoord: TileCoord)}
   * @static
   * @public
   */

  function createTileUrlFunction(url) {
    var tileGrid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : tilegrid.createXYZ();
    var extent$$1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSG3857_EXTENT;
    return createTileUrlFunctionFromTemplates(expandUrl(url), tileGrid, extent$$1);
  }
  /**
   * Creates tile URL function from single template.
   *
   * @param {string} template Source url
   * @param {TileGrid} [tileGrid] Tile grid.
   * @param {Extent|number[]} [extent] Tile grid extent.
   * @returns {function(tileCoord: TileCoord)}
   * @private
   */


  function createTileUrlFunctionFromTemplate(template) {
    var tileGrid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : tilegrid.createXYZ();
    var extent$$1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSG3857_EXTENT;
    return (
      /**
       * @param {TileCoord} tileCoord Tile Coordinate.
       * @return {string | undefined} Tile URL.
       */
      function (tileCoord) {
        if (tileCoord != null) {
          return template.replace(zRegEx, zoomReplacer(tileCoord[0])).replace(zPadRegEx, zoomReplacer(tileCoord[0], true)).replace(xRegEx, coordReplacer(tileCoord[1])).replace(yRegEx, function (part) {
            var y = -tileCoord[2] - 1;
            return coordReplacer(y)(part);
          }).replace(dashYRegEx, function (part) {
            var z = tileCoord[0]; // The {-y} placeholder requires a tile grid with extent

            var range = calculateTileRangeForZ(tileGrid, extent$$1, z);
            var y = getTileRangeHeight(range) + tileCoord[2];
            return coordReplacer(y)(part);
          });
        }
      }
    );
  }
  /**
   * Creates tile URL function from multiple templates.
   *
   * @param {string[]} templates Url templates
   * @param {TileGrid} [tileGrid] Tile grid.
   * @param {Extent | number[]} [extent] Tile grid extent.
   * @returns {function(tileCoord: TileCoord)}
   * @private
   */


  function createTileUrlFunctionFromTemplates(templates) {
    var tileGrid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : tilegrid.createXYZ();
    var extent$$1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSG3857_EXTENT;
    return createTileUrlFunctionFromTileUrlFunctions(templates.map(function (tileUrlFunction) {
      return createTileUrlFunctionFromTemplate(tileUrlFunction, tileGrid, extent$$1);
    }));
  }
  /**
   * @param zoom
   * @param pad
   * @returns {function}
   * @private
   */


  function zoomReplacer(zoom, pad) {
    return function () {
      return pad ? zeroPad(zoom, 2) : zoom.toString();
    };
  }
  /**
   * @param coord
   * @returns {function}
   * @private
   */


  function coordReplacer(coord) {
    return function (part) {
      var match = part.match(/\d/);

      if (match) {
        return zeroPad(coord, 9).slice((match[0] - 1) * 3, match[0] * 3);
      }

      return coord.toString();
    };
  }
  /**
   * @param {string} url
   * @returns {Array.<string>}
   * @private
   */


  function expandUrl(url) {
    var urls = [];
    var match = /{(\d)-(\d)}/.exec(url) || /{([a-z])-([a-z])}/.exec(url);

    if (match) {
      var startCharCode = match[1].charCodeAt(0);
      var stopCharCode = match[2].charCodeAt(0);

      for (var charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
        urls.push(url.replace(match[0], String.fromCharCode(charCode)));
      }
    } else {
      urls.push(url);
    }

    return urls;
  }
  /**
   * @param {Array.<function(tileCoord: TileCoord)>} tileUrlFunctions
   * @returns {function(tileCoord: TileCoord)}
   * @private
   */


  function createTileUrlFunctionFromTileUrlFunctions(tileUrlFunctions) {
    if (tileUrlFunctions.length === 1) {
      return tileUrlFunctions[0];
    }

    return (
      /**
       * @param {TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {Projection} projection Projection.
       * @return {string | undefined} Tile URL.
       */
      function (tileCoord, pixelRatio, projection) {
        if (tileCoord != null) {
          var h = (tileCoord[1] << tileCoord[0]) + tileCoord[2];
          var index = modulo$1(h, tileUrlFunctions.length);
          return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
        }
      }
    );
  }
  /**
   * This file is part of ol-tilecache package.
   * @module ol-tilecache
   * @license MIT
   * @author Vladimir Vershinin
   */
  // for backward compatibility


  if (typeof window !== 'undefined' && window.ol) {
    window.ol.tileCacheUrlFn = {
      createTileUrlFunction: createTileUrlFunction,
      createTileUrlFunctionFromTemplate: createTileUrlFunctionFromTemplate,
      createTileUrlFunctionFromTemplates: createTileUrlFunctionFromTemplates
    };
  }

  var withUrl = {
    props: {
      url: {
        type: String
      }
    },
    computed: {
      /**
       * @type {string}
       */
      urlTmpl: function urlTmpl() {
        return replaceTokens(this.url, pick(this, this.urlTokens));
      },

      /**
       * @type {string[]}
       */
      urlTokens: function urlTokens() {
        return [];
      }
    }
  };

  var tileSource = {
    mixins: [source, withUrl],
    props: {
      cacheSize: {
        type: Number,
        default: CACHE_SIZE
      },
      crossOrigin: String,
      maxZoom: {
        type: Number,
        default: MAX_ZOOM
      },
      minZoom: {
        type: Number,
        default: MIN_ZOOM
      },
      opaque: Boolean,
      projection: {
        type: String,
        default: EPSG_3857
      },
      reprojectionErrorThreshold: {
        type: Number,
        default: REPROJ_ERR_THRESHOLD
      },
      tilePixelRatio: {
        type: Number,
        default: PIXEL_RATIO
      },
      tileSize: {
        type: Array,
        default: function _default() {
          return [TILE_SIZE, TILE_SIZE];
        },
        validator: function validator(value) {
          return value.length === 2;
        }
      },

      /**
       * @type {module:ol/Tile~LoadFunction}
       */
      tileLoadFunction: Function,
      tileKey: String,

      /**
       * URL template or custom tile URL function.
       * @type {string|module:ol/Tile~UrlFunction}
       */
      url: {
        type: [String, Function],
        required: true
      },

      /**
       * Duration of the opacity transition for rendering. To disable the opacity transition, pass `0`.
       * @type {number}
       */
      transition: Number
    },
    computed: {
      /**
       * @type {string|undefined}
       */
      urlTmpl: function urlTmpl() {
        if (!isString(this.url)) {
          return;
        }

        return replaceTokens(this.url, pick(this, this.urlTokens));
      },

      /**
       * @returns {function}
       */
      urlFunc: function urlFunc() {
        if (!this.url) {
          return;
        }

        var url;

        if (this.urlTmpl != null) {
          var extent$$1 = createExtentFromProjection(this.projection);
          url = createTileUrlFunction(this.urlTmpl, this._tileGrid, extent$$1);
        } else {
          url = this.url;
        }

        return url;
      }
    },
    methods: {
      /**
       * @return {Promise}
       * @protected
       */
      init: function init() {
        /**
         * @type {module:ol/Tile~UrlFunction}
         * @protected
         */
        this._tileGrid = tilegrid.createXYZ({
          extent: createExtentFromProjection(this.projection),
          maxZoom: this.maxZoom,
          minZoom: this.minZoom,
          tileSize: this.tileSize
        });
        return source.methods.init.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      deinit: function deinit() {
        return source.methods.deinit.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        source.methods.mount.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        source.methods.unmount.call(this);
      },
      subscribeAll: function subscribeAll() {
        source.methods.subscribeAll.call(this);
        subscribeToSourceEvents$1.call(this);
      }
    },
    watch: _objectSpread({
      opaque: function opaque(value) {
        if (!this.$source || value === this.$source.getOpaque()) {
          return;
        }

        this.scheduleRecreate();
      },
      tilePixelRatio: function tilePixelRatio(value) {
        if (!this.$source || value === this.$source.getOpaque()) {
          return;
        }

        this.scheduleRecreate();
      },
      tileKey: function tileKey(value) {
        if (!this.$source || value === this.$source.getKey()) {
          return;
        }

        this.$source.setKey(value);
      },
      tileLoadFunction: function tileLoadFunction(value, prevValue) {
        if (!this.$source || isEqual(value, prevValue)) return;
        this.$source.setTileLoadFunction(value);
      },
      url: function url() {
        if (!this.$source) return;
        this.$source.setTileUrlFunction(this.createUrlFunc());
        this.scheduleRefresh();
      }
    }, makeWatchers(['cacheSize', 'crossOrigin', 'reprojectionErrorThreshold', 'transition', 'maxZoom', 'minZoom', 'tileSize'], function () {
      return function (value, prevValue) {
        if (isEqual(value, prevValue)) return;
        this.scheduleRecreate();
      };
    }))
  };

  function subscribeToSourceEvents$1() {
    var _this = this;

    hasSource(this);
    var events = fromOlEvent(this.$source, ['tileloadstart', 'tileloadend', 'tileloaderror']);
    this.subscribeTo(events, function (evt) {
      return _this.$emit(evt.type, evt);
    });
  }

  var vectorLayer = {
    mixins: [layer, stylesContainer],
    props: {
      /**
       * When set to `true`, feature batches will be recreated during animations.
       * @type {boolean}
       * @default false
       */
      updateWhileAnimating: Boolean,

      /**
       * When set to `true`, feature batches will be recreated during interactions.
       * @type {boolean}
       * @default false
       */
      updateWhileInteracting: Boolean,

      /**
       * @type {number|undefined}
       */
      renderBuffer: {
        type: Number,
        default: 100
      },
      renderOrder: Function,
      renderMode: {
        type: String,
        default: 'vector',
        validator: function validator(value) {
          return ['vector', 'image'].includes(value);
        }
      },

      /**
       * @type {boolean}
       */
      declutter: Boolean
    },
    methods: {
      /**
       * @return {Promise<Vue<Layer>>}
       * @protected
       */
      init: function init() {
        return layer.methods.init.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      deinit: function deinit() {
        return layer.methods.deinit.call(this);
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        return multiMergeDescriptors(layer.methods.getServices.call(this), stylesContainer.methods.getServices.call(this));
      },

      /**
       * @return {Vector|undefined}
       * @protected
       */
      getStyleTarget: function getStyleTarget() {
        return this.$layer;
      },

      /**
       * @return {Promise|void}
       * @protected
       */
      mount: function mount() {
        return layer.methods.mount.call(this);
      },

      /**
       * @return {Promise|void}
       * @protected
       */
      unmount: function unmount() {
        return layer.methods.unmount.call(this);
      },

      /**
       * Updates layer state
       * @return {Promise}
       */
      refresh: function refresh() {
        return layer.methods.refresh.call(this);
      },

      /**
       * Internal usage only in components that doesn't support refreshing.
       * @return {Promise<void>}
       * @protected
       */
      remount: function remount() {
        return layer.methods.remount.call(this);
      },

      /**
       * Internal usage only in components that doesn't support refreshing.
       * @return {Promise<void>}
       * @protected
       */
      recreate: function recreate() {
        return layer.methods.remount.call(this);
      },

      /**
       * @protected
       */
      subscribeAll: function subscribeAll() {
        layer.methods.subscribeAll.call(this);
      }
    },
    watch: {
      updateWhileAnimating: function updateWhileAnimating(value) {
        if (!this.$layer || value === this.$layer.getUpdateWhileAnimating()) {
          return;
        }

        this.scheduleRecreate();
      },
      updateWhileInteracting: function updateWhileInteracting(value) {
        if (!this.$layer || value === this.$layer.getUpdateWhileInteracting()) {
          return;
        }

        this.scheduleRecreate();
      },
      renderBuffer: function renderBuffer(value) {
        if (!this.$layer || value === this.$layer.getRenderBuffer()) {
          return;
        }

        this.scheduleRecreate();
      },
      renderOrder: function renderOrder(value) {
        if (!this.$layer || isEqual(value, this.$layer.getRenderOrder())) {
          return;
        }

        this.$layer.setRenderOrder(value);
      },
      declutter: function declutter(value) {
        if (!this.$layer || value === this.$layer.getDeclutter()) {
          return;
        }

        this.$layer.setDeclutter(value);
      }
    }
  };

  var vectorSource = {
    mixins: [source, featuresContainer, projTransforms],
    props: {
      useSpatialIndex: {
        type: Boolean,
        default: true
      }
    },
    methods: {
      /**
       * @return {void}
       */
      clear: function clear() {
        featuresContainer.methods.clearFeatures.call(this);
      },

      /**
       * @return {Object}
       * @protected
       */
      getServices: function getServices() {
        return multiMergeDescriptors(source.methods.getServices.call(this), featuresContainer.methods.getServices.call(this));
      },

      /**
       * @return {Promise}
       * @protected
       */
      init: function init() {
        return source.methods.init.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      deinit: function deinit() {
        return source.methods.deinit.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        return source.methods.mount.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        this.clear();
        return source.methods.unmount.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      subscribeAll: function subscribeAll() {
        source.methods.subscribeAll.call(this);
        subscribeToEvents.call(this);
      },

      /**
       * @param feature
       * @return {ReadonlyArray<any>}
       * @protected
       */
      writeFeatureInDataProj: function writeFeatureInDataProj(feature) {
        return projTransforms.methods.writeFeatureInDataProj.call(this, feature);
      },

      /**
       * @param feature
       * @return {ReadonlyArray<any>}
       * @protected
       */
      writeGeometryInViewProj: function writeGeometryInViewProj(feature) {
        return projTransforms.methods.writeFeatureInViewProj.call(this, feature);
      }
    },
    watch: _objectSpread({}, makeWatchers(['useSpatialIndex'], function () {
      return function () {
        return this.scheduleRecreate();
      };
    })),
    stubVNode: {
      empty: false,
      attrs: function attrs() {
        return {
          class: this.$options.name
        };
      }
    }
  };

  function subscribeToEvents() {
    var _this = this;

    hasSource(this);
    var add = fromOlEvent(this.getFeaturesCollection(), 'add');
    var remove = fromOlEvent(this.getFeaturesCollection(), 'remove');
    var events = merge(add, remove).pipe(debounceTime(1000 / 60)); // emit event to allow `sync` modifier

    this.subscribeTo(events, function () {
      _this.$emit('update:features', _this.featuresDataProj);
    });
  }

  var methods = {
    /**
     * @param {Fill|Vue|undefined} fill
     * @return {void}
     * @protected
     */
    setFill: function setFill(fill) {
      fill = fill instanceof Vue ? fill.$style : fill;

      if (fill !== this._fill) {
        this._fill = fill;
      }

      if (this.$style && fill !== this.$style.getFill()) {
        this.$style.setFill(fill);
        this.scheduleRefresh();
      }
    },

    /**
     * @param {Stroke|Vue|undefined} stroke
     * @return {void}
     * @protected
     */
    setStroke: function setStroke(stroke) {
      stroke = stroke instanceof Vue ? stroke.$style : stroke;

      if (stroke !== this._stroke) {
        this._stroke = stroke;
      }

      if (this.$style && stroke !== this.$style.getStroke()) {
        this.$style.setStroke(stroke);
        this.scheduleRefresh();
      }
    }
  };
  var withFillStrokeStyle = {
    methods: methods,
    stubVNode: {
      empty: false,
      attrs: function attrs() {
        return {
          class: this.$options.name
        };
      }
    },
    created: function created() {
      /**
       * @type {Fill|undefined}
       * @private
       */
      this._fill = undefined;
      /**
       * @type {Stroke|undefined}
       * @private
       */

      this._stroke = undefined;
    }
  };

  var _cleanExtParams = function cleanExtParams(params) {
    return reduce(params, function (params, value, key) {
      var filterKeys = ['LAYERS', 'VERSION', 'STYLES', 'FORMAT', 'TRANSPARENT', 'BGCOLOR', 'TIME'];
      key = key.toUpperCase();

      if (filterKeys.includes(key)) {
        return params;
      }

      params[key] = value;
      return params;
    }, {});
  };

  var props = {
    /**
     * Extra WMS request parameters
     */
    extParams: Object,
    layers: {
      type: String,
      required: true
    },
    styles: String,
    // WMS Request styles
    version: {
      type: String,
      default: WMS_VERSION
    },
    transparent: {
      type: Boolean,
      default: true
    },
    format: {
      type: String,
      default: 'image/png'
    },
    bgColor: String,
    time: String
  };
  var computed = {
    cleanExtParams: function cleanExtParams() {
      return this.extParams ? _cleanExtParams(this.extParams) : undefined;
    },
    allParams: function allParams() {
      return _objectSpread({}, this.cleanExtParams, {
        LAYERS: this.layers,
        STYLES: this.styles,
        VERSION: this.version,
        FORMAT: this.format,
        TRANSPARENT: this.transparent,
        BGCOLOR: this.bgColor,
        TIME: this.time
      });
    }
  };
  var methods$1 = {
    /**
     * @param {number[]} coordinate
     * @param {number} [resolution]
     * @param {string} [projection]
     * @param {Object} [params] GetFeatureInfo params. `info_format` at least should be provided.
     *                          If `query_layers` is not provided then the layers specified in the `layers` prop will be used.
     *                          `version` should not be specified here (value from `version` prop will be used).
     * @return {string|undefined}
     */
    getFeatureInfoUrl: function getFeatureInfoUrl(coordinate, resolution, projection) {
      var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      hasView(this);
      hasSource(this);
      resolution || (resolution = this.$view.getResolution());
      projection || (projection = this.projection);
      params = _objectSpread({}, this.allParams, params);
      return this.$source.getGetFeatureInfoUrl(coordinate, resolution, projection, params);
    }
  };

  var watch = _objectSpread({}, makeWatchers(['layers', 'version', 'styles', 'transparent', 'format', 'bgColor', 'time'], function (prop) {
    return function (value, prevValue) {
      if (isEqual(value, prevValue)) return;
      prop = prop.toUpperCase();
      this.$source && this.$source.updateParams(_defineProperty({}, prop, value));
    };
  }), {
    extParams: function extParams(value) {
      this.$source && this.$source.updateParams(value ? _cleanExtParams(value) : undefined);
    }
  });

  var wmsSource = {
    props: props,
    computed: computed,
    methods: methods$1,
    watch: watch
  };

  var xyzSource = {
    mixins: [tileSource],
    methods: {
      /**
       * @return {XYZ}
       * @protected
       */
      createSource: function createSource() {
        return new XYZSource({
          attributions: this.attributions,
          attributionsCollapsible: this.attributionsCollapsible,
          cacheSize: this.cacheSize,
          crossOrigin: this.crossOrigin,
          maxZoom: this.maxZoom,
          minZoom: this.minZoom,
          opaque: this.opaque,
          projection: this.projection,
          reprojectionErrorThreshold: this.reprojectionErrorThreshold,
          tileGrid: this._tileGrid,
          tilePixelRatio: this.tilePixelRatio,
          tileUrlFunction: this.urlFunc,
          tileLoadFunction: this.tileLoadFunction,
          wrapX: this.wrapX,
          transition: this.transition
        });
      }
    }
  };

  var script = {
    name: 'vl-source-arcgis-rest',
    mixins: [tileSource, arcgisSource],
    props: {
      url: {
        type: String,
        required: true,
        validator: function validator(value) {
          return !!value.length;
        }
      }
    },
    methods: {
      createSource: function createSource() {
        return new TileArcGISRestSource({
          attributions: this.attributions,
          cacheSize: this.cacheSize,
          crossOrigin: this.crossOrigin,
          params: this.allParams,
          tileGrid: this._tileGrid,
          projection: this.projection,
          reprojectionErrorThreshold: this.reprojectionErrorThreshold,
          tileLoadFunction: this.tileLoadFunction,
          url: this.urlTmpl,
          wrapX: this.wrapX,
          transition: this.transition
        });
      }
    }
  };

  /* script */
  var __vue_script__ = script;
  /* template */

  /* style */

  var __vue_inject_styles__ = undefined;
  /* scoped */

  var __vue_scope_id__ = undefined;
  /* module identifier */

  var __vue_module_identifier__ = undefined;
  /* functional template */

  var __vue_is_functional_template__ = undefined;
  /* component normalizer */

  function __vue_normalize__(template, style, script$$1, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$1 = __vue_normalize__({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);

  function plugin(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin.installed) {
      return;
    }

    plugin.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$1, options);
    Vue$$1.component(Source$1.name, Source$1);
  }

  var ArcgisRestSource = /*#__PURE__*/Object.freeze({
    default: plugin,
    Source: Source$1,
    install: plugin
  });

  var BINGMAPS_MAX_ZOOM = 21;
  var BINGMAPS_CULTURE = 'en-us';
  var script$1 = {
    name: 'vl-source-bingmaps',
    mixins: [tileSource],
    props: {
      /**
       * Enables hidpi tiles.
       * @type {boolean}
       */
      hidpi: {
        type: Boolean,
        default: false
      },

      /**
       * Culture code.
       * @type {string}
       */
      culture: {
        type: String,
        default: BINGMAPS_CULTURE
      },

      /**
       * Bing Maps API key.
       * @type {string}
       */
      apiKey: {
        type: String,
        required: true
      },

      /**
       * Type of imagery.
       * @type {string}
       */
      imagerySet: {
        type: String,
        required: true
      },
      maxZoom: {
        type: Number,
        default: BINGMAPS_MAX_ZOOM
      },
      url: String
    },
    methods: {
      /**
       * @return {BingMaps}
       * @protected
       */
      createSource: function createSource() {
        return new BingMapsSource({
          cacheSize: this.cacheSize,
          hidpi: this.hidpi,
          culture: this.culture,
          key: this.apiKey,
          imagerySet: this.imagerySet,
          maxZoom: this.maxZoom,
          reprojectionErrorThreshold: this.reprojectionErrorThreshold,
          wrapX: this.wrapX,
          transition: this.transition,
          tileLoadFunction: this.tileLoadFunction
        });
      }
    },
    watch: _objectSpread({}, makeWatchers(['apiKey', 'imagerySet'], function () {
      return function () {
        this.scheduleRecreate();
      };
    }))
  };

  /* script */
  var __vue_script__$1 = script$1;
  /* template */

  /* style */

  var __vue_inject_styles__$1 = undefined;
  /* scoped */

  var __vue_scope_id__$1 = undefined;
  /* module identifier */

  var __vue_module_identifier__$1 = undefined;
  /* functional template */

  var __vue_is_functional_template__$1 = undefined;
  /* component normalizer */

  function __vue_normalize__$1(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$2 = __vue_normalize__$1({}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined);

  /**
   * @param {Vue} Vue
   * @param {VueLayersOptions} [options]
   */

  function plugin$1(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$1.installed) {
      return;
    }

    plugin$1.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$2, options);
    Vue$$1.component(Source$2.name, Source$2);
  }

  var BingmapsSource = /*#__PURE__*/Object.freeze({
    default: plugin$1,
    Source: Source$2,
    install: plugin$1
  });

  /**
   * @alias module:circle-geom/geom
   * @title vl-geom-circle
   * @vueProto
   */

  var script$2 = {
    name: 'vl-geom-circle',
    mixins: [geometry$1],
    props: {
      coordinates: {
        type: Array,
        required: true,
        validator: function validator(value) {
          return value.length === 2;
        }
      },
      radius: {
        type: Number,
        default: 0
      }
    },
    computed: {
      type: constant(GEOMETRY_TYPE.POINT),

      /**
       * @type {Array|undefined}
       */
      coordinatesViewProj: function coordinatesViewProj() {
        if (this.rev && this.$geometry) {
          return this.$geometry.getCenter();
        }
      }
    },
    methods: {
      /**
       * @return {Circle}
       * @protected
       */
      createGeometry: function createGeometry() {
        return new Circle(this.toViewProj(this.coordinates), this.radius);
      },

      /**
       * @return {Coordinate}
       */
      getCoordinates: function getCoordinates() {
        hasGeometry(this);
        return this.toDataProj(this.$geometry.getCenter());
      },

      /**
       * @param {Coordinate} coordinate
       */
      setCoordinates: function setCoordinates(coordinate) {
        hasGeometry(this);
        this.$geometry.setCenter(this.toViewProj(coordinate));
      }
    },
    watch: {
      radius: function radius(value) {
        if (!this.$geometry) return;

        if (value !== this.$geometry.getRadius()) {
          this.$geometry.setRadius(value);
        }
      }
    }
  };

  /* script */
  var __vue_script__$2 = script$2;
  /* template */

  /* style */

  var __vue_inject_styles__$2 = undefined;
  /* scoped */

  var __vue_scope_id__$2 = undefined;
  /* module identifier */

  var __vue_module_identifier__$2 = undefined;
  /* functional template */

  var __vue_is_functional_template__$2 = undefined;
  /* component normalizer */

  function __vue_normalize__$2(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "geom.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Geom = __vue_normalize__$2({}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, undefined, undefined);

  function plugin$2(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$2.installed) {
      return;
    }

    plugin$2.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Geom, options);
    Vue$$1.component(Geom.name, Geom);
  }

  var CircleGeom = /*#__PURE__*/Object.freeze({
    default: plugin$2,
    Geom: Geom,
    install: plugin$2
  });

  var props$1 = {
    radius: {
      type: Number,
      default: 5
    }
  };
  var methods$2 = {
    /**
     * @return {ol.style.Circle}
     * @protected
     */
    createStyle: function createStyle() {
      return new Circle$1({
        radius: this.radius,
        fill: this._fill,
        stroke: this._stroke
      });
    },

    /**
     * @returns {Object}
     * @protected
     */
    getServices: function getServices() {
      var vm = this;
      return multiMergeDescriptors(imageStyle.methods.getServices.call(this), {
        get stylesContainer() {
          return vm;
        }

      });
    },

    /**
     * @param {ol.style.Fill|Vue|undefined} fill
     * @return {void}
     */
    setFill: function setFill(fill) {
      fill = fill instanceof Vue ? fill.$style : fill;

      if (fill !== this._fill) {
        this._fill = fill;
        this.scheduleRefresh();
      }
    },

    /**
     * @param {ol.style.Stroke|Vue|undefined} stroke
     * @return {void}
     */
    setStroke: function setStroke(stroke) {
      stroke = stroke instanceof Vue ? stroke.$style : stroke;

      if (stroke !== this._stroke) {
        this._stroke = stroke;
        this.scheduleRefresh();
      }
    }
  };
  var watch$1 = {
    radius: function radius(value) {
      if (this.$style && !isEqual(value, this.$style.getRadius())) {
        this.scheduleRefresh();
      }
    }
  };
  var script$3 = {
    name: 'vl-style-circle',
    mixins: [imageStyle, withFillStrokeStyle],
    props: props$1,
    methods: methods$2,
    watch: watch$1
  };

  /* script */
  var __vue_script__$3 = script$3;
  /* template */

  /* style */

  var __vue_inject_styles__$3 = undefined;
  /* scoped */

  var __vue_scope_id__$3 = undefined;
  /* module identifier */

  var __vue_module_identifier__$3 = undefined;
  /* functional template */

  var __vue_is_functional_template__$3 = undefined;
  /* component normalizer */

  function __vue_normalize__$3(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "style.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Style$2 = __vue_normalize__$3({}, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3, __vue_module_identifier__$3, undefined, undefined);

  function plugin$3(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$3.installed) {
      return;
    }

    plugin$3.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Style$2, options);
    Vue$$1.component(Style$2.name, Style$2);
  }

  var CircleStyle$1 = /*#__PURE__*/Object.freeze({
    default: plugin$3,
    Style: Style$2,
    install: plugin$3
  });

  var Builder =
  /*#__PURE__*/
  function () {
    function Builder() {
      _classCallCheck(this, Builder);
    }

    _createClass(Builder, [{
      key: "getSource",
      value: function getSource() {
        return this.source;
      }
      /**
       * @param {Vector|undefined} value
       * @returns {Builder}
       */

    }, {
      key: "setSource",
      value: function setSource(value) {
        this.source = value;
        return this;
      }
      /**
       * @param value
       * @returns {Builder}
       */

    }, {
      key: "setAttributions",
      value: function setAttributions(value) {
        this.attributions = value;
        return this;
      }
      /**
       * @param value
       * @returns {Builder}
       */

    }, {
      key: "setDistance",
      value: function setDistance(value) {
        this.distance = value;
        return this;
      }
      /**
       * @param value
       * @returns {Builder}
       */

    }, {
      key: "setGeometryFunction",
      value: function setGeometryFunction(value) {
        this.geometryFunction = value;
        return this;
      }
      /**
       * @param value
       * @returns {Builder}
       */

    }, {
      key: "setLogo",
      value: function setLogo(value) {
        this.logo = value;
        return this;
      }
      /**
       * @param value
       * @returns {Builder}
       */

    }, {
      key: "setProjection",
      value: function setProjection(value) {
        this.projection = value;
        return this;
      }
      /**
       * @param value
       * @returns {Builder}
       */

    }, {
      key: "setWrapX",
      value: function setWrapX(value) {
        this.wrapX = value;
        return this;
      }
      /**
       * @param key
       * @param value
       * @return {void}
       */

    }, {
      key: "set",
      value: function set(key, value) {
        this.values || (this.values = {});
        this.values[key] = value;
      }
      /**
       * @return {Cluster}
       */

    }, {
      key: "build",
      value: function build() {
        ok(this.source, 'source is provided');
        var source = new Cluster({
          attributions: this.attributions,
          distance: this.distance,
          geometryFunction: this.geometryFunction,
          logo: this.logo,
          projection: this.projection,
          source: this.source,
          wrapX: this.wrapX
        });
        source.setProperties(this.values);
        return source;
      }
      /**
       * @return {Promise<Cluster>}
       */

    }, {
      key: "promise",
      value: function promise() {
        var _this = this;

        return interval(100).pipe(skipWhile(function () {
          return !_this.source;
        }), first(), map$1(this.build.bind(this))).toPromise(Promise);
      }
    }]);

    return Builder;
  }();

  var props$2 = {
    distance: {
      type: Number,
      default: 20
    },

    /**
     * Geometry function factory
     * @type {function(): (function(f: ol.Feature): ol.geom.SimpleGeometry|undefined)} geomFuncFactory
     */
    geomFuncFactory: {
      type: Function,
      default: defaultGeomFuncFactory
    }
  };
  var computed$1 = {
    geomFunc: function geomFunc() {
      return this.geomFuncFactory();
    }
  };
  var methods$3 = {
    /**
     * @return {Promise<ol.source.Cluster>}
     * @protected
     */
    createSource: function createSource() {
      // partial setup of ol.source.Cluster with the help of SourceBuilder class

      /**
       * @type {SourceBuilder}
       * @private
       */
      this._sourceBuilder = new Builder().setAttributions(this.attributions).setDistance(this.distance).setGeometryFunction(this.geomFunc).setLogo(this.logo).setProjection(this.projection).setWrapX(this.wrapX);
      return this._sourceBuilder.promise();
    },

    /**
     * @return {Object}
     * @protected
     */
    getServices: function getServices() {
      return multiMergeDescriptors(vectorSource.methods.getServices.call(this), sourceContainer.methods.getServices.call(this));
    },

    /**
     * @return {{
     *     setSource: function(ol.source.Source): void,
     *     getSource: function(): ol.source.Source
     *   }|undefined}
     * @protected
     */
    getSourceTarget: function getSourceTarget() {
      return this._sourceBuilder;
    }
  };
  var watch$2 = {
    distance: function distance(value) {
      if (this.$source && value !== this.$source.getDistance()) {
        this.$source.setDistance(value);
      }
    }
  };
  var script$4 = {
    name: 'vl-source-cluster',
    mixins: [vectorSource, sourceContainer],
    props: props$2,
    computed: computed$1,
    methods: methods$3,
    watch: watch$2
    /**
     * @returns {function(f: ol.Feature): ol.geom.SimpleGeometry|undefined}
     */

  };

  function defaultGeomFuncFactory() {
    return function (feature) {
      var geometry = feature.getGeometry();
      if (!geometry) return;
      var coordinate = findPointOnSurface(geometry);

      if (coordinate) {
        return createPointGeom(coordinate);
      }
    };
  }

  /* script */
  var __vue_script__$4 = script$4;
  /* template */

  /* style */

  var __vue_inject_styles__$4 = undefined;
  /* scoped */

  var __vue_scope_id__$4 = undefined;
  /* module identifier */

  var __vue_module_identifier__$4 = undefined;
  /* functional template */

  var __vue_is_functional_template__$4 = undefined;
  /* component normalizer */

  function __vue_normalize__$4(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$3 = __vue_normalize__$4({}, __vue_inject_styles__$4, __vue_script__$4, __vue_scope_id__$4, __vue_is_functional_template__$4, __vue_module_identifier__$4, undefined, undefined);

  function plugin$4(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$4.installed) {
      return;
    }

    plugin$4.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$3, options);
    Vue$$1.component(Source$3.name, Source$3);
  }

  var ClusterSource = /*#__PURE__*/Object.freeze({
    default: plugin$4,
    Source: Source$3,
    install: plugin$4
  });

  var transformType = function transformType(type) {
    return upperFirst(camelCase(type));
  };
  /**
   * @alias module:draw-interaction/interaction
   * @title vl-interaction-draw
   * @vueProto
   */


  var script$5 = {
    name: 'vl-interaction-draw',
    mixins: [interaction$1, stylesContainer],
    stubVNode: {
      empty: false,
      attrs: function attrs() {
        return {
          class: this.$options.name
        };
      }
    },
    props: {
      /**
       * Target source or collection identifier from IdentityMap.
       * @type {String}
       */
      source: {
        type: String,
        required: true
      },

      /**
       * The maximum distance in pixels between "down" and "up" for a "up" event to be considered a "click" event and
       * actually add a point/vertex to the geometry being drawn. Default is 6 pixels. That value was chosen for the
       * draw interaction to behave correctly on mouse as well as on touch devices.
       * @type {number}
       */
      clickTolerance: {
        type: Number,
        default: 6
      },

      /**
       * Pixel distance for snapping to the drawing finish.
       * @type {number}
       */
      snapTolerance: {
        type: Number,
        default: 12
      },

      /**
       * Drawing type ('Point', 'LineString', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon' or 'Circle').
       * @type {string}
       */
      type: {
        type: String,
        required: true,
        validator: function validator(value) {
          return Object.values(GEOMETRY_TYPE).includes(transformType(value));
        }
      },

      /**
       * Stop click, singleclick, and doubleclick events from firing during drawing.
       * @type {boolean}
       */
      stopClick: {
        type: Boolean,
        default: false
      },

      /**
       * The number of points that can be drawn before a polygon ring or line string is finished.
       * @type {number|undefined}
       */
      maxPoints: Number,

      /**
       * The number of points that must be drawn before a polygon ring or line string can be finished.
       * Default is `3` for polygon rings and `2` for line strings.
       * @type {number|undefined}
       */
      minPoints: Number,

      /**
       * A function that takes an ol.MapBrowserEvent and returns a boolean to indicate whether the drawing can be finished.
       * @type {function|undefined}
       */
      finishCondition: Function,

      /**
       * Function that is called when a geometry's coordinates are updated.
       * @type {function|undefined}
       */
      geometryFunction: Function,

      /**
       * Name of the geometry attribute for newly created features.
       * @type {string}
       */
      geometryName: {
        type: String,
        default: 'geometry'
      },

      /**
       * A function that takes an `ol.MapBrowserEvent` and returns a boolean to indicate whether that event should be handled.
       * By default `ol.events.condition.noModifierKeys`, i.e. a click, adds a vertex or deactivates freehand drawing.
       * @type {function|undefined}
       */
      condition: {
        type: Function,
        default: condition.noModifierKeys
      },

      /**
       * Operate in freehand mode for lines, polygons, and circles. This makes the interaction always operate in
       * freehand mode and takes precedence over any `freehandCondition` option.
       * @type {boolean}
       */
      freehand: {
        type: Boolean,
        default: false
      },

      /**
       * Condition that activates freehand drawing for lines and polygons. This function takes an `ol.MapBrowserEvent` and
       * returns a boolean to indicate whether that event should be handled. The default is `ol.events.condition.shiftKeyOnly`,
       * meaning that the Shift key activates freehand drawing.
       * @type {function|undefined}
       */
      freehandCondition: {
        type: Function,
        default: condition.shiftKeyOnly
      },

      /**
       * Wrap the world horizontally on the sketch overlay.
       * @type {boolean}
       */
      wrapX: {
        type: Boolean,
        default: false
      }
    },
    methods: {
      /**
       * @return {Promise<Draw>}
       * @protected
       */
      createInteraction: function () {
        var _createInteraction = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee() {
          var sourceIdent, source;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  sourceIdent = this.makeIdent(this.source);
                  _context.next = 3;
                  return this.$identityMap.get(sourceIdent, this.$options.INSTANCE_PROMISE_POOL);

                case 3:
                  source = _context.sent;
                  assert$1(isVectorSource(source), "Source \"".concat(sourceIdent, "\" doesn't exists in the identity map."));
                  assert$1(isCollection(source.getFeaturesCollection()), "Source \"".concat(sourceIdent, "\" doesn't provide features collection."));
                  return _context.abrupt("return", new DrawInteraction({
                    features: source.getFeaturesCollection(),
                    clickTolerance: this.clickTolerance,
                    snapTolerance: this.snapTolerance,
                    type: transformType(this.type),
                    stopClick: this.stopClick,
                    maxPoints: this.maxPoints,
                    minPoints: this.minPoints,
                    finishCondition: this.finishCondition,
                    style: this.createStyleFunc(),
                    geometryFunction: this.geometryFunction,
                    geometryName: this.geometryName,
                    condition: this.condition,
                    freehand: this.freehand,
                    freehandCondition: this.freehandCondition,
                    wrapX: this.wrapX
                  }));

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function createInteraction() {
          return _createInteraction.apply(this, arguments);
        };
      }(),

      /**
       * @return {function(feature: Feature): Style}
       * @protected
       */
      getDefaultStyles: function getDefaultStyles() {
        var defaultStyles = mapValues(defaultEditStyle(), function (styles) {
          return styles.map(createStyle);
        });
        return function __selectDefaultStyleFunc(feature) {
          if (feature.getGeometry()) {
            return defaultStyles[feature.getGeometry().getType()];
          }
        };
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        return multiMergeDescriptors(interaction$1.methods.getServices.call(this), stylesContainer.methods.getServices.call(this));
      },

      /**
       * @return {Interaction|undefined}
       * @protected
       */
      getStyleTarget: function getStyleTarget() {
        return this.$interaction;
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        interaction$1.methods.mount.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        interaction$1.methods.unmount.call(this);
      },

      /**
       * @param {Array<{style: Style, condition: (function|boolean|undefined)}>|function(feature: Feature): Style|Vue|undefined} styles
       * @return {void}
       * @protected
       */
      setStyle: function setStyle(styles) {
        if (styles !== this._styles) {
          this._styles = styles;
          this.scheduleRecreate();
        }
      },

      /**
       * @return {void}
       * @protected
       */
      subscribeAll: function subscribeAll() {
        interaction$1.methods.subscribeAll.call(this);
        subscribeToInteractionChanges.call(this);
      }
    },
    watch: _objectSpread({}, makeWatchers(['source', 'clickTolerance', 'snapTolerance', 'type', 'stopClick', 'maxPoints', 'minPoints', 'finishCondition', 'geometryFunction', 'geometryName', 'condition', 'freehand', 'freehandCondition', 'wrapX'], function () {
      return function () {
        this.scheduleRecreate();
      };
    }))
    /**
     * @return {void}
     * @private
     */

  };

  function subscribeToInteractionChanges() {
    var _this = this;

    hasInteraction(this);
    var drawEvents = merge(fromOlEvent(this.$interaction, 'drawstart').pipe(map$1(function (evt) {
      initializeFeature(evt.feature);
      return evt;
    })), fromOlEvent(this.$interaction, 'drawend'));
    this.subscribeTo(drawEvents, function (evt) {
      ++_this.rev;

      _this.$emit(evt.type, evt);
    });
  }

  /* script */
  var __vue_script__$5 = script$5;
  /* template */

  /* style */

  var __vue_inject_styles__$5 = undefined;
  /* scoped */

  var __vue_scope_id__$5 = undefined;
  /* module identifier */

  var __vue_module_identifier__$5 = undefined;
  /* functional template */

  var __vue_is_functional_template__$5 = undefined;
  /* component normalizer */

  function __vue_normalize__$5(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "interaction.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Interaction$2 = __vue_normalize__$5({}, __vue_inject_styles__$5, __vue_script__$5, __vue_scope_id__$5, __vue_is_functional_template__$5, __vue_module_identifier__$5, undefined, undefined);

  function plugin$5(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$5.installed) {
      return;
    }

    plugin$5.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Interaction$2, options);
    Vue$$1.component(Interaction$2.name, Interaction$2);
  }

  var DrawInteraction$1 = /*#__PURE__*/Object.freeze({
    default: plugin$5,
    Interaction: Interaction$2,
    install: plugin$5
  });

  /**
   * A vector object for geographic features with a geometry and other attribute properties,
   * similar to the features in vector file formats like **GeoJSON**.
   */

  var script$6 = {
    name: 'vl-feature',
    mixins: [cmp, useMapCmp, geometryContainer, stylesContainer, projTransforms],
    props: {
      /**
       * Feature identifier.
       * @type {string|number}
       * @default UUID
       */
      id: {
        type: [String, Number],
        default: function _default() {
          return v4_1();
        }
      },

      /**
       * All feature properties.
       * @type {Object}
       * @default {}
       */
      properties: {
        type: Object,
        default: function _default() {
          return Object.create(null);
        }
      }
    },
    computed: {
      /**
       * **GeoJSON** encoded geometry.
       * @type {Object|undefined}
       */
      geometry: function geometry() {
        if (this.rev && this.resolvedDataProjection && this.$geometry) {
          return this.writeGeometryInDataProj(this.$geometry);
        }
      },

      /**
       * @return {number[]|undefined}
       */
      point: function point() {
        if (this.pointViewProj && this.resolvedDataProjection) {
          return this.pointToDataProj(this.pointViewProj);
        }
      },
      geometryViewProj: function geometryViewProj() {
        if (this.rev && this.resolvedDataProjection && this.$geometry) {
          return this.writeGeometryInViewProj(this.$geometry);
        }
      },
      pointViewProj: function pointViewProj() {
        if (this.rev && this.$geometry) {
          return findPointOnSurface(this.$geometry);
        }
      }
    },
    methods: {
      /**
       * Create feature without inner style applying, feature level style
       * will be applied in the layer level style function.
       * @return {module:ol/Feature~Feature}
       * @protected
       */
      createOlObject: function createOlObject() {
        var feature = new Feature(this.properties);
        initializeFeature(feature, this.id);
        feature.setGeometry(this.$geometry);
        return feature;
      },

      /**
       * @return {{
       *     getGeometry: function(): (module:ol/geom/Geometry~Geometry|undefined),
       *     setGeometry: function((module:ol/geom/Geometry~Geometry|undefined)): void
       *   }|Feature|undefined}
       * @protected
       */
      getGeometryTarget: function getGeometryTarget() {
        return this.$feature;
      },

      /**
       * @return {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return multiMergeDescriptors(cmp.methods.getServices.call(this), geometryContainer.methods.getServices.call(this), stylesContainer.methods.getServices.call(this), {
          get feature() {
            return vm.$feature;
          }

        });
      },

      /**
       * @return {module:ol/Feature~Feature|undefined}
       * @protected
       */
      getStyleTarget: function getStyleTarget() {
        return this.$feature;
      },

      /**
       * Checks if feature lies at `pixel`.
       * @param {number[]} pixel
       * @return {boolean}
       */
      isAtPixel: function isAtPixel(pixel) {
        var _this = this;

        hasMap(this);
        return this.$map.forEachFeatureAtPixel(pixel, function (f) {
          return f === _this.$feature;
        }, {
          layerFilter: function layerFilter(l) {
            return l === _this.$layer;
          }
        });
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        this.$featuresContainer && this.$featuresContainer.addFeature(this);
        this.subscribeAll();
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        this.unsubscribeAll();
        this.$featuresContainer && this.$featuresContainer.removeFeature(this);
      },

      /**
       * @return {void}
       * @protected
       */
      subscribeAll: function subscribeAll() {
        subscribeToEvents$1.call(this);
      }
    },
    watch: {
      /**
       * @param {string|number} value
       */
      id: function id(value) {
        if (this.$feature && value !== this.$feature.getId()) {
          this.$feature.setId(value);
        }
      },

      /**
       * @param {Object} value
       */
      properties: function properties(value) {
        value = plainProps(value);

        if (this.$feature && !isEqual(value, plainProps(this.$feature.getProperties()))) {
          this.$feature.setProperties(value);
        }
      }
    },
    created: function created() {
      defineServices$5.call(this);
    }
  };

  function defineServices$5() {
    var _this2 = this;

    Object.defineProperties(this, {
      $feature: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$olObject;
        }
      },
      $layer: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.layer;
        }
      },
      $map: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.map;
        }
      },
      $view: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.view;
        }
      },
      $featuresContainer: {
        enumerable: true,
        get: function get$$1() {
          return _this2.$services && _this2.$services.featuresContainer;
        }
      }
    });
  }
  /**
   * @return {void}
   * @private
   */


  function subscribeToEvents$1() {
    var _this3 = this;

    hasFeature(this);

    var getPropValue = function getPropValue(prop) {
      return _this3.$feature.get(prop);
    }; // all plain properties + geometry


    var propChanges = fromOlEvent(this.$feature, 'propertychange', function (_ref) {
      var key = _ref.key;
      return {
        prop: key,
        value: getPropValue(key)
      };
    }); // id, style and other generic changes

    var changes = fromOlEvent(this.$feature, 'change').pipe(map$1(function () {
      return Observable$1.create(function (obs) {
        if (_this3.$feature.getId() !== _this3.id) {
          obs.next({
            prop: 'id',
            value: _this3.$feature.getId()
          });
        } // todo style?

      });
    }), mergeAll()); // all changes

    var allChanges = merge(propChanges, changes).pipe(distinctUntilChanged(isEqual));
    this.subscribeTo(allChanges, function (_ref2) {
      var prop = _ref2.prop,
          value = _ref2.value;
      ++_this3.rev;

      if (prop === 'id') {
        _this3.$emit("update:".concat(prop), value);
      } else if (prop !== _this3.$feature.getGeometryName()) {
        _this3.$emit('update:properties', _objectSpread({}, _this3.properties, _defineProperty({}, prop, value)));
      }
    });
  }

  /* script */
  var __vue_script__$6 = script$6;
  /* template */

  var __vue_render__ = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('i', {
      class: [_vm.$options.name],
      staticStyle: {
        "display": "none !important"
      },
      attrs: {
        "id": [_vm.$options.name, _vm.id].join('-')
      }
    }, [_vm._t("default", null, {
      id: _vm.id,
      properties: _vm.properties,
      geometry: _vm.geometry,
      point: _vm.point
    })], 2);
  };

  var __vue_staticRenderFns__ = [];
  /* style */

  var __vue_inject_styles__$6 = undefined;
  /* scoped */

  var __vue_scope_id__$6 = undefined;
  /* module identifier */

  var __vue_module_identifier__$6 = undefined;
  /* functional template */

  var __vue_is_functional_template__$6 = false;
  /* component normalizer */

  function __vue_normalize__$6(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "feature.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Feature$2 = __vue_normalize__$6({
    render: __vue_render__,
    staticRenderFns: __vue_staticRenderFns__
  }, __vue_inject_styles__$6, __vue_script__$6, __vue_scope_id__$6, __vue_is_functional_template__$6, __vue_module_identifier__$6, undefined, undefined);

  function plugin$6(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$6.installed) {
      return;
    }

    plugin$6.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Feature$2, options);
    Vue$$1.component(Feature$2.name, Feature$2);
  }

  var Feature$3 = /*#__PURE__*/Object.freeze({
    default: plugin$6,
    Feature: Feature$2,
    install: plugin$6
  });

  var props$3 = {
    color: [String, Array]
  };
  var methods$4 = {
    /**
     * @return {Fill}
     * @protected
     */
    createStyle: function createStyle() {
      return new Fill({
        color: this.color
      });
    },

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      this.$stylesContainer && this.$stylesContainer.setFill(this);
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      this.$stylesContainer && this.$stylesContainer.setFill(undefined);
    }
  };
  var watch$3 = {
    color: function color(value) {
      if (this.$style && !isEqual(value, this.$style.getColor())) {
        this.$style.setColor(value);
        this.scheduleRefresh();
      }
    }
  };
  var script$7 = {
    name: 'vl-style-fill',
    mixins: [style],
    props: props$3,
    methods: methods$4,
    watch: watch$3
  };

  /* script */
  var __vue_script__$7 = script$7;
  /* template */

  /* style */

  var __vue_inject_styles__$7 = undefined;
  /* scoped */

  var __vue_scope_id__$7 = undefined;
  /* module identifier */

  var __vue_module_identifier__$7 = undefined;
  /* functional template */

  var __vue_is_functional_template__$7 = undefined;
  /* component normalizer */

  function __vue_normalize__$7(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "style.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Style$3 = __vue_normalize__$7({}, __vue_inject_styles__$7, __vue_script__$7, __vue_scope_id__$7, __vue_is_functional_template__$7, __vue_module_identifier__$7, undefined, undefined);

  function plugin$7(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$7.installed) {
      return;
    }

    plugin$7.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Style$3, options);
    Vue$$1.component(Style$3.name, Style$3);
  }

  var FillStyle = /*#__PURE__*/Object.freeze({
    default: plugin$7,
    Style: Style$3,
    install: plugin$7
  });

  //
  var script$8 = {
    name: 'vl-geoloc',
    mixins: [cmp, useMapCmp, projTransforms],
    props: {
      tracking: {
        type: Boolean,
        default: true
      },
      trackingOptions: Object,

      /**
       * @type {string}
       */
      projection: String
    },
    computed: {
      accuracy: function accuracy() {
        if (this.rev && this.$geolocation) {
          return this.$geolocation.getAccuracy();
        }
      },
      altitude: function altitude() {
        if (this.rev && this.$geolocation) {
          return this.$geolocation.getAltitude();
        }
      },
      altitudeAccuracy: function altitudeAccuracy() {
        if (this.rev && this.$geolocation) {
          return this.$geolocation.getAltitudeAccuracy();
        }
      },
      heading: function heading() {
        if (this.rev && this.$geolocation) {
          return this.$geolocation.getHeading();
        }
      },
      speed: function speed() {
        if (this.rev && this.$geolocation) {
          return this.$geolocation.getSpeed();
        }
      },
      position: function position() {
        if (this.rev && this.$geolocation) {
          return this.$geolocation.getPosition();
        }
      },
      positionViewProj: function positionViewProj() {
        if (this.position && this.viewProjection) {
          return this.pointToViewProj(this.position);
        }
      }
    },
    methods: {
      /**
       * @return {ol/Geolocation~Geolocation}
       * @private
       */
      createOlObject: function createOlObject() {
        return new Geolocation({
          tracking: this.tracking,
          trackingOptions: this.trackingOptions,
          projection: this.resolvedDataProjection
        });
      },

      /**
       * @return {void}
       * @private
       */
      mount: function mount() {
        this.subscribeAll();
      },

      /**
       * @return {void}
       * @private
       */
      unmount: function unmount() {
        hasGeolocation(this);
        this.unsubscribeAll();
        this.$geolocation.setTracking(false);
      },

      /**
       * @return {void}
       * @protected
       */
      subscribeAll: function subscribeAll() {
        subscribeToGeolocation.call(this);
      }
    },
    watch: {
      /**
       * @param {boolean} value
       */
      tracking: function tracking(value) {
        if (!this.$geolocation && value === this.$geolocation.getTracking()) {
          return;
        }

        this.$geolocation.setTracking(value);
      },
      tracingOptions: function tracingOptions(value, prevValue) {
        if (isEqual(value, prevValue) || !this.$geolocation) return;
        this.$geolocation.setTrackingOptions(value);
      },
      resolvedDataProjection: function resolvedDataProjection(value) {
        if (!this.$geolocation) return;
        this.$geolocation.setProjection(value);
      }
    },
    stubVNode: {
      empty: function empty() {
        return this.$options.name;
      }
    },
    created: function created() {
      defineServices$6.call(this);
    }
  };

  function defineServices$6() {
    var _this = this;

    Object.defineProperties(this, {
      /**
       * @type {ol/Geolocation~Geolocation|undefined}
       */
      $geolocation: {
        enumerable: true,
        get: function get$$1() {
          return _this.$olObject;
        }
      },
      $map: {
        enumerable: true,
        get: function get$$1() {
          return _this.$services && _this.$services.map;
        }
      },

      /**
       * Reference to `ol.View` instance.
       * @type {module:ol/View~View|undefined}
       */
      $view: {
        enumerable: true,
        get: function get$$1() {
          return _this.$services && _this.$services.view;
        }
      }
    });
  }
  /**
   * @return {void}
   * @private
   */


  function subscribeToGeolocation() {
    var _this2 = this;

    hasGeolocation(this);
    var ft = 1000 / 60;
    var changes = merge(fromOlChangeEvent(this.$geolocation, ['accuracy', 'altitude', 'altitudeaccuracy', 'heading', 'speed'], true, ft), fromOlChangeEvent(this.$geolocation, 'position', true, ft));
    this.subscribeTo(changes, function (_ref) {
      var prop = _ref.prop,
          value = _ref.value;
      ++_this2.rev;

      _this2.$emit("update:".concat(prop), value);
    });
  }

  /* script */
  var __vue_script__$8 = script$8;
  /* template */

  var __vue_render__$1 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('i', {
      class: [_vm.$options.name],
      staticStyle: {
        "display": "none !important"
      }
    }, [_vm._t("default", null, {
      accuracy: _vm.accuracy,
      altitude: _vm.altitude,
      altitudeAccuracy: _vm.altitudeAccuracy,
      heading: _vm.heading,
      position: _vm.position,
      speed: _vm.speed
    })], 2);
  };

  var __vue_staticRenderFns__$1 = [];
  /* style */

  var __vue_inject_styles__$8 = undefined;
  /* scoped */

  var __vue_scope_id__$8 = undefined;
  /* module identifier */

  var __vue_module_identifier__$8 = undefined;
  /* functional template */

  var __vue_is_functional_template__$8 = false;
  /* component normalizer */

  function __vue_normalize__$8(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "geoloc.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Geoloc = __vue_normalize__$8({
    render: __vue_render__$1,
    staticRenderFns: __vue_staticRenderFns__$1
  }, __vue_inject_styles__$8, __vue_script__$8, __vue_scope_id__$8, __vue_is_functional_template__$8, __vue_module_identifier__$8, undefined, undefined);

  function plugin$8(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$8.installed) {
      return;
    }

    plugin$8.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Geoloc, options);
    Vue$$1.component(Geoloc.name, Geoloc);
  }

  var Geoloc$1 = /*#__PURE__*/Object.freeze({
    default: plugin$8,
    Geoloc: Geoloc,
    install: plugin$8
  });

  var script$9 = {
    name: 'vl-graticule',
    mixins: [cmp, useMapCmp, projTransforms],
    props: {
      maxLines: {
        type: Number,
        default: 100
      },
      targetSize: {
        type: Number,
        default: 100
      },
      showLabels: {
        type: Boolean,
        default: false
      },
      lonLabelFormatter: Function,
      latLabelFormatter: Function,
      lonLabelPosition: {
        type: Number,
        default: 0
      },
      latLabelPosition: {
        type: Number,
        default: 1
      },
      intervals: {
        type: Array,
        default: function _default() {
          return [90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001];
        }
      }
    },
    computed: {
      meridians: function meridians() {
        var _this = this;

        if (this.$graticule && this.rev) {
          return map(this.getMeridians(), function (meridian) {
            return _this.lineToDataProj(meridian.getCoordinates());
          });
        }

        return [];
      },
      parallels: function parallels() {
        var _this2 = this;

        if (this.$graticule && this.rev) {
          return map(this.getParallels(), function (parallel) {
            return _this2.lineToDataProj(parallel.getCoordinates());
          });
        }

        return [];
      }
    },
    methods: {
      createOlObject: function createOlObject() {
        return new Graticule({
          maxLines: this.maxLines,
          targetSize: this.targetSize,
          showLabels: this.showLabels,
          strokeStyle: this._strokeStyle,
          lonLabelFormatter: this.lonLabelFormatter,
          latLabelFormatter: this.latLabelFormatter,
          lonLabelPosition: this.lonLabelPosition,
          latLabelPosition: this.latLabelPosition,
          lonLabelStyle: this._lonLabelStyle,
          latLabelStyle: this._latLabelStyle,
          intervals: this.intervals
        });
      },

      /**
       * @return {Promise} Resolves when initialization completes
       * @protected
       */
      init: function init() {
        return cmp.methods.init.call(this);
      },

      /**
       * @return {void|Promise<void>}
       * @protected
       */
      deinit: function deinit() {
        return cmp.methods.deinit.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        this.$map && this.$graticule.setMap(this.$map);
        this.subscribeAll();
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        this.unsubscribeAll();
        this.$graticule.setMap(undefined);
      },
      getMeridians: function getMeridians() {
        hasGraticule(this);
        return this.$graticule.getMeridians();
      },
      getParallels: function getParallels() {
        hasGraticule(this);
        return this.$graticule.getParallels();
      },
      setStroke: function setStroke(stroke) {
        stroke = stroke instanceof Vue ? stroke.$style : stroke;

        if (stroke !== this._strokeStyle) {
          this._strokeStyle = stroke;
          this.scheduleRefresh();
        }
      },
      setText: function setText(text) {
        text = text instanceof Vue ? text.$style : text;
        var vm;

        if (text) {
          vm = firstEl(text[this.$options.VM_PROP]);
        }

        var vmMatcher = function vmMatcher(vnode) {
          return vnode.componentInstance && vnode.componentInstance === vm;
        };

        if (text == null && this.$slots.lon == null || Array.isArray(this.$slots.lon) && this.$slots.lon.some(vmMatcher)) {
          if (text !== this._lonLabelStyle) {
            this._lonLabelStyle = text;
            this.scheduleRefresh();
          }
        } else if (text == null && this.$slots.lat == null || Array.isArray(this.$slots.lat) && this.$slots.lat.some(vmMatcher)) {
          if (text !== this._latLabelStyle) {
            this._latLabelStyle = text;
            this.scheduleRefresh();
          }
        }
      },
      getServices: function getServices() {
        var vm = this;
        return multiMergeDescriptors(cmp.methods.getServices.call(this), {
          get stylesContainer() {
            return vm;
          }

        });
      },

      /**
       * @return {Promise}
       */
      refresh: function refresh() {
        return this.recreate();
      },
      subscribeAll: function subscribeAll() {
        subscribeToEvents$2.call(this);
      }
    },
    watch: _objectSpread({}, makeWatchers(['maxLines', 'targetSize', 'showLabels', 'lonLabelFormatter', 'latLabelFormatter', 'lonLabelPosition', 'latLabelPosition', 'intervals'], function () {
      return function () {
        this.scheduleRefresh();
      };
    })),
    stubVNode: {
      empty: false,
      attrs: function attrs() {
        return {
          class: this.$options.name
        };
      }
    },
    created: function created() {
      defineServices$7.call(this);
    }
  };

  function defineServices$7() {
    var _this3 = this;

    Object.defineProperties(this, {
      $graticule: {
        enumerable: true,
        get: function get$$1() {
          return _this3.$olObject;
        }
      },
      $map: {
        enumerable: true,
        get: function get$$1() {
          return _this3.$services && _this3.$services.map;
        }
      },
      $view: {
        enumerable: true,
        get: function get$$1() {
          return _this3.$services && _this3.$services.view;
        }
      }
    });
  }

  function subscribeToEvents$2() {
    var _this4 = this;

    hasMap(this);
    var ft = 1000 / 60;
    var postcompose = fromOlEvent(this.$map, 'postcompose').pipe(throttleTime(ft));
    this.subscribeTo(postcompose, function () {
      ++_this4.rev;
    });
  }

  /* script */
  var __vue_script__$9 = script$9;
  /* template */

  var __vue_render__$2 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('i', {
      class: _vm.$options.name,
      staticStyle: {
        "display": "none !important"
      }
    }, [_vm._t("lon"), _vm._v(" "), _vm._t("lat"), _vm._v(" "), _vm._t("stroke")], 2);
  };

  var __vue_staticRenderFns__$2 = [];
  /* style */

  var __vue_inject_styles__$9 = undefined;
  /* scoped */

  var __vue_scope_id__$9 = undefined;
  /* module identifier */

  var __vue_module_identifier__$9 = undefined;
  /* functional template */

  var __vue_is_functional_template__$9 = false;
  /* component normalizer */

  function __vue_normalize__$9(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "graticule.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Graticule$2 = __vue_normalize__$9({
    render: __vue_render__$2,
    staticRenderFns: __vue_staticRenderFns__$2
  }, __vue_inject_styles__$9, __vue_script__$9, __vue_scope_id__$9, __vue_is_functional_template__$9, __vue_module_identifier__$9, undefined, undefined);

  function plugin$9(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$9.installed) {
      return;
    }

    plugin$9.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Graticule$2, options);
    Vue$$1.component(Graticule$2.name, Graticule$2);
  }

  var Graticule$3 = /*#__PURE__*/Object.freeze({
    default: plugin$9,
    Graticule: Graticule$2,
    install: plugin$9
  });

  var script$a = {
    name: 'vl-layer-group',
    mixins: [layer, layersContainer],
    methods: {
      createLayer: function createLayer() {
        return new GroupLayer({
          id: this.id,
          minResolution: this.minResolution,
          maxResolution: this.maxResolution,
          opacity: this.opacity,
          visible: this.visible,
          extent: this.extent,
          zIndex: this.zIndex,
          layers: this._layersCollection
        });
      },
      getServices: function getServices() {
        return multiMergeDescriptors(layer.methods.getServices.call(this), layersContainer.methods.getServices.call(this));
      }
    }
  };

  /* script */
  var __vue_script__$a = script$a;
  /* template */

  /* style */

  var __vue_inject_styles__$a = undefined;
  /* scoped */

  var __vue_scope_id__$a = undefined;
  /* module identifier */

  var __vue_module_identifier__$a = undefined;
  /* functional template */

  var __vue_is_functional_template__$a = undefined;
  /* component normalizer */

  function __vue_normalize__$a(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "layer.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Layer$1 = __vue_normalize__$a({}, __vue_inject_styles__$a, __vue_script__$a, __vue_scope_id__$a, __vue_is_functional_template__$a, __vue_module_identifier__$a, undefined, undefined);

  function plugin$a(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$a.installed) {
      return;
    }

    plugin$a.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Layer$1, options);
    Vue$$1.component(Layer$1.name, Layer$1);
  }

  var GroupLayer$1 = /*#__PURE__*/Object.freeze({
    default: plugin$a,
    Layer: Layer$1,
    install: plugin$a
  });

  var script$b = {
    name: 'vl-layer-heatmap',
    mixins: [vectorLayer],
    props: {
      gradient: {
        type: Array,
        default: function _default() {
          return ['#0000ff', '#00ffff', '#00ff00', '#ffff00', '#f00'];
        }
      },
      radius: {
        type: Number,
        default: 8
      },
      blur: {
        type: Number,
        default: 15
      },
      shadow: {
        type: Number,
        default: 250
      },
      weight: {
        type: String,
        default: 'weight'
      }
    },
    methods: {
      createLayer: function createLayer() {
        return new HeatmapLayer({
          id: this.id,
          minResolution: this.minResolution,
          maxResolution: this.maxResolution,
          opacity: this.opacity,
          visible: this.visible,
          extent: this.extent,
          zIndex: this.zIndex,
          renderMode: this.renderMode,
          gradient: this.gradient,
          radius: this.radius,
          blur: this.blur,
          shadow: this.shadow,
          weight: this.weight
        });
      }
    },
    watch: _objectSpread({
      blur: function blur(value) {
        if (!this.$layer || this.$layer.getBlur() === value) return;
        this.$layer.setBlur(value);
      },
      gradient: function gradient(value) {
        if (!this.$layer || isEqual(this.$layer.getGradient(), value)) return;
        this.$layer.setGradient(value);
      },
      radius: function radius(value) {
        if (!this.$layer || this.$layer.getRadius() === value) return;
        this.$layer.setRadius(value);
      }
    }, makeWatchers(['shadow', 'weight'], function () {
      return function () {
        this.scheduleRecreate();
      };
    }))
  };

  /* script */
  var __vue_script__$b = script$b;
  /* template */

  /* style */

  var __vue_inject_styles__$b = undefined;
  /* scoped */

  var __vue_scope_id__$b = undefined;
  /* module identifier */

  var __vue_module_identifier__$b = undefined;
  /* functional template */

  var __vue_is_functional_template__$b = undefined;
  /* component normalizer */

  function __vue_normalize__$b(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "layer.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Layer$2 = __vue_normalize__$b({}, __vue_inject_styles__$b, __vue_script__$b, __vue_scope_id__$b, __vue_is_functional_template__$b, __vue_module_identifier__$b, undefined, undefined);

  function plugin$b(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$b.installed) {
      return;
    }

    plugin$b.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Layer$2, options);
    Vue$$1.component(Layer$2.name, Layer$2);
  }

  var HeatmapLayer$1 = /*#__PURE__*/Object.freeze({
    default: plugin$b,
    Layer: Layer$2,
    install: plugin$b
  });

  var script$c = {
    name: 'vl-style-icon',
    mixins: [imageStyle],
    props: {
      src: String,
      size: {
        type: Array,
        validator: arrayLengthValidator(2)
      },
      img: Image,
      imgSize: {
        type: Array,
        validator: arrayLengthValidator(2)
      },
      anchor: {
        type: Array,
        default: function _default() {
          return [0.5, 0.5];
        },
        validator: arrayLengthValidator(2)
      },
      anchorOrigin: {
        type: String,
        default: 'top-left' // bottom-left, bottom-right, top-left or top-right

      },
      anchorXUnits: {
        type: String,
        default: 'fraction' // pixels, fraction

      },
      anchorYUnits: {
        type: String,
        default: 'fraction' // pixels, fraction

      },
      color: [Array, String],
      crossOrigin: String,
      offset: {
        type: Array,
        default: function _default() {
          return [0, 0];
        },
        validator: arrayLengthValidator(2)
      },
      offsetOrigin: {
        type: String,
        default: 'top-left' // bottom-left, bottom-right, top-left or top-right

      },
      opacity: {
        type: Number,
        default: 1
      },
      scale: {
        type: Number,
        default: 1
      },
      rotateWithView: {
        type: Boolean,
        default: false
      },
      rotation: {
        type: Number,
        default: 0
      }
    },
    methods: {
      /**
       * @return {Icon}
       * @protected
       */
      createStyle: function createStyle() {
        assert$1(this.src && !this.img || !this.src && this.img, "vl-style-icon one of 'image' or 'src' prop must be provided.");
        assert$1(!this.img || this.img && !isEmpty(this.imgSize), "vl-style-icon 'imgSize' must be set when image is provided.");
        return new Icon({
          anchor: this.anchor,
          anchorOrigin: this.anchorOrigin,
          anchorXUnits: this.anchorXUnits,
          anchorYUnits: this.anchorYUnits,
          color: this.color,
          crossOrigin: this.crossOrigin,
          offset: this.offset,
          offsetOrigin: this.offsetOrigin,
          opacity: this.opacity,
          scale: this.scale,
          rotateWithView: this.rotateWithView,
          rotation: this.rotation,
          size: this.size,
          src: this.src,
          img: this.img,
          imgSize: this.imgSize
        });
      }
    },
    watch: _objectSpread({
      src: function src(value) {
        if (this.$style && !isEqual(value, this.$style.getSrc())) {
          this.scheduleRefresh();
        }
      },
      size: function size$$1(value) {
        if (this.$style && !isEqual(value, this.$style.getSize())) {
          this.scheduleRefresh();
        }
      },
      anchor: function anchor(value) {
        if (this.$style && !isEqual(value, this.$style.getAnchor())) {
          this.scheduleRefresh();
        }
      },
      color: function color(value) {
        if (this.$style && !isEqual(value, this.$style.getColor())) {
          this.scheduleRefresh();
        }
      },
      opacity: function opacity(value) {
        if (this.$style && !isEqual(value, this.$style.getOpacity())) {
          this.scheduleRefresh();
        }
      },
      scale: function scale(value) {
        if (this.$style && !isEqual(value, this.$style.getScale())) {
          this.scheduleRefresh();
        }
      },
      rotateWithView: function rotateWithView(value) {
        if (this.$style && !isEqual(value, this.$style.getRotateWithView())) {
          this.scheduleRefresh();
        }
      },
      rotation: function rotation(value) {
        if (this.$style && !isEqual(value, this.$style.getRotation())) {
          this.scheduleRefresh();
        }
      }
    }, makeWatchers(['anchorOrigin', 'anchorXUnits', 'anchorYUnits', 'crossOrigin', 'offset', 'offsetOrigin', 'img', 'imgSize'], function () {
      return function () {
        this.scheduleRefresh();
      };
    }))
  };

  /* script */
  var __vue_script__$c = script$c;
  /* template */

  /* style */

  var __vue_inject_styles__$c = undefined;
  /* scoped */

  var __vue_scope_id__$c = undefined;
  /* module identifier */

  var __vue_module_identifier__$c = undefined;
  /* functional template */

  var __vue_is_functional_template__$c = undefined;
  /* component normalizer */

  function __vue_normalize__$c(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "style.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Style$4 = __vue_normalize__$c({}, __vue_inject_styles__$c, __vue_script__$c, __vue_scope_id__$c, __vue_is_functional_template__$c, __vue_module_identifier__$c, undefined, undefined);

  function plugin$c(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$c.installed) {
      return;
    }

    plugin$c.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Style$4, options);
    Vue$$1.component(Style$4.name, Style$4);
  }

  var IconStyle = /*#__PURE__*/Object.freeze({
    default: plugin$c,
    Style: Style$4,
    install: plugin$c
  });

  /**
   * @vueProps
   */

  var props$4 =
  /** @lends module:image-layer/layer# */
  {};
  /**
   * @vueMethods
   */

  var methods$5 =
  /** @lends module:image-layer/layer# */
  {
    /**
     * @return {Image}
     * @protected
     */
    createLayer: function createLayer() {
      return new ImageLayer({
        id: this.id,
        minResolution: this.minResolution,
        maxResolution: this.maxResolution,
        opacity: this.opacity,
        visible: this.visible,
        extent: this.extent,
        zIndex: this.zIndex,
        source: this._source
      });
    }
  };
  /**
   * Layer for server-rendered images that are available for arbitrary extents and resolutions.
   *
   * @title vl-layer-image
   * @alias module:image-layer/layer
   * @vueProto
   *
   * @vueSlot default Default slot for `vl-source-*` (image-like only) components.
   */

  var script$d = {
    name: 'vl-layer-image',
    mixins: [layer],
    props: props$4,
    methods: methods$5
  };

  /* script */
  var __vue_script__$d = script$d;
  /* template */

  /* style */

  var __vue_inject_styles__$d = undefined;
  /* scoped */

  var __vue_scope_id__$d = undefined;
  /* module identifier */

  var __vue_module_identifier__$d = undefined;
  /* functional template */

  var __vue_is_functional_template__$d = undefined;
  /* component normalizer */

  function __vue_normalize__$d(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "layer.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Layer$3 = __vue_normalize__$d({}, __vue_inject_styles__$d, __vue_script__$d, __vue_scope_id__$d, __vue_is_functional_template__$d, __vue_module_identifier__$d, undefined, undefined);

  function plugin$d(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$d.installed) {
      return;
    }

    plugin$d.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Layer$3, options);
    Vue$$1.component(Layer$3.name, Layer$3);
  }

  var ImageLayer$1 = /*#__PURE__*/Object.freeze({
    default: plugin$d,
    Layer: Layer$3,
    install: plugin$d
  });

  /**
   * @vueProps
   */

  var props$5 =
  /** @lends module:image-static-source/source# */
  {
    /**
     * Image extent in the source projection.
     * @type {number[]}
     */
    extent: {
      type: Array,
      required: true,
      validator: function validator(value) {
        return value.length === 4;
      }
    },

    /**
     * Optional function to load an image given a URL.
     * @type {function|undefined}
     */
    loadFunc: Function,

    /**
     * Image size in pixels.
     * @type {number[]}
     */
    size: {
      type: Array,
      validator: function validator(value) {
        return value.length === 2;
      }
    },

    /**
     * Image URL.
     * @type {string}
     */
    url: {
      type: String,
      required: true,
      validator: function validator(value) {
        return !!value.length;
      }
    }
    /**
     * @vueMethods
     */

  };
  var methods$6 =
  /** @lends module:image-static-source/source# */
  {
    /**
     * @return {ImageStatic}
     * @protected
     */
    createSource: function createSource() {
      return new ImageStaticSource({
        attributions: this.attributions,
        crossOrigin: this.crossOrigin,
        imageExtent: this.extent,
        imageLoadFunction: this.loadFunc,
        logo: this.logo,
        projection: this.projection,
        imageSize: this.size,
        url: this.urlTmpl
      });
    }
  };
  var watch$4 = makeWatchers(Object.keys(props$5), function () {
    return function () {
      this.scheduleRecreate();
    };
  });
  /**
   * A layer source for displaying a single, static image.
   *
   * @vueProto
   * @title vl-source-image-static
   * @alias module:image-static-source/source
   */

  var script$e = {
    name: 'vl-source-image-static',
    mixins: [imageSource, withUrl],
    props: props$5,
    methods: methods$6,
    watch: watch$4
  };

  /* script */
  var __vue_script__$e = script$e;
  /* template */

  /* style */

  var __vue_inject_styles__$e = undefined;
  /* scoped */

  var __vue_scope_id__$e = undefined;
  /* module identifier */

  var __vue_module_identifier__$e = undefined;
  /* functional template */

  var __vue_is_functional_template__$e = undefined;
  /* component normalizer */

  function __vue_normalize__$e(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$4 = __vue_normalize__$e({}, __vue_inject_styles__$e, __vue_script__$e, __vue_scope_id__$e, __vue_is_functional_template__$e, __vue_module_identifier__$e, undefined, undefined);

  function plugin$e(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$e.installed) {
      return;
    }

    plugin$e.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$4, options);
    Vue$$1.component(Source$4.name, Source$4);
  }

  var ImageStaticSource$1 = /*#__PURE__*/Object.freeze({
    default: plugin$e,
    Source: Source$4,
    install: plugin$e
  });

  var props$6 = {
    hidpi: {
      type: Boolean,
      default: true
    },
    serverType: {
      type: String,
      validator: function validator(value) {
        return !value || Object.values(WMSServerType).includes(value);
      }
    },
    imageLoadFunction: Function,
    ratio: {
      type: Number,
      default: 1.5
    },
    resolutions: Array,
    url: {
      type: String,
      required: true,
      validator: function validator(value) {
        return !!value.length;
      }
    }
  };
  var methods$7 = {
    createOlObject: function createOlObject() {
      return new ImageWMS({
        attributions: this.attributions,
        crossOrigin: this.crossOrigin,
        hidpi: this.hidpi,
        serverType: this.serverType,
        imageLoadFunction: this.imageLoadFunction,
        params: this.allParams,
        projection: this.projection,
        ratio: this.ratio,
        resolutions: this.resolutions,
        url: this.urlTmpl
      });
    }
  };
  var script$f = {
    name: 'vl-source-image-wms',
    mixins: [imageSource, withUrl, wmsSource],
    props: props$6,
    methods: methods$7
  };

  /* script */
  var __vue_script__$f = script$f;
  /* template */

  /* style */

  var __vue_inject_styles__$f = undefined;
  /* scoped */

  var __vue_scope_id__$f = undefined;
  /* module identifier */

  var __vue_module_identifier__$f = undefined;
  /* functional template */

  var __vue_is_functional_template__$f = undefined;
  /* component normalizer */

  function __vue_normalize__$f(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$5 = __vue_normalize__$f({}, __vue_inject_styles__$f, __vue_script__$f, __vue_scope_id__$f, __vue_is_functional_template__$f, __vue_module_identifier__$f, undefined, undefined);

  function plugin$f(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$f.installed) {
      return;
    }

    plugin$f.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$5, options);
    Vue$$1.component(Source$5.name, Source$5);
  }

  var ImageWmsSource = /*#__PURE__*/Object.freeze({
    default: plugin$f,
    Source: Source$5,
    install: plugin$f
  });

  var props$7 = {};
  var computed$2 = {
    type: constant(GEOMETRY_TYPE.LINE_STRING)
  };
  var methods$8 = {
    /**
     * @returns {LineString}
     * @protected
     */
    createGeometry: function createGeometry() {
      return new LineString(this.toViewProj(this.coordinates));
    }
  };
  var script$g = {
    name: 'vl-geom-line-string',
    mixins: [geometry$1],
    props: props$7,
    computed: computed$2,
    methods: methods$8
  };

  /* script */
  var __vue_script__$g = script$g;
  /* template */

  /* style */

  var __vue_inject_styles__$g = undefined;
  /* scoped */

  var __vue_scope_id__$g = undefined;
  /* module identifier */

  var __vue_module_identifier__$g = undefined;
  /* functional template */

  var __vue_is_functional_template__$g = undefined;
  /* component normalizer */

  function __vue_normalize__$g(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "geom.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Geom$1 = __vue_normalize__$g({}, __vue_inject_styles__$g, __vue_script__$g, __vue_scope_id__$g, __vue_is_functional_template__$g, __vue_module_identifier__$g, undefined, undefined);

  function plugin$g(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$g.installed) {
      return;
    }

    plugin$g.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Geom$1, options);
    Vue$$1.component(Geom$1.name, Geom$1);
  }

  var LineStringGeom = /*#__PURE__*/Object.freeze({
    default: plugin$g,
    Geom: Geom$1,
    install: plugin$g
  });

  /**
   * Container for **layers**, **interactions**, **controls** and **overlays**. It responsible for viewport
   * rendering and low level interaction events.
   */

  var script$h = {
    name: 'vl-map',
    mixins: [cmp, layersContainer, interactionsContainer, overlaysContainer, featuresContainer, projTransforms],
    props: {
      /**
       * Options for default controls added to the map by default. Set to `false` to disable all map controls. Object
       * value is used to configure controls.
       * @type {Object|boolean}
       * @todo remove when vl-control-* components will be ready
       */
      defaultControls: {
        type: [Object, Boolean],
        default: true
      },

      /**
       * Options for default interactions added to the map by default. Object
       * value is used to configure default interactions.
       * @type {Object|boolean}
       */
      defaultInteractions: {
        type: [Object, Boolean],
        default: function _default() {
          return {};
        }
      },

      /**
       * The element to listen to keyboard events on. For example, if this option is set to `document` the keyboard
       * interactions will always trigger. If this option is not specified, the element the library listens to keyboard
       * events on is the component root element.
       * @type {string|Element|Document}
       */
      keyboardEventTarget: [String, Element, Document],

      /**
       * When set to `true`, tiles will be loaded during animations.
       * @type {boolean}
       */
      loadTilesWhileAnimating: {
        type: Boolean,
        default: false
      },

      /**
       * When set to `true`, tiles will be loaded while interacting with the map.
       * @type {boolean}
       */
      loadTilesWhileInteracting: {
        type: Boolean,
        default: false
      },

      /**
       * The minimum distance in pixels the cursor must move to be detected as a map move event instead of a click.
       * Increasing this value can make it easier to click on the map.
       * @type {Number}
       */
      moveTolerance: {
        type: Number,
        default: 1
      },

      /**
       * The ratio between physical pixels and device-independent pixels (dips) on the device.
       * @type {number}
       */
      pixelRatio: {
        type: Number,
        default: function _default() {
          return window.devicePixelRatio || 1;
        }
      },

      /**
       * Maximum number tiles to load simultaneously.
       * @type {number}
       */
      maxTilesLoading: {
        type: Number,
        default: 16
      },

      /**
       * Root element `tabindex` attribute value. Value should be provided to allow keyboard events on map.
       * @type {number|string}
       */
      tabindex: [String, Number],

      /**
       * Projection for input/output coordinates in plain data.
       * @type {string}
       */
      dataProjection: String,

      /**
       * @type {boolean}
       */
      wrapX: {
        type: Boolean,
        default: true
      }
    },
    methods: {
      /**
       * @return {module:ol/PluggableMap~PluggableMap}
       * @protected
       */
      createOlObject: function createOlObject() {
        var map$$1 = new Map$1({
          loadTilesWhileAnimating: this.loadTilesWhileAnimating,
          loadTilesWhileInteracting: this.loadTilesWhileInteracting,
          pixelRatio: this.pixelRatio,
          moveTolerance: this.moveTolerance,
          keyboardEventTarget: this.keyboardEventTarget,
          maxTilesLoading: this.maxTilesLoading,
          controls: this._controlsCollection,
          interactions: this._interactionsCollection,
          layers: this._layersCollection,
          overlays: this._overlaysCollection,
          view: this._view
        });
        setMapDataProjection(map$$1, this.dataProjection);

        this._featuresOverlay.setMap(map$$1);

        return map$$1;
      },

      /**
       * @param {number[]} pixel
       * @return {number[]} Coordinates in the map data projection.
       */
      getCoordinateFromPixel: function getCoordinateFromPixel(pixel) {
        hasMap(this);
        var coordinate = this.$map.getCoordinateFromPixel(pixel);
        return this.pointToDataProj(coordinate);
      },

      /**
       * @param {number[]} coordinate Coordinates in map data projection
       * @return {number[]}
       */
      getPixelFromCoordinate: function getPixelFromCoordinate(coordinate) {
        hasMap(this);
        return this.$map.getPixelFromCoordinate(this.pointToViewProj(coordinate));
      },

      /**
       * Triggers focus on map container.
       * @return {void}
       */
      focus: function focus() {
        this.$el.focus();
      },

      /**
       * @param {number[]} pixel
       * @param {function} callback
       * @param {Object} [opts]
       * @return {*|undefined}
       */
      forEachFeatureAtPixel: function forEachFeatureAtPixel(pixel, callback) {
        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        hasMap(this);
        return this.$map.forEachFeatureAtPixel(pixel, callback, opts);
      },

      /**
       * @param {number[]} pixel
       * @param {function} callback
       * @param {Object} [opts]
       * @return {*|undefined}
       */
      forEachLayerAtPixel: function forEachLayerAtPixel(pixel, callback) {
        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        hasMap(this);
        return this.$map.forEachLayerAtPixel(pixel, callback, opts);
      },

      /**
       * @param {number[]} pixel
       * @param {Object} [opts]
       */
      getFeaturesAtPixel: function getFeaturesAtPixel(pixel) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        hasMap(this);
        return this.$map.getFeaturesAtPixel(pixel, opts);
      },

      /**
       * Updates map size and re-renders map.
       * @return {Promise}
       */
      refresh: function refresh() {
        var _this = this;

        this.updateSize();
        return this.render().then(function () {
          return cmp.methods.refresh.call(_this);
        });
      },

      /**
       * @return {Promise}
       */
      render: function render() {
        var _this2 = this;

        return new Promise(function (resolve) {
          hasMap(_this2);

          _this2.$map.once('postrender', function () {
            return resolve();
          });

          _this2.$map.render();
        });
      },

      /**
       * Updates map size.
       * @return {void}
       */
      updateSize: function updateSize() {
        hasMap(this);
        this.$map.updateSize();
      },

      /**
       * @param {module:ol/View~View|Vue|undefined} view
       * @return {void}
       * @protected
       */
      setView: function setView(view) {
        view = view instanceof Vue ? view.$view : view;
        view || (view = new View());

        if (view !== this._view) {
          this._view = view;
        }

        if (this.$map && view !== this.$map.getView()) {
          this.$map.setView(view);
        }
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        hasMap(this);
        this.$map.setTarget(this.$el);
        this.$nextTick(this.updateSize.bind(this));
        this.subscribeAll();
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        hasMap(this);
        this.clearFeatures();
        this.clearLayers();
        this.clearInteractions();
        this.clearOverlays();
        this.unsubscribeAll();
        this.$map.setTarget(null);
      },

      /**
       * @return {void}
       * @protected
       */
      subscribeAll: function subscribeAll() {
        subscribeToEvents$3.call(this);
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        var vm = this;
        return multiMergeDescriptors(cmp.methods.getServices.call(this), layersContainer.methods.getServices.call(this), interactionsContainer.methods.getServices.call(this), overlaysContainer.methods.getServices.call(this), featuresContainer.methods.getServices.call(this), {
          get map() {
            return vm.$map;
          },

          get view() {
            return vm.$view;
          },

          get viewContainer() {
            return vm;
          }

        });
      }
    },
    watch: _objectSpread({}, makeWatchers(['keyboardEventTarget', 'loadTilesWhileAnimating', 'loadTilesWhileInteracting', 'moveTolerance', 'pixelRatio', 'renderer', 'maxTilesLoading'], function () {
      return function () {
        this.scheduleRecreate();
      };
    }), {
      controls: function controls(value) {
        if (value === false) {
          this._controlsCollection.clear();

          return;
        }

        value = _typeof(value) === 'object' ? value : undefined;

        this._controlsCollection.clear();

        this._controlsCollection.extend(control.defaults(value).getArray());
      },
      wrapX: function wrapX(value) {
        if (this._featuresOverlay == null) return;

        this._featuresOverlay.setSource(new VectorSource({
          features: this._featuresCollection,
          wrapX: value
        }));
      },
      dataProjection: function dataProjection(value) {
        if (!this.$map) return;
        setMapDataProjection(this.$map, value);
        this.scheduleRefresh();
      }
    }),
    created: function created() {
      this._view = new View(); // todo make controls handling like with interactions

      this._controlsCollection = this.defaultControls !== false ? control.defaults(_typeof(this.defaultControls) === 'object' ? this.defaultControls : undefined) : new Collection(); // todo initialize without interactions and provide vl-interaction-default component

      this._interactionsCollection = this.defaultInteractions !== false ? interaction.defaults(_typeof(this.defaultInteractions) === 'object' ? this.defaultInteractions : undefined) : new Collection();

      this._interactionsCollection.forEach(function (interaction$$1) {
        return initializeInteraction(interaction$$1);
      }); // prepare default overlay


      this._featuresOverlay = new VectorLayer({
        source: new VectorSource({
          features: this._featuresCollection,
          wrapX: this.wrapX
        })
      });
      defineServices$8.call(this);
    }
  };

  function defineServices$8() {
    var _this3 = this;

    Object.defineProperties(this, {
      /**
       * OpenLayers map instance.
       * @type {module:ol/PluggableMap~PluggableMap|undefined}
       */
      $map: {
        enumerable: true,
        get: function get$$1() {
          return _this3.$olObject;
        }
      },

      /**
       * OpenLayers view instance.
       * @type {module:ol/View~View}
       */
      $view: {
        enumerable: true,
        get: function get$$1() {
          return _this3._view;
        }
      }
    });
  }
  /**
   * Subscribe to OL map events.
   *
   * @return {void}
   * @private
   */


  function subscribeToEvents$3() {
    var _this4 = this;

    hasMap(this);
    hasView(this);
    var ft = 1000 / 60; // pointer

    var pointerEvents = merge(fromOlEvent(this.$map, ['click', 'dblclick', 'singleclick']), fromOlEvent(this.$map, ['pointerdrag', 'pointermove']).pipe(throttleTime(ft), distinctUntilChanged(function (a, b) {
      return isEqual(a.coordinate, b.coordinate);
    }))).pipe(map$1(function (evt) {
      return _objectSpread({}, evt, {
        coordinate: _this4.pointToDataProj(evt.coordinate)
      });
    })); // other

    var otherEvents = fromOlEvent(this.$map, ['movestart', 'moveend', 'postrender', 'rendercomplete', 'precompose', 'postcompose', 'rendercomplete']);
    var events = merge(pointerEvents, otherEvents);
    this.subscribeTo(events, function (evt) {
      _this4.$emit(evt.type, evt);
    });
  }

  /* script */
  var __vue_script__$h = script$h;
  /* template */

  var __vue_render__$3 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('div', {
      class: [_vm.$options.name],
      attrs: {
        "tabindex": _vm.tabindex
      }
    }, [_vm._t("default")], 2);
  };

  var __vue_staticRenderFns__$3 = [];
  /* style */

  var __vue_inject_styles__$h = undefined;
  /* scoped */

  var __vue_scope_id__$h = undefined;
  /* module identifier */

  var __vue_module_identifier__$h = undefined;
  /* functional template */

  var __vue_is_functional_template__$h = false;
  /* component normalizer */

  function __vue_normalize__$h(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "map.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Map$3 = __vue_normalize__$h({
    render: __vue_render__$3,
    staticRenderFns: __vue_staticRenderFns__$3
  }, __vue_inject_styles__$h, __vue_script__$h, __vue_scope_id__$h, __vue_is_functional_template__$h, __vue_module_identifier__$h, undefined, undefined);

  /** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */
  function distinctUntilKeyChanged(key, compare) {
      return distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
  }

  /**
   * Represents a simple **2D view** of the map. This is the component to act upon to change the **center**,
   * **resolution**, and **rotation** of the map.
   */

  var script$i = {
    name: 'vl-view',
    mixins: [cmp, projTransforms],
    props: {
      /**
       * The center coordinate in the view projection.
       * @type {number[]}
       * @default [0, 0]
       */
      center: {
        type: Array,
        default: function _default() {
          return [0, 0];
        },
        validator: arrayLengthValidator(2)
      },
      constrainRotation: {
        type: [Boolean, Number],
        default: true
      },
      enableRotation: {
        type: Boolean,
        default: true
      },

      /**
       * The extent that constrains the center defined in the view projection,
       * in other words, center cannot be set outside this extent.
       * @default undefined
       */
      extent: {
        type: Array,
        validator: arrayLengthValidator(4)
      },
      maxResolution: Number,
      minResolution: Number,

      /**
       * @default 28
       */
      maxZoom: {
        type: Number,
        default: MAX_ZOOM
      },

      /**
       * @default 0
       */
      minZoom: {
        type: Number,
        default: MIN_ZOOM
      },

      /**
       * @type {string}
       * @default EPSG:3857
       */
      projection: {
        type: String,
        default: EPSG_3857
      },
      resolution: Number,
      resolutions: Array,

      /**
       * The initial rotation for the view in **radians** (positive rotation clockwise).
       * @type {number}
       * @vueSync
       */
      rotation: {
        type: Number,
        default: 0
      },

      /**
       * Zoom level used to calculate the resolution for the view as `int` value. Only used if `resolution` is not defined.
       * @type {number}
       * @default 0
       * @vueSync
       */
      zoom: {
        type: Number,
        default: MIN_ZOOM
      },

      /**
       * @default 2
       */
      zoomFactor: {
        type: Number,
        default: ZOOM_FACTOR
      }
    },
    computed: {
      currentZoom: function currentZoom() {
        if (this.rev && this.$view) {
          return this.$view.getZoom();
        }

        return this.zoom;
      },
      currentRotation: function currentRotation() {
        if (this.rev && this.$view) {
          return this.$view.getRotation();
        }

        return this.rotation;
      },
      currentResolution: function currentResolution() {
        if (this.rev && this.$view) {
          return this.$view.getResolution();
        }

        return this.resolution;
      },
      currentCenter: function currentCenter() {
        if (this.rev && this.$view) {
          return this.pointToDataProj(this.$view.getCenter());
        }
      },
      currentCenterViewProj: function currentCenterViewProj() {
        if (this.rev && this.$view) {
          return this.$view.getCenter();
        }
      },

      /**
       * @return {ProjectionLike}
       */
      resolvedDataProjection: function resolvedDataProjection() {
        // exclude this.projection from lookup to allow view rendering in projection
        // that differs from data projection
        return coalesce(this.$viewContainer && this.$viewContainer.resolvedDataProjection, this.$options.dataProjection, this.viewProjection);
      }
    },
    methods: {
      /**
       * @see {@link https://openlayers.org/en/latest/apidoc/module-ol_View-View.html#animate}
       * @param {...(AnimationOptions|function(boolean))} args
       * @return {Promise} Resolves when animation completes
       */
      animate: function animate() {
        var _this = this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        hasView(this);
        var cb = noop;

        if (isFunction(args[args.length - 1])) {
          cb = args[args.length - 1];
          args = args.slice(0, args.length - 1);
        }

        args.forEach(function (opts) {
          if (!Array.isArray(opts.center)) return;
          opts.center = _this.pointToViewProj(opts.center);
        });
        return new Promise(function (resolve) {
          var _this$$view;

          return (_this$$view = _this.$view).animate.apply(_this$$view, _toConsumableArray(args).concat([function (complete) {
            cb(complete);
            resolve(complete);
          }]));
        });
      },

      /**
       * @return {ol/View~View}
       * @protected
       */
      createOlObject: function createOlObject() {
        return new View({
          center: this.pointToViewProj(this.center),
          constrainRotation: this.constrainRotation,
          enableRotation: this.enableRotation,
          extent: this.extent ? this.extentToViewProj(this.extent) : undefined,
          maxResolution: this.maxResolution,
          minResolution: this.minResolution,
          maxZoom: this.maxZoom,
          minZoom: this.minZoom,
          projection: this.projection,
          resolution: this.resolution,
          resolutions: this.resolutions,
          rotation: this.rotation,
          zoom: this.zoom,
          zoomFactor: this.zoomFactor
        });
      },

      /**
       * @see {@link https://openlayers.org/en/latest/apidoc/module-ol_View-View.html#fit}
       * @param {Object|module:ol/geom/SimpleGeometry~SimpleGeometry|module:ol/extent~Extent|Vue} geometryOrExtent
       * @param {FitOptions} [options]
       * @return {Promise} Resolves when view changes
       */
      fit: function fit(geometryOrExtent) {
        var _this2 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        hasView(this); // transform from GeoJSON, vl-feature to ol.Feature

        if (isPlainObject(geometryOrExtent)) {
          geometryOrExtent = this.readGeometryInDataProj(geometryOrExtent);
        } else if (geometryOrExtent instanceof Vue) {
          geometryOrExtent = geometryOrExtent.$geometry;
        }

        var cb = options.callback || noop;
        return new Promise(function (resolve) {
          _this2.$view.fit(geometryOrExtent, _objectSpread({}, options, {
            callback: function callback(complete) {
              cb(complete);
              resolve(complete);
            }
          }));
        });
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        this.$viewContainer && this.$viewContainer.setView(this);
        this.subscribeAll();
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        this.unsubscribeAll();
        this.$viewContainer && this.$viewContainer.setView(undefined);
      },

      /**
       * @return {void}
       * @protected
       */
      subscribeAll: function subscribeAll() {
        subscribeToEvents$4.call(this);
      }
    },
    watch: _objectSpread({
      center: function center(value) {
        if (!this.$view || this.$view.getAnimating()) return;
        value = this.pointToViewProj(value);

        if (!isEqual(value, this.currentCenterViewProj)) {
          this.$view.setCenter(value);
        }
      },
      resolution: function resolution(value) {
        if (!this.$view || this.$view.getAnimating()) return;

        if (value !== this.currentResolution) {
          this.$view.setResolution(value);
        }
      },
      zoom: function zoom(value) {
        if (!this.$view || this.$view.getAnimating()) return;

        if (value !== this.currentZoom) {
          this.$view.setZoom(value);
        }
      },
      rotation: function rotation(value) {
        if (!this.$view || this.$view.getAnimating()) return;

        if (value !== this.currentRotation) {
          this.$view.setRotation(value);
        }
      },
      minZoom: function minZoom(value) {
        if (!this.$view) return;

        if (value !== this.$view.getMinZoom()) {
          this.$view.setMinZoom(value);
        }
      },
      maxZoom: function maxZoom(value) {
        if (!this.$view) return;

        if (value !== this.$view.getMaxZoom()) {
          this.$view.setMaxZoom(value);
        }
      }
    }, makeWatchers(['resolvedDataProjection', 'constrainRotation', 'enableRotation', 'extent', 'maxResolution', 'minResolution', 'projection', 'resolutions', 'zoomFactor'], function () {
      return function () {
        this.scheduleRecreate();
      };
    })),
    stubVNode: {
      empty: function empty() {
        return this.$options.name;
      }
    },
    created: function created() {
      defineServices$9.call(this);
    }
  };

  function defineServices$9() {
    var _this3 = this;

    Object.defineProperties(this, {
      /**
       * @type {ol/View~View|undefined}
       */
      $view: {
        enumerable: true,
        get: function get$$1() {
          return _this3.$olObject;
        }
      },
      $viewContainer: {
        enumerable: true,
        get: function get$$1() {
          return _this3.$services && _this3.$services.viewContainer;
        }
      }
    });
  }
  /**
   * Subscribe to OpenLayers significant events
   * @return {void}
   * @private
   */


  function subscribeToEvents$4() {
    var _this4 = this;

    hasView(this);
    var ft = 1000 / 60;
    var resolution = fromOlChangeEvent(this.$view, 'resolution', true, ft);
    var zoom = resolution.pipe(map$1(function () {
      return {
        prop: 'zoom',
        value: _this4.$view.getZoom()
      };
    }), distinctUntilKeyChanged('value'));
    var changes = merge(fromOlChangeEvent(this.$view, 'center', true, ft, function () {
      return _this4.pointToDataProj(_this4.$view.getCenter());
    }), fromOlChangeEvent(this.$view, 'rotation', true, ft), resolution, zoom);
    this.subscribeTo(changes, function (_ref) {
      var prop = _ref.prop,
          value = _ref.value;
      ++_this4.rev;

      _this4.$emit("update:".concat(prop), value);
    });
  }

  /* script */
  var __vue_script__$i = script$i;
  /* template */

  var __vue_render__$4 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('i', {
      class: [_vm.$options.name],
      staticStyle: {
        "display": "none !important"
      }
    }, [_vm._t("default", null, {
      center: _vm.currentCenter,
      zoom: _vm.currentZoom,
      resolution: _vm.currentResolution,
      rotation: _vm.currentRotation
    })], 2);
  };

  var __vue_staticRenderFns__$4 = [];
  /* style */

  var __vue_inject_styles__$i = undefined;
  /* scoped */

  var __vue_scope_id__$i = undefined;
  /* module identifier */

  var __vue_module_identifier__$i = undefined;
  /* functional template */

  var __vue_is_functional_template__$i = false;
  /* component normalizer */

  function __vue_normalize__$i(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "view.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var View$2 = __vue_normalize__$i({
    render: __vue_render__$4,
    staticRenderFns: __vue_staticRenderFns__$4
  }, __vue_inject_styles__$i, __vue_script__$i, __vue_scope_id__$i, __vue_is_functional_template__$i, __vue_module_identifier__$i, undefined, undefined);

  function plugin$h(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$h.installed) {
      return;
    }

    plugin$h.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Map$3, options);
    Object.assign(View$2, options);
    Vue$$1.component(Map$3.name, Map$3);
    Vue$$1.component(View$2.name, View$2);
  }

  var Map$4 = /*#__PURE__*/Object.freeze({
    default: plugin$h,
    Map: Map$3,
    View: View$2,
    install: plugin$h
  });

  var MAPBOX_URL_TEMPLATE = 'https://{a-c}.tiles.mapbox.com/v4/{mapId}/{z}/{x}/{y}{tileNameSuffix}.{tileFormat}?access_token={accessToken}';
  var MAPBOX_ATTRIBUTIONS = '&copy; <a href="https://www.mapbox.com/" target="_blank">MapBox</a>, ' + new Date().getFullYear();
  var props$8 = {
    accessToken: {
      type: String,
      required: true
    },
    attributions: {
      type: [String, Array],
      default: MAPBOX_ATTRIBUTIONS
    },
    mapId: {
      type: String,
      required: true
    },
    projection: {
      type: String,
      default: EPSG_3857
    },
    tileFormat: {
      type: String,
      default: TILE_FORMAT
    },
    url: {
      type: String,
      default: MAPBOX_URL_TEMPLATE
    }
  };
  var computed$3 = {
    /**
     * @type {string}
     */
    tileNameSuffix: function tileNameSuffix() {
      return _tileNameSuffix(this.tilePixelRatio);
    },

    /**
     * @type {string[]}
     */
    urlTokens: function urlTokens() {
      return ['mapId', 'accessToken', 'tileNameSuffix', 'tileFormat'];
    }
  };
  var script$j = {
    name: 'vl-source-mapbox',
    mixins: [xyzSource],
    props: props$8,
    computed: computed$3
    /**
     * @param {number} [ratio]
     * @returns {number}
     * @private
     */

  };

  function tileRatio(ratio) {
    ratio = coalesce(ratio, 1);
    return ratio > 1 ? 2 : 1;
  }
  /**
   * @param {number} [ratio]
   * @returns {string}
   * @private
   */


  function _tileNameSuffix(ratio) {
    ratio = tileRatio(ratio);
    return ratio > 1 ? ['@', ratio, 'x'].join('') : '';
  }

  /* script */
  var __vue_script__$j = script$j;
  /* template */

  /* style */

  var __vue_inject_styles__$j = undefined;
  /* scoped */

  var __vue_scope_id__$j = undefined;
  /* module identifier */

  var __vue_module_identifier__$j = undefined;
  /* functional template */

  var __vue_is_functional_template__$j = undefined;
  /* component normalizer */

  function __vue_normalize__$j(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$6 = __vue_normalize__$j({}, __vue_inject_styles__$j, __vue_script__$j, __vue_scope_id__$j, __vue_is_functional_template__$j, __vue_module_identifier__$j, undefined, undefined);

  function plugin$i(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$i.installed) {
      return;
    }

    plugin$i.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$6, options);
    Vue$$1.component(Source$6.name, Source$6);
  }

  var MapboxSource = /*#__PURE__*/Object.freeze({
    default: plugin$i,
    Source: Source$6,
    install: plugin$i
  });

  /**
   * @vueProto
   * @alias module:modify-interaction/interaction
   * @title vl-interaction-modify
   */

  var script$k = {
    name: 'vl-interaction-modify',
    mixins: [interaction$1, stylesContainer],
    stubVNode: {
      empty: false,
      attrs: function attrs() {
        return {
          class: this.$options.name
        };
      }
    },
    props: {
      /**
       * Source or collection identifier from IdentityMap.
       * @type {String}
       */
      source: {
        type: String,
        required: true
      },

      /**
       * A function that takes an `ol.MapBrowserEvent` and returns a boolean to indicate whether that event will be
       * considered to add or move a vertex to the sketch. Default is `ol.events.condition.primaryAction`.
       * @type {function|undefined}
       */
      condition: {
        type: Function,
        default: condition.primaryAction
      },

      /**
       * A function that takes an `ol.MapBrowserEvent` and returns a boolean to indicate whether that event should be handled.
       * By default, `ol.events.condition.singleClick` with `ol.events.condition.altKeyOnly` results in a vertex deletion.
       * @type {function|undefined}
       */
      deleteCondition: {
        type: Function,
        default: condition.altKeyOnly
      },

      /**
       * A function that takes an `ol.MapBrowserEvent` and returns a boolean to indicate whether a new vertex can be added
       * to the sketch features. Default is `ol.events.condition.always`.
       * @type {function|undefined}
       */
      insertVertexCondition: {
        type: Function,
        default: condition.always
      },

      /**
       * Pixel tolerance for considering the pointer close enough to a segment or vertex for editing.
       * @type {number}
       */
      pixelTolerance: {
        type: Number,
        default: 10
      },

      /**
       * Wrap the world horizontally on the sketch overlay.
       * @type {boolean}
       */
      wrapX: {
        type: Boolean,
        default: false
      }
    },
    methods: {
      /**
       * @return {Promise<Modify>}
       * @protected
       */
      createInteraction: function () {
        var _createInteraction = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee() {
          var sourceIdent, source;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  sourceIdent = this.makeIdent(this.source);
                  _context.next = 3;
                  return this.$identityMap.get(sourceIdent, this.$options.INSTANCE_PROMISE_POOL);

                case 3:
                  source = _context.sent;
                  assert$1(isVectorSource(source), "Source \"".concat(sourceIdent, "\" doesn't exists in the identity map."));
                  assert$1(isCollection(source.getFeaturesCollection()), "Source \"".concat(sourceIdent, "\" doesn't provide features collection."));
                  return _context.abrupt("return", new ModifyInteraction({
                    features: source.getFeaturesCollection(),
                    deleteCondition: this.deleteCondition,
                    insertVertexCondition: this.insertVertexCondition,
                    pixelTolerance: this.pixelTolerance,
                    style: this.createStyleFunc(),
                    wrapX: this.wrapX
                  }));

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function createInteraction() {
          return _createInteraction.apply(this, arguments);
        };
      }(),

      /**
       * @return {function(feature: Feature): Style}
       * @protected
       */
      getDefaultStyles: function getDefaultStyles() {
        var defaultStyles = mapValues(defaultEditStyle(), function (styles) {
          return styles.map(createStyle);
        });
        return function __selectDefaultStyleFunc(feature) {
          if (feature.getGeometry()) {
            return defaultStyles[feature.getGeometry().getType()];
          }
        };
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        return multiMergeDescriptors(interaction$1.methods.getServices.call(this), stylesContainer.methods.getServices.call(this));
      },

      /**
       * @return {Interaction|undefined}
       * @protected
       */
      getStyleTarget: function getStyleTarget() {
        return this.$interaction;
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        interaction$1.methods.mount.call(this);
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        interaction$1.methods.unmount.call(this);
      },

      /**
       * @param {Array<{style: Style, condition: (function|boolean|undefined)}>|function(feature: Feature): Style|Vue|undefined} styles
       * @return {void}
       * @protected
       */
      setStyle: function setStyle(styles) {
        if (styles !== this._styles) {
          this._styles = styles;
          this.scheduleRecreate();
        }
      },

      /**
       * @return {void}
       * @protected
       */
      subscribeAll: function subscribeAll() {
        interaction$1.methods.subscribeAll.call(this);
        subscribeToInteractionChanges$1.call(this);
      }
    },
    watch: _objectSpread({}, makeWatchers(['source', 'condition', 'deleteCondition', 'insertVertexCondition', 'pixelTolerance', 'wrapX'], function () {
      return function () {
        this.scheduleRecreate();
      };
    }))
    /**
     * @private
     */

  };

  function subscribeToInteractionChanges$1() {
    var _this = this;

    hasInteraction(this);
    var modifyEvents = fromOlEvent(this.$interaction, ['modifystart', 'modifyend']);
    this.subscribeTo(modifyEvents, function (evt) {
      ++_this.rev;

      _this.$emit(evt.type, evt);
    });
  }

  /* script */
  var __vue_script__$k = script$k;
  /* template */

  /* style */

  var __vue_inject_styles__$k = undefined;
  /* scoped */

  var __vue_scope_id__$k = undefined;
  /* module identifier */

  var __vue_module_identifier__$k = undefined;
  /* functional template */

  var __vue_is_functional_template__$k = undefined;
  /* component normalizer */

  function __vue_normalize__$k(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "interaction.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Interaction$3 = __vue_normalize__$k({}, __vue_inject_styles__$k, __vue_script__$k, __vue_scope_id__$k, __vue_is_functional_template__$k, __vue_module_identifier__$k, undefined, undefined);

  function plugin$j(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$j.installed) {
      return;
    }

    plugin$j.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Interaction$3, options);
    Vue$$1.component(Interaction$3.name, Interaction$3);
  }

  var ModifyInteraction$1 = /*#__PURE__*/Object.freeze({
    default: plugin$j,
    Interaction: Interaction$3,
    install: plugin$j
  });

  var props$9 = {};
  var computed$4 = {
    type: constant(GEOMETRY_TYPE.MULTI_LINE_STRING)
  };
  var methods$9 = {
    /**
     * @returns {MultiLineString}
     * @protected
     */
    createGeometry: function createGeometry() {
      return new MultiLineString(this.toViewProj(this.coordinates));
    }
  };
  var script$l = {
    name: 'vl-geom-multi-line-string',
    mixins: [geometry$1],
    props: props$9,
    computed: computed$4,
    methods: methods$9
  };

  /* script */
  var __vue_script__$l = script$l;
  /* template */

  /* style */

  var __vue_inject_styles__$l = undefined;
  /* scoped */

  var __vue_scope_id__$l = undefined;
  /* module identifier */

  var __vue_module_identifier__$l = undefined;
  /* functional template */

  var __vue_is_functional_template__$l = undefined;
  /* component normalizer */

  function __vue_normalize__$l(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "geom.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Geom$2 = __vue_normalize__$l({}, __vue_inject_styles__$l, __vue_script__$l, __vue_scope_id__$l, __vue_is_functional_template__$l, __vue_module_identifier__$l, undefined, undefined);

  function plugin$k(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$k.installed) {
      return;
    }

    plugin$k.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Geom$2, options);
    Vue$$1.component(Geom$2.name, Geom$2);
  }

  var MultiLineStringGeom = /*#__PURE__*/Object.freeze({
    default: plugin$k,
    Geom: Geom$2,
    install: plugin$k
  });

  var props$a = {};
  var computed$5 = {
    type: constant(GEOMETRY_TYPE.MULTI_POINT)
  };
  var methods$a = {
    /**
     * @returns {MultiPoint}
     * @protected
     */
    createGeometry: function createGeometry() {
      return new MultiPoint(this.toViewProj(this.coordinates));
    }
  };
  var script$m = {
    name: 'vl-geom-multi-point',
    mixins: [geometry$1],
    props: props$a,
    computed: computed$5,
    methods: methods$a
  };

  /* script */
  var __vue_script__$m = script$m;
  /* template */

  /* style */

  var __vue_inject_styles__$m = undefined;
  /* scoped */

  var __vue_scope_id__$m = undefined;
  /* module identifier */

  var __vue_module_identifier__$m = undefined;
  /* functional template */

  var __vue_is_functional_template__$m = undefined;
  /* component normalizer */

  function __vue_normalize__$m(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "geom.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Geom$3 = __vue_normalize__$m({}, __vue_inject_styles__$m, __vue_script__$m, __vue_scope_id__$m, __vue_is_functional_template__$m, __vue_module_identifier__$m, undefined, undefined);

  function plugin$l(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$l.installed) {
      return;
    }

    plugin$l.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Geom$3, options);
    Vue$$1.component(Geom$3.name, Geom$3);
  }

  var MultiPointGeom = /*#__PURE__*/Object.freeze({
    default: plugin$l,
    Geom: Geom$3,
    install: plugin$l
  });

  var props$b = {};
  var computed$6 = {
    type: constant(GEOMETRY_TYPE.MULTI_POLYGON)
  };
  var methods$b = {
    /**
     * @returns {MultiPolygon}
     * @protected
     */
    createGeometry: function createGeometry() {
      return new MultiPolygon(this.toViewProj(this.coordinates));
    }
  };
  var script$n = {
    name: 'vl-geom-multi-polygon',
    mixins: [geometry$1],
    props: props$b,
    computed: computed$6,
    methods: methods$b
  };

  /* script */
  var __vue_script__$n = script$n;
  /* template */

  /* style */

  var __vue_inject_styles__$n = undefined;
  /* scoped */

  var __vue_scope_id__$n = undefined;
  /* module identifier */

  var __vue_module_identifier__$n = undefined;
  /* functional template */

  var __vue_is_functional_template__$n = undefined;
  /* component normalizer */

  function __vue_normalize__$n(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "geom.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Geom$4 = __vue_normalize__$n({}, __vue_inject_styles__$n, __vue_script__$n, __vue_scope_id__$n, __vue_is_functional_template__$n, __vue_module_identifier__$n, undefined, undefined);

  function plugin$m(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$m.installed) {
      return;
    }

    plugin$m.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Geom$4, options);
    Vue$$1.component(Geom$4.name, Geom$4);
  }

  var MultiPolygonGeom = /*#__PURE__*/Object.freeze({
    default: plugin$m,
    Geom: Geom$4,
    install: plugin$m
  });

  var OSM_ATTRIBUTIONS = '&copy; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.';
  var OSM_URL_TEMPLATE = 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';
  var OSM_MAX_ZOOM = 19;
  var props$c = {
    attributions: {
      type: [String, Array],
      default: OSM_ATTRIBUTIONS
    },
    maxZoom: {
      type: Number,
      default: OSM_MAX_ZOOM
    },
    url: {
      type: String,
      default: OSM_URL_TEMPLATE
    }
  };
  var methods$c = {
    createSource: function createSource() {
      // always EPSG:3857, size: 256x256, format png
      return new OSMSource({
        url: this.urlTmpl,
        attributions: this.attributions,
        crossOrigin: this.crossOrigin,
        maxZoom: this.maxZoom,
        cacheSize: this.cacheSize,
        opaque: this.opaque,
        reprojectionErrorThreshold: this.reprojectionErrorThreshold,
        wrapX: this.wrapX,
        transition: this.transition
      });
    }
  };
  var script$o = {
    name: 'vl-source-osm',
    mixins: [xyzSource],
    props: props$c,
    methods: methods$c
  };

  /* script */
  var __vue_script__$o = script$o;
  /* template */

  /* style */

  var __vue_inject_styles__$o = undefined;
  /* scoped */

  var __vue_scope_id__$o = undefined;
  /* module identifier */

  var __vue_module_identifier__$o = undefined;
  /* functional template */

  var __vue_is_functional_template__$o = undefined;
  /* component normalizer */

  function __vue_normalize__$o(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$7 = __vue_normalize__$o({}, __vue_inject_styles__$o, __vue_script__$o, __vue_scope_id__$o, __vue_is_functional_template__$o, __vue_module_identifier__$o, undefined, undefined);

  function plugin$n(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$n.installed) {
      return;
    }

    plugin$n.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$7, options);
    Vue$$1.component(Source$7.name, Source$7);
  }

  var OsmSource = /*#__PURE__*/Object.freeze({
    default: plugin$n,
    Source: Source$7,
    install: plugin$n
  });

  //
  var props$d = {
    id: {
      type: [String, Number],
      default: function _default() {
        return v4_1();
      }
    },
    offset: {
      type: Array,
      default: function _default() {
        return [0, 0];
      },
      validator: function validator(value) {
        return value.length === 2;
      }
    },

    /**
     * Coordinates in the map view projection.
     * @type {number[]}
     */
    position: {
      type: Array,
      validator: function validator(value) {
        return value.length === 2;
      },
      required: true
    },
    positioning: {
      type: String,
      default: OVERLAY_POSITIONING.TOP_LEFT,
      validator: function validator(value) {
        return Object.values(OVERLAY_POSITIONING).includes(value);
      }
    },
    stopEvent: {
      type: Boolean,
      default: true
    },
    insertFirst: {
      type: Boolean,
      default: true
    },
    autoPan: {
      type: Boolean,
      default: false
    },
    autoPanMargin: {
      type: Number,
      default: 20
    },
    autoPanAnimation: Object,
    className: String
  };
  var computed$7 = {
    positionViewProj: function positionViewProj() {
      if (this.rev && this.$overlay) {
        return this.$overlay.getPosition();
      }
    },
    positionDataProj: function positionDataProj() {
      if (this.rev && this.$overlay) {
        return this.pointToDataProj(this.$overlay.getPosition());
      }
    },
    classes: function classes() {
      return [this.$options.name, this.visible ? 'visible' : undefined].filter(identity);
    }
  };
  var methods$d = {
    /**
     * @return {module:ol/Overlay~Overlay}
     * @protected
     */
    createOlObject: function createOlObject() {
      var overlay = new Overlay({
        id: this.id,
        offset: this.offset,
        position: this.pointToViewProj(this.position),
        positioning: this.positioning,
        stopEvent: this.stopEvent,
        insertFirst: this.insertFirst,
        autoPan: this.autoPan,
        autoPanMargin: this.autoPanMargin,
        autoPanAnimation: this.autoPanAnimation,
        className: this.className
      });
      initializeOverlay(overlay, this.id);
      return overlay;
    },

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      var _this = this;

      hasOverlay(this);
      this.$overlay.setElement(this.$el);
      this.$overlaysContainer && this.$overlaysContainer.addOverlay(this.$overlay); // reset position to trigger panIntoView

      this.$nextTick(function () {
        _this.$overlay.setPosition(_this.positionViewProj.slice());

        _this.visible = true;
      });
      this.subscribeAll();
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      hasOverlay(this);
      this.unsubscribeAll();
      this.$overlay.setElement(undefined);
      this.$overlaysContainer && this.$overlaysContainer.removeOverlay(this.$overlay);
      this.visible = false;
    },

    /**
     * @return {void}
     * @protected
     */
    subscribeAll: function subscribeAll() {
      subscribeToOverlayChanges.call(this);
    }
  };
  var watch$5 = {
    id: function id(value) {
      if (!this.$overlay) return;
      setOverlayId(this.$overlay, value);
    },
    offset: function offset(value) {
      if (this.$overlay && !isEqual(value, this.$overlay.getOffset())) {
        this.$overlay.setOffset(value);
      }
    },
    position: function position(value) {
      value = this.pointToViewProj(value);

      if (this.$overlay && !isEqual(value, this.$overlay.getPosition())) {
        this.$overlay.setPosition(value);
      }
    },
    positioning: function positioning(value) {
      if (this.$overlay && value !== this.$overlay.getPositioning()) {
        this.$overlay.setPositioning(value);
      }
    },
    resolvedDataProjection: function resolvedDataProjection() {
      if (this.$overlay) {
        this.$overlay.setPosition(this.pointToViewProj(this.position));
      }
    }
  };
  var script$p = {
    name: 'vl-overlay',
    mixins: [cmp, useMapCmp, projTransforms],
    props: props$d,
    computed: computed$7,
    methods: methods$d,
    watch: watch$5,
    created: function created() {
      var _this2 = this;

      Object.defineProperties(this, {
        /**
         * @type {module:ol/Overlay~Overlay|undefined}
         */
        $overlay: {
          enumerable: true,
          get: function get$$1() {
            return _this2.$olObject;
          }
        },
        $map: {
          enumerable: true,
          get: function get$$1() {
            return _this2.$services && _this2.$services.map;
          }
        },
        $view: {
          enumerable: true,
          get: function get$$1() {
            return _this2.$services && _this2.$services.view;
          }
        },
        $overlaysContainer: {
          enumerable: true,
          get: function get$$1() {
            return _this2.$services && _this2.$services.overlaysContainer;
          }
        }
      });
    },
    data: function data() {
      return {
        visible: false
      };
    }
  };
  /**
   * @return {void}
   * @private
   */

  function subscribeToOverlayChanges() {
    var _this3 = this;

    hasOverlay(this);
    var changes = merge(fromOlChangeEvent(this.$overlay, 'position', true, undefined, function () {
      return _this3.pointToDataProj(_this3.$overlay.getPosition());
    }), fromOlChangeEvent(this.$overlay, ['offset', 'positioning'], true));
    this.subscribeTo(changes, function (_ref) {
      var prop = _ref.prop,
          value = _ref.value;
      ++_this3.rev;

      _this3.$emit("update:".concat(prop), value);
    });
  }

  /* script */
  var __vue_script__$p = script$p;
  /* template */

  var __vue_render__$5 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('div', {
      class: _vm.classes,
      attrs: {
        "id": [_vm.$options.name, _vm.id].join('-')
      }
    }, [_vm._t("default", null, {
      id: _vm.id,
      position: _vm.position,
      offset: _vm.offset,
      positioning: _vm.positioning
    })], 2);
  };

  var __vue_staticRenderFns__$5 = [];
  /* style */

  var __vue_inject_styles__$p = undefined;
  /* scoped */

  var __vue_scope_id__$p = undefined;
  /* module identifier */

  var __vue_module_identifier__$p = undefined;
  /* functional template */

  var __vue_is_functional_template__$p = false;
  /* component normalizer */

  function __vue_normalize__$p(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "overlay.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Overlay$2 = __vue_normalize__$p({
    render: __vue_render__$5,
    staticRenderFns: __vue_staticRenderFns__$5
  }, __vue_inject_styles__$p, __vue_script__$p, __vue_scope_id__$p, __vue_is_functional_template__$p, __vue_module_identifier__$p, undefined, undefined);

  function plugin$o(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$o.installed) {
      return;
    }

    plugin$o.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Overlay$2, options);
    Vue$$1.component(Overlay$2.name, Overlay$2);
  }

  var Overlay$3 = /*#__PURE__*/Object.freeze({
    default: plugin$o,
    Overlay: Overlay$2,
    install: plugin$o
  });

  var props$e = {
    coordinates: {
      type: Array,
      required: true,
      validator: function validator(value) {
        return value.length >= 2;
      }
    }
  };
  var computed$8 = {
    type: constant(GEOMETRY_TYPE.POINT)
  };
  var methods$e = {
    /**
     * @return {Point}
     * @protected
     */
    createGeometry: function createGeometry() {
      return new Point(this.toViewProj(this.coordinates));
    }
  };
  var script$q = {
    name: 'vl-geom-point',
    mixins: [geometry$1],
    props: props$e,
    computed: computed$8,
    methods: methods$e
  };

  /* script */
  var __vue_script__$q = script$q;
  /* template */

  /* style */

  var __vue_inject_styles__$q = undefined;
  /* scoped */

  var __vue_scope_id__$q = undefined;
  /* module identifier */

  var __vue_module_identifier__$q = undefined;
  /* functional template */

  var __vue_is_functional_template__$q = undefined;
  /* component normalizer */

  function __vue_normalize__$q(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "geom.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Geom$5 = __vue_normalize__$q({}, __vue_inject_styles__$q, __vue_script__$q, __vue_scope_id__$q, __vue_is_functional_template__$q, __vue_module_identifier__$q, undefined, undefined);

  function plugin$p(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$p.installed) {
      return;
    }

    plugin$p.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Geom$5, options);
    Vue$$1.component(Geom$5.name, Geom$5);
  }

  var PointGeom = /*#__PURE__*/Object.freeze({
    default: plugin$p,
    Geom: Geom$5,
    install: plugin$p
  });

  var props$f = {};
  var computed$9 = {
    type: constant(GEOMETRY_TYPE.POLYGON)
  };
  var methods$f = {
    /**
     * @returns {Polygon}
     * @protected
     */
    createGeometry: function createGeometry() {
      return new Polygon__default(this.toViewProj(this.coordinates));
    }
  };
  var script$r = {
    name: 'vl-geom-polygon',
    mixins: [geometry$1],
    props: props$f,
    computed: computed$9,
    methods: methods$f
  };

  /* script */
  var __vue_script__$r = script$r;
  /* template */

  /* style */

  var __vue_inject_styles__$r = undefined;
  /* scoped */

  var __vue_scope_id__$r = undefined;
  /* module identifier */

  var __vue_module_identifier__$r = undefined;
  /* functional template */

  var __vue_is_functional_template__$r = undefined;
  /* component normalizer */

  function __vue_normalize__$r(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "geom.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Geom$6 = __vue_normalize__$r({}, __vue_inject_styles__$r, __vue_script__$r, __vue_scope_id__$r, __vue_is_functional_template__$r, __vue_module_identifier__$r, undefined, undefined);

  function plugin$q(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$q.installed) {
      return;
    }

    plugin$q.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Geom$6, options);
    Vue$$1.component(Geom$6.name, Geom$6);
  }

  var PolygonGeom = /*#__PURE__*/Object.freeze({
    default: plugin$q,
    Geom: Geom$6,
    install: plugin$q
  });

  var props$g = {
    points: {
      type: Number,
      required: true
    },
    radius: Number,
    radius1: Number,
    radius2: Number,
    angle: {
      type: Number,
      default: 0
    },
    rotation: {
      type: Number,
      default: 0
    },
    rotateWithView: {
      type: Boolean,
      default: false
    }
  };
  var methods$g = {
    /**
     * @return {RegularShape}
     * @protected
     */
    createStyle: function createStyle() {
      return RegularShape({
        points: this.points,
        radius: this.radius,
        radius1: this.radius1,
        radius2: this.radius2,
        angle: this.angle,
        rotation: this.rotation,
        rotateWithView: this.rotateWithView,
        fill: this._fill,
        stroke: this._stroke
      });
    },

    /**
     * @returns {Object}
     * @protected
     */
    getServices: function getServices() {
      var vm = this;
      return multiMergeDescriptors(imageStyle.methods.getServices.call(this), {
        get stylesContainer() {
          return vm;
        }

      });
    },

    /**
     * @param {Fill|Vue|undefined} fill
     * @return {void}
     */
    setFill: function setFill(fill) {
      fill = fill instanceof Vue ? fill.$style : fill;

      if (fill !== this._fill) {
        this._fill = fill;
        this.scheduleRefresh();
      }
    },

    /**
     * @param {Stroke|Vue|undefined} stroke
     * @return {void}
     */
    setStroke: function setStroke(stroke) {
      stroke = stroke instanceof Vue ? stroke.$style : stroke;

      if (stroke !== this._stroke) {
        this._stroke = stroke;
        this.scheduleRefresh();
      }
    }
  };
  var watch$6 = {
    points: function points(value) {
      if (this.$style && !isEqual(value, this.$style.getPoints())) {
        this.scheduleRefresh();
      }
    },
    radius: function radius(value) {
      if (this.$style && !isEqual(value, this.$style.getRadius())) {
        this.scheduleRefresh();
      }
    },
    radius1: function radius1(value) {
      if (this.$style && !isEqual(value, this.$style.getRadius())) {
        this.scheduleRefresh();
      }
    },
    radius2: function radius2(value) {
      if (this.$style && !isEqual(value, this.$style.getRadius2())) {
        this.scheduleRefresh();
      }
    },
    angle: function angle(value) {
      if (this.$style && !isEqual(value, this.$style.getAngle())) {
        this.scheduleRefresh();
      }
    },
    rotation: function rotation(value) {
      if (this.$style && !isEqual(value, this.$style.getRotation())) {
        this.scheduleRefresh();
      }
    },
    rotateWithView: function rotateWithView(value) {
      if (this.$style && !isEqual(value, this.$style.getRotateWithView())) {
        this.scheduleRefresh();
      }
    }
  };
  var script$s = {
    name: 'vl-style-reg-shape',
    mixins: [imageStyle, withFillStrokeStyle],
    props: props$g,
    methods: methods$g,
    watch: watch$6
  };

  /* script */
  var __vue_script__$s = script$s;
  /* template */

  /* style */

  var __vue_inject_styles__$s = undefined;
  /* scoped */

  var __vue_scope_id__$s = undefined;
  /* module identifier */

  var __vue_module_identifier__$s = undefined;
  /* functional template */

  var __vue_is_functional_template__$s = undefined;
  /* component normalizer */

  function __vue_normalize__$s(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "style.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Style$5 = __vue_normalize__$s({}, __vue_inject_styles__$s, __vue_script__$s, __vue_scope_id__$s, __vue_is_functional_template__$s, __vue_module_identifier__$s, undefined, undefined);

  function plugin$r(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$r.installed) {
      return;
    }

    plugin$r.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Style$5, options);
    Vue$$1.component(Style$5.name, Style$5);
  }

  var RegShapeStyle = /*#__PURE__*/Object.freeze({
    default: plugin$r,
    Style: Style$5,
    install: plugin$r
  });

  var script$t = {
    name: 'vl-interaction-select',
    mixins: [interaction$1, featuresContainer, stylesContainer, projTransforms],
    stubVNode: {
      empty: false,
      attrs: function attrs() {
        return {
          class: this.$options.name
        };
      }
    },
    props: {
      /**
       * A function that takes an `ol.Feature` and an `ol.layer.Layer` and returns `true` if the feature may be selected or `false` otherwise.
       * @type {function|undefined}
       */
      filter: {
        type: Function,
        default: constant(true)
      },

      /**
       * A list of layers from which features should be selected. Alternatively, a filter function can be provided.
       * @type {string[]|function|undefined}
       */
      layers: {
        type: [Array, Function],
        default: undefined
      },

      /**
       * Hit-detection tolerance. Pixels inside the radius around the given position will be checked for features.
       * This only works for the canvas renderer and not for WebGL.
       * @type {number}
       */
      hitTolerance: {
        type: Number,
        default: 0
      },

      /**
       * A boolean that determines if the default behaviour should select only single features or all (overlapping)
       * features at the clicked map position.
       * @type {boolean}
       */
      multi: {
        type: Boolean,
        default: false
      },

      /**
       * Selected features as array of GeoJSON features with coordinates in the map view projection.
       * @type {string[]|number[]|Object[]}
       */
      features: {
        type: Array,
        default: stubArray
      },

      /**
       * Wrap the world horizontally on the selection overlay.
       * @type {boolean}
       */
      wrapX: {
        type: Boolean,
        default: true
      },

      /**
       * A function that takes an `ol.MapBrowserEvent` and returns a boolean to indicate whether that event should
       * be handled. By default, this is `ol.events.condition.never`. Use this if you want to use different events
       * for `add` and `remove` instead of `toggle`.
       * @type {function|undefined}
       */
      addCondition: {
        type: Function,
        default: condition.never
      },

      /**
       * A function that takes an `ol.MapBrowserEvent` and returns a boolean to indicate whether that event should be handled.
       * This is the event for the selected features as a whole. By default, this is `ol.events.condition.singleClick`.
       * Clicking on a feature selects that feature and removes any that were in the selection. Clicking outside any feature
       * removes all from the selection.
       * @type {function|undefined}
       */
      condition: {
        type: Function,
        default: condition.singleClick
      },

      /**
       * A function that takes an `ol.MapBrowserEvent` and returns a boolean to indicate whether that event should be handled.
       * By default, this is `ol.events.condition.never`. Use this if you want to use different events for `add` and `remove`
       * instead of `toggle`.
       * @type {function|undefined}
       */
      removeCondition: {
        type: Function,
        default: condition.never
      },

      /**
       * A function that takes an `ol.MapBrowserEvent` and returns a boolean to indicate whether that event should be handled.
       * This is in addition to the `condition` event. By default, `ol.events.condition.shiftKeyOnly`, i.e. pressing `shift`
       * as well as the `condition` event, adds that feature to the current selection if it is not currently selected,
       * and removes it if it is.
       * @type {function|undefined}
       */
      toggleCondition: {
        type: Function,
        default: condition.shiftKeyOnly
      }
    },
    computed: {
      layerFilter: function layerFilter() {
        var _this = this;

        return Array.isArray(this.layers) ? function (layer$$1) {
          return _this.layers.includes(getLayerId(layer$$1));
        } : this.layers;
      }
    },
    methods: {
      /**
       * @return {Select}
       * @protected
       */
      createInteraction: function createInteraction() {
        return new SelectInteraction({
          features: this._featuresCollection,
          multi: this.multi,
          wrapX: this.wrapX,
          filter: this.filter,
          layers: this.layerFilter,
          style: this.createStyleFunc(),
          addCondition: this.addCondition,
          condition: this.condition,
          removeCondition: this.removeCondition,
          toggleCondition: this.toggleCondition
        });
      },

      /**
       * @return {function(feature: Feature): Style}
       * @protected
       */
      getDefaultStyles: function getDefaultStyles() {
        var defaultStyles = mapValues(defaultEditStyle(), function (styles) {
          return styles.map(createStyle);
        });
        return function __selectDefaultStyleFunc(feature) {
          if (feature.getGeometry()) {
            return defaultStyles[feature.getGeometry().getType()];
          }
        };
      },

      /**
       * @returns {Object}
       * @protected
       */
      getServices: function getServices() {
        return multiMergeDescriptors(interaction$1.methods.getServices.call(this), stylesContainer.methods.getServices.call(this));
      },

      /**
       * @return {Interaction|undefined}
       * @protected
       */
      getStyleTarget: function getStyleTarget() {
        return this.$interaction;
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        interaction$1.methods.mount.call(this);
        this.features.forEach(this.select);
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        this.unselectAll();
        interaction$1.methods.unmount.call(this);
      },

      /**
       * @param {Object|Vue|Feature|string|number} feature
       * @return {void}
       * @throws {Error}
       */
      select: function select(feature) {
        var _this2 = this;

        hasMap(this);

        if (feature instanceof Vue) {
          feature = feature.$feature;
        }

        if (!(feature instanceof Feature)) {
          var featureId = getFeatureId(feature);

          if (!featureId) {
            throw new Error('Undefined feature id');
          }

          feature = undefined;
          forEach(this.$map.getLayers().getArray(), function (layer$$1) {
            if (_this2.layerFilter && !_this2.layerFilter(layer$$1)) {
              return false;
            }

            var source$$1 = layer$$1.getSource();

            if (source$$1 && isFunction(source$$1.getFeatureById)) {
              feature = source$$1.getFeatureById(featureId);
            }

            return !feature;
          });
        }

        if (!feature) return;
        this.addFeature(feature);
      },

      /**
       * @param {Object|Vue|Feature|string|number} feature
       * @return {void}
       */
      unselect: function unselect(feature) {
        this.removeFeature(feature);
      },

      /**
       * Removes all features from selection.
       * @return {void}
       */
      unselectAll: function unselectAll() {
        this.clearFeatures();
      },

      /**
       * @param {Array<{style: Style, condition: (function|boolean|undefined)}>|function(feature: Feature): Style|Vue|undefined} styles
       * @return {void}
       * @protected
       */
      setStyle: function setStyle(styles) {
        if (styles !== this._styles) {
          this._styles = styles;
          this.scheduleRefresh();
        }
      },

      /**
       * @return {void}
       * @protected
       */
      subscribeAll: function subscribeAll() {
        interaction$1.methods.subscribeAll.call(this);
        subscribeToInteractionChanges$2.call(this);
      }
    },
    watch: _objectSpread({
      features: {
        deep: true,
        handler: function handler(features) {
          if (!this.$interaction) return;
          features = features.slice().map(function (feature) {
            return initializeFeature(_objectSpread({}, feature));
          });
          this.addFeatures(features);
          var forUnselect = difference(this.getFeatures(), features, function (a, b) {
            return getFeatureId(a) === getFeatureId(b);
          });
          this.removeFeatures(forUnselect);
        }
      },
      featuresDataProj: {
        deep: true,
        handler: function handler(value, prev) {
          if (!isEqual(value, prev)) {
            this.$emit('update:features', value);
          }
        }
      }
    }, makeWatchers(['filter', 'hitTolerance', 'multi', 'wrapX', 'addCondition', 'condition', 'removeCondition', 'toggleCondition'], function () {
      return function () {
        this.scheduleRecreate();
      };
    }))
    /**
     * @return {void}
     * @private
     */

  };

  function subscribeToInteractionChanges$2() {
    var _this3 = this;

    hasInteraction(this);
    var select = fromOlEvent(this._featuresCollection, 'add').pipe(map$1(function (_ref) {
      var element = _ref.element;
      return {
        type: 'select',
        feature: element
      };
    }));
    var unselect = fromOlEvent(this._featuresCollection, 'remove').pipe(map$1(function (_ref2) {
      var element = _ref2.element;
      return {
        type: 'unselect',
        feature: element
      };
    }));
    var events = merge(select, unselect);
    this.subscribeTo(events, function (evt) {
      return _this3.$emit(evt.type, evt.feature);
    }); // emit event to allow `sync` modifier

    this.subscribeTo(events.pipe(debounceTime(1000 / 60)), function () {
      _this3.$emit('update:features', _this3.featuresDataProj);
    });
  }

  /* script */
  var __vue_script__$t = script$t;
  /* template */

  var __vue_render__$6 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('i', {
      class: [_vm.$options.name],
      staticStyle: {
        "display": "none !important"
      }
    }, [_vm._t("default", null, {
      features: _vm.featuresDataProj
    })], 2);
  };

  var __vue_staticRenderFns__$6 = [];
  /* style */

  var __vue_inject_styles__$t = undefined;
  /* scoped */

  var __vue_scope_id__$t = undefined;
  /* module identifier */

  var __vue_module_identifier__$t = undefined;
  /* functional template */

  var __vue_is_functional_template__$t = false;
  /* component normalizer */

  function __vue_normalize__$t(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "interaction.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Interaction$4 = __vue_normalize__$t({
    render: __vue_render__$6,
    staticRenderFns: __vue_staticRenderFns__$6
  }, __vue_inject_styles__$t, __vue_script__$t, __vue_scope_id__$t, __vue_is_functional_template__$t, __vue_module_identifier__$t, undefined, undefined);

  function plugin$s(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$s.installed) {
      return;
    }

    plugin$s.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Interaction$4, options);
    Vue$$1.component(Interaction$4.name, Interaction$4);
  }

  var SelectInteraction$1 = /*#__PURE__*/Object.freeze({
    default: plugin$s,
    Interaction: Interaction$4,
    install: plugin$s
  });

  /**
   * @vueProps
   */

  var props$h = {
    /**
     * Target source identifier from IdentityMap.
     * @type {string}
     */
    source: {
      type: String,
      required: true
    },

    /**
     * Snap to edges
     * @type {boolean}
     */
    edge: {
      type: Boolean,
      default: true
    },

    /**
     * Snap to vertices.
     * @type {boolean}
     */
    vertex: {
      type: Boolean,
      default: true
    },

    /**
     * Pixel tolerance for considering the pointer close enough to a segment or vertex for snapping.
     * @type {number}
     */
    pixelTolerance: {
      type: Number,
      default: 10
    }
    /**
     * @vueMethods
     */

  };
  var methods$h = {
    /**
     * @return {Promise<Snap>}
     * @protected
     */
    createInteraction: function () {
      var _createInteraction = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var sourceIdent, source;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                sourceIdent = this.makeIdent(this.source);
                _context.next = 3;
                return this.$identityMap.get(sourceIdent, this.$options.INSTANCE_PROMISE_POOL);

              case 3:
                source = _context.sent;
                return _context.abrupt("return", new SnapInteraction({
                  source: source
                }));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function createInteraction() {
        return _createInteraction.apply(this, arguments);
      };
    }(),

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      interaction$1.methods.mount.call(this);
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      interaction$1.methods.unmount.call(this);
    },

    /**
     * @return {void}
     * @protected
     */
    subscribeAll: function subscribeAll() {}
  };
  var watch$7 = makeWatchers(['source'], function () {
    return function () {
      this.scheduleRecreate();
    };
  });
  /**
   * @alias module:snap-interaction/interaction
   * @title vl-interaction-snap
   * @vueProto
   */

  var script$u = {
    name: 'vl-interaction-snap',
    mixins: [interaction$1],
    props: props$h,
    methods: methods$h,
    watch: watch$7
  };

  /* script */
  var __vue_script__$u = script$u;
  /* template */

  /* style */

  var __vue_inject_styles__$u = undefined;
  /* scoped */

  var __vue_scope_id__$u = undefined;
  /* module identifier */

  var __vue_module_identifier__$u = undefined;
  /* functional template */

  var __vue_is_functional_template__$u = undefined;
  /* component normalizer */

  function __vue_normalize__$u(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "interaction.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Interaction$5 = __vue_normalize__$u({}, __vue_inject_styles__$u, __vue_script__$u, __vue_scope_id__$u, __vue_is_functional_template__$u, __vue_module_identifier__$u, undefined, undefined);

  function plugin$t(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$t.installed) {
      return;
    }

    plugin$t.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Interaction$5, options);
    Vue$$1.component(Interaction$5.name, Interaction$5);
  }

  var SnapInteraction$1 = /*#__PURE__*/Object.freeze({
    default: plugin$t,
    Interaction: Interaction$5,
    install: plugin$t
  });

  /**
   * Layer source to work with Sputnik.ru tile server.
   */

  var SPUTNIK_URL_TEMPLATE = 'http://tiles.maps.sputnik.ru/{z}/{x}/{y}.png?apikey={apikey}';
  var SPUTNIK_ATTRIBUTIONS = '<a href="http://maps.sputnik.ru/" target="_blank">Спутник</a> ' + '&copy; <a href="http://rt.ru/" target="_blank">Ростелеком</a>, ' + new Date().getFullYear();
  var props$i = {
    url: {
      type: String,
      default: SPUTNIK_URL_TEMPLATE
    },
    apiKey: {
      type: String
    },
    attributions: {
      type: String,
      default: SPUTNIK_ATTRIBUTIONS
    }
  };
  var computed$a = {
    /**
     * @type {string[]}
     */
    urlTokens: function urlTokens() {
      return ['apiKey'];
    }
  };
  var script$v = {
    name: 'vl-source-sputnik',
    mixins: [xyzSource],
    props: props$i,
    computed: computed$a
  };

  /* script */
  var __vue_script__$v = script$v;
  /* template */

  /* style */

  var __vue_inject_styles__$v = undefined;
  /* scoped */

  var __vue_scope_id__$v = undefined;
  /* module identifier */

  var __vue_module_identifier__$v = undefined;
  /* functional template */

  var __vue_is_functional_template__$v = undefined;
  /* component normalizer */

  function __vue_normalize__$v(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$8 = __vue_normalize__$v({}, __vue_inject_styles__$v, __vue_script__$v, __vue_scope_id__$v, __vue_is_functional_template__$v, __vue_module_identifier__$v, undefined, undefined);

  function plugin$u(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$u.installed) {
      return;
    }

    plugin$u.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$8, options);
    Vue$$1.component(Source$8.name, Source$8);
  }

  var SputnikSource = /*#__PURE__*/Object.freeze({
    default: plugin$u,
    Source: Source$8,
    install: plugin$u
  });

  var props$j = {
    /**
     * Stamen layer name
     *
     * @type {string}
     */
    layer: {
      type: String,
      required: true
    },

    /**
     * If nothing provided then default url resolved
     * with current layer params will be used.
     * @see {ol.source.Stamen}
     *
     * @type {string}
     */
    url: String
  };
  var methods$i = {
    createSource: function createSource() {
      return new StamenSource({
        cacheSize: this.cacheSize,
        layer: this.layer,
        minZoom: this.minZoom,
        maxZoom: this.maxZoom,
        opaque: this.opaque,
        reprojectionErrorThreshold: this.reprojectionErrorThreshold,
        tileLoadFunction: this.tileLoadFunction,
        url: this.urlTmpl || undefined,
        wrapX: this.wrapX
      });
    }
  };
  var script$w = {
    name: 'vl-source-stamen',
    mixins: [xyzSource],
    props: props$j,
    methods: methods$i
  };

  /* script */
  var __vue_script__$w = script$w;
  /* template */

  /* style */

  var __vue_inject_styles__$w = undefined;
  /* scoped */

  var __vue_scope_id__$w = undefined;
  /* module identifier */

  var __vue_module_identifier__$w = undefined;
  /* functional template */

  var __vue_is_functional_template__$w = undefined;
  /* component normalizer */

  function __vue_normalize__$w(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$9 = __vue_normalize__$w({}, __vue_inject_styles__$w, __vue_script__$w, __vue_scope_id__$w, __vue_is_functional_template__$w, __vue_module_identifier__$w, undefined, undefined);

  function plugin$v(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$v.installed) {
      return;
    }

    plugin$v.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$9, options);
    Vue$$1.component(Source$9.name, Source$9);
  }

  var StamenSource$1 = /*#__PURE__*/Object.freeze({
    default: plugin$v,
    Source: Source$9,
    install: plugin$v
  });

  var props$k = {
    color: [Array, String],
    lineCap: {
      type: String,
      default: 'round' // round, butt, square

    },
    lineJoin: {
      type: String,
      default: 'round' // round, bevel, miter

    },
    lineDash: Array,
    lineDashOffset: {
      type: Number,
      default: 0
    },
    miterLimit: {
      type: Number,
      default: 10
    },
    width: {
      type: Number,
      default: 1.25
    }
  };
  var methods$j = {
    /**
     * @return {Stroke}
     * @protected
     */
    createStyle: function createStyle() {
      return new Stroke({
        color: this.color,
        lineCap: this.lineCap,
        lineJoin: this.lineJoin,
        lineDash: this.lineDash,
        lineDashOffset: this.lineDashOffset,
        miterLimit: this.miterLimit,
        width: this.width
      });
    },

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      this.$stylesContainer && this.$stylesContainer.setStroke(this);
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      this.$stylesContainer && this.$stylesContainer.setStroke(undefined);
    }
  };
  var watch$8 = {
    color: function color(value) {
      if (this.$style && !isEqual(value, this.$style.getColor())) {
        this.$style.setColor(value);
        this.scheduleRefresh();
      }
    },
    lineCap: function lineCap(value) {
      if (this.$style && !isEqual(value, this.$style.getLineCap())) {
        this.$style.setLineCap(value);
        this.scheduleRefresh();
      }
    },
    lineDash: function lineDash(value) {
      if (this.$style && !isEqual(value, this.$style.getLineDash())) {
        this.$style.setLineDash(value);
        this.scheduleRefresh();
      }
    },
    lineJoin: function lineJoin(value) {
      if (this.$style && !isEqual(value, this.$style.getLineJoin())) {
        this.$style.setLineJoin(value);
        this.scheduleRefresh();
      }
    },
    width: function width(value) {
      if (this.$style && !isEqual(value, this.$style.getWidth())) {
        this.$style.setWidth(value);
        this.scheduleRefresh();
      }
    }
  };
  var script$x = {
    name: 'vl-style-stroke',
    mixins: [style],
    props: props$k,
    watch: watch$8,
    methods: methods$j
  };

  /* script */
  var __vue_script__$x = script$x;
  /* template */

  /* style */

  var __vue_inject_styles__$x = undefined;
  /* scoped */

  var __vue_scope_id__$x = undefined;
  /* module identifier */

  var __vue_module_identifier__$x = undefined;
  /* functional template */

  var __vue_is_functional_template__$x = undefined;
  /* component normalizer */

  function __vue_normalize__$x(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "style.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Style$6 = __vue_normalize__$x({}, __vue_inject_styles__$x, __vue_script__$x, __vue_scope_id__$x, __vue_is_functional_template__$x, __vue_module_identifier__$x, undefined, undefined);

  function plugin$w(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$w.installed) {
      return;
    }

    plugin$w.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Style$6, options);
    Vue$$1.component(Style$6.name, Style$6);
  }

  var StrokeStyle = /*#__PURE__*/Object.freeze({
    default: plugin$w,
    Style: Style$6,
    install: plugin$w
  });

  /**
   * Style box component.
   * Wrapper for Style class. Can be inserted into component with setStyle/getStyle methods (vl-layer-vector, vl-feature & etc.)
   * and acts as a box for inner style components (vl-style-fill, vl-style-stroke, icon ...)
   */

  var props$l = {
    zIndex: {
      type: Number,
      default: 0
    },
    condition: {
      type: [Function, Boolean],
      default: true
    }
  };
  var methods$k = {
    /**
     * @return {Style}
     * @protected
     */
    createStyle: function createStyle() {
      return new Style({
        zIndex: this.zIndex,
        image: this._image,
        stroke: this._stroke,
        fill: this._fill,
        text: this._text,
        geometry: this._geometry
      });
    },

    /**
     * @returns {Object}
     * @protected
     */
    getServices: function getServices() {
      var vm = this;
      return multiMergeDescriptors(style.methods.getServices.call(this), {
        get stylesContainer() {
          return vm;
        }

      });
    },

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      this.$stylesContainer && this.$stylesContainer.addStyle(this);
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      this.$stylesContainer && this.$stylesContainer.removeStyle(this);
    },

    /**
     * @param {Image|Vue|undefined} image
     * @return {void}
     */
    setImage: function setImage(image) {
      image = image instanceof Vue ? image.$style : image;

      if (image !== this._image) {
        this._image = image;
      }

      if (this.$style && image !== this.$style.getImage()) {
        this.$style.setImage(image);
        this.scheduleRefresh();
      }
    },

    /**
     * @param {Geometry|Vue|undefined} geom
     * @return {void}
     */
    setGeometry: function setGeometry(geom) {
      geom = geom instanceof Vue ? geom.$geometry : geom;

      if (geom !== this._geometry) {
        this._geometry = geom;
      }

      if (this.$style && geom !== this.$style.getGeometry()) {
        this.$style.setGeometry(geom);
        this.scheduleRefresh();
      }
    },

    /**
     * @param {Text|undefined} text
     * @return {void}
     */
    setText: function setText(text) {
      text = text instanceof Vue ? text.$style : text;

      if (text !== this._text) {
        this._text = text;
      }

      if (this.$style && text !== this.$style.getText()) {
        this.$style.setText(text);
        this.scheduleRefresh();
      }
    }
  };
  var watch$9 = {
    zIndex: function zIndex(value) {
      if (this.$style && !isEqual(value, this.$style.getZIndex())) {
        this.$style.setZIndex(value);
        this.scheduleRefresh();
      }
    }
  };
  var script$y = {
    name: 'vl-style-box',
    mixins: [style, withFillStrokeStyle],
    props: props$l,
    methods: methods$k,
    watch: watch$9,
    created: function created() {
      /**
       * @type {Image|undefined}
       * @private
       */
      this._image = undefined;
      /**
       * @type {Text|undefined}
       * @private
       */

      this._text = undefined;
      /**
       * @type {Geometry|undefined}
       * @private
       */

      this._geometry = undefined;
    }
  };

  /* script */
  var __vue_script__$y = script$y;
  /* template */

  /* style */

  var __vue_inject_styles__$y = undefined;
  /* scoped */

  var __vue_scope_id__$y = undefined;
  /* module identifier */

  var __vue_module_identifier__$y = undefined;
  /* functional template */

  var __vue_is_functional_template__$y = undefined;
  /* component normalizer */

  function __vue_normalize__$y(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "style.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Style$7 = __vue_normalize__$y({}, __vue_inject_styles__$y, __vue_script__$y, __vue_scope_id__$y, __vue_is_functional_template__$y, __vue_module_identifier__$y, undefined, undefined);

  function plugin$x(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$x.installed) {
      return;
    }

    plugin$x.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Style$7, options);
    Vue$$1.component(Style$7.name, Style$7);
  }

  var StyleBox = /*#__PURE__*/Object.freeze({
    default: plugin$x,
    Style: Style$7,
    install: plugin$x
  });

  /**
   * Style function component for advanced styling.
   * Plays the role of both a style that mounts itself to style target component (vl-layer-vector, vl-feature & etc.)
   * and style target for inner style containers (vl-style-box) as fallback style.
   */

  var props$m = {
    /**
     * @type {function(): function(feature: Feature): Style}
     */
    factory: {
      type: Function,
      required: true
    }
  };
  var computed$b = {
    styleFunc: function styleFunc() {
      var func = this.factory();

      if (!isFunction(func)) {

        func = noop;
      }

      return func;
    }
  };
  var methods$l = {
    /**
     * @return {function(feature: Feature): Style}
     * @protected
     */
    createStyle: function createStyle() {
      hasMap(this); // user provided style function

      var providedStyleFunc = this.styleFunc; // fallback style function made from inner style containers

      var fallbackStyleFunc = this.createStyleFunc();
      return function __styleFunc(feature, resolution) {
        var styles = providedStyleFunc(feature, resolution); // not empty or null style

        if (styles === null || Array.isArray(styles) && styles.length) {
          return styles;
        }

        return fallbackStyleFunc(feature, resolution);
      };
    },

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      this.$stylesContainer && this.$stylesContainer.addStyle(this);
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      this.$stylesContainer && this.$stylesContainer.removeStyle(this);
    },

    /**
     * @returns {Object}
     * @protected
     */
    getServices: function getServices() {
      var vm = this;
      return multiMergeDescriptors(style.methods.getServices.call(this), {
        get stylesContainer() {
          return vm;
        }

      });
    },

    /**
     * Overrides stylesContainer `setStyle` method
     * @param {Array<{ style: Style, condition: (function|boolean|undefined) }>|function(feature: Feature): Style|Vue|undefined} styles
     * @return {void}
     */
    setStyle: function setStyle(styles) {
      if (styles !== this._styles) {
        // simply save all inner styles and
        // use them later in style function as fallback
        this._styles = styles;
        this.scheduleRefresh();
      }
    },

    /**
     * @return {Promise}
     */
    refresh: function refresh() {
      // recreate style
      return this.recreate();
    }
  };
  var watch$a = {
    factory: function factory() {
      this.scheduleRefresh();
    }
  };
  var script$z = {
    name: 'vl-style-func',
    mixins: [style, stylesContainer],
    props: props$m,
    computed: computed$b,
    methods: methods$l,
    watch: watch$a,
    stubVNode: {
      empty: false,
      attrs: function attrs() {
        return {
          class: this.$options.name
        };
      }
    }
  };

  /* script */
  var __vue_script__$z = script$z;
  /* template */

  /* style */

  var __vue_inject_styles__$z = undefined;
  /* scoped */

  var __vue_scope_id__$z = undefined;
  /* module identifier */

  var __vue_module_identifier__$z = undefined;
  /* functional template */

  var __vue_is_functional_template__$z = undefined;
  /* component normalizer */

  function __vue_normalize__$z(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "style.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Style$8 = __vue_normalize__$z({}, __vue_inject_styles__$z, __vue_script__$z, __vue_scope_id__$z, __vue_is_functional_template__$z, __vue_module_identifier__$z, undefined, undefined);

  function plugin$y(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$y.installed) {
      return;
    }

    plugin$y.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Style$8, options);
    Vue$$1.component(Style$8.name, Style$8);
  }

  var StyleFunc = /*#__PURE__*/Object.freeze({
    default: plugin$y,
    Style: Style$8,
    install: plugin$y
  });

  var props$n = {
    font: {
      type: String,
      default: '10px sans-serif' // css font format https://developer.mozilla.org/en-US/docs/Web/CSS/font?v=control

    },
    placement: String,
    offsetX: {
      type: Number,
      default: 0
    },
    offsetY: {
      type: Number,
      default: 0
    },
    rotateWithView: {
      type: Boolean,
      default: false
    },
    rotation: {
      type: Number,
      default: 0
    },
    scale: {
      type: Number,
      default: 1
    },
    text: String,
    textAlign: String,
    // left, right, center, end, start
    textBaseline: String // bottom, top, middle, alphabetic, hanging, ideographic

  };
  var methods$m = {
    /**
     * @returns {Text}
     * @protected
     */
    createStyle: function createStyle() {
      return new Text({
        font: this.font,
        placement: this.placement,
        offsetX: this.offsetX,
        offsetY: this.offsetY,
        rotateWithView: this.rotateWithView,
        rotation: this.rotation,
        scale: this.scale,
        text: this.text,
        textAlign: this.textAlign,
        textBaseline: this.textBaseline,
        fill: this._fill,
        stroke: this._stroke
      });
    },

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      this.$stylesContainer && this.$stylesContainer.setText(this);
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      this.$stylesContainer && this.$stylesContainer.setText(undefined);
    },

    /**
     * @returns {Object}
     * @protected
     */
    getServices: function getServices() {
      var vm = this;
      return multiMergeDescriptors(style.methods.getServices.call(this), {
        get stylesContainer() {
          return vm;
        }

      });
    }
  };
  var watch$b = {
    font: function font(value) {
      if (this.$style && !isEqual(value, this.$style.getFont())) {
        this.$style.setFont(value);
        this.scheduleRefresh();
      }
    },
    placement: function placement(value) {
      if (this.$style && !isEqual(value, this.$style.getPlacement())) {
        this.$style.setFont(value);
        this.scheduleRefresh();
      }
    },
    offsetX: function offsetX(value) {
      if (this.$style && !isEqual(value, this.$style.getOffsetX())) {
        this.$style.setOffsetX(value);
        this.scheduleRefresh();
      }
    },
    offsetY: function offsetY(value) {
      if (this.$style && !isEqual(value, this.$style.getOffsetY())) {
        this.$style.setOffsetY(value);
        this.scheduleRefresh();
      }
    },
    rotation: function rotation(value) {
      if (this.$style && !isEqual(value, this.$style.getRotation())) {
        this.$style.setRotation(value);
        this.scheduleRefresh();
      }
    },
    rotateWithView: function rotateWithView(value) {
      if (this.$style && !isEqual(value, this.$style.getRotateWithView())) {
        this.$style.setRotation(value);
        this.scheduleRefresh();
      }
    },
    scale: function scale(value) {
      if (this.$style && !isEqual(value, this.$style.getScale())) {
        this.$style.setScale(value);
        this.scheduleRefresh();
      }
    },
    text: function text(value) {
      if (this.$style && !isEqual(value, this.$style.getText())) {
        this.$style.setText(value);
        this.scheduleRefresh();
      }
    },
    textAlign: function textAlign(value) {
      if (this.$style && !isEqual(value, this.$style.getTextAlign())) {
        this.$style.setTextAlign(value);
        this.scheduleRefresh();
      }
    },
    textBaseline: function textBaseline(value) {
      if (this.$style && !isEqual(value, this.$style.getTextBaseline())) {
        this.$style.setTextBaseline(value);
        this.scheduleRefresh();
      }
    }
  };
  var script$A = {
    name: 'vl-style-text',
    mixins: [style, withFillStrokeStyle],
    props: props$n,
    methods: methods$m,
    watch: watch$b,
    stubVNode: {
      empty: false,
      attrs: function attrs() {
        return {
          class: this.$options.name
        };
      }
    }
  };

  /* script */
  var __vue_script__$A = script$A;
  /* template */

  /* style */

  var __vue_inject_styles__$A = undefined;
  /* scoped */

  var __vue_scope_id__$A = undefined;
  /* module identifier */

  var __vue_module_identifier__$A = undefined;
  /* functional template */

  var __vue_is_functional_template__$A = undefined;
  /* component normalizer */

  function __vue_normalize__$A(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "style.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Style$9 = __vue_normalize__$A({}, __vue_inject_styles__$A, __vue_script__$A, __vue_scope_id__$A, __vue_is_functional_template__$A, __vue_module_identifier__$A, undefined, undefined);

  function plugin$z(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$z.installed) {
      return;
    }

    plugin$z.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Style$9, options);
    Vue$$1.component(Style$9.name, Style$9);
  }

  var TextStyle = /*#__PURE__*/Object.freeze({
    default: plugin$z,
    Style: Style$9,
    install: plugin$z
  });

  /**
   * @vueProps
   */

  var props$o =
  /** @lends module:tile-layer/layer# */
  {
    /**
     * Load low-resolution tiles up to `preload` levels.
     * @type {number}
     * @default 0
     */
    preload: {
      type: Number,
      default: 0
    }
    /**
     * @vueMethods
     */

  };
  var methods$n =
  /** @lends module:tile-layer/layer# */
  {
    /**
     * @return {Tile}
     * @protected
     */
    createLayer: function createLayer() {
      return new TileLayer({
        id: this.id,
        minResolution: this.minResolution,
        maxResolution: this.maxResolution,
        opacity: this.opacity,
        visible: this.visible,
        preload: this.preload,
        extent: this.extent,
        zIndex: this.zIndex,
        source: this._source
      });
    }
  };
  /**
   * Layer that provide pre-rendered, tiled images in grid that are organized by zoom levels for
   * specific resolutions. `vl-tile-layer` component implements a **source container** interface, so it should be
   * used together with tile-like `vl-source-*` components.
   *
   * @title vl-layer-tile
   * @alias module:tile-layer/layer
   * @vueProto
   *
   * @vueSlot default Default slot for `vl-source-*` (tile-like only) components.
   */

  var script$B = {
    name: 'vl-layer-tile',
    mixins: [layer],
    props: props$o,
    methods: methods$n
  };

  /* script */
  var __vue_script__$B = script$B;
  /* template */

  /* style */

  var __vue_inject_styles__$B = undefined;
  /* scoped */

  var __vue_scope_id__$B = undefined;
  /* module identifier */

  var __vue_module_identifier__$B = undefined;
  /* functional template */

  var __vue_is_functional_template__$B = undefined;
  /* component normalizer */

  function __vue_normalize__$B(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "layer.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Layer$4 = __vue_normalize__$B({}, __vue_inject_styles__$B, __vue_script__$B, __vue_scope_id__$B, __vue_is_functional_template__$B, __vue_module_identifier__$B, undefined, undefined);

  function plugin$A(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$A.installed) {
      return;
    }

    plugin$A.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Layer$4, options);
    Vue$$1.component(Layer$4.name, Layer$4);
  }

  var TileLayer$1 = /*#__PURE__*/Object.freeze({
    default: plugin$A,
    Layer: Layer$4,
    install: plugin$A
  });

  var RENDER_MODES = ['vector', 'image'];
  /**
   * @vueProps
   */

  var props$p = {
    /**
     * Render mode for vector layers. Available values:
     * - `image` - vector layers are rendered as images
     * - `vector` - vector layers are rendered as vectors
     * @type {string}
     * @default vector
     */
    renderMode: {
      type: String,
      default: 'vector',
      validator: function validator(val) {
        return RENDER_MODES.includes(val);
      }
    }
    /**
     * @vueMethods
     */

  };
  var methods$o = {
    /**
     * @return {Vector}
     * @protected
     */
    createLayer: function createLayer() {
      return new VectorLayer({
        id: this.id,
        minResolution: this.minResolution,
        maxResolution: this.maxResolution,
        opacity: this.opacity,
        visible: this.visible,
        extent: this.extent,
        zIndex: this.zIndex,
        updateWhileAnimating: this.updateWhileAnimating,
        updateWhileInteracting: this.updateWhileInteracting,
        source: this._source,
        renderMode: this.renderMode,
        renderBuffer: this.renderBuffer,
        renderOrder: this.renderOrder,
        declutter: this.declutter
      });
    }
  };
  /**
   * Layer for data that is rendered client-side.
   *
   * @vueProto
   * @title vl-layer-vector
   * @alias module:vector-layer/layer
   *
   * @vueSlot default Default slot for `vl-source-*` (vector-like only) components.
   */

  var script$C = {
    name: 'vl-layer-vector',
    mixins: [vectorLayer],
    props: props$p,
    methods: methods$o
  };

  /* script */
  var __vue_script__$C = script$C;
  /* template */

  /* style */

  var __vue_inject_styles__$C = undefined;
  /* scoped */

  var __vue_scope_id__$C = undefined;
  /* module identifier */

  var __vue_module_identifier__$C = undefined;
  /* functional template */

  var __vue_is_functional_template__$C = undefined;
  /* component normalizer */

  function __vue_normalize__$C(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "layer.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Layer$5 = __vue_normalize__$C({}, __vue_inject_styles__$C, __vue_script__$C, __vue_scope_id__$C, __vue_is_functional_template__$C, __vue_module_identifier__$C, undefined, undefined);

  function plugin$B(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$B.installed) {
      return;
    }

    plugin$B.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Layer$5, options);
    Vue$$1.component(Layer$5.name, Layer$5);
  }

  var VectorLayer$2 = /*#__PURE__*/Object.freeze({
    default: plugin$B,
    Layer: Layer$5,
    install: plugin$B
  });

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods$p = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods$p.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  var DOMException = self.DOMException;
  try {
    new DOMException();
  } catch (err) {
    DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    DOMException.prototype = Object.create(Error.prototype);
    DOMException.prototype.constructor = DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  var script$D = {
    name: 'vl-source-vector',
    mixins: [vectorSource],
    props: {
      /**
       * Array of GeoJSON features with coordinates in the map view projection.
       * @type {Object[]} features
       */
      features: {
        type: Array,
        default: stubArray
      },

      /**
       * Source loader factory.
       * Source loader should load features from some remote service, decode them and pas to `features` prop to render.
       * @type {(function(): FeatureLoader|undefined)} loaderFactory
       */
      loaderFactory: {
        type: Function,
        default: defaultLoaderFactory
      },

      /**
       * Source format factory
       * @type {(function(): Feature|undefined)} formatFactory
       */
      formatFactory: {
        type: Function,
        default: defaultFormatFactory
      },

      /**
       * String or url factory
       * @type {(string|function(): string|FeatureUrlFunction|undefined)} url
       */
      url: [String, Function],

      /**
       * Loading strategy factory.
       * Extent here in map view projection.
       * @type {(function(): LoadingStrategy|undefined)} strategyFactory
       */
      strategyFactory: {
        type: Function,
        default: defaultStrategyFactory
      },
      overlaps: {
        type: Boolean,
        default: true
      }
    },
    computed: {
      urlFunc: function urlFunc() {
        var _this = this;

        if (!this.url) {
          return;
        }

        var url = this.url;

        if (!isFunction(url)) {
          url = constant(this.url);
        } // wrap strategy function to transform map view projection to source projection


        return function (extent$$1, resolution, projection) {
          return url(transformExtent$1(extent$$1, projection, _this.resolvedDataProjection), resolution, _this.resolvedDataProjection);
        };
      },
      loaderFunc: function loaderFunc() {
        var _this2 = this;

        var loader = this.loaderFactory(this); // wrap strategy function to transform map view projection to source projection

        return (
          /*#__PURE__*/
          function () {
            var _ref = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee(extent$$1, resolution, projection) {
              var features;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return loader(transformExtent$1(extent$$1, projection, _this2.resolvedDataProjection), resolution, _this2.resolvedDataProjection);

                    case 2:
                      features = _context.sent;

                      if (Array.isArray(features)) {
                        _this2.addFeatures(features);
                      }

                    case 4:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }));

            return function (_x, _x2, _x3) {
              return _ref.apply(this, arguments);
            };
          }()
        );
      },
      loadingStrategy: function loadingStrategy() {
        return this.strategyFactory();
      },
      dataFormat: function dataFormat() {
        return this.formatFactory();
      }
    },
    methods: {
      /**
       * @return {VectorSource}
       * @protected
       */
      createSource: function createSource() {
        return new VectorSource({
          attributions: this.attributions,
          features: this._featuresCollection,
          projection: this.resolvedDataProjection,
          loader: this.loaderFunc,
          useSpatialIndex: this.useSpatialIndex,
          wrapX: this.wrapX,
          logo: this.logo,
          strategy: this.loadingStrategy,
          format: this.dataFormat,
          url: this.urlFunc,
          overlaps: this.overlaps
        });
      },

      /**
       * @return {void}
       * @protected
       */
      mount: function mount() {
        vectorSource.methods.mount.call(this);
        this.addFeatures(this.features);
      },

      /**
       * @return {void}
       * @protected
       */
      unmount: function unmount() {
        this.clear();
        vectorSource.methods.unmount.call(this);
      }
    },
    watch: _objectSpread({
      features: {
        deep: true,
        handler: function handler(features) {
          if (!this.$source) return;
          features = features.slice().map(function (feature) {
            return initializeFeature(_objectSpread({}, feature));
          });
          this.addFeatures(features);
          var forRemove = difference(this.getFeatures(), features, function (a, b) {
            return getFeatureId(a) === getFeatureId(b);
          });
          this.removeFeatures(forRemove);
        }
      }
    }, makeWatchers(['loadingStrategy', 'dataFormat', 'urlFunc', 'loaderFactory', 'formatFactory', 'strategyFactory', 'overlaps'], function () {
      return function () {
        this.scheduleRecreate();
      };
    }))
    /**
     * @return {LoadingStrategy}
     */

  };

  function defaultStrategyFactory() {
    return loadingstrategy.all;
  }
  /**
   * @return {GeoJSON}
   */


  function defaultFormatFactory() {
    return createGeoJsonFmt();
  }
  /**
   * Default loader for provided URL.
   *
   * @param vm
   * @return {Function}
   */


  function defaultLoaderFactory(vm) {
    return function (extent$$1, resolution, projection) {
      var url = vm.$source.getUrl();

      if (isFunction(url)) {
        url = url(extent$$1, resolution, projection);
      }

      if (isEmpty(url)) {
        return [];
      }

      return fetch(url, {
        credentials: 'same-origin',
        mode: 'cors'
      }).then(function (response) {
        return response.text();
      }).then(function (text) {
        if (!vm.$source) {
          return [];
        }

        return vm.$source.getFormat().readFeatures(text, {
          featureProjection: vm.viewProjection,
          dataProjection: vm.resolvedDataProjection
        });
      });
    };
  }

  function transformExtent$1(extent$$1, sourceProj, destProj) {
    extent$$1 = extent$$1.slice();

    if (isFinite(extent$$1[0]) && isFinite(extent$$1[1])) {
      var _transform = proj.transform([extent$$1[0], extent$$1[1]], sourceProj, destProj);

      var _transform2 = _slicedToArray(_transform, 2);

      extent$$1[0] = _transform2[0];
      extent$$1[1] = _transform2[1];
    }

    if (isFinite(extent$$1[2]) && isFinite(extent$$1[3])) {
      var _transform3 = proj.transform([extent$$1[2], extent$$1[3]], sourceProj, destProj);

      var _transform4 = _slicedToArray(_transform3, 2);

      extent$$1[2] = _transform4[0];
      extent$$1[3] = _transform4[1];
    }

    return extent$$1;
  }

  /* script */
  var __vue_script__$D = script$D;
  /* template */

  /* style */

  var __vue_inject_styles__$D = undefined;
  /* scoped */

  var __vue_scope_id__$D = undefined;
  /* module identifier */

  var __vue_module_identifier__$D = undefined;
  /* functional template */

  var __vue_is_functional_template__$D = undefined;
  /* component normalizer */

  function __vue_normalize__$D(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$a = __vue_normalize__$D({}, __vue_inject_styles__$D, __vue_script__$D, __vue_scope_id__$D, __vue_is_functional_template__$D, __vue_module_identifier__$D, undefined, undefined);

  function plugin$C(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$C.installed) {
      return;
    }

    plugin$C.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$a, options);
    Vue$$1.component(Source$a.name, Source$a);
  }

  var VectorSource$2 = /*#__PURE__*/Object.freeze({
    default: plugin$C,
    Source: Source$a,
    install: plugin$C
  });

  var RENDER_MODES$1 = ['vector', 'image', 'hybrid'];
  var props$q = {
    renderMode: {
      type: String,
      default: 'hybrid',
      validator: function validator(val) {
        return RENDER_MODES$1.includes(val);
      }
    },
    preload: {
      type: Number,
      default: 0
    }
  };
  var methods$q = {
    /**
     * @return {VectorTileLayer}
     * @protected
     */
    createLayer: function createLayer() {
      return new VectorTileLayer({
        id: this.id,
        minResolution: this.minResolution,
        maxResolution: this.maxResolution,
        opacity: this.opacity,
        visible: this.visible,
        preload: this.preload,
        extent: this.extent,
        zIndex: this.zIndex,
        updateWhileAnimating: this.updateWhileAnimating,
        updateWhileInteracting: this.updateWhileInteracting,
        source: this._source,
        renderMode: this.renderMode,
        renderBuffer: this.renderBuffer,
        renderOrder: this.renderOrder,
        declutter: this.declutter
      });
    }
  };
  var script$E = {
    name: 'vl-layer-vector-tile',
    mixins: [vectorLayer],
    props: props$q,
    methods: methods$q
  };

  /* script */
  var __vue_script__$E = script$E;
  /* template */

  /* style */

  var __vue_inject_styles__$E = undefined;
  /* scoped */

  var __vue_scope_id__$E = undefined;
  /* module identifier */

  var __vue_module_identifier__$E = undefined;
  /* functional template */

  var __vue_is_functional_template__$E = undefined;
  /* component normalizer */

  function __vue_normalize__$E(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "layer.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Layer$6 = __vue_normalize__$E({}, __vue_inject_styles__$E, __vue_script__$E, __vue_scope_id__$E, __vue_is_functional_template__$E, __vue_module_identifier__$E, undefined, undefined);

  function plugin$D(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$D.installed) {
      return;
    }

    plugin$D.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Layer$6, options);
    Vue$$1.component(Layer$6.name, Layer$6);
  }

  var VectorTileLayer$1 = /*#__PURE__*/Object.freeze({
    default: plugin$D,
    Layer: Layer$6,
    install: plugin$D
  });

  var script$F = {
    name: 'vl-source-vector-tile',
    mixins: [tileSource],
    props: {
      cacheSize: {
        type: Number,
        default: 128
      },

      /**
       * Source format factory
       * @type {(function(): Feature|undefined)} formatFactory
       */
      formatFactory: {
        type: Function,
        default: defaultFormatFactory$1
      },
      overlaps: {
        type: Boolean,
        default: true
      }
    },
    computed: {
      dataFormat: function dataFormat() {
        return this.formatFactory();
      }
    },
    methods: {
      /**
       * @return {VectorTileSource}
       */
      createSource: function createSource() {
        return new VectorTileSource({
          attributions: this.attributions,
          cacheSize: this.cacheSize,
          format: this.dataFormat,
          logo: this.logo,
          overlaps: this.overlaps,
          projection: this.projection,
          tileGrid: this._tileGrid,
          tileLoadFunction: this.tileLoadFunction,
          tileUrlFunction: this.urlFunc,
          wrapX: this.wrapX,
          transition: this.transition
        });
      }
    }
    /**
     * @return {TopoJSON}
     */

  };

  function defaultFormatFactory$1() {
    return createMvtFmt();
  }

  /* script */
  var __vue_script__$F = script$F;
  /* template */

  /* style */

  var __vue_inject_styles__$F = undefined;
  /* scoped */

  var __vue_scope_id__$F = undefined;
  /* module identifier */

  var __vue_module_identifier__$F = undefined;
  /* functional template */

  var __vue_is_functional_template__$F = undefined;
  /* component normalizer */

  function __vue_normalize__$F(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$b = __vue_normalize__$F({}, __vue_inject_styles__$F, __vue_script__$F, __vue_scope_id__$F, __vue_is_functional_template__$F, __vue_module_identifier__$F, undefined, undefined);

  function plugin$E(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$E.installed) {
      return;
    }

    plugin$E.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$b, options);
    Vue$$1.component(Source$b.name, Source$b);
  }

  var VectorTileSource$1 = /*#__PURE__*/Object.freeze({
    default: plugin$E,
    Source: Source$b,
    install: plugin$E
  });

  var script$G = {
    name: 'vl-source-wms',
    mixins: [tileSource, wmsSource],
    props: {
      gutter: Number,
      hidpi: {
        type: Boolean,
        default: true
      },
      serverType: {
        type: String,
        validator: function validator(value) {
          return !value || Object.values(WMSServerType).includes(value);
        }
      },
      url: {
        type: String,
        required: true,
        validator: function validator(value) {
          return !!value.length;
        }
      }
    },
    methods: {
      /**
       * @returns {TileWMS}
       * @protected
       */
      createSource: function createSource() {
        return new TileWMSSource({
          attributions: this.attributions,
          cacheSize: this.cacheSize,
          params: this.allParams,
          crossOrigin: this.crossOrigin,
          gutter: this.gutter,
          hidpi: this.hidpi,
          logo: this.logo,
          tileGrid: this._tileGrid,
          projection: this.projection,
          reprojectionErrorThreshold: this.reprojectionErrorThreshold,
          serverType: this.serverType,
          wrapX: this.wrapX,
          url: this.urlTmpl,
          transition: this.transition,
          tileLoadFunction: this.tileLoadFunction
        });
      }
    },
    watch: _objectSpread({}, makeWatchers(['gutter', 'hidpi', 'serverType'], function () {
      return function () {
        this.scheduleRecreate();
      };
    }))
  };

  /* script */
  var __vue_script__$G = script$G;
  /* template */

  /* style */

  var __vue_inject_styles__$G = undefined;
  /* scoped */

  var __vue_scope_id__$G = undefined;
  /* module identifier */

  var __vue_module_identifier__$G = undefined;
  /* functional template */

  var __vue_is_functional_template__$G = undefined;
  /* component normalizer */

  function __vue_normalize__$G(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$c = __vue_normalize__$G({}, __vue_inject_styles__$G, __vue_script__$G, __vue_scope_id__$G, __vue_is_functional_template__$G, __vue_module_identifier__$G, undefined, undefined);

  function plugin$F(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$F.installed) {
      return;
    }

    plugin$F.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$c, options);
    Vue$$1.component(Source$c.name, Source$c);
  }

  var WmsSource = /*#__PURE__*/Object.freeze({
    default: plugin$F,
    Source: Source$c,
    install: plugin$F
  });

  var script$H = {
    name: 'vl-source-wmts',
    mixins: [tileSource],
    props: {
      dimensions: Object,
      format: {
        type: String,
        default: WMTS_FORMAT
      },
      layerName: {
        type: String,
        required: true
      },
      matrixSet: {
        type: String,
        required: true
      },
      requestEncoding: {
        type: String,
        default: WMTS_REQUEST_ENCODING
      },
      styleName: {
        type: String,
        required: true
      },
      version: {
        type: String,
        default: WMTS_VERSION
      },
      url: {
        type: String,
        required: true
      },
      origin: {
        type: Array
      },
      resolutions: {
        type: Array
      }
    },
    methods: {
      /**
       * @returns {WMTS}
       * @protected
       */
      createSource: function createSource() {
        return new WMTSSource({
          attributions: this.attributions,
          cacheSize: this.cacheSize,
          crossOrigin: this.crossOrigin,
          dimensions: this.dimensions,
          format: this.format,
          layer: this.layerName,
          logo: this.logo,
          matrixSet: this.matrixSet,
          origin: this.origin,
          projection: this.projection,
          reprojectionErrorThreshold: this.reprojectionErrorThreshold,
          requestEncoding: this.requestEncoding,
          resolutions: this.resolutions,
          tileGrid: this._tileGrid,
          tilePixelRatio: this.tilePixelRatio,
          style: this.styleName,
          version: this.version,
          url: this.urlTmpl,
          wrapX: this.wrapX,
          transition: this.transition,
          tileLoadFunction: this.tileLoadFunction
        });
      },

      /**
       * @return {Promise}
       * @protected
       */
      init: function init() {
        var extent$$1 = createExtentFromProjection(this.projection);
        var resolutions = this.resolutions ? this.resolutions : resolutionsFromExtent$1(extent$$1, this.maxZoom, this.tileSize);
        var origin = this.origin ? this.origin : getExtentCorner(extent$$1, EXTENT_CORNER.TOP_LEFT);
        var matrixIds = Array.from(range(this.minZoom, resolutions.length));
        /**
         * @type {module:ol/Tile~UrlFunction}
         * @protected
         */

        this._tileGrid = new WMTSTileGrid({
          extent: extent$$1,
          origin: origin,
          resolutions: resolutions,
          tileSize: this.tileSize,
          minZoom: this.minZoom,
          matrixIds: matrixIds
        });
        return tileSource.methods.init.call(this);
      }
    },
    watch: _objectSpread({}, makeWatchers(['dimensions', 'format', 'layerName', 'matrixSet', 'requestEncoding', 'styleName', 'version', 'resolutions', 'origin'], function () {
      return function () {
        this.scheduleRecreate();
      };
    }))
  };

  /* script */
  var __vue_script__$H = script$H;
  /* template */

  /* style */

  var __vue_inject_styles__$H = undefined;
  /* scoped */

  var __vue_scope_id__$H = undefined;
  /* module identifier */

  var __vue_module_identifier__$H = undefined;
  /* functional template */

  var __vue_is_functional_template__$H = undefined;
  /* component normalizer */

  function __vue_normalize__$H(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$d = __vue_normalize__$H({}, __vue_inject_styles__$H, __vue_script__$H, __vue_scope_id__$H, __vue_is_functional_template__$H, __vue_module_identifier__$H, undefined, undefined);

  function plugin$G(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$G.installed) {
      return;
    }

    plugin$G.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$d, options);
    Vue$$1.component(Source$d.name, Source$d);
  }

  var WmtsSource = /*#__PURE__*/Object.freeze({
    default: plugin$G,
    Source: Source$d,
    install: plugin$G
  });

  var script$I = {
    name: 'vl-source-xyz',
    mixins: [xyzSource]
  };

  /* script */
  var __vue_script__$I = script$I;
  /* template */

  /* style */

  var __vue_inject_styles__$I = undefined;
  /* scoped */

  var __vue_scope_id__$I = undefined;
  /* module identifier */

  var __vue_module_identifier__$I = undefined;
  /* functional template */

  var __vue_is_functional_template__$I = undefined;
  /* component normalizer */

  function __vue_normalize__$I(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

    component.__file = "source.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */


  var Source$e = __vue_normalize__$I({}, __vue_inject_styles__$I, __vue_script__$I, __vue_scope_id__$I, __vue_is_functional_template__$I, __vue_module_identifier__$I, undefined, undefined);

  function plugin$H(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$H.installed) {
      return;
    }

    plugin$H.installed = true;
    options = pick(options, 'dataProjection');
    Object.assign(Source$e, options);
    Vue$$1.component(Source$e.name, Source$e);
  }

  var XyzSource = /*#__PURE__*/Object.freeze({
    default: plugin$H,
    Source: Source$e,
    install: plugin$H
  });

  /**
   * @const {string} VueLayers version.
   */

  var VERSION$1 = '0.11.5-beta.8';
  /**
   * Registers all VueLayers components.
   * @param {Vue|VueConstructor} Vue
   * @param {VueLayersOptions} [options]
   */

  function plugin$I(Vue$$1) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (plugin$I.installed) {
      return;
    }

    plugin$I.installed = true; // install components

    Vue$$1.use(ArcgisRestSource, options);
    Vue$$1.use(BingmapsSource, options);
    Vue$$1.use(CircleGeom, options);
    Vue$$1.use(CircleStyle$1, options);
    Vue$$1.use(ClusterSource, options);
    Vue$$1.use(DrawInteraction$1, options);
    Vue$$1.use(Feature$3, options);
    Vue$$1.use(FillStyle, options);
    Vue$$1.use(Geoloc$1, options);
    Vue$$1.use(Graticule$3, options);
    Vue$$1.use(GroupLayer$1, options);
    Vue$$1.use(HeatmapLayer$1, options);
    Vue$$1.use(IconStyle, options);
    Vue$$1.use(ImageLayer$1, options);
    Vue$$1.use(ImageStaticSource$1, options);
    Vue$$1.use(ImageWmsSource, options);
    Vue$$1.use(LineStringGeom, options);
    Vue$$1.use(Map$4, options);
    Vue$$1.use(MapboxSource, options);
    Vue$$1.use(ModifyInteraction$1, options);
    Vue$$1.use(MultiLineStringGeom, options);
    Vue$$1.use(MultiPointGeom, options);
    Vue$$1.use(MultiPolygonGeom, options);
    Vue$$1.use(OsmSource, options);
    Vue$$1.use(Overlay$3, options);
    Vue$$1.use(PointGeom, options);
    Vue$$1.use(PolygonGeom, options);
    Vue$$1.use(RegShapeStyle, options);
    Vue$$1.use(SelectInteraction$1, options);
    Vue$$1.use(SnapInteraction$1, options);
    Vue$$1.use(SputnikSource, options);
    Vue$$1.use(StamenSource$1, options);
    Vue$$1.use(StrokeStyle, options);
    Vue$$1.use(StyleBox, options);
    Vue$$1.use(StyleFunc, options);
    Vue$$1.use(TextStyle, options);
    Vue$$1.use(TileLayer$1, options);
    Vue$$1.use(VectorLayer$2, options);
    Vue$$1.use(VectorSource$2, options);
    Vue$$1.use(VectorTileLayer$1, options);
    Vue$$1.use(VectorTileSource$1, options);
    Vue$$1.use(WmsSource, options);
    Vue$$1.use(WmtsSource, options);
    Vue$$1.use(XyzSource, options);
  }
  /**
   * @typedef {Object} VueLayersOptions
   * @property {string} [dataProjection] Projection for all properties, events and other plain values.
   */

  var VueLayers = /*#__PURE__*/Object.freeze({
    default: plugin$I,
    VERSION: VERSION$1,
    install: plugin$I,
    ArcgisRestSource: ArcgisRestSource,
    BingmapsSource: BingmapsSource,
    CircleGeom: CircleGeom,
    CircleStyle: CircleStyle$1,
    ClusterSource: ClusterSource,
    DrawInteraction: DrawInteraction$1,
    Feature: Feature$3,
    FillStyle: FillStyle,
    Geoloc: Geoloc$1,
    Graticule: Graticule$3,
    GroupLayer: GroupLayer$1,
    HeatmapLayer: HeatmapLayer$1,
    IconStyle: IconStyle,
    ImageLayer: ImageLayer$1,
    ImageStaticSource: ImageStaticSource$1,
    ImageWmsSource: ImageWmsSource,
    LineStringGeom: LineStringGeom,
    Map: Map$4,
    MapboxSource: MapboxSource,
    ModifyInteraction: ModifyInteraction$1,
    MultiLineStringGeom: MultiLineStringGeom,
    MultiPointGeom: MultiPointGeom,
    MultiPolygonGeom: MultiPolygonGeom,
    OsmSource: OsmSource,
    Overlay: Overlay$3,
    PointGeom: PointGeom,
    PolygonGeom: PolygonGeom,
    RegShapeStyle: RegShapeStyle,
    SelectInteraction: SelectInteraction$1,
    SnapInteraction: SnapInteraction$1,
    SputnikSource: SputnikSource,
    StamenSource: StamenSource$1,
    StrokeStyle: StrokeStyle,
    StyleBox: StyleBox,
    StyleFunc: StyleFunc,
    TextStyle: TextStyle,
    TileLayer: TileLayer$1,
    VectorLayer: VectorLayer$2,
    VectorSource: VectorSource$2,
    VectorTileLayer: VectorTileLayer$1,
    VectorTileSource: VectorTileSource$1,
    WmsSource: WmsSource,
    WmtsSource: WmtsSource,
    XyzSource: XyzSource
  });

  var index_umd = _objectSpread({}, VueLayers, {
    olExt: olExt,
    rxExt: rxExt
  });

  if (typeof window.Vue !== 'undefined') {
    window.Vue.use(VueLayers);
  }

  return index_umd;

})));
