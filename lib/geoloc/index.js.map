{"version":3,"file":"index.js","sources":["src/component/geoloc/geoloc.vue?rollup-plugin-vue=script.js","src/component/geoloc/geoloc.vue","src/component/geoloc/index.js"],"sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport Geolocation from 'ol/Geolocation'\nimport { merge } from 'rxjs/observable'\nimport { olCmp, useMapCmp, projTransforms } from '../../mixin'\nimport { observableFromOlChangeEvent } from '../../rx-ext'\nimport { hasGeolocation } from '../../util/assert'\nimport { isEqual } from '../../util/minilo'\n\nexport default {\n  name: 'vl-geoloc',\n  mixins: [olCmp, useMapCmp, projTransforms],\n  props: {\n    tracking: {\n      type: Boolean,\n      default: true,\n    },\n    trackingOptions: Object,\n    /**\n     * @type {string}\n     */\n    projection: String,\n  },\n  computed: {\n    accuracy () {\n      if (this.rev && this.$geolocation) {\n        return this.$geolocation.getAccuracy()\n      }\n    },\n    altitude () {\n      if (this.rev && this.$geolocation) {\n        return this.$geolocation.getAltitude()\n      }\n    },\n    altitudeAccuracy () {\n      if (this.rev && this.$geolocation) {\n        return this.$geolocation.getAltitudeAccuracy()\n      }\n    },\n    heading () {\n      if (this.rev && this.$geolocation) {\n        return this.$geolocation.getHeading()\n      }\n    },\n    speed () {\n      if (this.rev && this.$geolocation) {\n        return this.$geolocation.getSpeed()\n      }\n    },\n    position () {\n      if (this.rev && this.$geolocation) {\n        return this.$geolocation.getPosition()\n      }\n    },\n    positionViewProj () {\n      if (this.position && this.viewProjection) {\n        return this.pointToViewProj(this.position)\n      }\n    },\n  },\n  methods: {\n    /**\n     * @return {ol/Geolocation~Geolocation}\n     * @private\n     */\n    createOlObject () {\n      return new Geolocation({\n        tracking: this.tracking,\n        trackingOptions: this.trackingOptions,\n        projection: this.resolvedDataProjection,\n      })\n    },\n    /**\n     * @return {void}\n     * @private\n     */\n    mount () {\n      this.subscribeAll()\n    },\n    /**\n     * @return {void}\n     * @private\n     */\n    unmount () {\n      hasGeolocation(this)\n\n      this.unsubscribeAll()\n      this.$geolocation.setTracking(false)\n    },\n    /**\n     * @return {void}\n     * @protected\n     */\n    subscribeAll () {\n      this::subscribeToGeolocation()\n    },\n  },\n  watch: {\n    /**\n     * @param {boolean} value\n     */\n    tracking (value) {\n      if (!this.$geolocation && value === this.$geolocation.getTracking()) {\n        return\n      }\n\n      this.$geolocation.setTracking(value)\n    },\n    tracingOptions (value, prevValue) {\n      if (isEqual(value, prevValue) || !this.$geolocation) return\n\n      this.$geolocation.setTrackingOptions(value)\n    },\n    resolvedDataProjection (value) {\n      if (!this.$geolocation) return\n\n      this.$geolocation.setProjection(value)\n    },\n  },\n  stubVNode: {\n    empty () {\n      return this.$options.name\n    },\n  },\n  created () {\n    this::defineServices()\n  },\n}\n\nfunction defineServices () {\n  Object.defineProperties(this, {\n    /**\n     * @type {ol/Geolocation~Geolocation|undefined}\n     */\n    $geolocation: {\n      enumerable: true,\n      get: () => this.$olObject,\n    },\n    $map: {\n      enumerable: true,\n      get: () => this.$services && this.$services.map,\n    },\n    /**\n     * Reference to `ol.View` instance.\n     * @type {module:ol/View~View|undefined}\n     */\n    $view: {\n      enumerable: true,\n      get: () => this.$services && this.$services.view,\n    },\n  })\n}\n\n/**\n * @return {void}\n * @private\n */\nfunction subscribeToGeolocation () {\n  hasGeolocation(this)\n\n  const ft = 1000 / 60\n  const changes = merge(\n    observableFromOlChangeEvent(\n      this.$geolocation,\n      [\n        'accuracy',\n        'altitude',\n        'altitudeaccuracy',\n        'heading',\n        'speed',\n      ],\n      true,\n      ft,\n    ),\n    observableFromOlChangeEvent(\n      this.$geolocation,\n      'position',\n      true,\n      ft,\n    ),\n  )\n\n  this.subscribeTo(changes, ({ prop, value }) => {\n    ++this.rev\n    this.$emit(`update:${prop}`, value)\n  })\n}\n","<template>\n  <i :class=\"[$options.name]\" style=\"display: none !important;\">\n    <slot :accuracy=\"accuracy\" :altitude=\"altitude\" :altitude-accuracy=\"altitudeAccuracy\"\n          :heading=\"heading\" :position=\"position\" :speed=\"speed\">\n    </slot>\n  </i>\n</template>\n\n<script>\n  import Geolocation from 'ol/Geolocation'\n  import { merge } from 'rxjs/observable'\n  import { olCmp, useMapCmp, projTransforms } from '../../mixin'\n  import { observableFromOlChangeEvent } from '../../rx-ext'\n  import { hasGeolocation } from '../../util/assert'\n  import { isEqual } from '../../util/minilo'\n\n  export default {\n    name: 'vl-geoloc',\n    mixins: [olCmp, useMapCmp, projTransforms],\n    props: {\n      tracking: {\n        type: Boolean,\n        default: true,\n      },\n      trackingOptions: Object,\n      /**\n       * @type {string}\n       */\n      projection: String,\n    },\n    computed: {\n      accuracy () {\n        if (this.rev && this.$geolocation) {\n          return this.$geolocation.getAccuracy()\n        }\n      },\n      altitude () {\n        if (this.rev && this.$geolocation) {\n          return this.$geolocation.getAltitude()\n        }\n      },\n      altitudeAccuracy () {\n        if (this.rev && this.$geolocation) {\n          return this.$geolocation.getAltitudeAccuracy()\n        }\n      },\n      heading () {\n        if (this.rev && this.$geolocation) {\n          return this.$geolocation.getHeading()\n        }\n      },\n      speed () {\n        if (this.rev && this.$geolocation) {\n          return this.$geolocation.getSpeed()\n        }\n      },\n      position () {\n        if (this.rev && this.$geolocation) {\n          return this.$geolocation.getPosition()\n        }\n      },\n      positionViewProj () {\n        if (this.position && this.viewProjection) {\n          return this.pointToViewProj(this.position)\n        }\n      },\n    },\n    methods: {\n      /**\n       * @return {ol/Geolocation~Geolocation}\n       * @private\n       */\n      createOlObject () {\n        return new Geolocation({\n          tracking: this.tracking,\n          trackingOptions: this.trackingOptions,\n          projection: this.resolvedDataProjection,\n        })\n      },\n      /**\n       * @return {void}\n       * @private\n       */\n      mount () {\n        this.subscribeAll()\n      },\n      /**\n       * @return {void}\n       * @private\n       */\n      unmount () {\n        hasGeolocation(this)\n\n        this.unsubscribeAll()\n        this.$geolocation.setTracking(false)\n      },\n      /**\n       * @return {void}\n       * @protected\n       */\n      subscribeAll () {\n        this::subscribeToGeolocation()\n      },\n    },\n    watch: {\n      /**\n       * @param {boolean} value\n       */\n      tracking (value) {\n        if (!this.$geolocation && value === this.$geolocation.getTracking()) {\n          return\n        }\n\n        this.$geolocation.setTracking(value)\n      },\n      tracingOptions (value, prevValue) {\n        if (isEqual(value, prevValue) || !this.$geolocation) return\n\n        this.$geolocation.setTrackingOptions(value)\n      },\n      resolvedDataProjection (value) {\n        if (!this.$geolocation) return\n\n        this.$geolocation.setProjection(value)\n      },\n    },\n    stubVNode: {\n      empty () {\n        return this.$options.name\n      },\n    },\n    created () {\n      this::defineServices()\n    },\n  }\n\n  function defineServices () {\n    Object.defineProperties(this, {\n      /**\n       * @type {ol/Geolocation~Geolocation|undefined}\n       */\n      $geolocation: {\n        enumerable: true,\n        get: () => this.$olObject,\n      },\n      $map: {\n        enumerable: true,\n        get: () => this.$services && this.$services.map,\n      },\n      /**\n       * Reference to `ol.View` instance.\n       * @type {module:ol/View~View|undefined}\n       */\n      $view: {\n        enumerable: true,\n        get: () => this.$services && this.$services.view,\n      },\n    })\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  function subscribeToGeolocation () {\n    hasGeolocation(this)\n\n    const ft = 1000 / 60\n    const changes = merge(\n      observableFromOlChangeEvent(\n        this.$geolocation,\n        [\n          'accuracy',\n          'altitude',\n          'altitudeaccuracy',\n          'heading',\n          'speed',\n        ],\n        true,\n        ft,\n      ),\n      observableFromOlChangeEvent(\n        this.$geolocation,\n        'position',\n        true,\n        ft,\n      ),\n    )\n\n    this.subscribeTo(changes, ({ prop, value }) => {\n      ++this.rev\n      this.$emit(`update:${prop}`, value)\n    })\n  }\n</script>\n","import { pick } from '../../util/minilo'\nimport Geoloc from './geoloc.vue'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  options = pick(options, 'dataProjection')\n  Object.assign(Geoloc, options)\n\n  Vue.component(Geoloc.name, Geoloc)\n}\n\nexport default plugin\n\nexport {\n  Geoloc,\n  plugin as install,\n}\n"],"names":["name","mixins","olCmp","useMapCmp","projTransforms","props","tracking","type","Boolean","default","trackingOptions","Object","projection","String","computed","accuracy","rev","$geolocation","getAccuracy","altitude","getAltitude","altitudeAccuracy","getAltitudeAccuracy","heading","getHeading","speed","getSpeed","position","getPosition","positionViewProj","viewProjection","pointToViewProj","methods","createOlObject","Geolocation","resolvedDataProjection","mount","subscribeAll","unmount","hasGeolocation","unsubscribeAll","setTracking","subscribeToGeolocation","watch","value","getTracking","tracingOptions","prevValue","isEqual","setTrackingOptions","setProjection","stubVNode","empty","$options","created","defineServices","defineProperties","enumerable","get","$olObject","$map","$services","map","$view","view","ft","changes","merge","observableFromOlChangeEvent","subscribeTo","prop","$emit","plugin","Vue","options","installed","pick","assign","Geoloc","component"],"mappings":"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"}