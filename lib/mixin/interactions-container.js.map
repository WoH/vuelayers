{"version":3,"file":"interactions-container.js","sources":["src/mixin/interactions-container.js"],"sourcesContent":["import Collection from 'ol/Collection'\nimport Interaction from 'ol/interaction/Interaction'\nimport Vue from 'vue'\nimport { merge as mergeObs } from 'rxjs/observable'\nimport { getInteractionId, getInteractionPriority, initializeInteraction } from '../ol-ext'\nimport { instanceOf } from '../util/assert'\nimport rxSubs from './rx-subs'\nimport { observableFromOlEvent } from '../rx-ext'\n\nexport default {\n  mixins: [rxSubs],\n  computed: {\n    interactionIds () {\n      if (!this.rev) return []\n\n      return this.getInteractions().map(getInteractionId)\n    },\n  },\n  methods: {\n    /**\n     * @param {Interaction|Vue} interaction\n     * @return {void}\n     */\n    addInteraction (interaction) {\n      interaction = interaction instanceof Vue ? interaction.$interaction : interaction\n      instanceOf(interaction, Interaction)\n\n      if (this.getInteractionById(getInteractionId(interaction)) == null) {\n        initializeInteraction(interaction)\n        this._interactionsCollection.push(interaction)\n        this.sortInteractions()\n      }\n    },\n    /**\n     * @param {Interaction|Vue} interaction\n     * @return {void}\n     */\n    removeInteraction (interaction) {\n      interaction = this.getInteractionById(getInteractionId(interaction))\n      if (!interaction) return\n\n      this._interactionsCollection.remove(interaction)\n      this.sortInteractions()\n    },\n    /**\n     * @return {Interaction[]}\n     */\n    getInteractions () {\n      return this._interactionsCollection.getArray()\n    },\n    /**\n     * @return {Collection<Interaction>>}\n     */\n    getInteractionsCollection () {\n      return this._interactionsCollection\n    },\n    /**\n     * @param {string|number} interactionId\n     * @return {Interaction|undefined}\n     */\n    getInteractionById (interactionId) {\n      return this._interactionsCollection.getArray().find(interaction => {\n        return getInteractionId(interaction) === interactionId\n      })\n    },\n    /**\n     * @return {void}\n     */\n    sortInteractions (sorter) {\n      sorter || (sorter = this.getDefaultInteractionsSorter())\n\n      this._interactionsCollection.getArray().sort(sorter)\n    },\n    /**\n     * @return {function}\n     * @protected\n     */\n    getDefaultInteractionsSorter () {\n      // sort interactions by priority in asc order\n      // the higher the priority, the earlier the interaction handles the event\n      return (a, b) => {\n        let ap = getInteractionPriority(a) || 0\n        let bp = getInteractionPriority(b) || 0\n        return ap === bp ? 0 : ap - bp\n      }\n    },\n    /**\n     * @return {void}\n     */\n    clearInteractions () {\n      this._interactionsCollection.clear()\n    },\n    /**\n     * @returns {Object}\n     * @protected\n     */\n    getServices () {\n      const vm = this\n\n      return {\n        get interactionsContainer () { return vm },\n      }\n    },\n  },\n  created () {\n    /**\n     * @type {Collection<Interaction>>}\n     * @private\n     */\n    this._interactionsCollection = new Collection()\n\n    const add = observableFromOlEvent(this._interactionsCollection, 'add')\n    const remove = observableFromOlEvent(this._interactionsCollection, 'remove')\n    const events = mergeObs(add, remove)\n\n    this.subscribeTo(events, ({ type, element }) => {\n      ++this.rev\n\n      this.$emit(type + ':interaction', element)\n    })\n  },\n}\n"],"names":["mixins","rxSubs","computed","interactionIds","rev","getInteractions","map","getInteractionId","methods","addInteraction","interaction","Vue","$interaction","instanceOf","Interaction","getInteractionById","initializeInteraction","_interactionsCollection","push","sortInteractions","removeInteraction","remove","getArray","getInteractionsCollection","interactionId","find","sorter","getDefaultInteractionsSorter","sort","a","b","ap","getInteractionPriority","bp","clearInteractions","clear","getServices","vm","interactionsContainer","created","Collection","add","observableFromOlEvent","events","mergeObs","subscribeTo","type","element","$emit"],"mappings":";;;;;;;;;;;;;;;;;;;AASA,4BAAe;EACbA,MAAM,EAAE,CAACC,MAAD,CADK;EAEbC,QAAQ,EAAE;IACRC,cADQ,4BACU;UACZ,CAAC,KAAKC,GAAV,EAAe,OAAO,EAAP;aAER,KAAKC,eAAL,GAAuBC,GAAvB,CAA2BC,gBAA3B,CAAP;;GANS;EASbC,OAAO,EAAE;;;;;IAKPC,cALO,0BAKSC,WALT,EAKsB;MAC3BA,WAAW,GAAGA,WAAW,YAAYC,GAAvB,GAA6BD,WAAW,CAACE,YAAzC,GAAwDF,WAAtE;MACAG,UAAU,CAACH,WAAD,EAAcI,WAAd,CAAV;;UAEI,KAAKC,kBAAL,CAAwBR,gBAAgB,CAACG,WAAD,CAAxC,KAA0D,IAA9D,EAAoE;QAClEM,qBAAqB,CAACN,WAAD,CAArB;;aACKO,uBAAL,CAA6BC,IAA7B,CAAkCR,WAAlC;;aACKS,gBAAL;;KAZG;;;;;;IAmBPC,iBAnBO,6BAmBYV,WAnBZ,EAmByB;MAC9BA,WAAW,GAAG,KAAKK,kBAAL,CAAwBR,gBAAgB,CAACG,WAAD,CAAxC,CAAd;UACI,CAACA,WAAL,EAAkB;;WAEbO,uBAAL,CAA6BI,MAA7B,CAAoCX,WAApC;;WACKS,gBAAL;KAxBK;;;;;IA6BPd,eA7BO,6BA6BY;aACV,KAAKY,uBAAL,CAA6BK,QAA7B,EAAP;KA9BK;;;;;IAmCPC,yBAnCO,uCAmCsB;aACpB,KAAKN,uBAAZ;KApCK;;;;;;IA0CPF,kBA1CO,8BA0CaS,aA1Cb,EA0C4B;aAC1B,KAAKP,uBAAL,CAA6BK,QAA7B,GAAwCG,IAAxC,CAA6C,UAAAf,WAAW,EAAI;eAC1DH,gBAAgB,CAACG,WAAD,CAAhB,KAAkCc,aAAzC;OADK,CAAP;KA3CK;;;;;IAkDPL,gBAlDO,4BAkDWO,MAlDX,EAkDmB;MACxBA,MAAM,KAAKA,MAAM,GAAG,KAAKC,4BAAL,EAAd,CAAN;;WAEKV,uBAAL,CAA6BK,QAA7B,GAAwCM,IAAxC,CAA6CF,MAA7C;KArDK;;;;;;IA2DPC,4BA3DO,0CA2DyB;;;aAGvB,UAACE,CAAD,EAAIC,CAAJ,EAAU;YACXC,EAAE,GAAGC,sBAAsB,CAACH,CAAD,CAAtB,IAA6B,CAAtC;YACII,EAAE,GAAGD,sBAAsB,CAACF,CAAD,CAAtB,IAA6B,CAAtC;eACOC,EAAE,KAAKE,EAAP,GAAY,CAAZ,GAAgBF,EAAE,GAAGE,EAA5B;OAHF;KA9DK;;;;;IAuEPC,iBAvEO,+BAuEc;WACdjB,uBAAL,CAA6BkB,KAA7B;KAxEK;;;;;;IA8EPC,WA9EO,yBA8EQ;UACPC,EAAE,GAAG,IAAX;aAEO;YACDC,qBAAJ,GAA6B;iBAASD,EAAP;;;OADjC;;GA1FS;EA+FbE,OA/Fa,qBA+FF;;;;;;;SAKJtB,uBAAL,GAA+B,IAAIuB,UAAJ,EAA/B;QAEMC,GAAG,GAAGC,qBAAqB,CAAC,KAAKzB,uBAAN,EAA+B,KAA/B,CAAjC;QACMI,MAAM,GAAGqB,qBAAqB,CAAC,KAAKzB,uBAAN,EAA+B,QAA/B,CAApC;QACM0B,MAAM,GAAGC,KAAQ,CAACH,GAAD,EAAMpB,MAAN,CAAvB;SAEKwB,WAAL,CAAiBF,MAAjB,EAAyB,gBAAuB;UAApBG,IAAoB,QAApBA,IAAoB;UAAdC,OAAc,QAAdA,OAAc;QAC5C,KAAI,CAAC3C,GAAP;;MAEA,KAAI,CAAC4C,KAAL,CAAWF,IAAI,GAAG,cAAlB,EAAkCC,OAAlC;KAHF;;CA1GJ;;;;"}